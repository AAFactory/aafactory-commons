/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		0: 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// run deferred modules from other chunks
/******/ 	checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DOCUMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return XML_SCHEMA_INSTANCE_URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return createElementNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getAllTextContent; });
/* unused harmony export getAllTextContent_ */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return isDocument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return isNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getAttributeNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return parse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return makeArrayExtender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return makeArrayPusher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return makeReplacer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return makeObjectPropertyPusher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return makeObjectPropertySetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return makeChildAppender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return makeArraySerializer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return makeSimpleNodeFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return OBJECT_PROPERTY_NODE_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return makeSequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return makeStructureNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return parseNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return pushParseAndPop; });
/* unused harmony export serialize */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return pushSerializeAndPop; });
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/**
 * @module ol/xml
 */



/**
 * When using {@link module:ol/xml~makeChildAppender} or
 * {@link module:ol/xml~makeSimpleNodeFactory}, the top `objectStack` item needs
 * to have this structure.
 * @typedef {Object} NodeStackItem
 * @property {Node} node
 */


/**
 * @typedef {function(Node, Array.<*>)} Parser
 */


/**
 * @typedef {function(Node, *, Array.<*>)} Serializer
 */


/**
 * This document should be used when creating nodes for XML serializations. This
 * document is also used by {@link module:ol/xml~createElementNS}
 * @const
 * @type {Document}
 */
const DOCUMENT = document.implementation.createDocument('', '', null);


/**
 * @type {string}
 */
const XML_SCHEMA_INSTANCE_URI = 'http://www.w3.org/2001/XMLSchema-instance';


/**
 * @param {string} namespaceURI Namespace URI.
 * @param {string} qualifiedName Qualified name.
 * @return {Node} Node.
 */
function createElementNS(namespaceURI, qualifiedName) {
  return DOCUMENT.createElementNS(namespaceURI, qualifiedName);
}


/**
 * Recursively grab all text content of child nodes into a single string.
 * @param {Node} node Node.
 * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
 * breaks.
 * @return {string} All text content.
 * @api
 */
function getAllTextContent(node, normalizeWhitespace) {
  return getAllTextContent_(node, normalizeWhitespace, []).join('');
}


/**
 * Recursively grab all text content of child nodes into a single string.
 * @param {Node} node Node.
 * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
 * breaks.
 * @param {Array.<string>} accumulator Accumulator.
 * @private
 * @return {Array.<string>} Accumulator.
 */
function getAllTextContent_(node, normalizeWhitespace, accumulator) {
  if (node.nodeType == Node.CDATA_SECTION_NODE ||
      node.nodeType == Node.TEXT_NODE) {
    if (normalizeWhitespace) {
      accumulator.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ''));
    } else {
      accumulator.push(node.nodeValue);
    }
  } else {
    let n;
    for (n = node.firstChild; n; n = n.nextSibling) {
      getAllTextContent_(n, normalizeWhitespace, accumulator);
    }
  }
  return accumulator;
}


/**
 * @param {?} value Value.
 * @return {boolean} Is document.
 */
function isDocument(value) {
  return value instanceof Document;
}


/**
 * @param {?} value Value.
 * @return {boolean} Is node.
 */
function isNode(value) {
  return value instanceof Node;
}


/**
 * @param {Node} node Node.
 * @param {?string} namespaceURI Namespace URI.
 * @param {string} name Attribute name.
 * @return {string} Value
 */
function getAttributeNS(node, namespaceURI, name) {
  return node.getAttributeNS(namespaceURI, name) || '';
}


/**
 * Parse an XML string to an XML Document.
 * @param {string} xml XML.
 * @return {Document} Document.
 * @api
 */
function parse(xml) {
  return new DOMParser().parseFromString(xml, 'application/xml');
}


/**
 * Make an array extender function for extending the array at the top of the
 * object stack.
 * @param {function(this: T, Node, Array.<*>): (Array.<*>|undefined)}
 *     valueReader Value reader.
 * @param {T=} opt_this The object to use as `this` in `valueReader`.
 * @return {module:ol/xml~Parser} Parser.
 * @template T
 */
function makeArrayExtender(valueReader, opt_this) {
  return (
    /**
     * @param {Node} node Node.
     * @param {Array.<*>} objectStack Object stack.
     */
    function(node, objectStack) {
      const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
      if (value !== undefined) {
        const array = /** @type {Array.<*>} */ (objectStack[objectStack.length - 1]);
        Object(_array_js__WEBPACK_IMPORTED_MODULE_0__[/* extend */ "c"])(array, value);
      }
    }
  );
}


/**
 * Make an array pusher function for pushing to the array at the top of the
 * object stack.
 * @param {function(this: T, Node, Array.<*>): *} valueReader Value reader.
 * @param {T=} opt_this The object to use as `this` in `valueReader`.
 * @return {module:ol/xml~Parser} Parser.
 * @template T
 */
function makeArrayPusher(valueReader, opt_this) {
  return (
    /**
     * @param {Node} node Node.
     * @param {Array.<*>} objectStack Object stack.
     */
    function(node, objectStack) {
      const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
      if (value !== undefined) {
        const array = /** @type {Array.<*>} */ (objectStack[objectStack.length - 1]);
        array.push(value);
      }
    });
}


/**
 * Make an object stack replacer function for replacing the object at the
 * top of the stack.
 * @param {function(this: T, Node, Array.<*>): *} valueReader Value reader.
 * @param {T=} opt_this The object to use as `this` in `valueReader`.
 * @return {module:ol/xml~Parser} Parser.
 * @template T
 */
function makeReplacer(valueReader, opt_this) {
  return (
    /**
     * @param {Node} node Node.
     * @param {Array.<*>} objectStack Object stack.
     */
    function(node, objectStack) {
      const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
      if (value !== undefined) {
        objectStack[objectStack.length - 1] = value;
      }
    });
}


/**
 * Make an object property pusher function for adding a property to the
 * object at the top of the stack.
 * @param {function(this: T, Node, Array.<*>): *} valueReader Value reader.
 * @param {string=} opt_property Property.
 * @param {T=} opt_this The object to use as `this` in `valueReader`.
 * @return {module:ol/xml~Parser} Parser.
 * @template T
 */
function makeObjectPropertyPusher(valueReader, opt_property, opt_this) {
  return (
    /**
     * @param {Node} node Node.
     * @param {Array.<*>} objectStack Object stack.
     */
    function(node, objectStack) {
      const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
      if (value !== undefined) {
        const object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
        const property = opt_property !== undefined ? opt_property : node.localName;
        let array;
        if (property in object) {
          array = object[property];
        } else {
          array = object[property] = [];
        }
        array.push(value);
      }
    });
}


/**
 * Make an object property setter function.
 * @param {function(this: T, Node, Array.<*>): *} valueReader Value reader.
 * @param {string=} opt_property Property.
 * @param {T=} opt_this The object to use as `this` in `valueReader`.
 * @return {module:ol/xml~Parser} Parser.
 * @template T
 */
function makeObjectPropertySetter(valueReader, opt_property, opt_this) {
  return (
    /**
     * @param {Node} node Node.
     * @param {Array.<*>} objectStack Object stack.
     */
    function(node, objectStack) {
      const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
      if (value !== undefined) {
        const object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
        const property = opt_property !== undefined ? opt_property : node.localName;
        object[property] = value;
      }
    });
}


/**
 * Create a serializer that appends nodes written by its `nodeWriter` to its
 * designated parent. The parent is the `node` of the
 * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.
 * @param {function(this: T, Node, V, Array.<*>)}
 *     nodeWriter Node writer.
 * @param {T=} opt_this The object to use as `this` in `nodeWriter`.
 * @return {module:ol/xml~Serializer} Serializer.
 * @template T, V
 */
function makeChildAppender(nodeWriter, opt_this) {
  return function(node, value, objectStack) {
    nodeWriter.call(opt_this !== undefined ? opt_this : this, node, value, objectStack);
    const parent = /** @type {module:ol/xml~NodeStackItem} */ (objectStack[objectStack.length - 1]);
    const parentNode = parent.node;
    parentNode.appendChild(node);
  };
}


/**
 * Create a serializer that calls the provided `nodeWriter` from
 * {@link module:ol/xml~serialize}. This can be used by the parent writer to have the
 * 'nodeWriter' called with an array of values when the `nodeWriter` was
 * designed to serialize a single item. An example would be a LineString
 * geometry writer, which could be reused for writing MultiLineString
 * geometries.
 * @param {function(this: T, Node, V, Array.<*>)}
 *     nodeWriter Node writer.
 * @param {T=} opt_this The object to use as `this` in `nodeWriter`.
 * @return {module:ol/xml~Serializer} Serializer.
 * @template T, V
 */
function makeArraySerializer(nodeWriter, opt_this) {
  let serializersNS, nodeFactory;
  return function(node, value, objectStack) {
    if (serializersNS === undefined) {
      serializersNS = {};
      const serializers = {};
      serializers[node.localName] = nodeWriter;
      serializersNS[node.namespaceURI] = serializers;
      nodeFactory = makeSimpleNodeFactory(node.localName);
    }
    serialize(serializersNS, nodeFactory, value, objectStack);
  };
}


/**
 * Create a node factory which can use the `opt_keys` passed to
 * {@link module:ol/xml~serialize} or {@link module:ol/xml~pushSerializeAndPop} as node names,
 * or a fixed node name. The namespace of the created nodes can either be fixed,
 * or the parent namespace will be used.
 * @param {string=} opt_nodeName Fixed node name which will be used for all
 *     created nodes. If not provided, the 3rd argument to the resulting node
 *     factory needs to be provided and will be the nodeName.
 * @param {string=} opt_namespaceURI Fixed namespace URI which will be used for
 *     all created nodes. If not provided, the namespace of the parent node will
 *     be used.
 * @return {function(*, Array.<*>, string=): (Node|undefined)} Node factory.
 */
function makeSimpleNodeFactory(opt_nodeName, opt_namespaceURI) {
  const fixedNodeName = opt_nodeName;
  return (
    /**
     * @param {*} value Value.
     * @param {Array.<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Node} Node.
     */
    function(value, objectStack, opt_nodeName) {
      const context = /** @type {module:ol/xml~NodeStackItem} */ (objectStack[objectStack.length - 1]);
      const node = context.node;
      let nodeName = fixedNodeName;
      if (nodeName === undefined) {
        nodeName = opt_nodeName;
      }

      const namespaceURI = opt_namespaceURI !== undefined ? opt_namespaceURI : node.namespaceURI;
      return createElementNS(namespaceURI, /** @type {string} */ (nodeName));
    }
  );
}


/**
 * A node factory that creates a node using the parent's `namespaceURI` and the
 * `nodeName` passed by {@link module:ol/xml~serialize} or
 * {@link module:ol/xml~pushSerializeAndPop} to the node factory.
 * @const
 * @type {function(*, Array.<*>, string=): (Node|undefined)}
 */
const OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();


/**
 * Create an array of `values` to be used with {@link module:ol/xml~serialize} or
 * {@link module:ol/xml~pushSerializeAndPop}, where `orderedKeys` has to be provided as
 * `opt_key` argument.
 * @param {Object.<string, V>} object Key-value pairs for the sequence. Keys can
 *     be a subset of the `orderedKeys`.
 * @param {Array.<string>} orderedKeys Keys in the order of the sequence.
 * @return {Array.<V>} Values in the order of the sequence. The resulting array
 *     has the same length as the `orderedKeys` array. Values that are not
 *     present in `object` will be `undefined` in the resulting array.
 * @template V
 */
function makeSequence(object, orderedKeys) {
  const length = orderedKeys.length;
  const sequence = new Array(length);
  for (let i = 0; i < length; ++i) {
    sequence[i] = object[orderedKeys[i]];
  }
  return sequence;
}


/**
 * Create a namespaced structure, using the same values for each namespace.
 * This can be used as a starting point for versioned parsers, when only a few
 * values are version specific.
 * @param {Array.<string>} namespaceURIs Namespace URIs.
 * @param {T} structure Structure.
 * @param {Object.<string, T>=} opt_structureNS Namespaced structure to add to.
 * @return {Object.<string, T>} Namespaced structure.
 * @template T
 */
function makeStructureNS(namespaceURIs, structure, opt_structureNS) {
  /**
   * @type {Object.<string, T>}
   */
  const structureNS = opt_structureNS !== undefined ? opt_structureNS : {};
  let i, ii;
  for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {
    structureNS[namespaceURIs[i]] = structure;
  }
  return structureNS;
}


/**
 * Parse a node using the parsers and object stack.
 * @param {Object.<string, Object.<string, module:ol/xml~Parser>>} parsersNS
 *     Parsers by namespace.
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @param {*=} opt_this The object to use as `this`.
 */
function parseNode(parsersNS, node, objectStack, opt_this) {
  let n;
  for (n = node.firstElementChild; n; n = n.nextElementSibling) {
    const parsers = parsersNS[n.namespaceURI];
    if (parsers !== undefined) {
      const parser = parsers[n.localName];
      if (parser !== undefined) {
        parser.call(opt_this, n, objectStack);
      }
    }
  }
}


/**
 * Push an object on top of the stack, parse and return the popped object.
 * @param {T} object Object.
 * @param {Object.<string, Object.<string, module:ol/xml~Parser>>} parsersNS
 *     Parsers by namespace.
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @param {*=} opt_this The object to use as `this`.
 * @return {T} Object.
 * @template T
 */
function pushParseAndPop(object, parsersNS, node, objectStack, opt_this) {
  objectStack.push(object);
  parseNode(parsersNS, node, objectStack, opt_this);
  return /** @type {T} */ (objectStack.pop());
}


/**
 * Walk through an array of `values` and call a serializer for each value.
 * @param {Object.<string, Object.<string, module:ol/xml~Serializer>>} serializersNS
 *     Namespaced serializers.
 * @param {function(this: T, *, Array.<*>, (string|undefined)): (Node|undefined)} nodeFactory
 *     Node factory. The `nodeFactory` creates the node whose namespace and name
 *     will be used to choose a node writer from `serializersNS`. This
 *     separation allows us to decide what kind of node to create, depending on
 *     the value we want to serialize. An example for this would be different
 *     geometry writers based on the geometry type.
 * @param {Array.<*>} values Values to serialize. An example would be an array
 *     of {@link module:ol/Feature~Feature} instances.
 * @param {Array.<*>} objectStack Node stack.
 * @param {Array.<string>=} opt_keys Keys of the `values`. Will be passed to the
 *     `nodeFactory`. This is used for serializing object literals where the
 *     node name relates to the property key. The array length of `opt_keys` has
 *     to match the length of `values`. For serializing a sequence, `opt_keys`
 *     determines the order of the sequence.
 * @param {T=} opt_this The object to use as `this` for the node factory and
 *     serializers.
 * @template T
 */
function serialize(
  serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {
  const length = (opt_keys !== undefined ? opt_keys : values).length;
  let value, node;
  for (let i = 0; i < length; ++i) {
    value = values[i];
    if (value !== undefined) {
      node = nodeFactory.call(opt_this !== undefined ? opt_this : this, value, objectStack,
        opt_keys !== undefined ? opt_keys[i] : undefined);
      if (node !== undefined) {
        serializersNS[node.namespaceURI][node.localName]
          .call(opt_this, node, value, objectStack);
      }
    }
  }
}


/**
 * @param {O} object Object.
 * @param {Object.<string, Object.<string, module:ol/xml~Serializer>>} serializersNS
 *     Namespaced serializers.
 * @param {function(this: T, *, Array.<*>, (string|undefined)): (Node|undefined)} nodeFactory
 *     Node factory. The `nodeFactory` creates the node whose namespace and name
 *     will be used to choose a node writer from `serializersNS`. This
 *     separation allows us to decide what kind of node to create, depending on
 *     the value we want to serialize. An example for this would be different
 *     geometry writers based on the geometry type.
 * @param {Array.<*>} values Values to serialize. An example would be an array
 *     of {@link module:ol/Feature~Feature} instances.
 * @param {Array.<*>} objectStack Node stack.
 * @param {Array.<string>=} opt_keys Keys of the `values`. Will be passed to the
 *     `nodeFactory`. This is used for serializing object literals where the
 *     node name relates to the property key. The array length of `opt_keys` has
 *     to match the length of `values`. For serializing a sequence, `opt_keys`
 *     determines the order of the sequence.
 * @param {T=} opt_this The object to use as `this` for the node factory and
 *     serializers.
 * @return {O|undefined} Object.
 * @template O, T
 */
function pushSerializeAndPop(object, serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {
  objectStack.push(object);
  serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this);
  return /** @type {O|undefined} */ (objectStack.pop());
}


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return inherits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getUid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VERSION; });
/**
 * @module ol/util
 */

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * Usage:
 *
 *     function ParentClass(a, b) { }
 *     ParentClass.prototype.foo = function(a) { }
 *
 *     function ChildClass(a, b, c) {
 *       // Call parent constructor
 *       ParentClass.call(this, a, b);
 *     }
 *     inherits(ChildClass, ParentClass);
 *
 *     var child = new ChildClass('a', 'b', 'see');
 *     child.foo(); // This works.
 *
 * @param {!Function} childCtor Child constructor.
 * @param {!Function} parentCtor Parent constructor.
 * @function module:ol.inherits
 * @api
 */
function inherits(childCtor, parentCtor) {
  childCtor.prototype = Object.create(parentCtor.prototype);
  childCtor.prototype.constructor = childCtor;
}

/**
 * Counter for getUid.
 * @type {number}
 * @private
 */
let uidCounter_ = 0;

/**
 * Gets a unique ID for an object. This mutates the object so that further calls
 * with the same object as a parameter returns the same value. Unique IDs are generated
 * as a strictly increasing sequence. Adapted from goog.getUid.
 *
 * @param {Object} obj The object to get the unique ID for.
 * @return {number} The unique ID for the object.
 */
function getUid(obj) {
  return obj.ol_uid || (obj.ol_uid = ++uidCounter_);
}

/**
 * OpenLayers version.
 * @type {string}
 */
const VERSION = '5.0.0';


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _style_Atlas_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(189);
/* harmony import */ var _style_AtlasManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(211);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _style_AtlasManager_js__WEBPACK_IMPORTED_MODULE_1__["a"]; });

/* harmony import */ var _style_Circle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(198);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "b", function() { return _style_Circle_js__WEBPACK_IMPORTED_MODULE_2__["a"]; });

/* harmony import */ var _style_Fill_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "c", function() { return _style_Fill_js__WEBPACK_IMPORTED_MODULE_3__["a"]; });

/* harmony import */ var _style_Icon_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(160);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "d", function() { return _style_Icon_js__WEBPACK_IMPORTED_MODULE_4__["a"]; });

/* harmony import */ var _style_IconImage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(214);
/* harmony import */ var _style_Image_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(163);
/* harmony import */ var _style_RegularShape_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(197);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "e", function() { return _style_RegularShape_js__WEBPACK_IMPORTED_MODULE_7__["a"]; });

/* harmony import */ var _style_Stroke_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(89);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "f", function() { return _style_Stroke_js__WEBPACK_IMPORTED_MODULE_8__["a"]; });

/* harmony import */ var _style_Style_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(75);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "g", function() { return _style_Style_js__WEBPACK_IMPORTED_MODULE_9__["c"]; });

/* harmony import */ var _style_Text_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(158);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "h", function() { return _style_Text_js__WEBPACK_IMPORTED_MODULE_10__["a"]; });

/**
 * @module ol/style
 */















/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return boundingExtent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return buffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return closestSquaredDistanceXY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return containsCoordinate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return containsExtent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return containsXY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return coordinateRelationship; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return createEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return createOrUpdate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return createOrUpdateEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return createOrUpdateFromCoordinate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return createOrUpdateFromCoordinates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return createOrUpdateFromFlatCoordinates; });
/* unused harmony export createOrUpdateFromRings */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return extendCoordinate; });
/* unused harmony export extendCoordinates */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return extendFlatCoordinates; });
/* unused harmony export extendRings */
/* unused harmony export extendXY */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return forEachCorner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return getArea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return getBottomLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return getBottomRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return getCenter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return getCorner; });
/* unused harmony export getEnlargedArea */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return getForViewAndSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return getHeight; });
/* unused harmony export getIntersectionArea */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return getIntersection; });
/* unused harmony export getMargin */
/* unused harmony export getSize */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return getTopLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return getTopRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return getWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return intersects; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return isEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return returnOrUpdate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function() { return scaleFromCenter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return intersectsSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return applyTransform; });
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/* harmony import */ var _extent_Corner_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(179);
/* harmony import */ var _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86);
/**
 * @module ol/extent
 */





/**
 * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
 * @typedef {Array.<number>} Extent
 * @api
 */

/**
 * Build an extent that includes all given coordinates.
 *
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @return {module:ol/extent~Extent} Bounding extent.
 * @api
 */
function boundingExtent(coordinates) {
  const extent = createEmpty();
  for (let i = 0, ii = coordinates.length; i < ii; ++i) {
    extendCoordinate(extent, coordinates[i]);
  }
  return extent;
}


/**
 * @param {Array.<number>} xs Xs.
 * @param {Array.<number>} ys Ys.
 * @param {module:ol/extent~Extent=} opt_extent Destination extent.
 * @private
 * @return {module:ol/extent~Extent} Extent.
 */
function _boundingExtentXYs(xs, ys, opt_extent) {
  const minX = Math.min.apply(null, xs);
  const minY = Math.min.apply(null, ys);
  const maxX = Math.max.apply(null, xs);
  const maxY = Math.max.apply(null, ys);
  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
}


/**
 * Return extent increased by the provided value.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} value The amount by which the extent should be buffered.
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} Extent.
 * @api
 */
function buffer(extent, value, opt_extent) {
  if (opt_extent) {
    opt_extent[0] = extent[0] - value;
    opt_extent[1] = extent[1] - value;
    opt_extent[2] = extent[2] + value;
    opt_extent[3] = extent[3] + value;
    return opt_extent;
  } else {
    return [
      extent[0] - value,
      extent[1] - value,
      extent[2] + value,
      extent[3] + value
    ];
  }
}


/**
 * Creates a clone of an extent.
 *
 * @param {module:ol/extent~Extent} extent Extent to clone.
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} The clone.
 */
function clone(extent, opt_extent) {
  if (opt_extent) {
    opt_extent[0] = extent[0];
    opt_extent[1] = extent[1];
    opt_extent[2] = extent[2];
    opt_extent[3] = extent[3];
    return opt_extent;
  } else {
    return extent.slice();
  }
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {number} Closest squared distance.
 */
function closestSquaredDistanceXY(extent, x, y) {
  let dx, dy;
  if (x < extent[0]) {
    dx = extent[0] - x;
  } else if (extent[2] < x) {
    dx = x - extent[2];
  } else {
    dx = 0;
  }
  if (y < extent[1]) {
    dy = extent[1] - y;
  } else if (extent[3] < y) {
    dy = y - extent[3];
  } else {
    dy = 0;
  }
  return dx * dx + dy * dy;
}


/**
 * Check if the passed coordinate is contained or on the edge of the extent.
 *
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @return {boolean} The coordinate is contained in the extent.
 * @api
 */
function containsCoordinate(extent, coordinate) {
  return containsXY(extent, coordinate[0], coordinate[1]);
}


/**
 * Check if one extent contains another.
 *
 * An extent is deemed contained if it lies completely within the other extent,
 * including if they share one or more edges.
 *
 * @param {module:ol/extent~Extent} extent1 Extent 1.
 * @param {module:ol/extent~Extent} extent2 Extent 2.
 * @return {boolean} The second extent is contained by or on the edge of the
 *     first.
 * @api
 */
function containsExtent(extent1, extent2) {
  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&
      extent1[1] <= extent2[1] && extent2[3] <= extent1[3];
}


/**
 * Check if the passed coordinate is contained or on the edge of the extent.
 *
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} x X coordinate.
 * @param {number} y Y coordinate.
 * @return {boolean} The x, y values are contained in the extent.
 * @api
 */
function containsXY(extent, x, y) {
  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
}


/**
 * Get the relationship between a coordinate and extent.
 * @param {module:ol/extent~Extent} extent The extent.
 * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.
 * @return {module:ol/extent/Relationship} The relationship (bitwise compare with
 *     module:ol/extent/Relationship~Relationship).
 */
function coordinateRelationship(extent, coordinate) {
  const minX = extent[0];
  const minY = extent[1];
  const maxX = extent[2];
  const maxY = extent[3];
  const x = coordinate[0];
  const y = coordinate[1];
  let relationship = _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].UNKNOWN;
  if (x < minX) {
    relationship = relationship | _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LEFT;
  } else if (x > maxX) {
    relationship = relationship | _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].RIGHT;
  }
  if (y < minY) {
    relationship = relationship | _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].BELOW;
  } else if (y > maxY) {
    relationship = relationship | _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ABOVE;
  }
  if (relationship === _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].UNKNOWN) {
    relationship = _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].INTERSECTING;
  }
  return relationship;
}


/**
 * Create an empty extent.
 * @return {module:ol/extent~Extent} Empty extent.
 * @api
 */
function createEmpty() {
  return [Infinity, Infinity, -Infinity, -Infinity];
}


/**
 * Create a new extent or update the provided extent.
 * @param {number} minX Minimum X.
 * @param {number} minY Minimum Y.
 * @param {number} maxX Maximum X.
 * @param {number} maxY Maximum Y.
 * @param {module:ol/extent~Extent=} opt_extent Destination extent.
 * @return {module:ol/extent~Extent} Extent.
 */
function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
  if (opt_extent) {
    opt_extent[0] = minX;
    opt_extent[1] = minY;
    opt_extent[2] = maxX;
    opt_extent[3] = maxY;
    return opt_extent;
  } else {
    return [minX, minY, maxX, maxY];
  }
}


/**
 * Create a new empty extent or make the provided one empty.
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} Extent.
 */
function createOrUpdateEmpty(opt_extent) {
  return createOrUpdate(
    Infinity, Infinity, -Infinity, -Infinity, opt_extent);
}


/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} Extent.
 */
function createOrUpdateFromCoordinate(coordinate, opt_extent) {
  const x = coordinate[0];
  const y = coordinate[1];
  return createOrUpdate(x, y, x, y, opt_extent);
}


/**
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} Extent.
 */
function createOrUpdateFromCoordinates(coordinates, opt_extent) {
  const extent = createOrUpdateEmpty(opt_extent);
  return extendCoordinates(extent, coordinates);
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} Extent.
 */
function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
  const extent = createOrUpdateEmpty(opt_extent);
  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
}

/**
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} rings Rings.
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} Extent.
 */
function createOrUpdateFromRings(rings, opt_extent) {
  const extent = createOrUpdateEmpty(opt_extent);
  return extendRings(extent, rings);
}


/**
 * Determine if two extents are equivalent.
 * @param {module:ol/extent~Extent} extent1 Extent 1.
 * @param {module:ol/extent~Extent} extent2 Extent 2.
 * @return {boolean} The two extents are equivalent.
 * @api
 */
function equals(extent1, extent2) {
  return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&
      extent1[1] == extent2[1] && extent1[3] == extent2[3];
}


/**
 * Modify an extent to include another extent.
 * @param {module:ol/extent~Extent} extent1 The extent to be modified.
 * @param {module:ol/extent~Extent} extent2 The extent that will be included in the first.
 * @return {module:ol/extent~Extent} A reference to the first (extended) extent.
 * @api
 */
function extend(extent1, extent2) {
  if (extent2[0] < extent1[0]) {
    extent1[0] = extent2[0];
  }
  if (extent2[2] > extent1[2]) {
    extent1[2] = extent2[2];
  }
  if (extent2[1] < extent1[1]) {
    extent1[1] = extent2[1];
  }
  if (extent2[3] > extent1[3]) {
    extent1[3] = extent2[3];
  }
  return extent1;
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 */
function extendCoordinate(extent, coordinate) {
  if (coordinate[0] < extent[0]) {
    extent[0] = coordinate[0];
  }
  if (coordinate[0] > extent[2]) {
    extent[2] = coordinate[0];
  }
  if (coordinate[1] < extent[1]) {
    extent[1] = coordinate[1];
  }
  if (coordinate[1] > extent[3]) {
    extent[3] = coordinate[1];
  }
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @return {module:ol/extent~Extent} Extent.
 */
function extendCoordinates(extent, coordinates) {
  for (let i = 0, ii = coordinates.length; i < ii; ++i) {
    extendCoordinate(extent, coordinates[i]);
  }
  return extent;
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {module:ol/extent~Extent} Extent.
 */
function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {
  for (; offset < end; offset += stride) {
    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
  }
  return extent;
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} rings Rings.
 * @return {module:ol/extent~Extent} Extent.
 */
function extendRings(extent, rings) {
  for (let i = 0, ii = rings.length; i < ii; ++i) {
    extendCoordinates(extent, rings[i]);
  }
  return extent;
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} x X.
 * @param {number} y Y.
 */
function extendXY(extent, x, y) {
  extent[0] = Math.min(extent[0], x);
  extent[1] = Math.min(extent[1], y);
  extent[2] = Math.max(extent[2], x);
  extent[3] = Math.max(extent[3], y);
}


/**
 * This function calls `callback` for each corner of the extent. If the
 * callback returns a truthy value the function returns that value
 * immediately. Otherwise the function returns `false`.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {function(this:T, module:ol/coordinate~Coordinate): S} callback Callback.
 * @param {T=} opt_this Value to use as `this` when executing `callback`.
 * @return {S|boolean} Value.
 * @template S, T
 */
function forEachCorner(extent, callback, opt_this) {
  let val;
  val = callback.call(opt_this, getBottomLeft(extent));
  if (val) {
    return val;
  }
  val = callback.call(opt_this, getBottomRight(extent));
  if (val) {
    return val;
  }
  val = callback.call(opt_this, getTopRight(extent));
  if (val) {
    return val;
  }
  val = callback.call(opt_this, getTopLeft(extent));
  if (val) {
    return val;
  }
  return false;
}


/**
 * Get the size of an extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {number} Area.
 * @api
 */
function getArea(extent) {
  let area = 0;
  if (!isEmpty(extent)) {
    area = getWidth(extent) * getHeight(extent);
  }
  return area;
}


/**
 * Get the bottom left coordinate of an extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {module:ol/coordinate~Coordinate} Bottom left coordinate.
 * @api
 */
function getBottomLeft(extent) {
  return [extent[0], extent[1]];
}


/**
 * Get the bottom right coordinate of an extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {module:ol/coordinate~Coordinate} Bottom right coordinate.
 * @api
 */
function getBottomRight(extent) {
  return [extent[2], extent[1]];
}


/**
 * Get the center coordinate of an extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {module:ol/coordinate~Coordinate} Center.
 * @api
 */
function getCenter(extent) {
  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
}


/**
 * Get a corner coordinate of an extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/extent/Corner} corner Corner.
 * @return {module:ol/coordinate~Coordinate} Corner coordinate.
 */
function getCorner(extent, corner) {
  let coordinate;
  if (corner === _extent_Corner_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].BOTTOM_LEFT) {
    coordinate = getBottomLeft(extent);
  } else if (corner === _extent_Corner_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].BOTTOM_RIGHT) {
    coordinate = getBottomRight(extent);
  } else if (corner === _extent_Corner_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].TOP_LEFT) {
    coordinate = getTopLeft(extent);
  } else if (corner === _extent_Corner_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].TOP_RIGHT) {
    coordinate = getTopRight(extent);
  } else {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_0__[/* assert */ "a"])(false, 13); // Invalid corner
  }
  return (
    /** @type {!module:ol/coordinate~Coordinate} */ (coordinate)
  );
}


/**
 * @param {module:ol/extent~Extent} extent1 Extent 1.
 * @param {module:ol/extent~Extent} extent2 Extent 2.
 * @return {number} Enlarged area.
 */
function getEnlargedArea(extent1, extent2) {
  const minX = Math.min(extent1[0], extent2[0]);
  const minY = Math.min(extent1[1], extent2[1]);
  const maxX = Math.max(extent1[2], extent2[2]);
  const maxY = Math.max(extent1[3], extent2[3]);
  return (maxX - minX) * (maxY - minY);
}


/**
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {module:ol/size~Size} size Size.
 * @param {module:ol/extent~Extent=} opt_extent Destination extent.
 * @return {module:ol/extent~Extent} Extent.
 */
function getForViewAndSize(center, resolution, rotation, size, opt_extent) {
  const dx = resolution * size[0] / 2;
  const dy = resolution * size[1] / 2;
  const cosRotation = Math.cos(rotation);
  const sinRotation = Math.sin(rotation);
  const xCos = dx * cosRotation;
  const xSin = dx * sinRotation;
  const yCos = dy * cosRotation;
  const ySin = dy * sinRotation;
  const x = center[0];
  const y = center[1];
  const x0 = x - xCos + ySin;
  const x1 = x - xCos - ySin;
  const x2 = x + xCos - ySin;
  const x3 = x + xCos + ySin;
  const y0 = y - xSin - yCos;
  const y1 = y - xSin + yCos;
  const y2 = y + xSin + yCos;
  const y3 = y + xSin - yCos;
  return createOrUpdate(
    Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3),
    Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3),
    opt_extent);
}


/**
 * Get the height of an extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {number} Height.
 * @api
 */
function getHeight(extent) {
  return extent[3] - extent[1];
}


/**
 * @param {module:ol/extent~Extent} extent1 Extent 1.
 * @param {module:ol/extent~Extent} extent2 Extent 2.
 * @return {number} Intersection area.
 */
function getIntersectionArea(extent1, extent2) {
  const intersection = getIntersection(extent1, extent2);
  return getArea(intersection);
}


/**
 * Get the intersection of two extents.
 * @param {module:ol/extent~Extent} extent1 Extent 1.
 * @param {module:ol/extent~Extent} extent2 Extent 2.
 * @param {module:ol/extent~Extent=} opt_extent Optional extent to populate with intersection.
 * @return {module:ol/extent~Extent} Intersecting extent.
 * @api
 */
function getIntersection(extent1, extent2, opt_extent) {
  const intersection = opt_extent ? opt_extent : createEmpty();
  if (intersects(extent1, extent2)) {
    if (extent1[0] > extent2[0]) {
      intersection[0] = extent1[0];
    } else {
      intersection[0] = extent2[0];
    }
    if (extent1[1] > extent2[1]) {
      intersection[1] = extent1[1];
    } else {
      intersection[1] = extent2[1];
    }
    if (extent1[2] < extent2[2]) {
      intersection[2] = extent1[2];
    } else {
      intersection[2] = extent2[2];
    }
    if (extent1[3] < extent2[3]) {
      intersection[3] = extent1[3];
    } else {
      intersection[3] = extent2[3];
    }
  } else {
    createOrUpdateEmpty(intersection);
  }
  return intersection;
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {number} Margin.
 */
function getMargin(extent) {
  return getWidth(extent) + getHeight(extent);
}


/**
 * Get the size (width, height) of an extent.
 * @param {module:ol/extent~Extent} extent The extent.
 * @return {module:ol/size~Size} The extent size.
 * @api
 */
function getSize(extent) {
  return [extent[2] - extent[0], extent[3] - extent[1]];
}


/**
 * Get the top left coordinate of an extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {module:ol/coordinate~Coordinate} Top left coordinate.
 * @api
 */
function getTopLeft(extent) {
  return [extent[0], extent[3]];
}


/**
 * Get the top right coordinate of an extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {module:ol/coordinate~Coordinate} Top right coordinate.
 * @api
 */
function getTopRight(extent) {
  return [extent[2], extent[3]];
}


/**
 * Get the width of an extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {number} Width.
 * @api
 */
function getWidth(extent) {
  return extent[2] - extent[0];
}


/**
 * Determine if one extent intersects another.
 * @param {module:ol/extent~Extent} extent1 Extent 1.
 * @param {module:ol/extent~Extent} extent2 Extent.
 * @return {boolean} The two extents intersect.
 * @api
 */
function intersects(extent1, extent2) {
  return extent1[0] <= extent2[2] &&
      extent1[2] >= extent2[0] &&
      extent1[1] <= extent2[3] &&
      extent1[3] >= extent2[1];
}


/**
 * Determine if an extent is empty.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {boolean} Is empty.
 * @api
 */
function isEmpty(extent) {
  return extent[2] < extent[0] || extent[3] < extent[1];
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} Extent.
 */
function returnOrUpdate(extent, opt_extent) {
  if (opt_extent) {
    opt_extent[0] = extent[0];
    opt_extent[1] = extent[1];
    opt_extent[2] = extent[2];
    opt_extent[3] = extent[3];
    return opt_extent;
  } else {
    return extent;
  }
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} value Value.
 */
function scaleFromCenter(extent, value) {
  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
  extent[0] -= deltaX;
  extent[2] += deltaX;
  extent[1] -= deltaY;
  extent[3] += deltaY;
}


/**
 * Determine if the segment between two coordinates intersects (crosses,
 * touches, or is contained by) the provided extent.
 * @param {module:ol/extent~Extent} extent The extent.
 * @param {module:ol/coordinate~Coordinate} start Segment start coordinate.
 * @param {module:ol/coordinate~Coordinate} end Segment end coordinate.
 * @return {boolean} The segment intersects the extent.
 */
function intersectsSegment(extent, start, end) {
  let intersects = false;
  const startRel = coordinateRelationship(extent, start);
  const endRel = coordinateRelationship(extent, end);
  if (startRel === _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].INTERSECTING ||
      endRel === _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].INTERSECTING) {
    intersects = true;
  } else {
    const minX = extent[0];
    const minY = extent[1];
    const maxX = extent[2];
    const maxY = extent[3];
    const startX = start[0];
    const startY = start[1];
    const endX = end[0];
    const endY = end[1];
    const slope = (endY - startY) / (endX - startX);
    let x, y;
    if (!!(endRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ABOVE) &&
        !(startRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ABOVE)) {
      // potentially intersects top
      x = endX - ((endY - maxY) / slope);
      intersects = x >= minX && x <= maxX;
    }
    if (!intersects && !!(endRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].RIGHT) &&
        !(startRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].RIGHT)) {
      // potentially intersects right
      y = endY - ((endX - maxX) * slope);
      intersects = y >= minY && y <= maxY;
    }
    if (!intersects && !!(endRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].BELOW) &&
        !(startRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].BELOW)) {
      // potentially intersects bottom
      x = endX - ((endY - minY) / slope);
      intersects = x >= minX && x <= maxX;
    }
    if (!intersects && !!(endRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LEFT) &&
        !(startRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LEFT)) {
      // potentially intersects left
      y = endY - ((endX - minX) * slope);
      intersects = y >= minY && y <= maxY;
    }

  }
  return intersects;
}


/**
 * Apply a transform function to the extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/proj~TransformFunction} transformFn Transform function.
 * Called with `[minX, minY, maxX, maxY]` extent coordinates.
 * @param {module:ol/extent~Extent=} opt_extent Destination extent.
 * @return {module:ol/extent~Extent} Extent.
 * @api
 */
function applyTransform(extent, transformFn, opt_extent) {
  const coordinates = [
    extent[0], extent[1],
    extent[0], extent[3],
    extent[2], extent[1],
    extent[2], extent[3]
  ];
  transformFn(coordinates, coordinates, 2);
  const xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];
  const ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];
  return _boundingExtentXYs(xs, ys, opt_extent);
}


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/tilegrid/common.js
var common = __webpack_require__(147);

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/functions.js
var functions = __webpack_require__(29);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// CONCATENATED MODULE: ../src/ol/centerconstraint.js
/**
 * @module ol/centerconstraint
 */



/**
 * @typedef {function((module:ol/coordinate~Coordinate|undefined)): (module:ol/coordinate~Coordinate|undefined)} Type
 */


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {module:ol/centerconstraint~Type} The constraint.
 */
function createExtent(extent) {
  return (
    /**
     * @param {module:ol/coordinate~Coordinate=} center Center.
     * @return {module:ol/coordinate~Coordinate|undefined} Center.
     */
    function(center) {
      if (center) {
        return [
          Object(math["a" /* clamp */])(center[0], extent[0], extent[2]),
          Object(math["a" /* clamp */])(center[1], extent[1], extent[3])
        ];
      } else {
        return undefined;
      }
    }
  );
}


/**
 * @param {module:ol/coordinate~Coordinate=} center Center.
 * @return {module:ol/coordinate~Coordinate|undefined} Center.
 */
function none(center) {
  return center;
}

// EXTERNAL MODULE: ../src/ol/Object.js
var ol_Object = __webpack_require__(31);

// EXTERNAL MODULE: ../src/ol/array.js
var array = __webpack_require__(16);

// CONCATENATED MODULE: ../src/ol/resolutionconstraint.js
/**
 * @module ol/resolutionconstraint
 */




/**
 * @typedef {function((number|undefined), number, number): (number|undefined)} Type
 */


/**
 * @param {Array.<number>} resolutions Resolutions.
 * @return {module:ol/resolutionconstraint~Type} Zoom function.
 */
function createSnapToResolutions(resolutions) {
  return (
    /**
     * @param {number|undefined} resolution Resolution.
     * @param {number} delta Delta.
     * @param {number} direction Direction.
     * @return {number|undefined} Resolution.
     */
    function(resolution, delta, direction) {
      if (resolution !== undefined) {
        let z = Object(array["h" /* linearFindNearest */])(resolutions, resolution, direction);
        z = Object(math["a" /* clamp */])(z + delta, 0, resolutions.length - 1);
        const index = Math.floor(z);
        if (z != index && index < resolutions.length - 1) {
          const power = resolutions[index] / resolutions[index + 1];
          return resolutions[index] / Math.pow(power, z - index);
        } else {
          return resolutions[index];
        }
      } else {
        return undefined;
      }
    }
  );
}


/**
 * @param {number} power Power.
 * @param {number} maxResolution Maximum resolution.
 * @param {number=} opt_maxLevel Maximum level.
 * @return {module:ol/resolutionconstraint~Type} Zoom function.
 */
function createSnapToPower(power, maxResolution, opt_maxLevel) {
  return (
    /**
     * @param {number|undefined} resolution Resolution.
     * @param {number} delta Delta.
     * @param {number} direction Direction.
     * @return {number|undefined} Resolution.
     */
    function(resolution, delta, direction) {
      if (resolution !== undefined) {
        const offset = -direction / 2 + 0.5;
        const oldLevel = Math.floor(
          Math.log(maxResolution / resolution) / Math.log(power) + offset);
        let newLevel = Math.max(oldLevel + delta, 0);
        if (opt_maxLevel !== undefined) {
          newLevel = Math.min(newLevel, opt_maxLevel);
        }
        return maxResolution / Math.pow(power, newLevel);
      } else {
        return undefined;
      }
    });
}

// EXTERNAL MODULE: ../src/ol/rotationconstraint.js
var rotationconstraint = __webpack_require__(127);

// EXTERNAL MODULE: ../src/ol/ViewHint.js
var ViewHint = __webpack_require__(43);

// EXTERNAL MODULE: ../src/ol/ViewProperty.js
var ViewProperty = __webpack_require__(81);

// EXTERNAL MODULE: ../src/ol/asserts.js
var asserts = __webpack_require__(27);

// EXTERNAL MODULE: ../src/ol/coordinate.js
var coordinate = __webpack_require__(34);

// EXTERNAL MODULE: ../src/ol/easing.js
var easing = __webpack_require__(56);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/geom/GeometryType.js
var GeometryType = __webpack_require__(9);

// EXTERNAL MODULE: ../src/ol/geom/Polygon.js
var Polygon = __webpack_require__(39);

// EXTERNAL MODULE: ../src/ol/geom/SimpleGeometry.js
var SimpleGeometry = __webpack_require__(55);

// EXTERNAL MODULE: ../src/ol/obj.js
var obj = __webpack_require__(15);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// EXTERNAL MODULE: ../src/ol/proj/Units.js
var Units = __webpack_require__(59);

// CONCATENATED MODULE: ../src/ol/View.js
/* unused harmony export createCenterConstraint */
/* unused harmony export createResolutionConstraint */
/* unused harmony export createRotationConstraint */
/* unused harmony export isNoopAnimation */
/**
 * @module ol/View
 */























/**
 * An animation configuration
 *
 * @typedef {Object} Animation
 * @property {module:ol/coordinate~Coordinate} [sourceCenter]
 * @property {module:ol/coordinate~Coordinate} [targetCenter]
 * @property {number} [sourceResolution]
 * @property {number} [targetResolution]
 * @property {number} [sourceRotation]
 * @property {number} [sourceRotation]
 * @property {module:ol/coordinate~Coordinate} [anchor]
 * @property {number} start
 * @property {number} duration
 * @property {boolean} complete
 * @property {function(number):number} easing
 * @property {function(boolean)} callback
 */


/**
 * @typedef {Object} Constraints
 * @property {module:ol/centerconstraint~Type} center
 * @property {module:ol/resolutionconstraint~Type} resolution
 * @property {module:ol/rotationconstraint~Type} rotation
 */


/**
 * @typedef {Object} FitOptions
 * @property {module:ol/size~Size} [size] The size in pixels of the box to fit
 * the extent into. Default is the current size of the first map in the DOM that
 * uses this view, or `[100, 100]` if no such map is found.
 * @property {!Array.<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
 * cleared inside the view. Values in the array are top, right, bottom and left
 * padding.
 * @property {boolean} [constrainResolution=true] Constrain the resolution.
 * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get
 * the nearest extent instead of the closest that actually fits the view.
 * @property {number} [minResolution=0] Minimum resolution that we zoom to.
 * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
 * `minResolution` is given, this property is ignored.
 * @property {number} [duration] The duration of the animation in milliseconds.
 * By default, there is no animation to the target extent.
 * @property {function(number):number} [easing] The easing function used during
 * the animation (defaults to {@link module:ol/easing~inAndOut}).
 * The function will be called for each frame with a number representing a
 * fraction of the animation's duration.  The function should return a number
 * between 0 and 1 representing the progress toward the destination state.
 * @property {function(boolean)} [callback] Function called when the view is in
 * its final position. The callback will be called with `true` if the animation
 * series completed on its own or `false` if it was cancelled.
 */


/**
 * @typedef {Object} ViewOptions
 * @property {module:ol/coordinate~Coordinate} [center] The initial center for
 * the view. The coordinate system for the center is specified with the
 * `projection` option. Layer sources will not be fetched if this is not set,
 * but the center can be set later with {@link #setCenter}.
 * @property {boolean|number} [constrainRotation=true] Rotation constraint.
 * `false` means no constraint. `true` means no constraint, but snap to zero
 * near zero. A number constrains the rotation to that number of values. For
 * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
 * @property {boolean} [enableRotation=true] Enable rotation.
 * If `false`, a rotation constraint that always sets the rotation to zero is
 * used. The `constrainRotation` option has no effect if `enableRotation` is
 * `false`.
 * @property {module:ol/extent~Extent} [extent] The extent that constrains the
 * center, in other words, center cannot be set outside this extent.
 * @property {number} [maxResolution] The maximum resolution used to determine
 * the resolution constraint. It is used together with `minResolution` (or
 * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
 * that the projection's validity extent fits in a 256x256 px tile. If the
 * projection is Spherical Mercator (the default) then `maxResolution` defaults
 * to `40075016.68557849 / 256 = 156543.03392804097`.
 * @property {number} [minResolution] The minimum resolution used to determine
 * the resolution constraint.  It is used together with `maxResolution` (or
 * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
 * zoom levels (with a factor of 2). If the projection is Spherical Mercator
 * (the default) then `minResolution` defaults to
 * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
 * @property {number} [maxZoom=28] The maximum zoom level used to determine the
 * resolution constraint. It is used together with `minZoom` (or
 * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
 * provided, it is given precedence over `maxZoom`.
 * @property {number} [minZoom=0] The minimum zoom level used to determine the
 * resolution constraint. It is used together with `maxZoom` (or
 * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
 * provided, it is given precedence over `minZoom`.
 * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857'] The
 * projection. The default is Spherical Mercator.
 * @property {number} [resolution] The initial resolution for the view. The
 * units are `projection` units per pixel (e.g. meters per pixel). An
 * alternative to setting this is to set `zoom`. Layer sources will not be
 * fetched if neither this nor `zoom` are defined, but they can be set later
 * with {@link #setZoom} or {@link #setResolution}.
 * @property {Array.<number>} [resolutions] Resolutions to determine the
 * resolution constraint. If set the `maxResolution`, `minResolution`,
 * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
 * @property {number} [rotation=0] The initial rotation for the view in radians
 * (positive rotation clockwise, 0 means North).
 * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
 * level used to calculate the initial resolution for the view. The initial
 * resolution is determined using the {@link #constrainResolution} method.
 * @property {number} [zoomFactor=2] The zoom factor used to determine the
 * resolution constraint.
 */


/**
 * @typedef {Object} AnimationOptions
 * @property {module:ol/coordinate~Coordinate|undefined} center The center of the view at the end of
 * the animation.
 * @property {number|undefined} zoom The zoom level of the view at the end of the
 * animation. This takes precedence over `resolution`.
 * @property {number|undefined} resolution The resolution of the view at the end
 * of the animation.  If `zoom` is also provided, this option will be ignored.
 * @property {number|undefined} rotation The rotation of the view at the end of
 * the animation.
 * @property {module:ol/coordinate~Coordinate|undefined} anchor Optional anchor to remained fixed
 * during a rotation or resolution animation.
 * @property {number} [duration=1000] The duration of the animation in milliseconds.
 * @property {function(number):number} [easing] The easing function used
 * during the animation (defaults to {@link module:ol/easing~inAndOut}).
 * The function will be called for each frame with a number representing a
 * fraction of the animation's duration.  The function should return a number
 * between 0 and 1 representing the progress toward the destination state.
 */


/**
 * @typedef {Object} State
 * @property {module:ol/coordinate~Coordinate} center
 * @property {module:ol/proj/Projection} projection
 * @property {number} resolution
 * @property {number} rotation
 * @property {number} zoom
 */


/**
 * Default min zoom level for the map view.
 * @type {number}
 */
const DEFAULT_MIN_ZOOM = 0;


/**
 * @classdesc
 * A View object represents a simple 2D view of the map.
 *
 * This is the object to act upon to change the center, resolution,
 * and rotation of the map.
 *
 * ### The view states
 *
 * An View is determined by three states: `center`, `resolution`,
 * and `rotation`. Each state has a corresponding getter and setter, e.g.
 * `getCenter` and `setCenter` for the `center` state.
 *
 * An View has a `projection`. The projection determines the
 * coordinate system of the center, and its units determine the units of the
 * resolution (projection units per pixel). The default projection is
 * Spherical Mercator (EPSG:3857).
 *
 * ### The constraints
 *
 * `setCenter`, `setResolution` and `setRotation` can be used to change the
 * states of the view. Any value can be passed to the setters. And the value
 * that is passed to a setter will effectively be the value set in the view,
 * and returned by the corresponding getter.
 *
 * But a View object also has a *resolution constraint*, a
 * *rotation constraint* and a *center constraint*.
 *
 * As said above, no constraints are applied when the setters are used to set
 * new states for the view. Applying constraints is done explicitly through
 * the use of the `constrain*` functions (`constrainResolution` and
 * `constrainRotation` and `constrainCenter`).
 *
 * The main users of the constraints are the interactions and the
 * controls. For example, double-clicking on the map changes the view to
 * the "next" resolution. And releasing the fingers after pinch-zooming
 * snaps to the closest resolution (with an animation).
 *
 * The *resolution constraint* snaps to specific resolutions. It is
 * determined by the following options: `resolutions`, `maxResolution`,
 * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three
 * options are ignored. See documentation for each option for more
 * information.
 *
 * The *rotation constraint* snaps to specific angles. It is determined
 * by the following options: `enableRotation` and `constrainRotation`.
 * By default the rotation value is snapped to zero when approaching the
 * horizontal.
 *
 * The *center constraint* is determined by the `extent` option. By
 * default the center is not constrained at all.
 *
 * @constructor
 * @extends {module:ol/Object}
 * @param {module:ol/View~ViewOptions=} opt_options View options.
 * @api
 */
const View = function(opt_options) {
  ol_Object["a" /* default */].call(this);

  const options = Object(obj["a" /* assign */])({}, opt_options);

  /**
   * @private
   * @type {Array.<number>}
   */
  this.hints_ = [0, 0];

  /**
   * @private
   * @type {Array.<Array.<module:ol/View~Animation>>}
   */
  this.animations_ = [];

  /**
   * @private
   * @type {number|undefined}
   */
  this.updateAnimationKey_;

  this.updateAnimations_ = this.updateAnimations_.bind(this);

  /**
   * @private
   * @const
   * @type {module:ol/proj/Projection}
   */
  this.projection_ = Object(proj["e" /* createProjection */])(options.projection, 'EPSG:3857');

  this.applyOptions_(options);
};

Object(util["c" /* inherits */])(View, ol_Object["a" /* default */]);


/**
 * Set up the view with the given options.
 * @param {module:ol/View~ViewOptions} options View options.
 */
View.prototype.applyOptions_ = function(options) {

  /**
   * @type {Object.<string, *>}
   */
  const properties = {};
  properties[ViewProperty["a" /* default */].CENTER] = options.center !== undefined ?
    options.center : null;

  const resolutionConstraintInfo = createResolutionConstraint(options);

  /**
   * @private
   * @type {number}
   */
  this.maxResolution_ = resolutionConstraintInfo.maxResolution;

  /**
   * @private
   * @type {number}
   */
  this.minResolution_ = resolutionConstraintInfo.minResolution;

  /**
   * @private
   * @type {number}
   */
  this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;

  /**
   * @private
   * @type {Array.<number>|undefined}
   */
  this.resolutions_ = options.resolutions;

  /**
   * @private
   * @type {number}
   */
  this.minZoom_ = resolutionConstraintInfo.minZoom;

  const centerConstraint = createCenterConstraint(options);
  const resolutionConstraint = resolutionConstraintInfo.constraint;
  const rotationConstraint = createRotationConstraint(options);

  /**
   * @private
   * @type {module:ol/View~Constraints}
   */
  this.constraints_ = {
    center: centerConstraint,
    resolution: resolutionConstraint,
    rotation: rotationConstraint
  };

  if (options.resolution !== undefined) {
    properties[ViewProperty["a" /* default */].RESOLUTION] = options.resolution;
  } else if (options.zoom !== undefined) {
    properties[ViewProperty["a" /* default */].RESOLUTION] = this.constrainResolution(
      this.maxResolution_, options.zoom - this.minZoom_);

    if (this.resolutions_) { // in case map zoom is out of min/max zoom range
      properties[ViewProperty["a" /* default */].RESOLUTION] = Object(math["a" /* clamp */])(
        Number(this.getResolution() || properties[ViewProperty["a" /* default */].RESOLUTION]),
        this.minResolution_, this.maxResolution_);
    }
  }
  properties[ViewProperty["a" /* default */].ROTATION] = options.rotation !== undefined ? options.rotation : 0;
  this.setProperties(properties);

  /**
   * @private
   * @type {module:ol/View~ViewOptions}
   */
  this.options_ = options;

};

/**
 * Get an updated version of the view options used to construct the view.  The
 * current resolution (or zoom), center, and rotation are applied to any stored
 * options.  The provided options can be used to apply new min/max zoom or
 * resolution limits.
 * @param {module:ol/View~ViewOptions} newOptions New options to be applied.
 * @return {module:ol/View~ViewOptions} New options updated with the current view state.
 */
View.prototype.getUpdatedOptions_ = function(newOptions) {
  const options = Object(obj["a" /* assign */])({}, this.options_);

  // preserve resolution (or zoom)
  if (options.resolution !== undefined) {
    options.resolution = this.getResolution();
  } else {
    options.zoom = this.getZoom();
  }

  // preserve center
  options.center = this.getCenter();

  // preserve rotation
  options.rotation = this.getRotation();

  return Object(obj["a" /* assign */])({}, options, newOptions);
};


/**
 * Animate the view.  The view's center, zoom (or resolution), and rotation
 * can be animated for smooth transitions between view states.  For example,
 * to animate the view to a new zoom level:
 *
 *     view.animate({zoom: view.getZoom() + 1});
 *
 * By default, the animation lasts one second and uses in-and-out easing.  You
 * can customize this behavior by including `duration` (in milliseconds) and
 * `easing` options (see {@link module:ol/easing}).
 *
 * To chain together multiple animations, call the method with multiple
 * animation objects.  For example, to first zoom and then pan:
 *
 *     view.animate({zoom: 10}, {center: [0, 0]});
 *
 * If you provide a function as the last argument to the animate method, it
 * will get called at the end of an animation series.  The callback will be
 * called with `true` if the animation series completed on its own or `false`
 * if it was cancelled.
 *
 * Animations are cancelled by user interactions (e.g. dragging the map) or by
 * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
 * (or another method that calls one of these).
 *
 * @param {...(module:ol/View~AnimationOptions|function(boolean))} var_args Animation
 *     options.  Multiple animations can be run in series by passing multiple
 *     options objects.  To run multiple animations in parallel, call the method
 *     multiple times.  An optional callback can be provided as a final
 *     argument.  The callback will be called with a boolean indicating whether
 *     the animation completed without being cancelled.
 * @api
 */
View.prototype.animate = function(var_args) {
  let animationCount = arguments.length;
  let callback;
  if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {
    callback = arguments[animationCount - 1];
    --animationCount;
  }
  if (!this.isDef()) {
    // if view properties are not yet set, shortcut to the final state
    const state = arguments[animationCount - 1];
    if (state.center) {
      this.setCenter(state.center);
    }
    if (state.zoom !== undefined) {
      this.setZoom(state.zoom);
    }
    if (state.rotation !== undefined) {
      this.setRotation(state.rotation);
    }
    if (callback) {
      setTimeout(function() {
        callback(true);
      }, 0);
    }
    return;
  }
  let start = Date.now();
  let center = this.getCenter().slice();
  let resolution = this.getResolution();
  let rotation = this.getRotation();
  const series = [];
  for (let i = 0; i < animationCount; ++i) {
    const options = /** @type {module:ol/View~AnimationOptions} */ (arguments[i]);

    const animation = /** @type {module:ol/View~Animation} */ ({
      start: start,
      complete: false,
      anchor: options.anchor,
      duration: options.duration !== undefined ? options.duration : 1000,
      easing: options.easing || easing["c" /* inAndOut */]
    });

    if (options.center) {
      animation.sourceCenter = center;
      animation.targetCenter = options.center;
      center = animation.targetCenter;
    }

    if (options.zoom !== undefined) {
      animation.sourceResolution = resolution;
      animation.targetResolution = this.constrainResolution(
        this.maxResolution_, options.zoom - this.minZoom_, 0);
      resolution = animation.targetResolution;
    } else if (options.resolution) {
      animation.sourceResolution = resolution;
      animation.targetResolution = options.resolution;
      resolution = animation.targetResolution;
    }

    if (options.rotation !== undefined) {
      animation.sourceRotation = rotation;
      const delta = Object(math["d" /* modulo */])(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
      animation.targetRotation = rotation + delta;
      rotation = animation.targetRotation;
    }

    animation.callback = callback;

    // check if animation is a no-op
    if (isNoopAnimation(animation)) {
      animation.complete = true;
      // we still push it onto the series for callback handling
    } else {
      start += animation.duration;
    }
    series.push(animation);
  }
  this.animations_.push(series);
  this.setHint(ViewHint["a" /* default */].ANIMATING, 1);
  this.updateAnimations_();
};


/**
 * Determine if the view is being animated.
 * @return {boolean} The view is being animated.
 * @api
 */
View.prototype.getAnimating = function() {
  return this.hints_[ViewHint["a" /* default */].ANIMATING] > 0;
};


/**
 * Determine if the user is interacting with the view, such as panning or zooming.
 * @return {boolean} The view is being interacted with.
 * @api
 */
View.prototype.getInteracting = function() {
  return this.hints_[ViewHint["a" /* default */].INTERACTING] > 0;
};


/**
 * Cancel any ongoing animations.
 * @api
 */
View.prototype.cancelAnimations = function() {
  this.setHint(ViewHint["a" /* default */].ANIMATING, -this.hints_[ViewHint["a" /* default */].ANIMATING]);
  for (let i = 0, ii = this.animations_.length; i < ii; ++i) {
    const series = this.animations_[i];
    if (series[0].callback) {
      series[0].callback(false);
    }
  }
  this.animations_.length = 0;
};

/**
 * Update all animations.
 */
View.prototype.updateAnimations_ = function() {
  if (this.updateAnimationKey_ !== undefined) {
    cancelAnimationFrame(this.updateAnimationKey_);
    this.updateAnimationKey_ = undefined;
  }
  if (!this.getAnimating()) {
    return;
  }
  const now = Date.now();
  let more = false;
  for (let i = this.animations_.length - 1; i >= 0; --i) {
    const series = this.animations_[i];
    let seriesComplete = true;
    for (let j = 0, jj = series.length; j < jj; ++j) {
      const animation = series[j];
      if (animation.complete) {
        continue;
      }
      const elapsed = now - animation.start;
      let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
      if (fraction >= 1) {
        animation.complete = true;
        fraction = 1;
      } else {
        seriesComplete = false;
      }
      const progress = animation.easing(fraction);
      if (animation.sourceCenter) {
        const x0 = animation.sourceCenter[0];
        const y0 = animation.sourceCenter[1];
        const x1 = animation.targetCenter[0];
        const y1 = animation.targetCenter[1];
        const x = x0 + progress * (x1 - x0);
        const y = y0 + progress * (y1 - y0);
        this.set(ViewProperty["a" /* default */].CENTER, [x, y]);
      }
      if (animation.sourceResolution && animation.targetResolution) {
        const resolution = progress === 1 ?
          animation.targetResolution :
          animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);
        if (animation.anchor) {
          this.set(ViewProperty["a" /* default */].CENTER,
            this.calculateCenterZoom(resolution, animation.anchor));
        }
        this.set(ViewProperty["a" /* default */].RESOLUTION, resolution);
      }
      if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {
        const rotation = progress === 1 ?
          Object(math["d" /* modulo */])(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :
          animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);
        if (animation.anchor) {
          this.set(ViewProperty["a" /* default */].CENTER,
            this.calculateCenterRotate(rotation, animation.anchor));
        }
        this.set(ViewProperty["a" /* default */].ROTATION, rotation);
      }
      more = true;
      if (!animation.complete) {
        break;
      }
    }
    if (seriesComplete) {
      this.animations_[i] = null;
      this.setHint(ViewHint["a" /* default */].ANIMATING, -1);
      const callback = series[0].callback;
      if (callback) {
        setTimeout(function() {
          callback(true);
        }, 0);
      }
    }
  }
  // prune completed series
  this.animations_ = this.animations_.filter(Boolean);
  if (more && this.updateAnimationKey_ === undefined) {
    this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);
  }
};

/**
 * @param {number} rotation Target rotation.
 * @param {module:ol/coordinate~Coordinate} anchor Rotation anchor.
 * @return {module:ol/coordinate~Coordinate|undefined} Center for rotation and anchor.
 */
View.prototype.calculateCenterRotate = function(rotation, anchor) {
  let center;
  const currentCenter = this.getCenter();
  if (currentCenter !== undefined) {
    center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
    Object(coordinate["h" /* rotate */])(center, rotation - this.getRotation());
    Object(coordinate["a" /* add */])(center, anchor);
  }
  return center;
};


/**
 * @param {number} resolution Target resolution.
 * @param {module:ol/coordinate~Coordinate} anchor Zoom anchor.
 * @return {module:ol/coordinate~Coordinate|undefined} Center for resolution and anchor.
 */
View.prototype.calculateCenterZoom = function(resolution, anchor) {
  let center;
  const currentCenter = this.getCenter();
  const currentResolution = this.getResolution();
  if (currentCenter !== undefined && currentResolution !== undefined) {
    const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;
    const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;
    center = [x, y];
  }
  return center;
};


/**
 * @private
 * @return {module:ol/size~Size} Viewport size or `[100, 100]` when no viewport is found.
 */
View.prototype.getSizeFromViewport_ = function() {
  const size = [100, 100];
  const selector = '.ol-viewport[data-view="' + Object(util["b" /* getUid */])(this) + '"]';
  const element = document.querySelector(selector);
  if (element) {
    const metrics = getComputedStyle(element);
    size[0] = parseInt(metrics.width, 10);
    size[1] = parseInt(metrics.height, 10);
  }
  return size;
};


/**
 * Get the constrained center of this view.
 * @param {module:ol/coordinate~Coordinate|undefined} center Center.
 * @return {module:ol/coordinate~Coordinate|undefined} Constrained center.
 * @api
 */
View.prototype.constrainCenter = function(center) {
  return this.constraints_.center(center);
};


/**
 * Get the constrained resolution of this view.
 * @param {number|undefined} resolution Resolution.
 * @param {number=} opt_delta Delta. Default is `0`.
 * @param {number=} opt_direction Direction. Default is `0`.
 * @return {number|undefined} Constrained resolution.
 * @api
 */
View.prototype.constrainResolution = function(resolution, opt_delta, opt_direction) {
  const delta = opt_delta || 0;
  const direction = opt_direction || 0;
  return this.constraints_.resolution(resolution, delta, direction);
};


/**
 * Get the constrained rotation of this view.
 * @param {number|undefined} rotation Rotation.
 * @param {number=} opt_delta Delta. Default is `0`.
 * @return {number|undefined} Constrained rotation.
 * @api
 */
View.prototype.constrainRotation = function(rotation, opt_delta) {
  const delta = opt_delta || 0;
  return this.constraints_.rotation(rotation, delta);
};


/**
 * Get the view center.
 * @return {module:ol/coordinate~Coordinate|undefined} The center of the view.
 * @observable
 * @api
 */
View.prototype.getCenter = function() {
  return (
    /** @type {module:ol/coordinate~Coordinate|undefined} */ (this.get(ViewProperty["a" /* default */].CENTER))
  );
};


/**
 * @return {module:ol/View~Constraints} Constraints.
 */
View.prototype.getConstraints = function() {
  return this.constraints_;
};


/**
 * @param {Array.<number>=} opt_hints Destination array.
 * @return {Array.<number>} Hint.
 */
View.prototype.getHints = function(opt_hints) {
  if (opt_hints !== undefined) {
    opt_hints[0] = this.hints_[0];
    opt_hints[1] = this.hints_[1];
    return opt_hints;
  } else {
    return this.hints_.slice();
  }
};


/**
 * Calculate the extent for the current view state and the passed size.
 * The size is the pixel dimensions of the box into which the calculated extent
 * should fit. In most cases you want to get the extent of the entire map,
 * that is `map.getSize()`.
 * @param {module:ol/size~Size=} opt_size Box pixel size. If not provided, the size of the
 * first map that uses this view will be used.
 * @return {module:ol/extent~Extent} Extent.
 * @api
 */
View.prototype.calculateExtent = function(opt_size) {
  const size = opt_size || this.getSizeFromViewport_();
  const center = /** @type {!module:ol/coordinate~Coordinate} */ (this.getCenter());
  Object(asserts["a" /* assert */])(center, 1); // The view center is not defined
  const resolution = /** @type {!number} */ (this.getResolution());
  Object(asserts["a" /* assert */])(resolution !== undefined, 2); // The view resolution is not defined
  const rotation = /** @type {!number} */ (this.getRotation());
  Object(asserts["a" /* assert */])(rotation !== undefined, 3); // The view rotation is not defined

  return Object(ol_extent["z" /* getForViewAndSize */])(center, resolution, rotation, size);
};


/**
 * Get the maximum resolution of the view.
 * @return {number} The maximum resolution of the view.
 * @api
 */
View.prototype.getMaxResolution = function() {
  return this.maxResolution_;
};


/**
 * Get the minimum resolution of the view.
 * @return {number} The minimum resolution of the view.
 * @api
 */
View.prototype.getMinResolution = function() {
  return this.minResolution_;
};


/**
 * Get the maximum zoom level for the view.
 * @return {number} The maximum zoom level.
 * @api
 */
View.prototype.getMaxZoom = function() {
  return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));
};


/**
 * Set a new maximum zoom level for the view.
 * @param {number} zoom The maximum zoom level.
 * @api
 */
View.prototype.setMaxZoom = function(zoom) {
  this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));
};


/**
 * Get the minimum zoom level for the view.
 * @return {number} The minimum zoom level.
 * @api
 */
View.prototype.getMinZoom = function() {
  return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));
};


/**
 * Set a new minimum zoom level for the view.
 * @param {number} zoom The minimum zoom level.
 * @api
 */
View.prototype.setMinZoom = function(zoom) {
  this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));
};


/**
 * Get the view projection.
 * @return {module:ol/proj/Projection} The projection of the view.
 * @api
 */
View.prototype.getProjection = function() {
  return this.projection_;
};


/**
 * Get the view resolution.
 * @return {number|undefined} The resolution of the view.
 * @observable
 * @api
 */
View.prototype.getResolution = function() {
  return /** @type {number|undefined} */ (this.get(ViewProperty["a" /* default */].RESOLUTION));
};


/**
 * Get the resolutions for the view. This returns the array of resolutions
 * passed to the constructor of the View, or undefined if none were given.
 * @return {Array.<number>|undefined} The resolutions of the view.
 * @api
 */
View.prototype.getResolutions = function() {
  return this.resolutions_;
};


/**
 * Get the resolution for a provided extent (in map units) and size (in pixels).
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/size~Size=} opt_size Box pixel size.
 * @return {number} The resolution at which the provided extent will render at
 *     the given size.
 * @api
 */
View.prototype.getResolutionForExtent = function(extent, opt_size) {
  const size = opt_size || this.getSizeFromViewport_();
  const xResolution = Object(ol_extent["E" /* getWidth */])(extent) / size[0];
  const yResolution = Object(ol_extent["A" /* getHeight */])(extent) / size[1];
  return Math.max(xResolution, yResolution);
};


/**
 * Return a function that returns a value between 0 and 1 for a
 * resolution. Exponential scaling is assumed.
 * @param {number=} opt_power Power.
 * @return {function(number): number} Resolution for value function.
 */
View.prototype.getResolutionForValueFunction = function(opt_power) {
  const power = opt_power || 2;
  const maxResolution = this.maxResolution_;
  const minResolution = this.minResolution_;
  const max = Math.log(maxResolution / minResolution) / Math.log(power);
  return (
    /**
     * @param {number} value Value.
     * @return {number} Resolution.
     */
    function(value) {
      const resolution = maxResolution / Math.pow(power, value * max);
      return resolution;
    });
};


/**
 * Get the view rotation.
 * @return {number} The rotation of the view in radians.
 * @observable
 * @api
 */
View.prototype.getRotation = function() {
  return /** @type {number} */ (this.get(ViewProperty["a" /* default */].ROTATION));
};


/**
 * Return a function that returns a resolution for a value between
 * 0 and 1. Exponential scaling is assumed.
 * @param {number=} opt_power Power.
 * @return {function(number): number} Value for resolution function.
 */
View.prototype.getValueForResolutionFunction = function(opt_power) {
  const power = opt_power || 2;
  const maxResolution = this.maxResolution_;
  const minResolution = this.minResolution_;
  const max = Math.log(maxResolution / minResolution) / Math.log(power);
  return (
    /**
     * @param {number} resolution Resolution.
     * @return {number} Value.
     */
    function(resolution) {
      const value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;
      return value;
    });
};


/**
 * @return {module:ol/View~State} View state.
 */
View.prototype.getState = function() {
  const center = /** @type {module:ol/coordinate~Coordinate} */ (this.getCenter());
  const projection = this.getProjection();
  const resolution = /** @type {number} */ (this.getResolution());
  const rotation = this.getRotation();
  return (
    /** @type {module:ol/View~State} */ ({
      center: center.slice(),
      projection: projection !== undefined ? projection : null,
      resolution: resolution,
      rotation: rotation,
      zoom: this.getZoom()
    })
  );
};


/**
 * Get the current zoom level.  If you configured your view with a resolutions
 * array (this is rare), this method may return non-integer zoom levels (so
 * the zoom level is not safe to use as an index into a resolutions array).
 * @return {number|undefined} Zoom.
 * @api
 */
View.prototype.getZoom = function() {
  let zoom;
  const resolution = this.getResolution();
  if (resolution !== undefined) {
    zoom = this.getZoomForResolution(resolution);
  }
  return zoom;
};


/**
 * Get the zoom level for a resolution.
 * @param {number} resolution The resolution.
 * @return {number|undefined} The zoom level for the provided resolution.
 * @api
 */
View.prototype.getZoomForResolution = function(resolution) {
  let offset = this.minZoom_ || 0;
  let max, zoomFactor;
  if (this.resolutions_) {
    const nearest = Object(array["h" /* linearFindNearest */])(this.resolutions_, resolution, 1);
    offset = nearest;
    max = this.resolutions_[nearest];
    if (nearest == this.resolutions_.length - 1) {
      zoomFactor = 2;
    } else {
      zoomFactor = max / this.resolutions_[nearest + 1];
    }
  } else {
    max = this.maxResolution_;
    zoomFactor = this.zoomFactor_;
  }
  return offset + Math.log(max / resolution) / Math.log(zoomFactor);
};


/**
 * Get the resolution for a zoom level.
 * @param {number} zoom Zoom level.
 * @return {number} The view resolution for the provided zoom level.
 * @api
 */
View.prototype.getResolutionForZoom = function(zoom) {
  return /** @type {number} */ (this.constrainResolution(
    this.maxResolution_, zoom - this.minZoom_, 0));
};


/**
 * Fit the given geometry or extent based on the given map size and border.
 * The size is pixel dimensions of the box to fit the extent into.
 * In most cases you will want to use the map size, that is `map.getSize()`.
 * Takes care of the map angle.
 * @param {module:ol/geom/SimpleGeometry|module:ol/extent~Extent} geometryOrExtent The geometry or
 *     extent to fit the view to.
 * @param {module:ol/View~FitOptions=} opt_options Options.
 * @api
 */
View.prototype.fit = function(geometryOrExtent, opt_options) {
  const options = opt_options || {};
  let size = options.size;
  if (!size) {
    size = this.getSizeFromViewport_();
  }
  /** @type {module:ol/geom/SimpleGeometry} */
  let geometry;
  if (!(geometryOrExtent instanceof SimpleGeometry["a" /* default */])) {
    Object(asserts["a" /* assert */])(Array.isArray(geometryOrExtent),
      24); // Invalid extent or geometry provided as `geometry`
    Object(asserts["a" /* assert */])(!Object(ol_extent["H" /* isEmpty */])(geometryOrExtent),
      25); // Cannot fit empty extent provided as `geometry`
    geometry = Object(Polygon["d" /* fromExtent */])(geometryOrExtent);
  } else if (geometryOrExtent.getType() === GeometryType["a" /* default */].CIRCLE) {
    geometryOrExtent = geometryOrExtent.getExtent();
    geometry = Object(Polygon["d" /* fromExtent */])(geometryOrExtent);
    geometry.rotate(this.getRotation(), Object(ol_extent["x" /* getCenter */])(geometryOrExtent));
  } else {
    geometry = geometryOrExtent;
  }

  const padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];
  const constrainResolution = options.constrainResolution !== undefined ?
    options.constrainResolution : true;
  const nearest = options.nearest !== undefined ? options.nearest : false;
  let minResolution;
  if (options.minResolution !== undefined) {
    minResolution = options.minResolution;
  } else if (options.maxZoom !== undefined) {
    minResolution = this.constrainResolution(
      this.maxResolution_, options.maxZoom - this.minZoom_, 0);
  } else {
    minResolution = 0;
  }
  const coords = geometry.getFlatCoordinates();

  // calculate rotated extent
  const rotation = this.getRotation();
  const cosAngle = Math.cos(-rotation);
  let sinAngle = Math.sin(-rotation);
  let minRotX = +Infinity;
  let minRotY = +Infinity;
  let maxRotX = -Infinity;
  let maxRotY = -Infinity;
  const stride = geometry.getStride();
  for (let i = 0, ii = coords.length; i < ii; i += stride) {
    const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
    const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
    minRotX = Math.min(minRotX, rotX);
    minRotY = Math.min(minRotY, rotY);
    maxRotX = Math.max(maxRotX, rotX);
    maxRotY = Math.max(maxRotY, rotY);
  }

  // calculate resolution
  let resolution = this.getResolutionForExtent(
    [minRotX, minRotY, maxRotX, maxRotY],
    [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);
  resolution = isNaN(resolution) ? minResolution :
    Math.max(resolution, minResolution);
  if (constrainResolution) {
    let constrainedResolution = this.constrainResolution(resolution, 0, 0);
    if (!nearest && constrainedResolution < resolution) {
      constrainedResolution = this.constrainResolution(
        constrainedResolution, -1, 0);
    }
    resolution = constrainedResolution;
  }

  // calculate center
  sinAngle = -sinAngle; // go back to original rotation
  let centerRotX = (minRotX + maxRotX) / 2;
  let centerRotY = (minRotY + maxRotY) / 2;
  centerRotX += (padding[1] - padding[3]) / 2 * resolution;
  centerRotY += (padding[0] - padding[2]) / 2 * resolution;
  const centerX = centerRotX * cosAngle - centerRotY * sinAngle;
  const centerY = centerRotY * cosAngle + centerRotX * sinAngle;
  const center = [centerX, centerY];
  const callback = options.callback ? options.callback : functions["c" /* UNDEFINED */];

  if (options.duration !== undefined) {
    this.animate({
      resolution: resolution,
      center: center,
      duration: options.duration,
      easing: options.easing
    }, callback);
  } else {
    this.setResolution(resolution);
    this.setCenter(center);
    setTimeout(callback.bind(undefined, true), 0);
  }
};


/**
 * Center on coordinate and view position.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/size~Size} size Box pixel size.
 * @param {module:ol~Pixel} position Position on the view to center on.
 * @api
 */
View.prototype.centerOn = function(coordinate, size, position) {
  // calculate rotated position
  const rotation = this.getRotation();
  const cosAngle = Math.cos(-rotation);
  let sinAngle = Math.sin(-rotation);
  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
  const resolution = this.getResolution();
  rotX += (size[0] / 2 - position[0]) * resolution;
  rotY += (position[1] - size[1] / 2) * resolution;

  // go back to original angle
  sinAngle = -sinAngle; // go back to original rotation
  const centerX = rotX * cosAngle - rotY * sinAngle;
  const centerY = rotY * cosAngle + rotX * sinAngle;

  this.setCenter([centerX, centerY]);
};


/**
 * @return {boolean} Is defined.
 */
View.prototype.isDef = function() {
  return !!this.getCenter() && this.getResolution() !== undefined;
};


/**
 * Rotate the view around a given coordinate.
 * @param {number} rotation New rotation value for the view.
 * @param {module:ol/coordinate~Coordinate=} opt_anchor The rotation center.
 * @api
 */
View.prototype.rotate = function(rotation, opt_anchor) {
  if (opt_anchor !== undefined) {
    const center = this.calculateCenterRotate(rotation, opt_anchor);
    this.setCenter(center);
  }
  this.setRotation(rotation);
};


/**
 * Set the center of the current view.
 * @param {module:ol/coordinate~Coordinate|undefined} center The center of the view.
 * @observable
 * @api
 */
View.prototype.setCenter = function(center) {
  this.set(ViewProperty["a" /* default */].CENTER, center);
  if (this.getAnimating()) {
    this.cancelAnimations();
  }
};


/**
 * @param {module:ol/ViewHint} hint Hint.
 * @param {number} delta Delta.
 * @return {number} New value.
 */
View.prototype.setHint = function(hint, delta) {
  this.hints_[hint] += delta;
  this.changed();
  return this.hints_[hint];
};


/**
 * Set the resolution for this view.
 * @param {number|undefined} resolution The resolution of the view.
 * @observable
 * @api
 */
View.prototype.setResolution = function(resolution) {
  this.set(ViewProperty["a" /* default */].RESOLUTION, resolution);
  if (this.getAnimating()) {
    this.cancelAnimations();
  }
};


/**
 * Set the rotation for this view.
 * @param {number} rotation The rotation of the view in radians.
 * @observable
 * @api
 */
View.prototype.setRotation = function(rotation) {
  this.set(ViewProperty["a" /* default */].ROTATION, rotation);
  if (this.getAnimating()) {
    this.cancelAnimations();
  }
};


/**
 * Zoom to a specific zoom level.
 * @param {number} zoom Zoom level.
 * @api
 */
View.prototype.setZoom = function(zoom) {
  this.setResolution(this.getResolutionForZoom(zoom));
};


/**
 * @param {module:ol/View~ViewOptions} options View options.
 * @return {module:ol/centerconstraint~Type} The constraint.
 */
function createCenterConstraint(options) {
  if (options.extent !== undefined) {
    return createExtent(options.extent);
  } else {
    return none;
  }
}


/**
 * @param {module:ol/View~ViewOptions} options View options.
 * @return {{constraint: module:ol/resolutionconstraint~Type, maxResolution: number,
 *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
 */
function createResolutionConstraint(options) {
  let resolutionConstraint;
  let maxResolution;
  let minResolution;

  // TODO: move these to be ol constants
  // see https://github.com/openlayers/openlayers/issues/2076
  const defaultMaxZoom = 28;
  const defaultZoomFactor = 2;

  let minZoom = options.minZoom !== undefined ?
    options.minZoom : DEFAULT_MIN_ZOOM;

  let maxZoom = options.maxZoom !== undefined ?
    options.maxZoom : defaultMaxZoom;

  const zoomFactor = options.zoomFactor !== undefined ?
    options.zoomFactor : defaultZoomFactor;

  if (options.resolutions !== undefined) {
    const resolutions = options.resolutions;
    maxResolution = resolutions[minZoom];
    minResolution = resolutions[maxZoom] !== undefined ?
      resolutions[maxZoom] : resolutions[resolutions.length - 1];
    resolutionConstraint = createSnapToResolutions(
      resolutions);
  } else {
    // calculate the default min and max resolution
    const projection = Object(proj["e" /* createProjection */])(options.projection, 'EPSG:3857');
    const extent = projection.getExtent();
    const size = !extent ?
      // use an extent that can fit the whole world if need be
      360 * proj["a" /* METERS_PER_UNIT */][Units["b" /* default */].DEGREES] /
            projection.getMetersPerUnit() :
      Math.max(Object(ol_extent["E" /* getWidth */])(extent), Object(ol_extent["A" /* getHeight */])(extent));

    const defaultMaxResolution = size / common["b" /* DEFAULT_TILE_SIZE */] / Math.pow(
      defaultZoomFactor, DEFAULT_MIN_ZOOM);

    const defaultMinResolution = defaultMaxResolution / Math.pow(
      defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);

    // user provided maxResolution takes precedence
    maxResolution = options.maxResolution;
    if (maxResolution !== undefined) {
      minZoom = 0;
    } else {
      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
    }

    // user provided minResolution takes precedence
    minResolution = options.minResolution;
    if (minResolution === undefined) {
      if (options.maxZoom !== undefined) {
        if (options.maxResolution !== undefined) {
          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
        } else {
          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
        }
      } else {
        minResolution = defaultMinResolution;
      }
    }

    // given discrete zoom levels, minResolution may be different than provided
    maxZoom = minZoom + Math.floor(
      Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);

    resolutionConstraint = createSnapToPower(
      zoomFactor, maxResolution, maxZoom - minZoom);
  }
  return {constraint: resolutionConstraint, maxResolution: maxResolution,
    minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};
}


/**
 * @param {module:ol/View~ViewOptions} options View options.
 * @return {module:ol/rotationconstraint~Type} Rotation constraint.
 */
function createRotationConstraint(options) {
  const enableRotation = options.enableRotation !== undefined ?
    options.enableRotation : true;
  if (enableRotation) {
    const constrainRotation = options.constrainRotation;
    if (constrainRotation === undefined || constrainRotation === true) {
      return Object(rotationconstraint["b" /* createSnapToZero */])();
    } else if (constrainRotation === false) {
      return rotationconstraint["d" /* none */];
    } else if (typeof constrainRotation === 'number') {
      return Object(rotationconstraint["a" /* createSnapToN */])(constrainRotation);
    } else {
      return rotationconstraint["d" /* none */];
    }
  } else {
    return rotationconstraint["c" /* disable */];
  }
}


/**
 * Determine if an animation involves no view change.
 * @param {module:ol/View~Animation} animation The animation.
 * @return {boolean} The animation involves no view change.
 */
function isNoopAnimation(animation) {
  if (animation.sourceCenter && animation.targetCenter) {
    if (!Object(coordinate["g" /* equals */])(animation.sourceCenter, animation.targetCenter)) {
      return false;
    }
  }
  if (animation.sourceResolution !== animation.targetResolution) {
    return false;
  }
  if (animation.sourceRotation !== animation.targetRotation) {
    return false;
  }
  return true;
}

/* harmony default export */ var ol_View = __webpack_exports__["a"] = (View);


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/PluggableMap.js
var PluggableMap = __webpack_require__(166);

// EXTERNAL MODULE: ../src/ol/control/util.js
var control_util = __webpack_require__(220);

// EXTERNAL MODULE: ../src/ol/interaction.js + 17 modules
var interaction = __webpack_require__(33);

// EXTERNAL MODULE: ../src/ol/obj.js
var obj = __webpack_require__(15);

// EXTERNAL MODULE: ../src/ol/renderer/canvas/ImageLayer.js
var ImageLayer = __webpack_require__(204);

// EXTERNAL MODULE: ../src/ol/renderer/canvas/Map.js
var Map = __webpack_require__(203);

// EXTERNAL MODULE: ../src/ol/renderer/canvas/TileLayer.js
var TileLayer = __webpack_require__(129);

// EXTERNAL MODULE: ../src/ol/LayerType.js
var LayerType = __webpack_require__(60);

// EXTERNAL MODULE: ../src/ol/ViewHint.js
var ViewHint = __webpack_require__(43);

// EXTERNAL MODULE: ../src/ol/dom.js
var dom = __webpack_require__(32);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/events/EventType.js
var EventType = __webpack_require__(14);

// EXTERNAL MODULE: ../node_modules/rbush/index.js
var rbush = __webpack_require__(192);
var rbush_default = /*#__PURE__*/__webpack_require__.n(rbush);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/render/EventType.js
var render_EventType = __webpack_require__(78);

// EXTERNAL MODULE: ../src/ol/render/canvas.js
var render_canvas = __webpack_require__(26);

// EXTERNAL MODULE: ../src/ol/array.js
var array = __webpack_require__(16);

// EXTERNAL MODULE: ../src/ol/geom/flat/transform.js
var flat_transform = __webpack_require__(61);

// EXTERNAL MODULE: ../src/ol/render/ReplayGroup.js
var ReplayGroup = __webpack_require__(193);

// EXTERNAL MODULE: ../src/ol/render/ReplayType.js
var ReplayType = __webpack_require__(38);

// EXTERNAL MODULE: ../src/ol/functions.js
var functions = __webpack_require__(29);

// EXTERNAL MODULE: ../src/ol/colorlike.js
var colorlike = __webpack_require__(99);

// EXTERNAL MODULE: ../src/ol/extent/Relationship.js
var Relationship = __webpack_require__(86);

// EXTERNAL MODULE: ../src/ol/geom/GeometryType.js
var GeometryType = __webpack_require__(9);

// EXTERNAL MODULE: ../src/ol/geom/flat/inflate.js
var inflate = __webpack_require__(91);

// EXTERNAL MODULE: ../src/ol/geom/flat/length.js
var flat_length = __webpack_require__(230);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// CONCATENATED MODULE: ../src/ol/geom/flat/textpath.js
/**
 * @module ol/geom/flat/textpath
 */



/**
 * @param {Array.<number>} flatCoordinates Path to put text on.
 * @param {number} offset Start offset of the `flatCoordinates`.
 * @param {number} end End offset of the `flatCoordinates`.
 * @param {number} stride Stride.
 * @param {string} text Text to place on the path.
 * @param {function(string):number} measure Measure function returning the
 * width of the character passed as 1st argument.
 * @param {number} startM m along the path where the text starts.
 * @param {number} maxAngle Max angle between adjacent chars in radians.
 * @return {Array.<Array.<*>>} The result array of null if `maxAngle` was
 * exceeded. Entries of the array are x, y, anchorX, angle, chunk.
 */
function drawTextOnPath(
  flatCoordinates, offset, end, stride, text, measure, startM, maxAngle) {
  const result = [];

  // Keep text upright
  const reverse = flatCoordinates[offset] > flatCoordinates[end - stride];

  const numChars = text.length;

  let x1 = flatCoordinates[offset];
  let y1 = flatCoordinates[offset + 1];
  offset += stride;
  let x2 = flatCoordinates[offset];
  let y2 = flatCoordinates[offset + 1];
  let segmentM = 0;
  let segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));

  let chunk = '';
  let chunkLength = 0;
  let data, index, previousAngle;
  for (let i = 0; i < numChars; ++i) {
    index = reverse ? numChars - i - 1 : i;
    const char = text.charAt(index);
    chunk = reverse ? char + chunk : chunk + char;
    const charLength = measure(chunk) - chunkLength;
    chunkLength += charLength;
    const charM = startM + charLength / 2;
    while (offset < end - stride && segmentM + segmentLength < charM) {
      x1 = x2;
      y1 = y2;
      offset += stride;
      x2 = flatCoordinates[offset];
      y2 = flatCoordinates[offset + 1];
      segmentM += segmentLength;
      segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    }
    const segmentPos = charM - segmentM;
    let angle = Math.atan2(y2 - y1, x2 - x1);
    if (reverse) {
      angle += angle > 0 ? -Math.PI : Math.PI;
    }
    if (previousAngle !== undefined) {
      let delta = angle - previousAngle;
      delta += (delta > Math.PI) ? -2 * Math.PI : (delta < -Math.PI) ? 2 * Math.PI : 0;
      if (Math.abs(delta) > maxAngle) {
        return null;
      }
    }
    const interpolate = segmentPos / segmentLength;
    const x = Object(math["c" /* lerp */])(x1, x2, interpolate);
    const y = Object(math["c" /* lerp */])(y1, y2, interpolate);
    if (previousAngle == angle) {
      if (reverse) {
        data[0] = x;
        data[1] = y;
        data[2] = charLength / 2;
      }
      data[4] = chunk;
    } else {
      chunk = char;
      chunkLength = charLength;
      data = [x, y, charLength / 2, angle, chunk];
      if (reverse) {
        result.unshift(data);
      } else {
        result.push(data);
      }
      previousAngle = angle;
    }
    startM += charLength;
  }
  return result;
}

// EXTERNAL MODULE: ../src/ol/has.js
var has = __webpack_require__(48);

// EXTERNAL MODULE: ../src/ol/render/VectorContext.js
var VectorContext = __webpack_require__(126);

// CONCATENATED MODULE: ../src/ol/render/canvas/Instruction.js
/**
 * @module ol/render/canvas/Instruction
 */

/**
 * @enum {number}
 */
const Instruction = {
  BEGIN_GEOMETRY: 0,
  BEGIN_PATH: 1,
  CIRCLE: 2,
  CLOSE_PATH: 3,
  CUSTOM: 4,
  DRAW_CHARS: 5,
  DRAW_IMAGE: 6,
  END_GEOMETRY: 7,
  FILL: 8,
  MOVE_TO_LINE_TO: 9,
  SET_FILL_STYLE: 10,
  SET_STROKE_STYLE: 11,
  STROKE: 12
};


/**
 * @type {Array.<Instruction>}
 */
const Instruction_fillInstruction = [Instruction.FILL];


/**
 * @type {Array.<Instruction>}
 */
const Instruction_strokeInstruction = [Instruction.STROKE];


/**
 * @type {Array.<Instruction>}
 */
const beginPathInstruction = [Instruction.BEGIN_PATH];


/**
 * @type {Array.<Instruction>}
 */
const closePathInstruction = [Instruction.CLOSE_PATH];


/* harmony default export */ var canvas_Instruction = (Instruction);

// EXTERNAL MODULE: ../src/ol/render/replay.js
var render_replay = __webpack_require__(79);

// EXTERNAL MODULE: ../src/ol/transform.js
var ol_transform = __webpack_require__(18);

// CONCATENATED MODULE: ../src/ol/render/canvas/Replay.js
/**
 * @module ol/render/canvas/Replay
 */



















/**
 * @constructor
 * @extends {module:ol/render/VectorContext}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Maximum extent.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {boolean} overlaps The replay can have overlapping geometries.
 * @param {?} declutterTree Declutter tree.
 * @struct
 */
const CanvasReplay = function(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
  VectorContext["a" /* default */].call(this);

  /**
   * @type {?}
   */
  this.declutterTree = declutterTree;

  /**
   * @protected
   * @type {number}
   */
  this.tolerance = tolerance;

  /**
   * @protected
   * @const
   * @type {module:ol/extent~Extent}
   */
  this.maxExtent = maxExtent;

  /**
   * @protected
   * @type {boolean}
   */
  this.overlaps = overlaps;

  /**
   * @protected
   * @type {number}
   */
  this.pixelRatio = pixelRatio;

  /**
   * @protected
   * @type {number}
   */
  this.maxLineWidth = 0;

  /**
   * @protected
   * @const
   * @type {number}
   */
  this.resolution = resolution;

  /**
   * @private
   * @type {boolean}
   */
  this.alignFill_;

  /**
   * @private
   * @type {Array.<*>}
   */
  this.beginGeometryInstruction1_ = null;

  /**
   * @private
   * @type {Array.<*>}
   */
  this.beginGeometryInstruction2_ = null;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.bufferedMaxExtent_ = null;

  /**
   * @protected
   * @type {Array.<*>}
   */
  this.instructions = [];

  /**
   * @protected
   * @type {Array.<number>}
   */
  this.coordinates = [];

  /**
   * @private
   * @type {!Object.<number,module:ol/coordinate~Coordinate|Array.<module:ol/coordinate~Coordinate>|Array.<Array.<module:ol/coordinate~Coordinate>>>}
   */
  this.coordinateCache_ = {};

  /**
   * @private
   * @type {!module:ol/transform~Transform}
   */
  this.renderedTransform_ = Object(ol_transform["c" /* create */])();

  /**
   * @protected
   * @type {Array.<*>}
   */
  this.hitDetectionInstructions = [];

  /**
   * @private
   * @type {Array.<number>}
   */
  this.pixelCoordinates_ = null;

  /**
   * @protected
   * @type {module:ol/render/canvas~FillStrokeState}
   */
  this.state = /** @type {module:ol/render/canvas~FillStrokeState} */ ({});

  /**
   * @private
   * @type {number}
   */
  this.viewRotation_ = 0;

};

Object(util["c" /* inherits */])(CanvasReplay, VectorContext["a" /* default */]);


/**
 * @type {module:ol/extent~Extent}
 */
const tmpExtent = Object(ol_extent["j" /* createEmpty */])();


/**
 * @type {!module:ol/transform~Transform}
 */
const tmpTransform = Object(ol_transform["c" /* create */])();

/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/coordinate~Coordinate} p1 1st point of the background box.
 * @param {module:ol/coordinate~Coordinate} p2 2nd point of the background box.
 * @param {module:ol/coordinate~Coordinate} p3 3rd point of the background box.
 * @param {module:ol/coordinate~Coordinate} p4 4th point of the background box.
 * @param {Array.<*>} fillInstruction Fill instruction.
 * @param {Array.<*>} strokeInstruction Stroke instruction.
 */
CanvasReplay.prototype.replayTextBackground_ = function(context, p1, p2, p3, p4,
  fillInstruction, strokeInstruction) {
  context.beginPath();
  context.moveTo.apply(context, p1);
  context.lineTo.apply(context, p2);
  context.lineTo.apply(context, p3);
  context.lineTo.apply(context, p4);
  context.lineTo.apply(context, p1);
  if (fillInstruction) {
    this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);
    this.fill_(context);
  }
  if (strokeInstruction) {
    this.setStrokeStyle_(context, /** @type {Array.<*>} */ (strokeInstruction));
    context.stroke();
  }
};


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
 * @param {number} anchorX Anchor X.
 * @param {number} anchorY Anchor Y.
 * @param {module:ol/render/canvas~DeclutterGroup} declutterGroup Declutter group.
 * @param {number} height Height.
 * @param {number} opacity Opacity.
 * @param {number} originX Origin X.
 * @param {number} originY Origin Y.
 * @param {number} rotation Rotation.
 * @param {number} scale Scale.
 * @param {boolean} snapToPixel Snap to pixel.
 * @param {number} width Width.
 * @param {Array.<number>} padding Padding.
 * @param {Array.<*>} fillInstruction Fill instruction.
 * @param {Array.<*>} strokeInstruction Stroke instruction.
 */
CanvasReplay.prototype.replayImage_ = function(context, x, y, image,
  anchorX, anchorY, declutterGroup, height, opacity, originX, originY,
  rotation, scale, snapToPixel, width, padding, fillInstruction, strokeInstruction) {
  const fillStroke = fillInstruction || strokeInstruction;
  anchorX *= scale;
  anchorY *= scale;
  x -= anchorX;
  y -= anchorY;

  const w = (width + originX > image.width) ? image.width - originX : width;
  const h = (height + originY > image.height) ? image.height - originY : height;
  const boxW = padding[3] + w * scale + padding[1];
  const boxH = padding[0] + h * scale + padding[2];
  const boxX = x - padding[3];
  const boxY = y - padding[0];

  /** @type {module:ol/coordinate~Coordinate} */
  let p1;
  /** @type {module:ol/coordinate~Coordinate} */
  let p2;
  /** @type {module:ol/coordinate~Coordinate} */
  let p3;
  /** @type {module:ol/coordinate~Coordinate} */
  let p4;
  if (fillStroke || rotation !== 0) {
    p1 = [boxX, boxY];
    p2 = [boxX + boxW, boxY];
    p3 = [boxX + boxW, boxY + boxH];
    p4 = [boxX, boxY + boxH];
  }

  let transform = null;
  if (rotation !== 0) {
    const centerX = x + anchorX;
    const centerY = y + anchorY;
    transform = Object(ol_transform["b" /* compose */])(tmpTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);

    Object(ol_extent["l" /* createOrUpdateEmpty */])(tmpExtent);
    Object(ol_extent["r" /* extendCoordinate */])(tmpExtent, Object(ol_transform["a" /* apply */])(tmpTransform, p1));
    Object(ol_extent["r" /* extendCoordinate */])(tmpExtent, Object(ol_transform["a" /* apply */])(tmpTransform, p2));
    Object(ol_extent["r" /* extendCoordinate */])(tmpExtent, Object(ol_transform["a" /* apply */])(tmpTransform, p3));
    Object(ol_extent["r" /* extendCoordinate */])(tmpExtent, Object(ol_transform["a" /* apply */])(tmpTransform, p4));
  } else {
    Object(ol_extent["k" /* createOrUpdate */])(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);
  }
  const canvas = context.canvas;
  const strokePadding = strokeInstruction ? (strokeInstruction[2] * scale / 2) : 0;
  const intersects =
      tmpExtent[0] - strokePadding <= canvas.width && tmpExtent[2] + strokePadding >= 0 &&
      tmpExtent[1] - strokePadding <= canvas.height && tmpExtent[3] + strokePadding >= 0;

  if (snapToPixel) {
    x = Math.round(x);
    y = Math.round(y);
  }

  if (declutterGroup) {
    if (!intersects && declutterGroup[4] == 1) {
      return;
    }
    Object(ol_extent["q" /* extend */])(declutterGroup, tmpExtent);
    const declutterArgs = intersects ?
      [context, transform ? transform.slice(0) : null, opacity, image, originX, originY, w, h, x, y, scale] :
      null;
    if (declutterArgs && fillStroke) {
      declutterArgs.push(fillInstruction, strokeInstruction, p1, p2, p3, p4);
    }
    declutterGroup.push(declutterArgs);
  } else if (intersects) {
    if (fillStroke) {
      this.replayTextBackground_(context, p1, p2, p3, p4,
        /** @type {Array.<*>} */ (fillInstruction),
        /** @type {Array.<*>} */ (strokeInstruction));
    }
    Object(render_canvas["n" /* drawImage */])(context, transform, opacity, image, originX, originY, w, h, x, y, scale);
  }
};


/**
 * @protected
 * @param {Array.<number>} dashArray Dash array.
 * @return {Array.<number>} Dash array with pixel ratio applied
 */
CanvasReplay.prototype.applyPixelRatio = function(dashArray) {
  const pixelRatio = this.pixelRatio;
  return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {
    return dash * pixelRatio;
  });
};


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {boolean} closed Last input coordinate equals first.
 * @param {boolean} skipFirst Skip first coordinate.
 * @protected
 * @return {number} My end.
 */
CanvasReplay.prototype.appendFlatCoordinates = function(flatCoordinates, offset, end, stride, closed, skipFirst) {

  let myEnd = this.coordinates.length;
  const extent = this.getBufferedMaxExtent();
  if (skipFirst) {
    offset += stride;
  }
  const lastCoord = [flatCoordinates[offset], flatCoordinates[offset + 1]];
  const nextCoord = [NaN, NaN];
  let skipped = true;

  let i, lastRel, nextRel;
  for (i = offset + stride; i < end; i += stride) {
    nextCoord[0] = flatCoordinates[i];
    nextCoord[1] = flatCoordinates[i + 1];
    nextRel = Object(ol_extent["i" /* coordinateRelationship */])(extent, nextCoord);
    if (nextRel !== lastRel) {
      if (skipped) {
        this.coordinates[myEnd++] = lastCoord[0];
        this.coordinates[myEnd++] = lastCoord[1];
      }
      this.coordinates[myEnd++] = nextCoord[0];
      this.coordinates[myEnd++] = nextCoord[1];
      skipped = false;
    } else if (nextRel === Relationship["a" /* default */].INTERSECTING) {
      this.coordinates[myEnd++] = nextCoord[0];
      this.coordinates[myEnd++] = nextCoord[1];
      skipped = false;
    } else {
      skipped = true;
    }
    lastCoord[0] = nextCoord[0];
    lastCoord[1] = nextCoord[1];
    lastRel = nextRel;
  }

  // Last coordinate equals first or only one point to append:
  if ((closed && skipped) || i === offset + stride) {
    this.coordinates[myEnd++] = lastCoord[0];
    this.coordinates[myEnd++] = lastCoord[1];
  }
  return myEnd;
};


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {Array.<number>} replayEnds Replay ends.
 * @return {number} Offset.
 */
CanvasReplay.prototype.drawCustomCoordinates_ = function(flatCoordinates, offset, ends, stride, replayEnds) {
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    const replayEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
    replayEnds.push(replayEnd);
    offset = end;
  }
  return offset;
};


/**
 * @inheritDoc.
 */
CanvasReplay.prototype.drawCustom = function(geometry, feature, renderer) {
  this.beginGeometry(geometry, feature);
  const type = geometry.getType();
  const stride = geometry.getStride();
  const replayBegin = this.coordinates.length;
  let flatCoordinates, replayEnd, replayEnds, replayEndss;
  let offset;
  if (type == GeometryType["a" /* default */].MULTI_POLYGON) {
    geometry = /** @type {module:ol/geom/MultiPolygon} */ (geometry);
    flatCoordinates = geometry.getOrientedFlatCoordinates();
    replayEndss = [];
    const endss = geometry.getEndss();
    offset = 0;
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const myEnds = [];
      offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
      replayEndss.push(myEnds);
    }
    this.instructions.push([canvas_Instruction.CUSTOM,
      replayBegin, replayEndss, geometry, renderer, inflate["c" /* inflateMultiCoordinatesArray */]]);
  } else if (type == GeometryType["a" /* default */].POLYGON || type == GeometryType["a" /* default */].MULTI_LINE_STRING) {
    replayEnds = [];
    flatCoordinates = (type == GeometryType["a" /* default */].POLYGON) ?
      /** @type {module:ol/geom/Polygon} */ (geometry).getOrientedFlatCoordinates() :
      geometry.getFlatCoordinates();
    offset = this.drawCustomCoordinates_(flatCoordinates, 0,
      /** @type {module:ol/geom/Polygon|module:ol/geom/MultiLineString} */ (geometry).getEnds(),
      stride, replayEnds);
    this.instructions.push([canvas_Instruction.CUSTOM,
      replayBegin, replayEnds, geometry, renderer, inflate["b" /* inflateCoordinatesArray */]]);
  } else if (type == GeometryType["a" /* default */].LINE_STRING || type == GeometryType["a" /* default */].MULTI_POINT) {
    flatCoordinates = geometry.getFlatCoordinates();
    replayEnd = this.appendFlatCoordinates(
      flatCoordinates, 0, flatCoordinates.length, stride, false, false);
    this.instructions.push([canvas_Instruction.CUSTOM,
      replayBegin, replayEnd, geometry, renderer, inflate["a" /* inflateCoordinates */]]);
  } else if (type == GeometryType["a" /* default */].POINT) {
    flatCoordinates = geometry.getFlatCoordinates();
    this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
    replayEnd = this.coordinates.length;
    this.instructions.push([canvas_Instruction.CUSTOM,
      replayBegin, replayEnd, geometry, renderer]);
  }
  this.endGeometry(geometry, feature);
};


/**
 * @protected
 * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
CanvasReplay.prototype.beginGeometry = function(geometry, feature) {
  this.beginGeometryInstruction1_ = [canvas_Instruction.BEGIN_GEOMETRY, feature, 0];
  this.instructions.push(this.beginGeometryInstruction1_);
  this.beginGeometryInstruction2_ = [canvas_Instruction.BEGIN_GEOMETRY, feature, 0];
  this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
};


/**
 * @private
 * @param {CanvasRenderingContext2D} context Context.
 */
CanvasReplay.prototype.fill_ = function(context) {
  if (this.alignFill_) {
    const origin = Object(ol_transform["a" /* apply */])(this.renderedTransform_, [0, 0]);
    const repeatSize = 512 * this.pixelRatio;
    context.translate(origin[0] % repeatSize, origin[1] % repeatSize);
    context.rotate(this.viewRotation_);
  }
  context.fill();
  if (this.alignFill_) {
    context.setTransform.apply(context, render_canvas["r" /* resetTransform */]);
  }
};


/**
 * @private
 * @param {CanvasRenderingContext2D} context Context.
 * @param {Array.<*>} instruction Instruction.
 */
CanvasReplay.prototype.setStrokeStyle_ = function(context, instruction) {
  context.strokeStyle = /** @type {module:ol/colorlike~ColorLike} */ (instruction[1]);
  context.lineWidth = /** @type {number} */ (instruction[2]);
  context.lineCap = /** @type {string} */ (instruction[3]);
  context.lineJoin = /** @type {string} */ (instruction[4]);
  context.miterLimit = /** @type {number} */ (instruction[5]);
  if (has["a" /* CANVAS_LINE_DASH */]) {
    context.lineDashOffset = /** @type {number} */ (instruction[7]);
    context.setLineDash(/** @type {Array.<number>} */ (instruction[6]));
  }
};


/**
 * @param {module:ol/render/canvas~DeclutterGroup} declutterGroup Declutter group.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
CanvasReplay.prototype.renderDeclutter_ = function(declutterGroup, feature) {
  if (declutterGroup && declutterGroup.length > 5) {
    const groupCount = declutterGroup[4];
    if (groupCount == 1 || groupCount == declutterGroup.length - 5) {
      /** @type {module:ol/structs/RBush~Entry} */
      const box = {
        minX: /** @type {number} */ (declutterGroup[0]),
        minY: /** @type {number} */ (declutterGroup[1]),
        maxX: /** @type {number} */ (declutterGroup[2]),
        maxY: /** @type {number} */ (declutterGroup[3]),
        value: feature
      };
      if (!this.declutterTree.collides(box)) {
        this.declutterTree.insert(box);
        for (let j = 5, jj = declutterGroup.length; j < jj; ++j) {
          const declutterData = /** @type {Array} */ (declutterGroup[j]);
          if (declutterData) {
            if (declutterData.length > 11) {
              this.replayTextBackground_(declutterData[0],
                declutterData[13], declutterData[14], declutterData[15], declutterData[16],
                declutterData[11], declutterData[12]);
            }
            render_canvas["n" /* drawImage */].apply(undefined, declutterData);
          }
        }
      }
      declutterGroup.length = 5;
      Object(ol_extent["l" /* createOrUpdateEmpty */])(declutterGroup);
    }
  }
};


/**
 * @private
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/transform~Transform} transform Transform.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features
 *     to skip.
 * @param {Array.<*>} instructions Instructions array.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T|undefined}
 *     featureCallback Feature callback.
 * @param {module:ol/extent~Extent=} opt_hitExtent Only check features that intersect this
 *     extent.
 * @return {T|undefined} Callback result.
 * @template T
 */
CanvasReplay.prototype.replay_ = function(
  context, transform, skippedFeaturesHash,
  instructions, featureCallback, opt_hitExtent) {
  /** @type {Array.<number>} */
  let pixelCoordinates;
  if (this.pixelCoordinates_ && Object(array["b" /* equals */])(transform, this.renderedTransform_)) {
    pixelCoordinates = this.pixelCoordinates_;
  } else {
    if (!this.pixelCoordinates_) {
      this.pixelCoordinates_ = [];
    }
    pixelCoordinates = Object(flat_transform["c" /* transform2D */])(
      this.coordinates, 0, this.coordinates.length, 2,
      transform, this.pixelCoordinates_);
    Object(ol_transform["i" /* setFromArray */])(this.renderedTransform_, transform);
  }
  const skipFeatures = !Object(obj["d" /* isEmpty */])(skippedFeaturesHash);
  let i = 0; // instruction index
  const ii = instructions.length; // end of instructions
  let d = 0; // data index
  let dd; // end of per-instruction data
  let anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, image;
  let pendingFill = 0;
  let pendingStroke = 0;
  let lastFillInstruction = null;
  let lastStrokeInstruction = null;
  const coordinateCache = this.coordinateCache_;
  const viewRotation = this.viewRotation_;

  const state = /** @type {module:ol/render~State} */ ({
    context: context,
    pixelRatio: this.pixelRatio,
    resolution: this.resolution,
    rotation: viewRotation
  });

  // When the batch size gets too big, performance decreases. 200 is a good
  // balance between batch size and number of fill/stroke instructions.
  const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
  let /** @type {module:ol/Feature|module:ol/render/Feature} */ feature;
  let x, y;
  while (i < ii) {
    const instruction = instructions[i];
    const type = /** @type {module:ol/render/canvas/Instruction} */ (instruction[0]);
    switch (type) {
      case canvas_Instruction.BEGIN_GEOMETRY:
        feature = /** @type {module:ol/Feature|module:ol/render/Feature} */ (instruction[1]);
        if ((skipFeatures &&
            skippedFeaturesHash[Object(util["b" /* getUid */])(feature).toString()]) ||
            !feature.getGeometry()) {
          i = /** @type {number} */ (instruction[2]);
        } else if (opt_hitExtent !== undefined && !Object(ol_extent["F" /* intersects */])(
          opt_hitExtent, feature.getGeometry().getExtent())) {
          i = /** @type {number} */ (instruction[2]) + 1;
        } else {
          ++i;
        }
        break;
      case canvas_Instruction.BEGIN_PATH:
        if (pendingFill > batchSize) {
          this.fill_(context);
          pendingFill = 0;
        }
        if (pendingStroke > batchSize) {
          context.stroke();
          pendingStroke = 0;
        }
        if (!pendingFill && !pendingStroke) {
          context.beginPath();
          prevX = prevY = NaN;
        }
        ++i;
        break;
      case canvas_Instruction.CIRCLE:
        d = /** @type {number} */ (instruction[1]);
        const x1 = pixelCoordinates[d];
        const y1 = pixelCoordinates[d + 1];
        const x2 = pixelCoordinates[d + 2];
        const y2 = pixelCoordinates[d + 3];
        const dx = x2 - x1;
        const dy = y2 - y1;
        const r = Math.sqrt(dx * dx + dy * dy);
        context.moveTo(x1 + r, y1);
        context.arc(x1, y1, r, 0, 2 * Math.PI, true);
        ++i;
        break;
      case canvas_Instruction.CLOSE_PATH:
        context.closePath();
        ++i;
        break;
      case canvas_Instruction.CUSTOM:
        d = /** @type {number} */ (instruction[1]);
        dd = instruction[2];
        const geometry = /** @type {module:ol/geom/SimpleGeometry} */ (instruction[3]);
        const renderer = instruction[4];
        const fn = instruction.length == 6 ? instruction[5] : undefined;
        state.geometry = geometry;
        state.feature = feature;
        if (!(i in coordinateCache)) {
          coordinateCache[i] = [];
        }
        const coords = coordinateCache[i];
        if (fn) {
          fn(pixelCoordinates, d, dd, 2, coords);
        } else {
          coords[0] = pixelCoordinates[d];
          coords[1] = pixelCoordinates[d + 1];
          coords.length = 2;
        }
        renderer(coords, state);
        ++i;
        break;
      case canvas_Instruction.DRAW_IMAGE:
        d = /** @type {number} */ (instruction[1]);
        dd = /** @type {number} */ (instruction[2]);
        image =  /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */
            (instruction[3]);
        // Remaining arguments in DRAW_IMAGE are in alphabetical order
        anchorX = /** @type {number} */ (instruction[4]);
        anchorY = /** @type {number} */ (instruction[5]);
        declutterGroup = featureCallback ? null : /** @type {module:ol/render/canvas~DeclutterGroup} */ (instruction[6]);
        const height = /** @type {number} */ (instruction[7]);
        const opacity = /** @type {number} */ (instruction[8]);
        const originX = /** @type {number} */ (instruction[9]);
        const originY = /** @type {number} */ (instruction[10]);
        const rotateWithView = /** @type {boolean} */ (instruction[11]);
        let rotation = /** @type {number} */ (instruction[12]);
        const scale = /** @type {number} */ (instruction[13]);
        const snapToPixel = /** @type {boolean} */ (instruction[14]);
        const width = /** @type {number} */ (instruction[15]);

        let padding, backgroundFill, backgroundStroke;
        if (instruction.length > 16) {
          padding = /** @type {Array.<number>} */ (instruction[16]);
          backgroundFill = /** @type {boolean} */ (instruction[17]);
          backgroundStroke = /** @type {boolean} */ (instruction[18]);
        } else {
          padding = render_canvas["j" /* defaultPadding */];
          backgroundFill = backgroundStroke = false;
        }

        if (rotateWithView) {
          rotation += viewRotation;
        }
        for (; d < dd; d += 2) {
          this.replayImage_(context,
            pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY,
            declutterGroup, height, opacity, originX, originY, rotation, scale,
            snapToPixel, width, padding,
            backgroundFill ? /** @type {Array.<*>} */ (lastFillInstruction) : null,
            backgroundStroke ? /** @type {Array.<*>} */ (lastStrokeInstruction) : null);
        }
        this.renderDeclutter_(declutterGroup, feature);
        ++i;
        break;
      case canvas_Instruction.DRAW_CHARS:
        const begin = /** @type {number} */ (instruction[1]);
        const end = /** @type {number} */ (instruction[2]);
        const baseline = /** @type {number} */ (instruction[3]);
        declutterGroup = featureCallback ? null : /** @type {module:ol/render/canvas~DeclutterGroup} */ (instruction[4]);
        const overflow = /** @type {number} */ (instruction[5]);
        const fillKey = /** @type {string} */ (instruction[6]);
        const maxAngle = /** @type {number} */ (instruction[7]);
        const measure = /** @type {function(string):number} */ (instruction[8]);
        const offsetY = /** @type {number} */ (instruction[9]);
        const strokeKey = /** @type {string} */ (instruction[10]);
        const strokeWidth =  /** @type {number} */ (instruction[11]);
        const text = /** @type {string} */ (instruction[12]);
        const textKey = /** @type {string} */ (instruction[13]);
        const textScale = /** @type {number} */ (instruction[14]);

        const pathLength = Object(flat_length["a" /* lineStringLength */])(pixelCoordinates, begin, end, 2);
        const textLength = measure(text);
        if (overflow || textLength <= pathLength) {
          const textAlign = /** @type {module:ol~render} */ (this).textStates[textKey].textAlign;
          const startM = (pathLength - textLength) * render_replay["b" /* TEXT_ALIGN */][textAlign];
          const parts = drawTextOnPath(
            pixelCoordinates, begin, end, 2, text, measure, startM, maxAngle);
          if (parts) {
            let c, cc, chars, label, part;
            if (strokeKey) {
              for (c = 0, cc = parts.length; c < cc; ++c) {
                part = parts[c]; // x, y, anchorX, rotation, chunk
                chars = /** @type {string} */ (part[4]);
                label = /** @type {module:ol~render} */ (this).getImage(chars, textKey, '', strokeKey);
                anchorX = /** @type {number} */ (part[2]) + strokeWidth;
                anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;
                this.replayImage_(context,
                  /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,
                  anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,
                  /** @type {number} */ (part[3]), textScale, false, label.width,
                  render_canvas["j" /* defaultPadding */], null, null);
              }
            }
            if (fillKey) {
              for (c = 0, cc = parts.length; c < cc; ++c) {
                part = parts[c]; // x, y, anchorX, rotation, chunk
                chars = /** @type {string} */ (part[4]);
                label = /** @type {module:ol~render} */ (this).getImage(chars, textKey, fillKey, '');
                anchorX = /** @type {number} */ (part[2]);
                anchorY = baseline * label.height - offsetY;
                this.replayImage_(context,
                  /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,
                  anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,
                  /** @type {number} */ (part[3]), textScale, false, label.width,
                  render_canvas["j" /* defaultPadding */], null, null);
              }
            }
          }
        }
        this.renderDeclutter_(declutterGroup, feature);
        ++i;
        break;
      case canvas_Instruction.END_GEOMETRY:
        if (featureCallback !== undefined) {
          feature = /** @type {module:ol/Feature|module:ol/render/Feature} */ (instruction[1]);
          const result = featureCallback(feature);
          if (result) {
            return result;
          }
        }
        ++i;
        break;
      case canvas_Instruction.FILL:
        if (batchSize) {
          pendingFill++;
        } else {
          this.fill_(context);
        }
        ++i;
        break;
      case canvas_Instruction.MOVE_TO_LINE_TO:
        d = /** @type {number} */ (instruction[1]);
        dd = /** @type {number} */ (instruction[2]);
        x = pixelCoordinates[d];
        y = pixelCoordinates[d + 1];
        roundX = (x + 0.5) | 0;
        roundY = (y + 0.5) | 0;
        if (roundX !== prevX || roundY !== prevY) {
          context.moveTo(x, y);
          prevX = roundX;
          prevY = roundY;
        }
        for (d += 2; d < dd; d += 2) {
          x = pixelCoordinates[d];
          y = pixelCoordinates[d + 1];
          roundX = (x + 0.5) | 0;
          roundY = (y + 0.5) | 0;
          if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
            context.lineTo(x, y);
            prevX = roundX;
            prevY = roundY;
          }
        }
        ++i;
        break;
      case canvas_Instruction.SET_FILL_STYLE:
        lastFillInstruction = instruction;
        this.alignFill_ = instruction[2];

        if (pendingFill) {
          this.fill_(context);
          pendingFill = 0;
          if (pendingStroke) {
            context.stroke();
            pendingStroke = 0;
          }
        }

        context.fillStyle = /** @type {module:ol/colorlike~ColorLike} */ (instruction[1]);
        ++i;
        break;
      case canvas_Instruction.SET_STROKE_STYLE:
        lastStrokeInstruction = instruction;
        if (pendingStroke) {
          context.stroke();
          pendingStroke = 0;
        }
        this.setStrokeStyle_(context, /** @type {Array.<*>} */ (instruction));
        ++i;
        break;
      case canvas_Instruction.STROKE:
        if (batchSize) {
          pendingStroke++;
        } else {
          context.stroke();
        }
        ++i;
        break;
      default:
        ++i; // consume the instruction anyway, to avoid an infinite loop
        break;
    }
  }
  if (pendingFill) {
    this.fill_(context);
  }
  if (pendingStroke) {
    context.stroke();
  }
  return undefined;
};


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/transform~Transform} transform Transform.
 * @param {number} viewRotation View rotation.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features
 *     to skip.
 */
CanvasReplay.prototype.replay = function(
  context, transform, viewRotation, skippedFeaturesHash) {
  this.viewRotation_ = viewRotation;
  this.replay_(context, transform,
    skippedFeaturesHash, this.instructions, undefined, undefined);
};


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/transform~Transform} transform Transform.
 * @param {number} viewRotation View rotation.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features
 *     to skip.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T=} opt_featureCallback
 *     Feature callback.
 * @param {module:ol/extent~Extent=} opt_hitExtent Only check features that intersect this
 *     extent.
 * @return {T|undefined} Callback result.
 * @template T
 */
CanvasReplay.prototype.replayHitDetection = function(
  context, transform, viewRotation, skippedFeaturesHash,
  opt_featureCallback, opt_hitExtent) {
  this.viewRotation_ = viewRotation;
  return this.replay_(context, transform, skippedFeaturesHash,
    this.hitDetectionInstructions, opt_featureCallback, opt_hitExtent);
};


/**
 * Reverse the hit detection instructions.
 */
CanvasReplay.prototype.reverseHitDetectionInstructions = function() {
  const hitDetectionInstructions = this.hitDetectionInstructions;
  // step 1 - reverse array
  hitDetectionInstructions.reverse();
  // step 2 - reverse instructions within geometry blocks
  let i;
  const n = hitDetectionInstructions.length;
  let instruction;
  let type;
  let begin = -1;
  for (i = 0; i < n; ++i) {
    instruction = hitDetectionInstructions[i];
    type = /** @type {module:ol/render/canvas/Instruction} */ (instruction[0]);
    if (type == canvas_Instruction.END_GEOMETRY) {
      begin = i;
    } else if (type == canvas_Instruction.BEGIN_GEOMETRY) {
      instruction[2] = i;
      Object(array["k" /* reverseSubArray */])(this.hitDetectionInstructions, begin, i);
      begin = -1;
    }
  }
};


/**
 * @inheritDoc
 */
CanvasReplay.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {
  const state = this.state;
  if (fillStyle) {
    const fillStyleColor = fillStyle.getColor();
    state.fillStyle = Object(colorlike["a" /* asColorLike */])(fillStyleColor ?
      fillStyleColor : render_canvas["b" /* defaultFillStyle */]);
  } else {
    state.fillStyle = undefined;
  }
  if (strokeStyle) {
    const strokeStyleColor = strokeStyle.getColor();
    state.strokeStyle = Object(colorlike["a" /* asColorLike */])(strokeStyleColor ?
      strokeStyleColor : render_canvas["k" /* defaultStrokeStyle */]);
    const strokeStyleLineCap = strokeStyle.getLineCap();
    state.lineCap = strokeStyleLineCap !== undefined ?
      strokeStyleLineCap : render_canvas["d" /* defaultLineCap */];
    const strokeStyleLineDash = strokeStyle.getLineDash();
    state.lineDash = strokeStyleLineDash ?
      strokeStyleLineDash.slice() : render_canvas["e" /* defaultLineDash */];
    const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
    state.lineDashOffset = strokeStyleLineDashOffset ?
      strokeStyleLineDashOffset : render_canvas["f" /* defaultLineDashOffset */];
    const strokeStyleLineJoin = strokeStyle.getLineJoin();
    state.lineJoin = strokeStyleLineJoin !== undefined ?
      strokeStyleLineJoin : render_canvas["g" /* defaultLineJoin */];
    const strokeStyleWidth = strokeStyle.getWidth();
    state.lineWidth = strokeStyleWidth !== undefined ?
      strokeStyleWidth : render_canvas["h" /* defaultLineWidth */];
    const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
    state.miterLimit = strokeStyleMiterLimit !== undefined ?
      strokeStyleMiterLimit : render_canvas["i" /* defaultMiterLimit */];

    if (state.lineWidth > this.maxLineWidth) {
      this.maxLineWidth = state.lineWidth;
      // invalidate the buffered max extent cache
      this.bufferedMaxExtent_ = null;
    }
  } else {
    state.strokeStyle = undefined;
    state.lineCap = undefined;
    state.lineDash = null;
    state.lineDashOffset = undefined;
    state.lineJoin = undefined;
    state.lineWidth = undefined;
    state.miterLimit = undefined;
  }
};


/**
 * @param {module:ol/render/canvas~FillStrokeState} state State.
 * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.
 * @return {Array.<*>} Fill instruction.
 */
CanvasReplay.prototype.createFill = function(state, geometry) {
  const fillStyle = state.fillStyle;
  const fillInstruction = [canvas_Instruction.SET_FILL_STYLE, fillStyle];
  if (typeof fillStyle !== 'string') {
    // Fill is a pattern or gradient - align it!
    fillInstruction.push(true);
  }
  return fillInstruction;
};


/**
 * @param {module:ol/render/canvas~FillStrokeState} state State.
 */
CanvasReplay.prototype.applyStroke = function(state) {
  this.instructions.push(this.createStroke(state));
};


/**
 * @param {module:ol/render/canvas~FillStrokeState} state State.
 * @return {Array.<*>} Stroke instruction.
 */
CanvasReplay.prototype.createStroke = function(state) {
  return [
    canvas_Instruction.SET_STROKE_STYLE,
    state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap,
    state.lineJoin, state.miterLimit,
    this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio
  ];
};


/**
 * @param {module:ol/render/canvas~FillStrokeState} state State.
 * @param {function(this:module:ol/render/canvas/Replay, module:ol/render/canvas~FillStrokeState, (module:ol/geom/Geometry|module:ol/render/Feature)):Array.<*>} createFill Create fill.
 * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.
 */
CanvasReplay.prototype.updateFillStyle = function(state, createFill, geometry) {
  const fillStyle = state.fillStyle;
  if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
    if (fillStyle !== undefined) {
      this.instructions.push(createFill.call(this, state, geometry));
    }
    state.currentFillStyle = fillStyle;
  }
};


/**
 * @param {module:ol/render/canvas~FillStrokeState} state State.
 * @param {function(this:module:ol/render/canvas/Replay, module:ol/render/canvas~FillStrokeState)} applyStroke Apply stroke.
 */
CanvasReplay.prototype.updateStrokeStyle = function(state, applyStroke) {
  const strokeStyle = state.strokeStyle;
  const lineCap = state.lineCap;
  const lineDash = state.lineDash;
  const lineDashOffset = state.lineDashOffset;
  const lineJoin = state.lineJoin;
  const lineWidth = state.lineWidth;
  const miterLimit = state.miterLimit;
  if (state.currentStrokeStyle != strokeStyle ||
      state.currentLineCap != lineCap ||
      (lineDash != state.currentLineDash && !Object(array["b" /* equals */])(state.currentLineDash, lineDash)) ||
      state.currentLineDashOffset != lineDashOffset ||
      state.currentLineJoin != lineJoin ||
      state.currentLineWidth != lineWidth ||
      state.currentMiterLimit != miterLimit) {
    if (strokeStyle !== undefined) {
      applyStroke.call(this, state);
    }
    state.currentStrokeStyle = strokeStyle;
    state.currentLineCap = lineCap;
    state.currentLineDash = lineDash;
    state.currentLineDashOffset = lineDashOffset;
    state.currentLineJoin = lineJoin;
    state.currentLineWidth = lineWidth;
    state.currentMiterLimit = miterLimit;
  }
};


/**
 * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
CanvasReplay.prototype.endGeometry = function(geometry, feature) {
  this.beginGeometryInstruction1_[2] = this.instructions.length;
  this.beginGeometryInstruction1_ = null;
  this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
  this.beginGeometryInstruction2_ = null;
  const endGeometryInstruction = [canvas_Instruction.END_GEOMETRY, feature];
  this.instructions.push(endGeometryInstruction);
  this.hitDetectionInstructions.push(endGeometryInstruction);
};


/**
 * FIXME empty description for jsdoc
 */
CanvasReplay.prototype.finish = functions["c" /* UNDEFINED */];


/**
 * Get the buffered rendering extent.  Rendering will be clipped to the extent
 * provided to the constructor.  To account for symbolizers that may intersect
 * this extent, we calculate a buffered extent (e.g. based on stroke width).
 * @return {module:ol/extent~Extent} The buffered rendering extent.
 * @protected
 */
CanvasReplay.prototype.getBufferedMaxExtent = function() {
  if (!this.bufferedMaxExtent_) {
    this.bufferedMaxExtent_ = Object(ol_extent["d" /* clone */])(this.maxExtent);
    if (this.maxLineWidth > 0) {
      const width = this.resolution * (this.maxLineWidth + 1) / 2;
      Object(ol_extent["c" /* buffer */])(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
    }
  }
  return this.bufferedMaxExtent_;
};
/* harmony default export */ var Replay = (CanvasReplay);

// CONCATENATED MODULE: ../src/ol/render/canvas/ImageReplay.js
/**
 * @module ol/render/canvas/ImageReplay
 */




/**
 * @constructor
 * @extends {module:ol/render/canvas/Replay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Maximum extent.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {boolean} overlaps The replay can have overlapping geometries.
 * @param {?} declutterTree Declutter tree.
 * @struct
 */
const CanvasImageReplay = function(
  tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
  Replay.call(this,
    tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);

  /**
   * @private
   * @type {module:ol/render/canvas~DeclutterGroup}
   */
  this.declutterGroup_ = null;

  /**
   * @private
   * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
   */
  this.hitDetectionImage_ = null;

  /**
   * @private
   * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
   */
  this.image_ = null;

  /**
   * @private
   * @type {number|undefined}
   */
  this.anchorX_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.anchorY_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.height_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.opacity_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.originX_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.originY_ = undefined;

  /**
   * @private
   * @type {boolean|undefined}
   */
  this.rotateWithView_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.rotation_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.scale_ = undefined;

  /**
   * @private
   * @type {boolean|undefined}
   */
  this.snapToPixel_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.width_ = undefined;

};

Object(util["c" /* inherits */])(CanvasImageReplay, Replay);


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @private
 * @return {number} My end.
 */
CanvasImageReplay.prototype.drawCoordinates_ = function(flatCoordinates, offset, end, stride) {
  return this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
};


/**
 * @inheritDoc
 */
CanvasImageReplay.prototype.drawPoint = function(pointGeometry, feature) {
  if (!this.image_) {
    return;
  }
  this.beginGeometry(pointGeometry, feature);
  const flatCoordinates = pointGeometry.getFlatCoordinates();
  const stride = pointGeometry.getStride();
  const myBegin = this.coordinates.length;
  const myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
  this.instructions.push([
    canvas_Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
    // Remaining arguments to DRAW_IMAGE are in alphabetical order
    this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
    this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
    this.scale_ * this.pixelRatio, this.snapToPixel_, this.width_
  ]);
  this.hitDetectionInstructions.push([
    canvas_Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
    // Remaining arguments to DRAW_IMAGE are in alphabetical order
    this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
    this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
    this.scale_, this.snapToPixel_, this.width_
  ]);
  this.endGeometry(pointGeometry, feature);
};


/**
 * @inheritDoc
 */
CanvasImageReplay.prototype.drawMultiPoint = function(multiPointGeometry, feature) {
  if (!this.image_) {
    return;
  }
  this.beginGeometry(multiPointGeometry, feature);
  const flatCoordinates = multiPointGeometry.getFlatCoordinates();
  const stride = multiPointGeometry.getStride();
  const myBegin = this.coordinates.length;
  const myEnd = this.drawCoordinates_(
    flatCoordinates, 0, flatCoordinates.length, stride);
  this.instructions.push([
    canvas_Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
    // Remaining arguments to DRAW_IMAGE are in alphabetical order
    this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
    this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
    this.scale_ * this.pixelRatio, this.snapToPixel_, this.width_
  ]);
  this.hitDetectionInstructions.push([
    canvas_Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
    // Remaining arguments to DRAW_IMAGE are in alphabetical order
    this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
    this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
    this.scale_, this.snapToPixel_, this.width_
  ]);
  this.endGeometry(multiPointGeometry, feature);
};


/**
 * @inheritDoc
 */
CanvasImageReplay.prototype.finish = function() {
  this.reverseHitDetectionInstructions();
  // FIXME this doesn't really protect us against further calls to draw*Geometry
  this.anchorX_ = undefined;
  this.anchorY_ = undefined;
  this.hitDetectionImage_ = null;
  this.image_ = null;
  this.height_ = undefined;
  this.scale_ = undefined;
  this.opacity_ = undefined;
  this.originX_ = undefined;
  this.originY_ = undefined;
  this.rotateWithView_ = undefined;
  this.rotation_ = undefined;
  this.snapToPixel_ = undefined;
  this.width_ = undefined;
};


/**
 * @inheritDoc
 */
CanvasImageReplay.prototype.setImageStyle = function(imageStyle, declutterGroup) {
  const anchor = imageStyle.getAnchor();
  const size = imageStyle.getSize();
  const hitDetectionImage = imageStyle.getHitDetectionImage(1);
  const image = imageStyle.getImage(1);
  const origin = imageStyle.getOrigin();
  this.anchorX_ = anchor[0];
  this.anchorY_ = anchor[1];
  this.declutterGroup_ = /** @type {module:ol/render/canvas~DeclutterGroup} */ (declutterGroup);
  this.hitDetectionImage_ = hitDetectionImage;
  this.image_ = image;
  this.height_ = size[1];
  this.opacity_ = imageStyle.getOpacity();
  this.originX_ = origin[0];
  this.originY_ = origin[1];
  this.rotateWithView_ = imageStyle.getRotateWithView();
  this.rotation_ = imageStyle.getRotation();
  this.scale_ = imageStyle.getScale();
  this.snapToPixel_ = imageStyle.getSnapToPixel();
  this.width_ = size[0];
};
/* harmony default export */ var ImageReplay = (CanvasImageReplay);

// CONCATENATED MODULE: ../src/ol/render/canvas/LineStringReplay.js
/**
 * @module ol/render/canvas/LineStringReplay
 */




/**
 * @constructor
 * @extends {module:ol/render/canvas/Replay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Maximum extent.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {boolean} overlaps The replay can have overlapping geometries.
 * @param {?} declutterTree Declutter tree.
 * @struct
 */
const CanvasLineStringReplay = function(
  tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
  Replay.call(this,
    tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);
};

Object(util["c" /* inherits */])(CanvasLineStringReplay, Replay);


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @private
 * @return {number} end.
 */
CanvasLineStringReplay.prototype.drawFlatCoordinates_ = function(flatCoordinates, offset, end, stride) {
  const myBegin = this.coordinates.length;
  const myEnd = this.appendFlatCoordinates(
    flatCoordinates, offset, end, stride, false, false);
  const moveToLineToInstruction = [canvas_Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
  this.instructions.push(moveToLineToInstruction);
  this.hitDetectionInstructions.push(moveToLineToInstruction);
  return end;
};


/**
 * @inheritDoc
 */
CanvasLineStringReplay.prototype.drawLineString = function(lineStringGeometry, feature) {
  const state = this.state;
  const strokeStyle = state.strokeStyle;
  const lineWidth = state.lineWidth;
  if (strokeStyle === undefined || lineWidth === undefined) {
    return;
  }
  this.updateStrokeStyle(state, this.applyStroke);
  this.beginGeometry(lineStringGeometry, feature);
  this.hitDetectionInstructions.push([
    canvas_Instruction.SET_STROKE_STYLE,
    state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
    state.miterLimit, state.lineDash, state.lineDashOffset
  ], beginPathInstruction);
  const flatCoordinates = lineStringGeometry.getFlatCoordinates();
  const stride = lineStringGeometry.getStride();
  this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
  this.hitDetectionInstructions.push(Instruction_strokeInstruction);
  this.endGeometry(lineStringGeometry, feature);
};


/**
 * @inheritDoc
 */
CanvasLineStringReplay.prototype.drawMultiLineString = function(multiLineStringGeometry, feature) {
  const state = this.state;
  const strokeStyle = state.strokeStyle;
  const lineWidth = state.lineWidth;
  if (strokeStyle === undefined || lineWidth === undefined) {
    return;
  }
  this.updateStrokeStyle(state, this.applyStroke);
  this.beginGeometry(multiLineStringGeometry, feature);
  this.hitDetectionInstructions.push([
    canvas_Instruction.SET_STROKE_STYLE,
    state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
    state.miterLimit, state.lineDash, state.lineDashOffset
  ], beginPathInstruction);
  const ends = multiLineStringGeometry.getEnds();
  const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
  const stride = multiLineStringGeometry.getStride();
  let offset = 0;
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    offset = this.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);
  }
  this.hitDetectionInstructions.push(Instruction_strokeInstruction);
  this.endGeometry(multiLineStringGeometry, feature);
};


/**
 * @inheritDoc
 */
CanvasLineStringReplay.prototype.finish = function() {
  const state = this.state;
  if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
    this.instructions.push(Instruction_strokeInstruction);
  }
  this.reverseHitDetectionInstructions();
  this.state = null;
};


/**
 * @inheritDoc.
 */
CanvasLineStringReplay.prototype.applyStroke = function(state) {
  if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
    this.instructions.push(Instruction_strokeInstruction);
    state.lastStroke = this.coordinates.length;
  }
  state.lastStroke = 0;
  Replay.prototype.applyStroke.call(this, state);
  this.instructions.push(beginPathInstruction);
};
/* harmony default export */ var LineStringReplay = (CanvasLineStringReplay);

// EXTERNAL MODULE: ../src/ol/color.js
var color = __webpack_require__(77);

// EXTERNAL MODULE: ../src/ol/geom/flat/simplify.js
var simplify = __webpack_require__(122);

// CONCATENATED MODULE: ../src/ol/render/canvas/PolygonReplay.js
/**
 * @module ol/render/canvas/PolygonReplay
 */








/**
 * @constructor
 * @extends {module:ol/render/canvas/Replay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Maximum extent.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {boolean} overlaps The replay can have overlapping geometries.
 * @param {?} declutterTree Declutter tree.
 * @struct
 */
const CanvasPolygonReplay = function(
  tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
  Replay.call(this,
    tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);
};

Object(util["c" /* inherits */])(CanvasPolygonReplay, Replay);


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @private
 * @return {number} End.
 */
CanvasPolygonReplay.prototype.drawFlatCoordinatess_ = function(flatCoordinates, offset, ends, stride) {
  const state = this.state;
  const fill = state.fillStyle !== undefined;
  const stroke = state.strokeStyle != undefined;
  const numEnds = ends.length;
  this.instructions.push(beginPathInstruction);
  this.hitDetectionInstructions.push(beginPathInstruction);
  for (let i = 0; i < numEnds; ++i) {
    const end = ends[i];
    const myBegin = this.coordinates.length;
    const myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
    const moveToLineToInstruction = [canvas_Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
    this.instructions.push(moveToLineToInstruction);
    this.hitDetectionInstructions.push(moveToLineToInstruction);
    if (stroke) {
      // Performance optimization: only call closePath() when we have a stroke.
      // Otherwise the ring is closed already (see appendFlatCoordinates above).
      this.instructions.push(closePathInstruction);
      this.hitDetectionInstructions.push(closePathInstruction);
    }
    offset = end;
  }
  if (fill) {
    this.instructions.push(Instruction_fillInstruction);
    this.hitDetectionInstructions.push(Instruction_fillInstruction);
  }
  if (stroke) {
    this.instructions.push(Instruction_strokeInstruction);
    this.hitDetectionInstructions.push(Instruction_strokeInstruction);
  }
  return offset;
};


/**
 * @inheritDoc
 */
CanvasPolygonReplay.prototype.drawCircle = function(circleGeometry, feature) {
  const state = this.state;
  const fillStyle = state.fillStyle;
  const strokeStyle = state.strokeStyle;
  if (fillStyle === undefined && strokeStyle === undefined) {
    return;
  }
  this.setFillStrokeStyles_(circleGeometry);
  this.beginGeometry(circleGeometry, feature);
  if (state.fillStyle !== undefined) {
    this.hitDetectionInstructions.push([
      canvas_Instruction.SET_FILL_STYLE,
      Object(color["b" /* asString */])(render_canvas["b" /* defaultFillStyle */])
    ]);
  }
  if (state.strokeStyle !== undefined) {
    this.hitDetectionInstructions.push([
      canvas_Instruction.SET_STROKE_STYLE,
      state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
      state.miterLimit, state.lineDash, state.lineDashOffset
    ]);
  }
  const flatCoordinates = circleGeometry.getFlatCoordinates();
  const stride = circleGeometry.getStride();
  const myBegin = this.coordinates.length;
  this.appendFlatCoordinates(
    flatCoordinates, 0, flatCoordinates.length, stride, false, false);
  const circleInstruction = [canvas_Instruction.CIRCLE, myBegin];
  this.instructions.push(beginPathInstruction, circleInstruction);
  this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);
  this.hitDetectionInstructions.push(Instruction_fillInstruction);
  if (state.fillStyle !== undefined) {
    this.instructions.push(Instruction_fillInstruction);
  }
  if (state.strokeStyle !== undefined) {
    this.instructions.push(Instruction_strokeInstruction);
    this.hitDetectionInstructions.push(Instruction_strokeInstruction);
  }
  this.endGeometry(circleGeometry, feature);
};


/**
 * @inheritDoc
 */
CanvasPolygonReplay.prototype.drawPolygon = function(polygonGeometry, feature) {
  const state = this.state;
  const fillStyle = state.fillStyle;
  const strokeStyle = state.strokeStyle;
  if (fillStyle === undefined && strokeStyle === undefined) {
    return;
  }
  this.setFillStrokeStyles_(polygonGeometry);
  this.beginGeometry(polygonGeometry, feature);
  if (state.fillStyle !== undefined) {
    this.hitDetectionInstructions.push([
      canvas_Instruction.SET_FILL_STYLE,
      Object(color["b" /* asString */])(render_canvas["b" /* defaultFillStyle */])
    ]);
  }
  if (state.strokeStyle !== undefined) {
    this.hitDetectionInstructions.push([
      canvas_Instruction.SET_STROKE_STYLE,
      state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
      state.miterLimit, state.lineDash, state.lineDashOffset
    ]);
  }
  const ends = polygonGeometry.getEnds();
  const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
  const stride = polygonGeometry.getStride();
  this.drawFlatCoordinatess_(flatCoordinates, 0, ends, stride);
  this.endGeometry(polygonGeometry, feature);
};


/**
 * @inheritDoc
 */
CanvasPolygonReplay.prototype.drawMultiPolygon = function(multiPolygonGeometry, feature) {
  const state = this.state;
  const fillStyle = state.fillStyle;
  const strokeStyle = state.strokeStyle;
  if (fillStyle === undefined && strokeStyle === undefined) {
    return;
  }
  this.setFillStrokeStyles_(multiPolygonGeometry);
  this.beginGeometry(multiPolygonGeometry, feature);
  if (state.fillStyle !== undefined) {
    this.hitDetectionInstructions.push([
      canvas_Instruction.SET_FILL_STYLE,
      Object(color["b" /* asString */])(render_canvas["b" /* defaultFillStyle */])
    ]);
  }
  if (state.strokeStyle !== undefined) {
    this.hitDetectionInstructions.push([
      canvas_Instruction.SET_STROKE_STYLE,
      state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
      state.miterLimit, state.lineDash, state.lineDashOffset
    ]);
  }
  const endss = multiPolygonGeometry.getEndss();
  const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
  const stride = multiPolygonGeometry.getStride();
  let offset = 0;
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
  }
  this.endGeometry(multiPolygonGeometry, feature);
};


/**
 * @inheritDoc
 */
CanvasPolygonReplay.prototype.finish = function() {
  this.reverseHitDetectionInstructions();
  this.state = null;
  // We want to preserve topology when drawing polygons.  Polygons are
  // simplified using quantization and point elimination. However, we might
  // have received a mix of quantized and non-quantized geometries, so ensure
  // that all are quantized by quantizing all coordinates in the batch.
  const tolerance = this.tolerance;
  if (tolerance !== 0) {
    const coordinates = this.coordinates;
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      coordinates[i] = Object(simplify["e" /* snap */])(coordinates[i], tolerance);
    }
  }
};


/**
 * @private
 * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.
 */
CanvasPolygonReplay.prototype.setFillStrokeStyles_ = function(geometry) {
  const state = this.state;
  const fillStyle = state.fillStyle;
  if (fillStyle !== undefined) {
    this.updateFillStyle(state, this.createFill, geometry);
  }
  if (state.strokeStyle !== undefined) {
    this.updateStrokeStyle(state, this.applyStroke);
  }
};
/* harmony default export */ var PolygonReplay = (CanvasPolygonReplay);

// CONCATENATED MODULE: ../src/ol/geom/flat/straightchunk.js
/**
 * @module ol/geom/flat/straightchunk
 */


/**
 * @param {number} maxAngle Maximum acceptable angle delta between segments.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {Array.<number>} Start and end of the first suitable chunk of the
 * given `flatCoordinates`.
 */
function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
  let chunkStart = offset;
  let chunkEnd = offset;
  let chunkM = 0;
  let m = 0;
  let start = offset;
  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
  for (i = offset; i < end; i += stride) {
    const x2 = flatCoordinates[i];
    const y2 = flatCoordinates[i + 1];
    if (x1 !== undefined) {
      x23 = x2 - x1;
      y23 = y2 - y1;
      m23 = Math.sqrt(x23 * x23 + y23 * y23);
      if (x12 !== undefined) {
        m += m12;
        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
        if (acos > maxAngle) {
          if (m > chunkM) {
            chunkM = m;
            chunkStart = start;
            chunkEnd = i;
          }
          m = 0;
          start = i - stride;
        }
      }
      m12 = m23;
      x12 = x23;
      y12 = y23;
    }
    x1 = x2;
    y1 = y2;
  }
  m += m23;
  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
}

// EXTERNAL MODULE: ../src/ol/style/TextPlacement.js
var TextPlacement = __webpack_require__(226);

// CONCATENATED MODULE: ../src/ol/render/canvas/TextReplay.js
/**
 * @module ol/render/canvas/TextReplay
 */













/**
 * @constructor
 * @extends {module:ol/render/canvas/Replay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Maximum extent.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {boolean} overlaps The replay can have overlapping geometries.
 * @param {?} declutterTree Declutter tree.
 * @struct
 */
const CanvasTextReplay = function(
  tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
  Replay.call(this,
    tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);

  /**
   * @private
   * @type {module:ol/render/canvas~DeclutterGroup}
   */
  this.declutterGroup_;

  /**
   * @private
   * @type {Array.<HTMLCanvasElement>}
   */
  this.labels_ = null;

  /**
   * @private
   * @type {string}
   */
  this.text_ = '';

  /**
   * @private
   * @type {number}
   */
  this.textOffsetX_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.textOffsetY_ = 0;

  /**
   * @private
   * @type {boolean|undefined}
   */
  this.textRotateWithView_ = undefined;

  /**
   * @private
   * @type {number}
   */
  this.textRotation_ = 0;

  /**
   * @private
   * @type {?module:ol/render/canvas~FillState}
   */
  this.textFillState_ = null;

  /**
   * @type {!Object.<string, module:ol/render/canvas~FillState>}
   */
  this.fillStates = {};

  /**
   * @private
   * @type {?module:ol/render/canvas~StrokeState}
   */
  this.textStrokeState_ = null;

  /**
   * @type {!Object.<string, module:ol/render/canvas~StrokeState>}
   */
  this.strokeStates = {};

  /**
   * @private
   * @type {module:ol/render/canvas~TextState}
   */
  this.textState_ = /** @type {module:ol/render/canvas~TextState} */ ({});

  /**
   * @type {!Object.<string, module:ol/render/canvas~TextState>}
   */
  this.textStates = {};

  /**
   * @private
   * @type {string}
   */
  this.textKey_ = '';

  /**
   * @private
   * @type {string}
   */
  this.fillKey_ = '';

  /**
   * @private
   * @type {string}
   */
  this.strokeKey_ = '';

  /**
   * @private
   * @type {Object.<string, Object.<string, number>>}
   */
  this.widths_ = {};

  render_canvas["o" /* labelCache */].prune();

};

Object(util["c" /* inherits */])(CanvasTextReplay, Replay);


/**
 * @param {string} font Font to use for measuring.
 * @param {Array.<string>} lines Lines to measure.
 * @param {Array.<number>} widths Array will be populated with the widths of
 * each line.
 * @return {number} Width of the whole text.
 */
function measureTextWidths(font, lines, widths) {
  const numLines = lines.length;
  let width = 0;
  for (let i = 0; i < numLines; ++i) {
    const currentWidth = Object(render_canvas["q" /* measureTextWidth */])(font, lines[i]);
    width = Math.max(width, currentWidth);
    widths.push(currentWidth);
  }
  return width;
}


/**
 * @inheritDoc
 */
CanvasTextReplay.prototype.drawText = function(geometry, feature) {
  const fillState = this.textFillState_;
  const strokeState = this.textStrokeState_;
  const textState = this.textState_;
  if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
    return;
  }

  let begin = this.coordinates.length;

  const geometryType = geometry.getType();
  let flatCoordinates = null;
  let end = 2;
  let stride = 2;
  let i, ii;

  if (textState.placement === TextPlacement["a" /* default */].LINE) {
    if (!Object(ol_extent["F" /* intersects */])(this.getBufferedMaxExtent(), geometry.getExtent())) {
      return;
    }
    let ends;
    flatCoordinates = geometry.getFlatCoordinates();
    stride = geometry.getStride();
    if (geometryType == GeometryType["a" /* default */].LINE_STRING) {
      ends = [flatCoordinates.length];
    } else if (geometryType == GeometryType["a" /* default */].MULTI_LINE_STRING) {
      ends = geometry.getEnds();
    } else if (geometryType == GeometryType["a" /* default */].POLYGON) {
      ends = geometry.getEnds().slice(0, 1);
    } else if (geometryType == GeometryType["a" /* default */].MULTI_POLYGON) {
      const endss = geometry.getEndss();
      ends = [];
      for (i = 0, ii = endss.length; i < ii; ++i) {
        ends.push(endss[i][0]);
      }
    }
    this.beginGeometry(geometry, feature);
    const textAlign = textState.textAlign;
    let flatOffset = 0;
    let flatEnd;
    for (let o = 0, oo = ends.length; o < oo; ++o) {
      if (textAlign == undefined) {
        const range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);
        flatOffset = range[0];
        flatEnd = range[1];
      } else {
        flatEnd = ends[o];
      }
      for (i = flatOffset; i < flatEnd; i += stride) {
        this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);
      }
      end = this.coordinates.length;
      flatOffset = ends[o];
      this.drawChars_(begin, end, this.declutterGroup_);
      begin = end;
    }
    this.endGeometry(geometry, feature);

  } else {
    const label = this.getImage(this.text_, this.textKey_, this.fillKey_, this.strokeKey_);
    const width = label.width / this.pixelRatio;
    switch (geometryType) {
      case GeometryType["a" /* default */].POINT:
      case GeometryType["a" /* default */].MULTI_POINT:
        flatCoordinates = geometry.getFlatCoordinates();
        end = flatCoordinates.length;
        break;
      case GeometryType["a" /* default */].LINE_STRING:
        flatCoordinates = /** @type {module:ol/geom/LineString} */ (geometry).getFlatMidpoint();
        break;
      case GeometryType["a" /* default */].CIRCLE:
        flatCoordinates = /** @type {module:ol/geom/Circle} */ (geometry).getCenter();
        break;
      case GeometryType["a" /* default */].MULTI_LINE_STRING:
        flatCoordinates = /** @type {module:ol/geom/MultiLineString} */ (geometry).getFlatMidpoints();
        end = flatCoordinates.length;
        break;
      case GeometryType["a" /* default */].POLYGON:
        flatCoordinates = /** @type {module:ol/geom/Polygon} */ (geometry).getFlatInteriorPoint();
        if (!textState.overflow && flatCoordinates[2] / this.resolution < width) {
          return;
        }
        stride = 3;
        break;
      case GeometryType["a" /* default */].MULTI_POLYGON:
        const interiorPoints = /** @type {module:ol/geom/MultiPolygon} */ (geometry).getFlatInteriorPoints();
        flatCoordinates = [];
        for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {
          if (textState.overflow || interiorPoints[i + 2] / this.resolution >= width) {
            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
          }
        }
        end = flatCoordinates.length;
        if (end == 0) {
          return;
        }
        break;
      default:
    }
    end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);
    if (textState.backgroundFill || textState.backgroundStroke) {
      this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
      if (textState.backgroundFill) {
        this.updateFillStyle(this.state, this.createFill, geometry);
        this.hitDetectionInstructions.push(this.createFill(this.state, geometry));
      }
      if (textState.backgroundStroke) {
        this.updateStrokeStyle(this.state, this.applyStroke);
        this.hitDetectionInstructions.push(this.createStroke(this.state));
      }
    }
    this.beginGeometry(geometry, feature);
    this.drawTextImage_(label, begin, end);
    this.endGeometry(geometry, feature);
  }
};


/**
 * @param {string} text Text.
 * @param {string} textKey Text style key.
 * @param {string} fillKey Fill style key.
 * @param {string} strokeKey Stroke style key.
 * @return {HTMLCanvasElement} Image.
 */
CanvasTextReplay.prototype.getImage = function(text, textKey, fillKey, strokeKey) {
  let label;
  const key = strokeKey + textKey + text + fillKey + this.pixelRatio;

  if (!render_canvas["o" /* labelCache */].containsKey(key)) {
    const strokeState = strokeKey ? this.strokeStates[strokeKey] || this.textStrokeState_ : null;
    const fillState = fillKey ? this.fillStates[fillKey] || this.textFillState_ : null;
    const textState = this.textStates[textKey] || this.textState_;
    const pixelRatio = this.pixelRatio;
    const scale = textState.scale * pixelRatio;
    const align =  render_replay["b" /* TEXT_ALIGN */][textState.textAlign || render_canvas["l" /* defaultTextAlign */]];
    const strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;

    const lines = text.split('\n');
    const numLines = lines.length;
    const widths = [];
    const width = measureTextWidths(textState.font, lines, widths);
    const lineHeight = Object(render_canvas["p" /* measureTextHeight */])(textState.font);
    const height = lineHeight * numLines;
    const renderWidth = (width + strokeWidth);
    const context = Object(dom["a" /* createCanvasContext2D */])(
      Math.ceil(renderWidth * scale),
      Math.ceil((height + strokeWidth) * scale));
    label = context.canvas;
    render_canvas["o" /* labelCache */].set(key, label);
    if (scale != 1) {
      context.scale(scale, scale);
    }
    context.font = textState.font;
    if (strokeKey) {
      context.strokeStyle = strokeState.strokeStyle;
      context.lineWidth = strokeWidth;
      context.lineCap = strokeState.lineCap;
      context.lineJoin = strokeState.lineJoin;
      context.miterLimit = strokeState.miterLimit;
      if (has["a" /* CANVAS_LINE_DASH */] && strokeState.lineDash.length) {
        context.setLineDash(strokeState.lineDash);
        context.lineDashOffset = strokeState.lineDashOffset;
      }
    }
    if (fillKey) {
      context.fillStyle = fillState.fillStyle;
    }
    context.textBaseline = 'middle';
    context.textAlign = 'center';
    const leftRight = (0.5 - align);
    const x = align * label.width / scale + leftRight * strokeWidth;
    let i;
    if (strokeKey) {
      for (i = 0; i < numLines; ++i) {
        context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
      }
    }
    if (fillKey) {
      for (i = 0; i < numLines; ++i) {
        context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
      }
    }
  }
  return render_canvas["o" /* labelCache */].get(key);
};


/**
 * @private
 * @param {HTMLCanvasElement} label Label.
 * @param {number} begin Begin.
 * @param {number} end End.
 */
CanvasTextReplay.prototype.drawTextImage_ = function(label, begin, end) {
  const textState = this.textState_;
  const strokeState = this.textStrokeState_;
  const pixelRatio = this.pixelRatio;
  const align = render_replay["b" /* TEXT_ALIGN */][textState.textAlign || render_canvas["l" /* defaultTextAlign */]];
  const baseline = render_replay["b" /* TEXT_ALIGN */][textState.textBaseline];
  const strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;

  const anchorX = align * label.width / pixelRatio + 2 * (0.5 - align) * strokeWidth;
  const anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;
  this.instructions.push([canvas_Instruction.DRAW_IMAGE, begin, end,
    label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,
    this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,
    1, true, label.width,
    textState.padding == render_canvas["j" /* defaultPadding */] ?
      render_canvas["j" /* defaultPadding */] : textState.padding.map(function(p) {
        return p * pixelRatio;
      }),
    !!textState.backgroundFill, !!textState.backgroundStroke
  ]);
  this.hitDetectionInstructions.push([canvas_Instruction.DRAW_IMAGE, begin, end,
    label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,
    this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,
    1 / pixelRatio, true, label.width, textState.padding,
    !!textState.backgroundFill, !!textState.backgroundStroke
  ]);
};


/**
 * @private
 * @param {number} begin Begin.
 * @param {number} end End.
 * @param {module:ol/render/canvas~DeclutterGroup} declutterGroup Declutter group.
 */
CanvasTextReplay.prototype.drawChars_ = function(begin, end, declutterGroup) {
  const strokeState = this.textStrokeState_;
  const textState = this.textState_;
  const fillState = this.textFillState_;

  const strokeKey = this.strokeKey_;
  if (strokeState) {
    if (!(strokeKey in this.strokeStates)) {
      this.strokeStates[strokeKey] = /** @type {module:ol/render/canvas~StrokeState} */ ({
        strokeStyle: strokeState.strokeStyle,
        lineCap: strokeState.lineCap,
        lineDashOffset: strokeState.lineDashOffset,
        lineWidth: strokeState.lineWidth,
        lineJoin: strokeState.lineJoin,
        miterLimit: strokeState.miterLimit,
        lineDash: strokeState.lineDash
      });
    }
  }
  const textKey = this.textKey_;
  if (!(this.textKey_ in this.textStates)) {
    this.textStates[this.textKey_] = /** @type {module:ol/render/canvas~TextState} */ ({
      font: textState.font,
      textAlign: textState.textAlign || render_canvas["l" /* defaultTextAlign */],
      scale: textState.scale
    });
  }
  const fillKey = this.fillKey_;
  if (fillState) {
    if (!(fillKey in this.fillStates)) {
      this.fillStates[fillKey] = /** @type {module:ol/render/canvas~FillState} */ ({
        fillStyle: fillState.fillStyle
      });
    }
  }

  const pixelRatio = this.pixelRatio;
  const baseline = render_replay["b" /* TEXT_ALIGN */][textState.textBaseline];

  const offsetY = this.textOffsetY_ * pixelRatio;
  const text = this.text_;
  const font = textState.font;
  const textScale = textState.scale;
  const strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;
  let widths = this.widths_[font];
  if (!widths) {
    this.widths_[font] = widths = {};
  }
  this.instructions.push([canvas_Instruction.DRAW_CHARS,
    begin, end, baseline, declutterGroup,
    textState.overflow, fillKey, textState.maxAngle,
    function(text) {
      let width = widths[text];
      if (!width) {
        width = widths[text] = Object(render_canvas["q" /* measureTextWidth */])(font, text);
      }
      return width * textScale * pixelRatio;
    },
    offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1
  ]);
  this.hitDetectionInstructions.push([canvas_Instruction.DRAW_CHARS,
    begin, end, baseline, declutterGroup,
    textState.overflow, fillKey, textState.maxAngle,
    function(text) {
      let width = widths[text];
      if (!width) {
        width = widths[text] = Object(render_canvas["q" /* measureTextWidth */])(font, text);
      }
      return width * textScale;
    },
    offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio
  ]);
};


/**
 * @inheritDoc
 */
CanvasTextReplay.prototype.setTextStyle = function(textStyle, declutterGroup) {
  let textState, fillState, strokeState;
  if (!textStyle) {
    this.text_ = '';
  } else {
    this.declutterGroup_ = /** @type {module:ol/render/canvas~DeclutterGroup} */ (declutterGroup);

    const textFillStyle = textStyle.getFill();
    if (!textFillStyle) {
      fillState = this.textFillState_ = null;
    } else {
      fillState = this.textFillState_;
      if (!fillState) {
        fillState = this.textFillState_ = /** @type {module:ol/render/canvas~FillState} */ ({});
      }
      fillState.fillStyle = Object(colorlike["a" /* asColorLike */])(
        textFillStyle.getColor() || render_canvas["b" /* defaultFillStyle */]);
    }

    const textStrokeStyle = textStyle.getStroke();
    if (!textStrokeStyle) {
      strokeState = this.textStrokeState_ = null;
    } else {
      strokeState = this.textStrokeState_;
      if (!strokeState) {
        strokeState = this.textStrokeState_ = /** @type {module:ol/render/canvas~StrokeState} */ ({});
      }
      const lineDash = textStrokeStyle.getLineDash();
      const lineDashOffset = textStrokeStyle.getLineDashOffset();
      const lineWidth = textStrokeStyle.getWidth();
      const miterLimit = textStrokeStyle.getMiterLimit();
      strokeState.lineCap = textStrokeStyle.getLineCap() || render_canvas["d" /* defaultLineCap */];
      strokeState.lineDash = lineDash ? lineDash.slice() : render_canvas["e" /* defaultLineDash */];
      strokeState.lineDashOffset =
          lineDashOffset === undefined ? render_canvas["f" /* defaultLineDashOffset */] : lineDashOffset;
      strokeState.lineJoin = textStrokeStyle.getLineJoin() || render_canvas["g" /* defaultLineJoin */];
      strokeState.lineWidth =
          lineWidth === undefined ? render_canvas["h" /* defaultLineWidth */] : lineWidth;
      strokeState.miterLimit =
          miterLimit === undefined ? render_canvas["i" /* defaultMiterLimit */] : miterLimit;
      strokeState.strokeStyle = Object(colorlike["a" /* asColorLike */])(
        textStrokeStyle.getColor() || render_canvas["k" /* defaultStrokeStyle */]);
    }

    textState = this.textState_;
    const font = textStyle.getFont() || render_canvas["c" /* defaultFont */];
    Object(render_canvas["a" /* checkFont */])(font);
    const textScale = textStyle.getScale();
    textState.overflow = textStyle.getOverflow();
    textState.font = font;
    textState.maxAngle = textStyle.getMaxAngle();
    textState.placement = textStyle.getPlacement();
    textState.textAlign = textStyle.getTextAlign();
    textState.textBaseline = textStyle.getTextBaseline() || render_canvas["m" /* defaultTextBaseline */];
    textState.backgroundFill = textStyle.getBackgroundFill();
    textState.backgroundStroke = textStyle.getBackgroundStroke();
    textState.padding = textStyle.getPadding() || render_canvas["j" /* defaultPadding */];
    textState.scale = textScale === undefined ? 1 : textScale;

    const textOffsetX = textStyle.getOffsetX();
    const textOffsetY = textStyle.getOffsetY();
    const textRotateWithView = textStyle.getRotateWithView();
    const textRotation = textStyle.getRotation();
    this.text_ = textStyle.getText() || '';
    this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
    this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
    this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
    this.textRotation_ = textRotation === undefined ? 0 : textRotation;

    this.strokeKey_ = strokeState ?
      (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : Object(util["b" /* getUid */])(strokeState.strokeStyle)) +
      strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth +
      strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' :
      '';
    this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?');
    this.fillKey_ = fillState ?
      (typeof fillState.fillStyle == 'string' ? fillState.fillStyle : ('|' + Object(util["b" /* getUid */])(fillState.fillStyle))) :
      '';
  }
};
/* harmony default export */ var TextReplay = (CanvasTextReplay);

// CONCATENATED MODULE: ../src/ol/render/canvas/ReplayGroup.js
/**
 * @module ol/render/canvas/ReplayGroup
 */

















/**
 * @type {Object.<module:ol/render/ReplayType,
 *                function(new: module:ol/render/canvas/Replay, number, module:ol/extent~Extent,
 *                number, number, boolean, Array.<module:ol/render/canvas~DeclutterGroup>)>}
 */
const BATCH_CONSTRUCTORS = {
  'Circle': PolygonReplay,
  'Default': Replay,
  'Image': ImageReplay,
  'LineString': LineStringReplay,
  'Polygon': PolygonReplay,
  'Text': TextReplay
};


/**
 * @constructor
 * @extends {module:ol/render/ReplayGroup}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Max extent.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {boolean} overlaps The replay group can have overlapping geometries.
 * @param {?} declutterTree Declutter tree
 * for declutter processing in postrender.
 * @param {number=} opt_renderBuffer Optional rendering buffer.
 * @struct
 */
const CanvasReplayGroup = function(
  tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree, opt_renderBuffer) {
  ReplayGroup["a" /* default */].call(this);

  /**
   * Declutter tree.
   * @private
   */
  this.declutterTree_ = declutterTree;

  /**
   * @type {module:ol/render/canvas~DeclutterGroup}
   * @private
   */
  this.declutterGroup_ = null;

  /**
   * @private
   * @type {number}
   */
  this.tolerance_ = tolerance;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.maxExtent_ = maxExtent;

  /**
   * @private
   * @type {boolean}
   */
  this.overlaps_ = overlaps;

  /**
   * @private
   * @type {number}
   */
  this.pixelRatio_ = pixelRatio;

  /**
   * @private
   * @type {number}
   */
  this.resolution_ = resolution;

  /**
   * @private
   * @type {number|undefined}
   */
  this.renderBuffer_ = opt_renderBuffer;

  /**
   * @private
   * @type {!Object.<string, !Object.<module:ol/render/ReplayType, module:ol/render/canvas/Replay>>}
   */
  this.replaysByZIndex_ = {};

  /**
   * @private
   * @type {CanvasRenderingContext2D}
   */
  this.hitDetectionContext_ = Object(dom["a" /* createCanvasContext2D */])(1, 1);

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.hitDetectionTransform_ = Object(ol_transform["c" /* create */])();
};

Object(util["c" /* inherits */])(CanvasReplayGroup, ReplayGroup["a" /* default */]);


/**
 * This cache is used for storing calculated pixel circles for increasing performance.
 * It is a static property to allow each Replaygroup to access it.
 * @type {Object.<number, Array.<Array.<(boolean|undefined)>>>}
 */
const circleArrayCache = {
  0: [[true]]
};


/**
 * This method fills a row in the array from the given coordinate to the
 * middle with `true`.
 * @param {Array.<Array.<(boolean|undefined)>>} array The array that will be altered.
 * @param {number} x X coordinate.
 * @param {number} y Y coordinate.
 */
function fillCircleArrayRowToMiddle(array, x, y) {
  let i;
  const radius = Math.floor(array.length / 2);
  if (x >= radius) {
    for (i = radius; i < x; i++) {
      array[i][y] = true;
    }
  } else if (x < radius) {
    for (i = x + 1; i < radius; i++) {
      array[i][y] = true;
    }
  }
}


/**
 * This methods creates a circle inside a fitting array. Points inside the
 * circle are marked by true, points on the outside are undefined.
 * It uses the midpoint circle algorithm.
 * A cache is used to increase performance.
 * @param {number} radius Radius.
 * @returns {Array.<Array.<(boolean|undefined)>>} An array with marked circle points.
 */
function getCircleArray(radius) {
  if (circleArrayCache[radius] !== undefined) {
    return circleArrayCache[radius];
  }

  const arraySize = radius * 2 + 1;
  const arr = new Array(arraySize);
  for (let i = 0; i < arraySize; i++) {
    arr[i] = new Array(arraySize);
  }

  let x = radius;
  let y = 0;
  let error = 0;

  while (x >= y) {
    fillCircleArrayRowToMiddle(arr, radius + x, radius + y);
    fillCircleArrayRowToMiddle(arr, radius + y, radius + x);
    fillCircleArrayRowToMiddle(arr, radius - y, radius + x);
    fillCircleArrayRowToMiddle(arr, radius - x, radius + y);
    fillCircleArrayRowToMiddle(arr, radius - x, radius - y);
    fillCircleArrayRowToMiddle(arr, radius - y, radius - x);
    fillCircleArrayRowToMiddle(arr, radius + y, radius - x);
    fillCircleArrayRowToMiddle(arr, radius + x, radius - y);

    y++;
    error += 1 + 2 * y;
    if (2 * (error - x) + 1 > 0) {
      x -= 1;
      error += 1 - 2 * x;
    }
  }

  circleArrayCache[radius] = arr;
  return arr;
}


/**
 * @param {!Object.<string, Array.<*>>} declutterReplays Declutter replays.
 * @param {CanvasRenderingContext2D} context Context.
 * @param {number} rotation Rotation.
 */
function replayDeclutter(declutterReplays, context, rotation) {
  const zs = Object.keys(declutterReplays).map(Number).sort(array["i" /* numberSafeCompareFunction */]);
  const skippedFeatureUids = {};
  for (let z = 0, zz = zs.length; z < zz; ++z) {
    const replayData = declutterReplays[zs[z].toString()];
    for (let i = 0, ii = replayData.length; i < ii;) {
      const replay = replayData[i++];
      const transform = replayData[i++];
      replay.replay(context, transform, rotation, skippedFeatureUids);
    }
  }
}


/**
 * @param {boolean} group Group with previous replay.
 * @return {module:ol/render/canvas~DeclutterGroup} Declutter instruction group.
 */
CanvasReplayGroup.prototype.addDeclutter = function(group) {
  let declutter = null;
  if (this.declutterTree_) {
    if (group) {
      declutter = this.declutterGroup_;
      /** @type {number} */ (declutter[4])++;
    } else {
      declutter = this.declutterGroup_ = Object(ol_extent["j" /* createEmpty */])();
      declutter.push(1);
    }
  }
  return declutter;
};


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/transform~Transform} transform Transform.
 */
CanvasReplayGroup.prototype.clip = function(context, transform) {
  const flatClipCoords = this.getClipCoords(transform);
  context.beginPath();
  context.moveTo(flatClipCoords[0], flatClipCoords[1]);
  context.lineTo(flatClipCoords[2], flatClipCoords[3]);
  context.lineTo(flatClipCoords[4], flatClipCoords[5]);
  context.lineTo(flatClipCoords[6], flatClipCoords[7]);
  context.clip();
};


/**
 * @param {Array.<module:ol/render/ReplayType>} replays Replays.
 * @return {boolean} Has replays of the provided types.
 */
CanvasReplayGroup.prototype.hasReplays = function(replays) {
  for (const zIndex in this.replaysByZIndex_) {
    const candidates = this.replaysByZIndex_[zIndex];
    for (let i = 0, ii = replays.length; i < ii; ++i) {
      if (replays[i] in candidates) {
        return true;
      }
    }
  }
  return false;
};


/**
 * FIXME empty description for jsdoc
 */
CanvasReplayGroup.prototype.finish = function() {
  for (const zKey in this.replaysByZIndex_) {
    const replays = this.replaysByZIndex_[zKey];
    for (const replayKey in replays) {
      replays[replayKey].finish();
    }
  }
};


/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {number} hitTolerance Hit tolerance in pixels.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T} callback Feature callback.
 * @param {Object.<string, module:ol/render/canvas~DeclutterGroup>} declutterReplays Declutter replays.
 * @return {T|undefined} Callback result.
 * @template T
 */
CanvasReplayGroup.prototype.forEachFeatureAtCoordinate = function(
  coordinate, resolution, rotation, hitTolerance, skippedFeaturesHash, callback, declutterReplays) {

  hitTolerance = Math.round(hitTolerance);
  const contextSize = hitTolerance * 2 + 1;
  const transform = Object(ol_transform["b" /* compose */])(this.hitDetectionTransform_,
    hitTolerance + 0.5, hitTolerance + 0.5,
    1 / resolution, -1 / resolution,
    -rotation,
    -coordinate[0], -coordinate[1]);
  const context = this.hitDetectionContext_;

  if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
    context.canvas.width = contextSize;
    context.canvas.height = contextSize;
  } else {
    context.clearRect(0, 0, contextSize, contextSize);
  }

  /**
   * @type {module:ol/extent~Extent}
   */
  let hitExtent;
  if (this.renderBuffer_ !== undefined) {
    hitExtent = Object(ol_extent["j" /* createEmpty */])();
    Object(ol_extent["r" /* extendCoordinate */])(hitExtent, coordinate);
    Object(ol_extent["c" /* buffer */])(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
  }

  const mask = getCircleArray(hitTolerance);
  let declutteredFeatures;
  if (this.declutterTree_) {
    declutteredFeatures = this.declutterTree_.all().map(function(entry) {
      return entry.value;
    });
  }

  let replayType;

  /**
   * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
   * @return {?} Callback result.
   */
  function featureCallback(feature) {
    const imageData = context.getImageData(0, 0, contextSize, contextSize).data;
    for (let i = 0; i < contextSize; i++) {
      for (let j = 0; j < contextSize; j++) {
        if (mask[i][j]) {
          if (imageData[(j * contextSize + i) * 4 + 3] > 0) {
            let result;
            if (!(declutteredFeatures && (replayType == ReplayType["a" /* default */].IMAGE || replayType == ReplayType["a" /* default */].TEXT)) ||
                declutteredFeatures.indexOf(feature) !== -1) {
              result = callback(feature);
            }
            if (result) {
              return result;
            } else {
              context.clearRect(0, 0, contextSize, contextSize);
              return undefined;
            }
          }
        }
      }
    }
  }

  /** @type {Array.<number>} */
  const zs = Object.keys(this.replaysByZIndex_).map(Number);
  zs.sort(array["i" /* numberSafeCompareFunction */]);

  let i, j, replays, replay, result;
  for (i = zs.length - 1; i >= 0; --i) {
    const zIndexKey = zs[i].toString();
    replays = this.replaysByZIndex_[zIndexKey];
    for (j = render_replay["a" /* ORDER */].length - 1; j >= 0; --j) {
      replayType = render_replay["a" /* ORDER */][j];
      replay = replays[replayType];
      if (replay !== undefined) {
        if (declutterReplays &&
            (replayType == ReplayType["a" /* default */].IMAGE || replayType == ReplayType["a" /* default */].TEXT)) {
          const declutter = declutterReplays[zIndexKey];
          if (!declutter) {
            declutterReplays[zIndexKey] = [replay, transform.slice(0)];
          } else {
            declutter.push(replay, transform.slice(0));
          }
        } else {
          result = replay.replayHitDetection(context, transform, rotation,
            skippedFeaturesHash, featureCallback, hitExtent);
          if (result) {
            return result;
          }
        }
      }
    }
  }
  return undefined;
};


/**
 * @param {module:ol/transform~Transform} transform Transform.
 * @return {Array.<number>} Clip coordinates.
 */
CanvasReplayGroup.prototype.getClipCoords = function(transform) {
  const maxExtent = this.maxExtent_;
  const minX = maxExtent[0];
  const minY = maxExtent[1];
  const maxX = maxExtent[2];
  const maxY = maxExtent[3];
  const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
  Object(flat_transform["c" /* transform2D */])(
    flatClipCoords, 0, 8, 2, transform, flatClipCoords);
  return flatClipCoords;
};


/**
 * @inheritDoc
 */
CanvasReplayGroup.prototype.getReplay = function(zIndex, replayType) {
  const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
  let replays = this.replaysByZIndex_[zIndexKey];
  if (replays === undefined) {
    replays = {};
    this.replaysByZIndex_[zIndexKey] = replays;
  }
  let replay = replays[replayType];
  if (replay === undefined) {
    const Constructor = BATCH_CONSTRUCTORS[replayType];
    replay = new Constructor(this.tolerance_, this.maxExtent_,
      this.resolution_, this.pixelRatio_, this.overlaps_, this.declutterTree_);
    replays[replayType] = replay;
  }
  return replay;
};


/**
 * @return {Object.<string, Object.<module:ol/render/ReplayType, module:ol/render/canvas/Replay>>} Replays.
 */
CanvasReplayGroup.prototype.getReplays = function() {
  return this.replaysByZIndex_;
};


/**
 * @inheritDoc
 */
CanvasReplayGroup.prototype.isEmpty = function() {
  return Object(obj["d" /* isEmpty */])(this.replaysByZIndex_);
};


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/transform~Transform} transform Transform.
 * @param {number} viewRotation View rotation.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @param {Array.<module:ol/render/ReplayType>=} opt_replayTypes Ordered replay types to replay.
 *     Default is {@link module:ol/render/replay~ORDER}
 * @param {Object.<string, module:ol/render/canvas~DeclutterGroup>=} opt_declutterReplays Declutter replays.
 */
CanvasReplayGroup.prototype.replay = function(context,
  transform, viewRotation, skippedFeaturesHash, opt_replayTypes, opt_declutterReplays) {

  /** @type {Array.<number>} */
  const zs = Object.keys(this.replaysByZIndex_).map(Number);
  zs.sort(array["i" /* numberSafeCompareFunction */]);

  // setup clipping so that the parts of over-simplified geometries are not
  // visible outside the current extent when panning
  context.save();
  this.clip(context, transform);

  const replayTypes = opt_replayTypes ? opt_replayTypes : render_replay["a" /* ORDER */];
  let i, ii, j, jj, replays, replay;
  for (i = 0, ii = zs.length; i < ii; ++i) {
    const zIndexKey = zs[i].toString();
    replays = this.replaysByZIndex_[zIndexKey];
    for (j = 0, jj = replayTypes.length; j < jj; ++j) {
      const replayType = replayTypes[j];
      replay = replays[replayType];
      if (replay !== undefined) {
        if (opt_declutterReplays &&
            (replayType == ReplayType["a" /* default */].IMAGE || replayType == ReplayType["a" /* default */].TEXT)) {
          const declutter = opt_declutterReplays[zIndexKey];
          if (!declutter) {
            opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];
          } else {
            declutter.push(replay, transform.slice(0));
          }
        } else {
          replay.replay(context, transform, viewRotation, skippedFeaturesHash);
        }
      }
    }
  }

  context.restore();
};

/* harmony default export */ var canvas_ReplayGroup = (CanvasReplayGroup);

// EXTERNAL MODULE: ../src/ol/renderer/canvas/Layer.js
var Layer = __webpack_require__(170);

// EXTERNAL MODULE: ../src/ol/renderer/vector.js
var vector = __webpack_require__(95);

// CONCATENATED MODULE: ../src/ol/renderer/canvas/VectorLayer.js
/**
 * @module ol/renderer/canvas/VectorLayer
 */














/**
 * @constructor
 * @extends {module:ol/renderer/canvas/Layer}
 * @param {module:ol/layer/Vector} vectorLayer Vector layer.
 * @api
 */
const CanvasVectorLayerRenderer = function(vectorLayer) {

  Layer["a" /* default */].call(this, vectorLayer);

  /**
   * Declutter tree.
   * @private
   */
  this.declutterTree_ = vectorLayer.getDeclutter() ? rbush_default()(9, undefined) : null;

  /**
   * @private
   * @type {boolean}
   */
  this.dirty_ = false;

  /**
   * @private
   * @type {number}
   */
  this.renderedRevision_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.renderedResolution_ = NaN;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.renderedExtent_ = Object(ol_extent["j" /* createEmpty */])();

  /**
   * @private
   * @type {function(module:ol/Feature, module:ol/Feature): number|null}
   */
  this.renderedRenderOrder_ = null;

  /**
   * @private
   * @type {module:ol/render/canvas/ReplayGroup}
   */
  this.replayGroup_ = null;

  /**
   * A new replay group had to be created by `prepareFrame()`
   * @type {boolean}
   */
  this.replayGroupChanged = true;

  /**
   * @type {CanvasRenderingContext2D}
   */
  this.context = Object(dom["a" /* createCanvasContext2D */])();

  Object(events["a" /* listen */])(render_canvas["o" /* labelCache */], EventType["a" /* default */].CLEAR, this.handleFontsChanged_, this);

};

Object(util["c" /* inherits */])(CanvasVectorLayerRenderer, Layer["a" /* default */]);


/**
 * Determine if this renderer handles the provided layer.
 * @param {module:ol/layer/Layer} layer The candidate layer.
 * @return {boolean} The renderer can render the layer.
 */
CanvasVectorLayerRenderer['handles'] = function(layer) {
  return layer.getType() === LayerType["a" /* default */].VECTOR;
};


/**
 * Create a layer renderer.
 * @param {module:ol/renderer/Map} mapRenderer The map renderer.
 * @param {module:ol/layer/Layer} layer The layer to be rendererd.
 * @return {module:ol/renderer/canvas/VectorLayer} The layer renderer.
 */
CanvasVectorLayerRenderer['create'] = function(mapRenderer, layer) {
  return new CanvasVectorLayerRenderer(/** @type {module:ol/layer/Vector} */ (layer));
};


/**
 * @inheritDoc
 */
CanvasVectorLayerRenderer.prototype.disposeInternal = function() {
  Object(events["c" /* unlisten */])(render_canvas["o" /* labelCache */], EventType["a" /* default */].CLEAR, this.handleFontsChanged_, this);
  Layer["a" /* default */].prototype.disposeInternal.call(this);
};


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/layer/Layer~State} layerState Layer state.
 */
CanvasVectorLayerRenderer.prototype.compose = function(context, frameState, layerState) {
  const extent = frameState.extent;
  const pixelRatio = frameState.pixelRatio;
  const skippedFeatureUids = layerState.managed ?
    frameState.skippedFeatureUids : {};
  const viewState = frameState.viewState;
  const projection = viewState.projection;
  const rotation = viewState.rotation;
  const projectionExtent = projection.getExtent();
  const vectorSource = /** @type {module:ol/source/Vector} */ (this.getLayer().getSource());

  let transform = this.getTransform(frameState, 0);

  // clipped rendering if layer extent is set
  const clipExtent = layerState.extent;
  const clipped = clipExtent !== undefined;
  if (clipped) {
    this.clip(context, frameState,  /** @type {module:ol/extent~Extent} */ (clipExtent));
  }
  const replayGroup = this.replayGroup_;
  if (replayGroup && !replayGroup.isEmpty()) {
    if (this.declutterTree_) {
      this.declutterTree_.clear();
    }
    const layer = /** @type {module:ol/layer/Vector} */ (this.getLayer());
    let drawOffsetX = 0;
    let drawOffsetY = 0;
    let replayContext;
    const transparentLayer = layerState.opacity !== 1;
    const hasRenderListeners = layer.hasListener(render_EventType["a" /* default */].RENDER);
    if (transparentLayer || hasRenderListeners) {
      let drawWidth = context.canvas.width;
      let drawHeight = context.canvas.height;
      if (rotation) {
        const drawSize = Math.round(Math.sqrt(drawWidth * drawWidth + drawHeight * drawHeight));
        drawOffsetX = (drawSize - drawWidth) / 2;
        drawOffsetY = (drawSize - drawHeight) / 2;
        drawWidth = drawHeight = drawSize;
      }
      // resize and clear
      this.context.canvas.width = drawWidth;
      this.context.canvas.height = drawHeight;
      replayContext = this.context;
    } else {
      replayContext = context;
    }

    const alpha = replayContext.globalAlpha;
    if (!transparentLayer) {
      // for performance reasons, context.save / context.restore is not used
      // to save and restore the transformation matrix and the opacity.
      // see http://jsperf.com/context-save-restore-versus-variable
      replayContext.globalAlpha = layerState.opacity;
    }

    if (replayContext != context) {
      replayContext.translate(drawOffsetX, drawOffsetY);
    }

    const width = frameState.size[0] * pixelRatio;
    const height = frameState.size[1] * pixelRatio;
    Object(render_canvas["s" /* rotateAtOffset */])(replayContext, -rotation,
      width / 2, height / 2);
    replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids);
    if (vectorSource.getWrapX() && projection.canWrapX() &&
        !Object(ol_extent["g" /* containsExtent */])(projectionExtent, extent)) {
      let startX = extent[0];
      const worldWidth = Object(ol_extent["E" /* getWidth */])(projectionExtent);
      let world = 0;
      let offsetX;
      while (startX < projectionExtent[0]) {
        --world;
        offsetX = worldWidth * world;
        transform = this.getTransform(frameState, offsetX);
        replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids);
        startX += worldWidth;
      }
      world = 0;
      startX = extent[2];
      while (startX > projectionExtent[2]) {
        ++world;
        offsetX = worldWidth * world;
        transform = this.getTransform(frameState, offsetX);
        replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids);
        startX -= worldWidth;
      }
    }
    Object(render_canvas["s" /* rotateAtOffset */])(replayContext, rotation,
      width / 2, height / 2);

    if (replayContext != context) {
      if (hasRenderListeners) {
        this.dispatchRenderEvent(replayContext, frameState, transform);
      }
      if (transparentLayer) {
        const mainContextAlpha = context.globalAlpha;
        context.globalAlpha = layerState.opacity;
        context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);
        context.globalAlpha = mainContextAlpha;
      } else {
        context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);
      }
      replayContext.translate(-drawOffsetX, -drawOffsetY);
    }

    if (!transparentLayer) {
      replayContext.globalAlpha = alpha;
    }
  }

  if (clipped) {
    context.restore();
  }
};


/**
 * @inheritDoc
 */
CanvasVectorLayerRenderer.prototype.composeFrame = function(frameState, layerState, context) {
  const transform = this.getTransform(frameState, 0);
  this.preCompose(context, frameState, transform);
  this.compose(context, frameState, layerState);
  this.postCompose(context, frameState, layerState, transform);
};


/**
 * @inheritDoc
 */
CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg) {
  if (!this.replayGroup_) {
    return undefined;
  } else {
    const resolution = frameState.viewState.resolution;
    const rotation = frameState.viewState.rotation;
    const layer = /** @type {module:ol/layer/Vector} */ (this.getLayer());
    /** @type {!Object.<string, boolean>} */
    const features = {};
    const result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},
      /**
       * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
       * @return {?} Callback result.
       */
      function(feature) {
        const key = Object(util["b" /* getUid */])(feature).toString();
        if (!(key in features)) {
          features[key] = true;
          return callback.call(thisArg, feature, layer);
        }
      }, null);
    return result;
  }
};


/**
 * @param {module:ol/events/Event} event Event.
 */
CanvasVectorLayerRenderer.prototype.handleFontsChanged_ = function(event) {
  const layer = this.getLayer();
  if (layer.getVisible() && this.replayGroup_) {
    layer.changed();
  }
};


/**
 * Handle changes in image style state.
 * @param {module:ol/events/Event} event Image style change event.
 * @private
 */
CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function(event) {
  this.renderIfReadyAndVisible();
};


/**
 * @inheritDoc
 */
CanvasVectorLayerRenderer.prototype.prepareFrame = function(frameState, layerState) {
  const vectorLayer = /** @type {module:ol/layer/Vector} */ (this.getLayer());
  const vectorSource = vectorLayer.getSource();

  const animating = frameState.viewHints[ViewHint["a" /* default */].ANIMATING];
  const interacting = frameState.viewHints[ViewHint["a" /* default */].INTERACTING];
  const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
  const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();

  if (!this.dirty_ && (!updateWhileAnimating && animating) ||
      (!updateWhileInteracting && interacting)) {
    return true;
  }

  const frameStateExtent = frameState.extent;
  const viewState = frameState.viewState;
  const projection = viewState.projection;
  const resolution = viewState.resolution;
  const pixelRatio = frameState.pixelRatio;
  const vectorLayerRevision = vectorLayer.getRevision();
  const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
  let vectorLayerRenderOrder = vectorLayer.getRenderOrder();

  if (vectorLayerRenderOrder === undefined) {
    vectorLayerRenderOrder = vector["a" /* defaultOrder */];
  }

  const extent = Object(ol_extent["c" /* buffer */])(frameStateExtent,
    vectorLayerRenderBuffer * resolution);
  const projectionExtent = viewState.projection.getExtent();

  if (vectorSource.getWrapX() && viewState.projection.canWrapX() &&
      !Object(ol_extent["g" /* containsExtent */])(projectionExtent, frameState.extent)) {
    // For the replay group, we need an extent that intersects the real world
    // (-180° to +180°). To support geometries in a coordinate range from -540°
    // to +540°, we add at least 1 world width on each side of the projection
    // extent. If the viewport is wider than the world, we need to add half of
    // the viewport width to make sure we cover the whole viewport.
    const worldWidth = Object(ol_extent["E" /* getWidth */])(projectionExtent);
    const gutter = Math.max(Object(ol_extent["E" /* getWidth */])(extent) / 2, worldWidth);
    extent[0] = projectionExtent[0] - gutter;
    extent[2] = projectionExtent[2] + gutter;
  }

  if (!this.dirty_ &&
      this.renderedResolution_ == resolution &&
      this.renderedRevision_ == vectorLayerRevision &&
      this.renderedRenderOrder_ == vectorLayerRenderOrder &&
      Object(ol_extent["g" /* containsExtent */])(this.renderedExtent_, extent)) {
    this.replayGroupChanged = false;
    return true;
  }

  this.replayGroup_ = null;

  this.dirty_ = false;

  const replayGroup = new canvas_ReplayGroup(
    Object(vector["c" /* getTolerance */])(resolution, pixelRatio), extent, resolution,
    pixelRatio, vectorSource.getOverlaps(), this.declutterTree_, vectorLayer.getRenderBuffer());
  vectorSource.loadFeatures(extent, resolution, projection);
  /**
   * @param {module:ol/Feature} feature Feature.
   * @this {module:ol/renderer/canvas/VectorLayer}
   */
  const render = function(feature) {
    let styles;
    const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
    if (styleFunction) {
      styles = styleFunction(feature, resolution);
    }
    if (styles) {
      const dirty = this.renderFeature(
        feature, resolution, pixelRatio, styles, replayGroup);
      this.dirty_ = this.dirty_ || dirty;
    }
  }.bind(this);
  if (vectorLayerRenderOrder) {
    /** @type {Array.<module:ol/Feature>} */
    const features = [];
    vectorSource.forEachFeatureInExtent(extent,
      /**
       * @param {module:ol/Feature} feature Feature.
       */
      function(feature) {
        features.push(feature);
      }, this);
    features.sort(vectorLayerRenderOrder);
    for (let i = 0, ii = features.length; i < ii; ++i) {
      render(features[i]);
    }
  } else {
    vectorSource.forEachFeatureInExtent(extent, render, this);
  }
  replayGroup.finish();

  this.renderedResolution_ = resolution;
  this.renderedRevision_ = vectorLayerRevision;
  this.renderedRenderOrder_ = vectorLayerRenderOrder;
  this.renderedExtent_ = extent;
  this.replayGroup_ = replayGroup;

  this.replayGroupChanged = true;
  return true;
};


/**
 * @param {module:ol/Feature} feature Feature.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {(module:ol/style/Style|Array.<module:ol/style/Style>)} styles The style or array of styles.
 * @param {module:ol/render/canvas/ReplayGroup} replayGroup Replay group.
 * @return {boolean} `true` if an image is loading.
 */
CanvasVectorLayerRenderer.prototype.renderFeature = function(feature, resolution, pixelRatio, styles, replayGroup) {
  if (!styles) {
    return false;
  }
  let loading = false;
  if (Array.isArray(styles)) {
    for (let i = 0, ii = styles.length; i < ii; ++i) {
      loading = Object(vector["d" /* renderFeature */])(
        replayGroup, feature, styles[i],
        Object(vector["b" /* getSquaredTolerance */])(resolution, pixelRatio),
        this.handleStyleImageChange_, this) || loading;
    }
  } else {
    loading = Object(vector["d" /* renderFeature */])(
      replayGroup, feature, styles,
      Object(vector["b" /* getSquaredTolerance */])(resolution, pixelRatio),
      this.handleStyleImageChange_, this);
  }
  return loading;
};
/* harmony default export */ var VectorLayer = (CanvasVectorLayerRenderer);

// EXTERNAL MODULE: ../src/ol/TileState.js
var TileState = __webpack_require__(19);

// EXTERNAL MODULE: ../src/ol/layer/VectorTileRenderType.js
var VectorTileRenderType = __webpack_require__(118);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// EXTERNAL MODULE: ../src/ol/proj/Units.js
var Units = __webpack_require__(59);

// CONCATENATED MODULE: ../src/ol/renderer/canvas/VectorTileLayer.js
/**
 * @module ol/renderer/canvas/VectorTileLayer
 */




















/**
 * @type {!Object.<string, Array.<module:ol/render/ReplayType>>}
 */
const IMAGE_REPLAYS = {
  'image': [ReplayType["a" /* default */].POLYGON, ReplayType["a" /* default */].CIRCLE,
    ReplayType["a" /* default */].LINE_STRING, ReplayType["a" /* default */].IMAGE, ReplayType["a" /* default */].TEXT],
  'hybrid': [ReplayType["a" /* default */].POLYGON, ReplayType["a" /* default */].LINE_STRING]
};


/**
 * @type {!Object.<string, Array.<module:ol/render/ReplayType>>}
 */
const VECTOR_REPLAYS = {
  'image': [ReplayType["a" /* default */].DEFAULT],
  'hybrid': [ReplayType["a" /* default */].IMAGE, ReplayType["a" /* default */].TEXT, ReplayType["a" /* default */].DEFAULT],
  'vector': render_replay["a" /* ORDER */]
};


/**
 * @constructor
 * @extends {module:ol/renderer/canvas/TileLayer}
 * @param {module:ol/layer/VectorTile} layer VectorTile layer.
 * @api
 */
const CanvasVectorTileLayerRenderer = function(layer) {

  /**
   * @type {CanvasRenderingContext2D}
   */
  this.context = null;

  TileLayer["a" /* default */].call(this, layer);

  /**
   * Declutter tree.
   * @private
   */
  this.declutterTree_ = layer.getDeclutter() ? rbush_default()(9, undefined) : null;

  /**
   * @private
   * @type {boolean}
   */
  this.dirty_ = false;

  /**
   * @private
   * @type {number}
   */
  this.renderedLayerRevision_;

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.tmpTransform_ = Object(ol_transform["c" /* create */])();

  // Use lower resolution for pure vector rendering. Closest resolution otherwise.
  this.zDirection = layer.getRenderMode() == VectorTileRenderType["a" /* default */].VECTOR ? 1 : 0;

  Object(events["a" /* listen */])(render_canvas["o" /* labelCache */], EventType["a" /* default */].CLEAR, this.handleFontsChanged_, this);

};

Object(util["c" /* inherits */])(CanvasVectorTileLayerRenderer, TileLayer["a" /* default */]);


/**
 * Determine if this renderer handles the provided layer.
 * @param {module:ol/layer/Layer} layer The candidate layer.
 * @return {boolean} The renderer can render the layer.
 */
CanvasVectorTileLayerRenderer['handles'] = function(layer) {
  return layer.getType() === LayerType["a" /* default */].VECTOR_TILE;
};


/**
 * Create a layer renderer.
 * @param {module:ol/renderer/Map} mapRenderer The map renderer.
 * @param {module:ol/layer/Layer} layer The layer to be rendererd.
 * @return {module:ol/renderer/canvas/VectorTileLayer} The layer renderer.
 */
CanvasVectorTileLayerRenderer['create'] = function(mapRenderer, layer) {
  return new CanvasVectorTileLayerRenderer(/** @type {module:ol/layer/VectorTile} */ (layer));
};


/**
 * @inheritDoc
 */
CanvasVectorTileLayerRenderer.prototype.disposeInternal = function() {
  Object(events["c" /* unlisten */])(render_canvas["o" /* labelCache */], EventType["a" /* default */].CLEAR, this.handleFontsChanged_, this);
  TileLayer["a" /* default */].prototype.disposeInternal.call(this);
};


/**
 * @inheritDoc
 */
CanvasVectorTileLayerRenderer.prototype.getTile = function(z, x, y, pixelRatio, projection) {
  const tile = TileLayer["a" /* default */].prototype.getTile.call(this, z, x, y, pixelRatio, projection);
  if (tile.getState() === TileState["a" /* default */].LOADED) {
    this.createReplayGroup_(tile, pixelRatio, projection);
    if (this.context) {
      this.renderTileImage_(tile, pixelRatio, projection);
    }
  }
  return tile;
};


/**
 * @inheritDoc
 */
CanvasVectorTileLayerRenderer.prototype.prepareFrame = function(frameState, layerState) {
  const layer = this.getLayer();
  const layerRevision = layer.getRevision();
  if (this.renderedLayerRevision_ != layerRevision) {
    this.renderedTiles.length = 0;
    const renderMode = layer.getRenderMode();
    if (!this.context && renderMode != VectorTileRenderType["a" /* default */].VECTOR) {
      this.context = Object(dom["a" /* createCanvasContext2D */])();
    }
    if (this.context && renderMode == VectorTileRenderType["a" /* default */].VECTOR) {
      this.context = null;
    }
  }
  this.renderedLayerRevision_ = layerRevision;
  return TileLayer["a" /* default */].prototype.prepareFrame.apply(this, arguments);
};


/**
 * @param {module:ol/VectorImageTile} tile Tile.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @private
 */
CanvasVectorTileLayerRenderer.prototype.createReplayGroup_ = function(tile, pixelRatio, projection) {
  const layer = this.getLayer();
  const revision = layer.getRevision();
  const renderOrder = /** @type {module:ol/render~OrderFunction} */ (layer.getRenderOrder()) || null;

  const replayState = tile.getReplayState(layer);
  if (!replayState.dirty && replayState.renderedRevision == revision &&
      replayState.renderedRenderOrder == renderOrder) {
    return;
  }

  const source = /** @type {module:ol/source/VectorTile} */ (layer.getSource());
  const sourceTileGrid = source.getTileGrid();
  const tileGrid = source.getTileGridForProjection(projection);
  const resolution = tileGrid.getResolution(tile.tileCoord[0]);
  const tileExtent = tile.extent;

  const zIndexKeys = {};
  for (let t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
    const sourceTile = tile.getTile(tile.tileKeys[t]);
    if (sourceTile.getState() != TileState["a" /* default */].LOADED) {
      continue;
    }

    const sourceTileCoord = sourceTile.tileCoord;
    const sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
    const sharedExtent = Object(ol_extent["B" /* getIntersection */])(tileExtent, sourceTileExtent);
    const bufferedExtent = Object(ol_extent["p" /* equals */])(sourceTileExtent, sharedExtent) ? null :
      Object(ol_extent["c" /* buffer */])(sharedExtent, layer.getRenderBuffer() * resolution, this.tmpExtent);
    const tileProjection = sourceTile.getProjection();
    let reproject = false;
    if (!Object(proj["f" /* equivalent */])(projection, tileProjection)) {
      reproject = true;
      sourceTile.setProjection(projection);
    }
    replayState.dirty = false;
    const replayGroup = new canvas_ReplayGroup(0, sharedExtent, resolution,
      pixelRatio, source.getOverlaps(), this.declutterTree_, layer.getRenderBuffer());
    const squaredTolerance = Object(vector["b" /* getSquaredTolerance */])(resolution, pixelRatio);

    /**
     * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
     * @this {module:ol/renderer/canvas/VectorTileLayer}
     */
    const render = function(feature) {
      let styles;
      const styleFunction = feature.getStyleFunction() || layer.getStyleFunction();
      if (styleFunction) {
        styles = styleFunction(feature, resolution);
      }
      if (styles) {
        const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup);
        this.dirty_ = this.dirty_ || dirty;
        replayState.dirty = replayState.dirty || dirty;
      }
    };

    const features = sourceTile.getFeatures();
    if (renderOrder && renderOrder !== replayState.renderedRenderOrder) {
      features.sort(renderOrder);
    }
    for (let i = 0, ii = features.length; i < ii; ++i) {
      const feature = features[i];
      if (reproject) {
        if (tileProjection.getUnits() == Units["b" /* default */].TILE_PIXELS) {
          // projected tile extent
          tileProjection.setWorldExtent(sourceTileExtent);
          // tile extent in tile pixel space
          tileProjection.setExtent(sourceTile.getExtent());
        }
        feature.getGeometry().transform(tileProjection, projection);
      }
      if (!bufferedExtent || Object(ol_extent["F" /* intersects */])(bufferedExtent, feature.getGeometry().getExtent())) {
        render.call(this, feature);
      }
    }
    replayGroup.finish();
    for (const r in replayGroup.getReplays()) {
      zIndexKeys[r] = true;
    }
    sourceTile.setReplayGroup(layer, tile.tileCoord.toString(), replayGroup);
  }
  replayState.renderedRevision = revision;
  replayState.renderedRenderOrder = renderOrder;
};


/**
 * @inheritDoc
 */
CanvasVectorTileLayerRenderer.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg) {
  const resolution = frameState.viewState.resolution;
  const rotation = frameState.viewState.rotation;
  hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;
  const layer = this.getLayer();
  /** @type {!Object.<string, boolean>} */
  const features = {};

  /** @type {Array.<module:ol/VectorImageTile>} */
  const renderedTiles = this.renderedTiles;

  let bufferedExtent, found;
  let i, ii, replayGroup;
  for (i = 0, ii = renderedTiles.length; i < ii; ++i) {
    const tile = renderedTiles[i];
    bufferedExtent = Object(ol_extent["c" /* buffer */])(tile.extent, hitTolerance * resolution, bufferedExtent);
    if (!Object(ol_extent["f" /* containsCoordinate */])(bufferedExtent, coordinate)) {
      continue;
    }
    for (let t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
      const sourceTile = tile.getTile(tile.tileKeys[t]);
      if (sourceTile.getState() != TileState["a" /* default */].LOADED) {
        continue;
      }
      replayGroup = sourceTile.getReplayGroup(layer, tile.tileCoord.toString());
      found = found || replayGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},
        /**
         * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
         * @return {?} Callback result.
         */
        function(feature) {
          const key = Object(util["b" /* getUid */])(feature).toString();
          if (!(key in features)) {
            features[key] = true;
            return callback.call(thisArg, feature, layer);
          }
        }, null);
    }
  }
  return found;
};


/**
 * @param {module:ol/VectorTile} tile Tile.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @return {module:ol/transform~Transform} transform Transform.
 * @private
 */
CanvasVectorTileLayerRenderer.prototype.getReplayTransform_ = function(tile, frameState) {
  const layer = this.getLayer();
  const source = /** @type {module:ol/source/VectorTile} */ (layer.getSource());
  const tileGrid = source.getTileGrid();
  const tileCoord = tile.tileCoord;
  const tileResolution = tileGrid.getResolution(tileCoord[0]);
  const viewState = frameState.viewState;
  const pixelRatio = frameState.pixelRatio;
  const renderResolution = viewState.resolution / pixelRatio;
  const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
  const center = viewState.center;
  const origin = Object(ol_extent["C" /* getTopLeft */])(tileExtent);
  const size = frameState.size;
  const offsetX = Math.round(pixelRatio * size[0] / 2);
  const offsetY = Math.round(pixelRatio * size[1] / 2);
  return Object(ol_transform["b" /* compose */])(this.tmpTransform_,
    offsetX, offsetY,
    tileResolution / renderResolution, tileResolution / renderResolution,
    viewState.rotation,
    (origin[0] - center[0]) / tileResolution,
    (center[1] - origin[1]) / tileResolution);
};


/**
 * @param {module:ol/events/Event} event Event.
 */
CanvasVectorTileLayerRenderer.prototype.handleFontsChanged_ = function(event) {
  const layer = this.getLayer();
  if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {
    layer.changed();
  }
};


/**
 * Handle changes in image style state.
 * @param {module:ol/events/Event} event Image style change event.
 * @private
 */
CanvasVectorTileLayerRenderer.prototype.handleStyleImageChange_ = function(event) {
  this.renderIfReadyAndVisible();
};


/**
 * @inheritDoc
 */
CanvasVectorTileLayerRenderer.prototype.postCompose = function(context, frameState, layerState) {
  const layer = this.getLayer();
  const renderMode = layer.getRenderMode();
  if (renderMode != VectorTileRenderType["a" /* default */].IMAGE) {
    const declutterReplays = layer.getDeclutter() ? {} : null;
    const source = /** @type {module:ol/source/VectorTile} */ (layer.getSource());
    const replayTypes = VECTOR_REPLAYS[renderMode];
    const pixelRatio = frameState.pixelRatio;
    const rotation = frameState.viewState.rotation;
    const size = frameState.size;
    let offsetX, offsetY;
    if (rotation) {
      offsetX = Math.round(pixelRatio * size[0] / 2);
      offsetY = Math.round(pixelRatio * size[1] / 2);
      Object(render_canvas["s" /* rotateAtOffset */])(context, -rotation, offsetX, offsetY);
    }
    if (declutterReplays) {
      this.declutterTree_.clear();
    }
    const tiles = this.renderedTiles;
    const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
    const clips = [];
    const zs = [];
    for (let i = tiles.length - 1; i >= 0; --i) {
      const tile = /** @type {module:ol/VectorImageTile} */ (tiles[i]);
      if (tile.getState() == TileState["a" /* default */].ABORT) {
        continue;
      }
      const tileCoord = tile.tileCoord;
      const worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tile.extent[0];
      let transform = undefined;
      for (let t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
        const sourceTile = tile.getTile(tile.tileKeys[t]);
        if (sourceTile.getState() != TileState["a" /* default */].LOADED) {
          continue;
        }
        const replayGroup = sourceTile.getReplayGroup(layer, tileCoord.toString());
        if (renderMode != VectorTileRenderType["a" /* default */].VECTOR && !replayGroup.hasReplays(replayTypes)) {
          continue;
        }
        if (!transform) {
          transform = this.getTransform(frameState, worldOffset);
        }
        const currentZ = sourceTile.tileCoord[0];
        const currentClip = replayGroup.getClipCoords(transform);
        context.save();
        context.globalAlpha = layerState.opacity;
        // Create a clip mask for regions in this low resolution tile that are
        // already filled by a higher resolution tile
        for (let j = 0, jj = clips.length; j < jj; ++j) {
          const clip = clips[j];
          if (currentZ < zs[j]) {
            context.beginPath();
            // counter-clockwise (outer ring) for current tile
            context.moveTo(currentClip[0], currentClip[1]);
            context.lineTo(currentClip[2], currentClip[3]);
            context.lineTo(currentClip[4], currentClip[5]);
            context.lineTo(currentClip[6], currentClip[7]);
            // clockwise (inner ring) for higher resolution tile
            context.moveTo(clip[6], clip[7]);
            context.lineTo(clip[4], clip[5]);
            context.lineTo(clip[2], clip[3]);
            context.lineTo(clip[0], clip[1]);
            context.clip();
          }
        }
        replayGroup.replay(context, transform, rotation, {}, replayTypes, declutterReplays);
        context.restore();
        clips.push(currentClip);
        zs.push(currentZ);
      }
    }
    if (declutterReplays) {
      replayDeclutter(declutterReplays, context, rotation);
    }
    if (rotation) {
      Object(render_canvas["s" /* rotateAtOffset */])(context, rotation,
        /** @type {number} */ (offsetX), /** @type {number} */ (offsetY));
    }
  }
  TileLayer["a" /* default */].prototype.postCompose.apply(this, arguments);
};


/**
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {(module:ol/style/Style|Array.<module:ol/style/Style>)} styles The style or array of styles.
 * @param {module:ol/render/canvas/ReplayGroup} replayGroup Replay group.
 * @return {boolean} `true` if an image is loading.
 */
CanvasVectorTileLayerRenderer.prototype.renderFeature = function(feature, squaredTolerance, styles, replayGroup) {
  if (!styles) {
    return false;
  }
  let loading = false;
  if (Array.isArray(styles)) {
    for (let i = 0, ii = styles.length; i < ii; ++i) {
      loading = Object(vector["d" /* renderFeature */])(
        replayGroup, feature, styles[i], squaredTolerance,
        this.handleStyleImageChange_, this) || loading;
    }
  } else {
    loading = Object(vector["d" /* renderFeature */])(
      replayGroup, feature, styles, squaredTolerance,
      this.handleStyleImageChange_, this);
  }
  return loading;
};


/**
 * @param {module:ol/VectorImageTile} tile Tile.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @private
 */
CanvasVectorTileLayerRenderer.prototype.renderTileImage_ = function(
  tile, pixelRatio, projection) {
  const layer = this.getLayer();
  const replayState = tile.getReplayState(layer);
  const revision = layer.getRevision();
  const replays = IMAGE_REPLAYS[layer.getRenderMode()];
  if (replays && replayState.renderedTileRevision !== revision) {
    replayState.renderedTileRevision = revision;
    const tileCoord = tile.wrappedTileCoord;
    const z = tileCoord[0];
    const source = /** @type {module:ol/source/VectorTile} */ (layer.getSource());
    const tileGrid = source.getTileGridForProjection(projection);
    const resolution = tileGrid.getResolution(z);
    const context = tile.getContext(layer);
    const size = source.getTilePixelSize(z, pixelRatio, projection);
    context.canvas.width = size[0];
    context.canvas.height = size[1];
    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
    for (let i = 0, ii = tile.tileKeys.length; i < ii; ++i) {
      const sourceTile = tile.getTile(tile.tileKeys[i]);
      if (sourceTile.getState() != TileState["a" /* default */].LOADED) {
        continue;
      }
      const pixelScale = pixelRatio / resolution;
      const transform = Object(ol_transform["f" /* reset */])(this.tmpTransform_);
      Object(ol_transform["h" /* scale */])(transform, pixelScale, -pixelScale);
      Object(ol_transform["j" /* translate */])(transform, -tileExtent[0], -tileExtent[3]);
      const replayGroup = sourceTile.getReplayGroup(layer, tile.tileCoord.toString());
      replayGroup.replay(context, transform, 0, {}, replays);
    }
  }
};

/* harmony default export */ var VectorTileLayer = (CanvasVectorTileLayerRenderer);

// CONCATENATED MODULE: ../src/ol/Map.js
/**
 * @module ol/Map
 */











/**
 * @classdesc
 * The map is the core component of OpenLayers. For a map to render, a view,
 * one or more layers, and a target container are needed:
 *
 *     import Map from 'ol/Map';
 *     import View from 'ol/View';
 *     import TileLayer from 'ol/layer/Tile';
 *     import OSM from 'ol/source/OSM';
 *
 *     var map = new Map({
 *       view: new View({
 *         center: [0, 0],
 *         zoom: 1
 *       }),
 *       layers: [
 *         new TileLayer({
 *           source: new OSM()
 *         })
 *       ],
 *       target: 'map'
 *     });
 *
 * The above snippet creates a map using a {@link module:ol/layer/Tile} to
 * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
 * element with the id `map`.
 *
 * The constructor places a viewport container (with CSS class name
 * `ol-viewport`) in the target element (see `getViewport()`), and then two
 * further elements within the viewport: one with CSS class name
 * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
 * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
 * option of {@link module:ol/Overlay~Overlay} for the difference). The map
 * itself is placed in a further element within the viewport.
 *
 * Layers are stored as a {@link module:ol/Collection~Collection} in
 * layerGroups. A top-level group is provided by the library. This is what is
 * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
 * options are added to this group, and `addLayer` and `removeLayer` change the
 * layer collection in the group. `getLayers` is a convenience function for
 * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}
 * is a subclass of {@link module:ol/layer/Base}, so layers entered in the
 * options or added with `addLayer` can be groups, which can contain further
 * groups, and so on.
 *
 * @constructor
 * @extends {module:ol/PluggableMap}
 * @param {module:ol/PluggableMap~MapOptions} options Map options.
 * @fires module:ol/MapBrowserEvent~MapBrowserEvent
 * @fires module:ol/MapEvent~MapEvent
 * @fires module:ol/render/Event~RenderEvent#postcompose
 * @fires module:ol/render/Event~RenderEvent#precompose
 * @api
 */
const Map_Map = function(options) {
  options = Object(obj["a" /* assign */])({}, options);
  if (!options.controls) {
    options.controls = Object(control_util["a" /* defaults */])();
  }
  if (!options.interactions) {
    options.interactions = Object(interaction["l" /* defaults */])();
  }

  PluggableMap["a" /* default */].call(this, options);
};

Object(util["c" /* inherits */])(Map_Map, PluggableMap["a" /* default */]);

Map_Map.prototype.createRenderer = function() {
  const renderer = new Map["a" /* default */](this);
  renderer.registerLayerRenderers([
    ImageLayer["a" /* default */],
    TileLayer["a" /* default */],
    VectorLayer,
    VectorTileLayer
  ]);
  return renderer;
};

/* harmony default export */ var ol_Map = __webpack_exports__["a"] = (Map_Map);


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return readBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return readBooleanString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return readDateTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return readDecimal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return readDecimalString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return readNonNegativeInteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return readNonNegativeIntegerString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return readString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return writeBooleanTextNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return writeCDATASection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return writeDateTimeTextNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return writeDecimalTextNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return writeNonNegativeIntegerTextNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return writeStringTextNode; });
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(117);
/**
 * @module ol/format/xsd
 */




/**
 * @param {Node} node Node.
 * @return {boolean|undefined} Boolean.
 */
function readBoolean(node) {
  const s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* getAllTextContent */ "e"])(node, false);
  return readBooleanString(s);
}


/**
 * @param {string} string String.
 * @return {boolean|undefined} Boolean.
 */
function readBooleanString(string) {
  const m = /^\s*(true|1)|(false|0)\s*$/.exec(string);
  if (m) {
    return m[1] !== undefined || false;
  } else {
    return undefined;
  }
}


/**
 * @param {Node} node Node.
 * @return {number|undefined} DateTime in seconds.
 */
function readDateTime(node) {
  const s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* getAllTextContent */ "e"])(node, false);
  const dateTime = Date.parse(s);
  return isNaN(dateTime) ? undefined : dateTime / 1000;
}


/**
 * @param {Node} node Node.
 * @return {number|undefined} Decimal.
 */
function readDecimal(node) {
  const s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* getAllTextContent */ "e"])(node, false);
  return readDecimalString(s);
}


/**
 * @param {string} string String.
 * @return {number|undefined} Decimal.
 */
function readDecimalString(string) {
  // FIXME check spec
  const m = /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)\s*$/i.exec(string);
  if (m) {
    return parseFloat(m[1]);
  } else {
    return undefined;
  }
}


/**
 * @param {Node} node Node.
 * @return {number|undefined} Non negative integer.
 */
function readNonNegativeInteger(node) {
  const s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* getAllTextContent */ "e"])(node, false);
  return readNonNegativeIntegerString(s);
}


/**
 * @param {string} string String.
 * @return {number|undefined} Non negative integer.
 */
function readNonNegativeIntegerString(string) {
  const m = /^\s*(\d+)\s*$/.exec(string);
  if (m) {
    return parseInt(m[1], 10);
  } else {
    return undefined;
  }
}


/**
 * @param {Node} node Node.
 * @return {string|undefined} String.
 */
function readString(node) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* getAllTextContent */ "e"])(node, false).trim();
}


/**
 * @param {Node} node Node to append a TextNode with the boolean to.
 * @param {boolean} bool Boolean.
 */
function writeBooleanTextNode(node, bool) {
  writeStringTextNode(node, (bool) ? '1' : '0');
}


/**
 * @param {Node} node Node to append a CDATA Section with the string to.
 * @param {string} string String.
 */
function writeCDATASection(node, string) {
  node.appendChild(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* DOCUMENT */ "a"].createCDATASection(string));
}


/**
 * @param {Node} node Node to append a TextNode with the dateTime to.
 * @param {number} dateTime DateTime in seconds.
 */
function writeDateTimeTextNode(node, dateTime) {
  const date = new Date(dateTime * 1000);
  const string = date.getUTCFullYear() + '-' +
      Object(_string_js__WEBPACK_IMPORTED_MODULE_1__[/* padNumber */ "b"])(date.getUTCMonth() + 1, 2) + '-' +
      Object(_string_js__WEBPACK_IMPORTED_MODULE_1__[/* padNumber */ "b"])(date.getUTCDate(), 2) + 'T' +
      Object(_string_js__WEBPACK_IMPORTED_MODULE_1__[/* padNumber */ "b"])(date.getUTCHours(), 2) + ':' +
      Object(_string_js__WEBPACK_IMPORTED_MODULE_1__[/* padNumber */ "b"])(date.getUTCMinutes(), 2) + ':' +
      Object(_string_js__WEBPACK_IMPORTED_MODULE_1__[/* padNumber */ "b"])(date.getUTCSeconds(), 2) + 'Z';
  node.appendChild(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* DOCUMENT */ "a"].createTextNode(string));
}


/**
 * @param {Node} node Node to append a TextNode with the decimal to.
 * @param {number} decimal Decimal.
 */
function writeDecimalTextNode(node, decimal) {
  const string = decimal.toPrecision();
  node.appendChild(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* DOCUMENT */ "a"].createTextNode(string));
}


/**
 * @param {Node} node Node to append a TextNode with the decimal to.
 * @param {number} nonNegativeInteger Non negative integer.
 */
function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {
  const string = nonNegativeInteger.toString();
  node.appendChild(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* DOCUMENT */ "a"].createTextNode(string));
}


/**
 * @param {Node} node Node to append a TextNode with the string to.
 * @param {string} string String.
 */
function writeStringTextNode(node, string) {
  node.appendChild(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* DOCUMENT */ "a"].createTextNode(string));
}


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/sphere.js
var sphere = __webpack_require__(167);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/proj/Projection.js
var Projection = __webpack_require__(68);

// EXTERNAL MODULE: ../src/ol/proj/Units.js
var Units = __webpack_require__(59);

// CONCATENATED MODULE: ../src/ol/proj/epsg3857.js
/**
 * @module ol/proj/epsg3857
 */






/**
 * Radius of WGS84 sphere
 *
 * @const
 * @type {number}
 */
const RADIUS = 6378137;


/**
 * @const
 * @type {number}
 */
const HALF_SIZE = Math.PI * RADIUS;


/**
 * @const
 * @type {module:ol/extent~Extent}
 */
const EXTENT = [
  -HALF_SIZE, -HALF_SIZE,
  HALF_SIZE, HALF_SIZE
];


/**
 * @const
 * @type {module:ol/extent~Extent}
 */
const WORLD_EXTENT = [-180, -85, 180, 85];


/**
 * @classdesc
 * Projection object for web/spherical Mercator (EPSG:3857).
 *
 * @constructor
 * @extends {module:ol/proj/Projection}
 * @param {string} code Code.
 */
function EPSG3857Projection(code) {
  Projection["a" /* default */].call(this, {
    code: code,
    units: Units["b" /* default */].METERS,
    extent: EXTENT,
    global: true,
    worldExtent: WORLD_EXTENT,
    getPointResolution: function(resolution, point) {
      return resolution / Object(math["b" /* cosh */])(point[1] / RADIUS);
    }
  });
}
Object(util["c" /* inherits */])(EPSG3857Projection, Projection["a" /* default */]);


/**
 * Projections equal to EPSG:3857.
 *
 * @const
 * @type {Array.<module:ol/proj/Projection>}
 */
const PROJECTIONS = [
  new EPSG3857Projection('EPSG:3857'),
  new EPSG3857Projection('EPSG:102100'),
  new EPSG3857Projection('EPSG:102113'),
  new EPSG3857Projection('EPSG:900913'),
  new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),
  new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),
  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')
];


/**
 * Transformation from EPSG:4326 to EPSG:3857.
 *
 * @param {Array.<number>} input Input array of coordinate values.
 * @param {Array.<number>=} opt_output Output array of coordinate values.
 * @param {number=} opt_dimension Dimension (default is `2`).
 * @return {Array.<number>} Output array of coordinate values.
 */
function fromEPSG4326(input, opt_output, opt_dimension) {
  const length = input.length;
  const dimension = opt_dimension > 1 ? opt_dimension : 2;
  let output = opt_output;
  if (output === undefined) {
    if (dimension > 2) {
      // preserve values beyond second dimension
      output = input.slice();
    } else {
      output = new Array(length);
    }
  }
  const halfSize = HALF_SIZE;
  for (let i = 0; i < length; i += dimension) {
    output[i] = halfSize * input[i] / 180;
    let y = RADIUS *
        Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));
    if (y > halfSize) {
      y = halfSize;
    } else if (y < -halfSize) {
      y = -halfSize;
    }
    output[i + 1] = y;
  }
  return output;
}


/**
 * Transformation from EPSG:3857 to EPSG:4326.
 *
 * @param {Array.<number>} input Input array of coordinate values.
 * @param {Array.<number>=} opt_output Output array of coordinate values.
 * @param {number=} opt_dimension Dimension (default is `2`).
 * @return {Array.<number>} Output array of coordinate values.
 */
function epsg3857_toEPSG4326(input, opt_output, opt_dimension) {
  const length = input.length;
  const dimension = opt_dimension > 1 ? opt_dimension : 2;
  let output = opt_output;
  if (output === undefined) {
    if (dimension > 2) {
      // preserve values beyond second dimension
      output = input.slice();
    } else {
      output = new Array(length);
    }
  }
  for (let i = 0; i < length; i += dimension) {
    output[i] = 180 * input[i] / HALF_SIZE;
    output[i + 1] = 360 * Math.atan(
      Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;
  }
  return output;
}

// CONCATENATED MODULE: ../src/ol/proj/epsg4326.js
/**
 * @module ol/proj/epsg4326
 */





/**
 * Semi-major radius of the WGS84 ellipsoid.
 *
 * @const
 * @type {number}
 */
const epsg4326_RADIUS = 6378137;


/**
 * Extent of the EPSG:4326 projection which is the whole world.
 *
 * @const
 * @type {module:ol/extent~Extent}
 */
const epsg4326_EXTENT = [-180, -90, 180, 90];


/**
 * @const
 * @type {number}
 */
const METERS_PER_UNIT = Math.PI * epsg4326_RADIUS / 180;


/**
 * @classdesc
 * Projection object for WGS84 geographic coordinates (EPSG:4326).
 *
 * Note that OpenLayers does not strictly comply with the EPSG definition.
 * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
 * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
 *
 * @constructor
 * @extends {module:ol/proj/Projection}
 * @param {string} code Code.
 * @param {string=} opt_axisOrientation Axis orientation.
 */
function EPSG4326Projection(code, opt_axisOrientation) {
  Projection["a" /* default */].call(this, {
    code: code,
    units: Units["b" /* default */].DEGREES,
    extent: epsg4326_EXTENT,
    axisOrientation: opt_axisOrientation,
    global: true,
    metersPerUnit: METERS_PER_UNIT,
    worldExtent: epsg4326_EXTENT
  });
}
Object(util["c" /* inherits */])(EPSG4326Projection, Projection["a" /* default */]);


/**
 * Projections equal to EPSG:4326.
 *
 * @const
 * @type {Array.<module:ol/proj/Projection>}
 */
const epsg4326_PROJECTIONS = [
  new EPSG4326Projection('CRS:84'),
  new EPSG4326Projection('EPSG:4326', 'neu'),
  new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),
  new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),
  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
  new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')
];

// CONCATENATED MODULE: ../src/ol/proj/projections.js
/**
 * @module ol/proj/projections
 */


/**
 * @type {Object.<string, module:ol/proj/Projection>}
 */
let cache = {};


/**
 * Clear the projections cache.
 */
function clear() {
  cache = {};
}


/**
 * Get a cached projection by code.
 * @param {string} code The code for the projection.
 * @return {module:ol/proj/Projection} The projection (if cached).
 */
function get(code) {
  return cache[code] || null;
}


/**
 * Add a projection to the cache.
 * @param {string} code The projection code.
 * @param {module:ol/proj/Projection} projection The projection to cache.
 */
function add(code, projection) {
  cache[code] = projection;
}

// EXTERNAL MODULE: ../src/ol/proj/transforms.js
var transforms = __webpack_require__(134);

// CONCATENATED MODULE: ../src/ol/proj.js
/* unused harmony export cloneTransform */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return identityTransform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return addProjection; });
/* unused harmony export addProjections */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return proj_get; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return getPointResolution; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return addEquivalentProjections; });
/* unused harmony export addEquivalentTransforms */
/* unused harmony export clearAllProjections */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return createProjection; });
/* unused harmony export createTransformFromCoordinateTransform */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return addCoordinateTransforms; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return fromLonLat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return toLonLat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return equivalent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return getTransformFromProjections; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return getTransform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return transform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return transformExtent; });
/* unused harmony export transformWithProjections */
/* unused harmony export addCommon */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "a", function() { return Units["a" /* METERS_PER_UNIT */]; });
/**
 * @module ol/proj
 */

/**
 * The ol/proj module stores:
 * * a list of {@link module:ol/proj/Projection}
 * objects, one for each projection supported by the application
 * * a list of transform functions needed to convert coordinates in one projection
 * into another.
 *
 * The static functions are the methods used to maintain these.
 * Each transform function can handle not only simple coordinate pairs, but also
 * large arrays of coordinates such as vector geometries.
 *
 * When loaded, the library adds projection objects for EPSG:4326 (WGS84
 * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used
 * for example by Bing Maps or OpenStreetMap), together with the relevant
 * transform functions.
 *
 * Additional transforms may be added by using the {@link http://proj4js.org/}
 * library (version 2.2 or later). You can use the full build supplied by
 * Proj4js, or create a custom build to support those projections you need; see
 * the Proj4js website for how to do this. You also need the Proj4js definitions
 * for the required projections. These definitions can be obtained from
 * {@link https://epsg.io/}, and are a JS function, so can be loaded in a script
 * tag (as in the examples) or pasted into your application.
 *
 * After all required projection definitions are added to proj4's registry (by
 * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`
 * package. Existing transforms are not changed by this function. See
 * examples/wms-image-custom-proj for an example of this.
 *
 * Additional projection definitions can be registered with `proj4.defs()` any
 * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't
 * know in advance what projections are needed, you can initially load minimal
 * support and then load whichever are requested.
 *
 * Note that Proj4js does not support projection extents. If you want to add
 * one for creating default tile grids, you can add it after the Projection
 * object has been created with `setExtent`, for example,
 * `get('EPSG:1234').setExtent(extent)`.
 *
 * In addition to Proj4js support, any transform functions can be added with
 * {@link module:ol/proj~addCoordinateTransforms}. To use this, you must first create
 * a {@link module:ol/proj/Projection} object for the new projection and add it with
 * {@link module:ol/proj~addProjection}. You can then add the forward and inverse
 * functions with {@link module:ol/proj~addCoordinateTransforms}. See
 * examples/wms-custom-proj for an example of this.
 *
 * Note that if no transforms are needed and you only need to define the
 * projection, just add a {@link module:ol/proj/Projection} with
 * {@link module:ol/proj~addProjection}. See examples/wms-no-proj for an example of
 * this.
 */











/**
 * A projection as {@link module:ol/proj/Projection}, SRS identifier
 * string or undefined.
 * @typedef {module:ol/proj/Projection|string|undefined} ProjectionLike
 * @api
 */


/**
 * A transform function accepts an array of input coordinate values, an optional
 * output array, and an optional dimension (default should be 2).  The function
 * transforms the input coordinate values, populates the output array, and
 * returns the output array.
 *
 * @typedef {function(Array.<number>, Array.<number>=, number=): Array.<number>} TransformFunction
 * @api
 */





/**
 * @param {Array.<number>} input Input coordinate array.
 * @param {Array.<number>=} opt_output Output array of coordinate values.
 * @param {number=} opt_dimension Dimension.
 * @return {Array.<number>} Output coordinate array (new array, same coordinate
 *     values).
 */
function cloneTransform(input, opt_output, opt_dimension) {
  let output;
  if (opt_output !== undefined) {
    for (let i = 0, ii = input.length; i < ii; ++i) {
      opt_output[i] = input[i];
    }
    output = opt_output;
  } else {
    output = input.slice();
  }
  return output;
}


/**
 * @param {Array.<number>} input Input coordinate array.
 * @param {Array.<number>=} opt_output Output array of coordinate values.
 * @param {number=} opt_dimension Dimension.
 * @return {Array.<number>} Input coordinate array (same array as input).
 */
function identityTransform(input, opt_output, opt_dimension) {
  if (opt_output !== undefined && input !== opt_output) {
    for (let i = 0, ii = input.length; i < ii; ++i) {
      opt_output[i] = input[i];
    }
    input = opt_output;
  }
  return input;
}


/**
 * Add a Projection object to the list of supported projections that can be
 * looked up by their code.
 *
 * @param {module:ol/proj/Projection} projection Projection instance.
 * @api
 */
function addProjection(projection) {
  add(projection.getCode(), projection);
  Object(transforms["a" /* add */])(projection, projection, cloneTransform);
}


/**
 * @param {Array.<module:ol/proj/Projection>} projections Projections.
 */
function addProjections(projections) {
  projections.forEach(addProjection);
}


/**
 * Fetches a Projection object for the code specified.
 *
 * @param {module:ol/proj~ProjectionLike} projectionLike Either a code string which is
 *     a combination of authority and identifier such as "EPSG:4326", or an
 *     existing projection object, or undefined.
 * @return {module:ol/proj/Projection} Projection object, or null if not in list.
 * @api
 */
function proj_get(projectionLike) {
  let projection = null;
  if (projectionLike instanceof Projection["a" /* default */]) {
    projection = projectionLike;
  } else if (typeof projectionLike === 'string') {
    const code = projectionLike;
    projection = get(code);
  }
  return projection;
}


/**
 * Get the resolution of the point in degrees or distance units.
 * For projections with degrees as the unit this will simply return the
 * provided resolution. For other projections the point resolution is
 * by default estimated by transforming the 'point' pixel to EPSG:4326,
 * measuring its width and height on the normal sphere,
 * and taking the average of the width and height.
 * A custom function can be provided for a specific projection, either
 * by setting the `getPointResolution` option in the
 * {@link module:ol/proj/Projection~Projection} constructor or by using
 * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
 * projection object.
 * @param {module:ol/proj~ProjectionLike} projection The projection.
 * @param {number} resolution Nominal resolution in projection units.
 * @param {module:ol/coordinate~Coordinate} point Point to find adjusted resolution at.
 * @param {module:ol/proj/Units=} opt_units Units to get the point resolution in.
 * Default is the projection's units.
 * @return {number} Point resolution.
 * @api
 */
function getPointResolution(projection, resolution, point, opt_units) {
  projection = proj_get(projection);
  let pointResolution;
  const getter = projection.getPointResolutionFunc();
  if (getter) {
    pointResolution = getter(resolution, point);
  } else {
    const units = projection.getUnits();
    if (units == Units["b" /* default */].DEGREES && !opt_units || opt_units == Units["b" /* default */].DEGREES) {
      pointResolution = resolution;
    } else {
      // Estimate point resolution by transforming the center pixel to EPSG:4326,
      // measuring its width and height on the normal sphere, and taking the
      // average of the width and height.
      const toEPSG4326 = getTransformFromProjections(projection, proj_get('EPSG:4326'));
      let vertices = [
        point[0] - resolution / 2, point[1],
        point[0] + resolution / 2, point[1],
        point[0], point[1] - resolution / 2,
        point[0], point[1] + resolution / 2
      ];
      vertices = toEPSG4326(vertices, vertices, 2);
      const width = Object(sphere["b" /* getDistance */])(vertices.slice(0, 2), vertices.slice(2, 4));
      const height = Object(sphere["b" /* getDistance */])(vertices.slice(4, 6), vertices.slice(6, 8));
      pointResolution = (width + height) / 2;
      const metersPerUnit = opt_units ?
        Units["a" /* METERS_PER_UNIT */][opt_units] :
        projection.getMetersPerUnit();
      if (metersPerUnit !== undefined) {
        pointResolution /= metersPerUnit;
      }
    }
  }
  return pointResolution;
}


/**
 * Registers transformation functions that don't alter coordinates. Those allow
 * to transform between projections with equal meaning.
 *
 * @param {Array.<module:ol/proj/Projection>} projections Projections.
 * @api
 */
function addEquivalentProjections(projections) {
  addProjections(projections);
  projections.forEach(function(source) {
    projections.forEach(function(destination) {
      if (source !== destination) {
        Object(transforms["a" /* add */])(source, destination, cloneTransform);
      }
    });
  });
}


/**
 * Registers transformation functions to convert coordinates in any projection
 * in projection1 to any projection in projection2.
 *
 * @param {Array.<module:ol/proj/Projection>} projections1 Projections with equal
 *     meaning.
 * @param {Array.<module:ol/proj/Projection>} projections2 Projections with equal
 *     meaning.
 * @param {module:ol/proj~TransformFunction} forwardTransform Transformation from any
 *   projection in projection1 to any projection in projection2.
 * @param {module:ol/proj~TransformFunction} inverseTransform Transform from any projection
 *   in projection2 to any projection in projection1..
 */
function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
  projections1.forEach(function(projection1) {
    projections2.forEach(function(projection2) {
      Object(transforms["a" /* add */])(projection1, projection2, forwardTransform);
      Object(transforms["a" /* add */])(projection2, projection1, inverseTransform);
    });
  });
}


/**
 * Clear all cached projections and transforms.
 */
function clearAllProjections() {
  clear();
  Object(transforms["b" /* clear */])();
}


/**
 * @param {module:ol/proj/Projection|string|undefined} projection Projection.
 * @param {string} defaultCode Default code.
 * @return {module:ol/proj/Projection} Projection.
 */
function createProjection(projection, defaultCode) {
  if (!projection) {
    return proj_get(defaultCode);
  } else if (typeof projection === 'string') {
    return proj_get(projection);
  } else {
    return (
      /** @type {module:ol/proj/Projection} */ (projection)
    );
  }
}


/**
 * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform
 * function.
 * @param {function(module:ol/coordinate~Coordinate): module:ol/coordinate~Coordinate} coordTransform Coordinate
 *     transform.
 * @return {module:ol/proj~TransformFunction} Transform function.
 */
function createTransformFromCoordinateTransform(coordTransform) {
  return (
    /**
     * @param {Array.<number>} input Input.
     * @param {Array.<number>=} opt_output Output.
     * @param {number=} opt_dimension Dimension.
     * @return {Array.<number>} Output.
     */
    function(input, opt_output, opt_dimension) {
      const length = input.length;
      const dimension = opt_dimension !== undefined ? opt_dimension : 2;
      const output = opt_output !== undefined ? opt_output : new Array(length);
      for (let i = 0; i < length; i += dimension) {
        const point = coordTransform([input[i], input[i + 1]]);
        output[i] = point[0];
        output[i + 1] = point[1];
        for (let j = dimension - 1; j >= 2; --j) {
          output[i + j] = input[i + j];
        }
      }
      return output;
    });
}


/**
 * Registers coordinate transform functions to convert coordinates between the
 * source projection and the destination projection.
 * The forward and inverse functions convert coordinate pairs; this function
 * converts these into the functions used internally which also handle
 * extents and coordinate arrays.
 *
 * @param {module:ol/proj~ProjectionLike} source Source projection.
 * @param {module:ol/proj~ProjectionLike} destination Destination projection.
 * @param {function(module:ol/coordinate~Coordinate): module:ol/coordinate~Coordinate} forward The forward transform
 *     function (that is, from the source projection to the destination
 *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
 *     the transformed {@link module:ol/coordinate~Coordinate}.
 * @param {function(module:ol/coordinate~Coordinate): module:ol/coordinate~Coordinate} inverse The inverse transform
 *     function (that is, from the destination projection to the source
 *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
 *     the transformed {@link module:ol/coordinate~Coordinate}.
 * @api
 */
function addCoordinateTransforms(source, destination, forward, inverse) {
  const sourceProj = proj_get(source);
  const destProj = proj_get(destination);
  Object(transforms["a" /* add */])(sourceProj, destProj, createTransformFromCoordinateTransform(forward));
  Object(transforms["a" /* add */])(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));
}


/**
 * Transforms a coordinate from longitude/latitude to a different projection.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate as longitude and latitude, i.e.
 *     an array with longitude as 1st and latitude as 2nd element.
 * @param {module:ol/proj~ProjectionLike=} opt_projection Target projection. The
 *     default is Web Mercator, i.e. 'EPSG:3857'.
 * @return {module:ol/coordinate~Coordinate} Coordinate projected to the target projection.
 * @api
 */
function fromLonLat(coordinate, opt_projection) {
  return transform(coordinate, 'EPSG:4326',
    opt_projection !== undefined ? opt_projection : 'EPSG:3857');
}


/**
 * Transforms a coordinate to longitude/latitude.
 * @param {module:ol/coordinate~Coordinate} coordinate Projected coordinate.
 * @param {module:ol/proj~ProjectionLike=} opt_projection Projection of the coordinate.
 *     The default is Web Mercator, i.e. 'EPSG:3857'.
 * @return {module:ol/coordinate~Coordinate} Coordinate as longitude and latitude, i.e. an array
 *     with longitude as 1st and latitude as 2nd element.
 * @api
 */
function toLonLat(coordinate, opt_projection) {
  const lonLat = transform(coordinate,
    opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');
  const lon = lonLat[0];
  if (lon < -180 || lon > 180) {
    lonLat[0] = Object(math["d" /* modulo */])(lon + 180, 360) - 180;
  }
  return lonLat;
}


/**
 * Checks if two projections are the same, that is every coordinate in one
 * projection does represent the same geographic point as the same coordinate in
 * the other projection.
 *
 * @param {module:ol/proj/Projection} projection1 Projection 1.
 * @param {module:ol/proj/Projection} projection2 Projection 2.
 * @return {boolean} Equivalent.
 * @api
 */
function equivalent(projection1, projection2) {
  if (projection1 === projection2) {
    return true;
  }
  const equalUnits = projection1.getUnits() === projection2.getUnits();
  if (projection1.getCode() === projection2.getCode()) {
    return equalUnits;
  } else {
    const transformFunc = getTransformFromProjections(projection1, projection2);
    return transformFunc === cloneTransform && equalUnits;
  }
}


/**
 * Searches in the list of transform functions for the function for converting
 * coordinates from the source projection to the destination projection.
 *
 * @param {module:ol/proj/Projection} sourceProjection Source Projection object.
 * @param {module:ol/proj/Projection} destinationProjection Destination Projection
 *     object.
 * @return {module:ol/proj~TransformFunction} Transform function.
 */
function getTransformFromProjections(sourceProjection, destinationProjection) {
  const sourceCode = sourceProjection.getCode();
  const destinationCode = destinationProjection.getCode();
  let transformFunc = Object(transforms["c" /* get */])(sourceCode, destinationCode);
  if (!transformFunc) {
    transformFunc = identityTransform;
  }
  return transformFunc;
}


/**
 * Given the projection-like objects, searches for a transformation
 * function to convert a coordinates array from the source projection to the
 * destination projection.
 *
 * @param {module:ol/proj~ProjectionLike} source Source.
 * @param {module:ol/proj~ProjectionLike} destination Destination.
 * @return {module:ol/proj~TransformFunction} Transform function.
 * @api
 */
function getTransform(source, destination) {
  const sourceProjection = proj_get(source);
  const destinationProjection = proj_get(destination);
  return getTransformFromProjections(sourceProjection, destinationProjection);
}


/**
 * Transforms a coordinate from source projection to destination projection.
 * This returns a new coordinate (and does not modify the original).
 *
 * See {@link module:ol/proj~transformExtent} for extent transformation.
 * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
 * subclasses for geometry transforms.
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/proj~ProjectionLike} source Source projection-like.
 * @param {module:ol/proj~ProjectionLike} destination Destination projection-like.
 * @return {module:ol/coordinate~Coordinate} Coordinate.
 * @api
 */
function transform(coordinate, source, destination) {
  const transformFunc = getTransform(source, destination);
  return transformFunc(coordinate, undefined, coordinate.length);
}


/**
 * Transforms an extent from source projection to destination projection.  This
 * returns a new extent (and does not modify the original).
 *
 * @param {module:ol/extent~Extent} extent The extent to transform.
 * @param {module:ol/proj~ProjectionLike} source Source projection-like.
 * @param {module:ol/proj~ProjectionLike} destination Destination projection-like.
 * @return {module:ol/extent~Extent} The transformed extent.
 * @api
 */
function transformExtent(extent, source, destination) {
  const transformFunc = getTransform(source, destination);
  return Object(ol_extent["a" /* applyTransform */])(extent, transformFunc);
}


/**
 * Transforms the given point to the destination projection.
 *
 * @param {module:ol/coordinate~Coordinate} point Point.
 * @param {module:ol/proj/Projection} sourceProjection Source projection.
 * @param {module:ol/proj/Projection} destinationProjection Destination projection.
 * @return {module:ol/coordinate~Coordinate} Point.
 */
function transformWithProjections(point, sourceProjection, destinationProjection) {
  const transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);
  return transformFunc(point);
}

/**
 * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
 * by when this module is executed and should only need to be called again after
 * `clearAllProjections()` is called (e.g. in tests).
 */
function addCommon() {
  // Add transformations that don't alter coordinates to convert within set of
  // projections with equal meaning.
  addEquivalentProjections(PROJECTIONS);
  addEquivalentProjections(epsg4326_PROJECTIONS);
  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
  // coordinates and back.
  addEquivalentTransforms(epsg4326_PROJECTIONS, PROJECTIONS, fromEPSG4326, epsg3857_toEPSG4326);
}

addCommon();


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export bindListener */
/* unused harmony export findListener */
/* unused harmony export getListeners */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return listen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return listenOnce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return unlisten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return unlistenByKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return unlistenAll; });
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);
/**
 * @module ol/events
 */



/**
 * Key to use with {@link module:ol/Observable~Observable#unByKey}.
 * @typedef {Object} EventsKey
 * @property {Object} [bindTo]
 * @property {module:ol/events~ListenerFunction} [boundListener]
 * @property {boolean} callOnce
 * @property {number} [deleteIndex]
 * @property {module:ol/events~ListenerFunction} listener
 * @property {EventTarget|module:ol/events/EventTarget} target
 * @property {string} type
 * @api
 */


/**
 * Listener function. This function is called with an event object as argument.
 * When the function returns `false`, event propagation will stop.
 *
 * @typedef {function(module:ol/events/Event)|function(module:ol/events/Event): boolean} ListenerFunction
 * @api
 */


/**
 * @param {module:ol/events~EventsKey} listenerObj Listener object.
 * @return {module:ol/events~ListenerFunction} Bound listener.
 */
function bindListener(listenerObj) {
  const boundListener = function(evt) {
    const listener = listenerObj.listener;
    const bindTo = listenerObj.bindTo || listenerObj.target;
    if (listenerObj.callOnce) {
      unlistenByKey(listenerObj);
    }
    return listener.call(bindTo, evt);
  };
  listenerObj.boundListener = boundListener;
  return boundListener;
}


/**
 * Finds the matching {@link module:ol/events~EventsKey} in the given listener
 * array.
 *
 * @param {!Array<!module:ol/events~EventsKey>} listeners Array of listeners.
 * @param {!Function} listener The listener function.
 * @param {Object=} opt_this The `this` value inside the listener.
 * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching
 *     listener, for {@link module:ol/events~unlistenByKey}.
 * @return {module:ol/events~EventsKey|undefined} The matching listener object.
 */
function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {
  let listenerObj;
  for (let i = 0, ii = listeners.length; i < ii; ++i) {
    listenerObj = listeners[i];
    if (listenerObj.listener === listener &&
        listenerObj.bindTo === opt_this) {
      if (opt_setDeleteIndex) {
        listenerObj.deleteIndex = i;
      }
      return listenerObj;
    }
  }
  return undefined;
}


/**
 * @param {module:ol/events/EventTarget~EventTargetLike} target Target.
 * @param {string} type Type.
 * @return {Array.<module:ol/events~EventsKey>|undefined} Listeners.
 */
function getListeners(target, type) {
  const listenerMap = target.ol_lm;
  return listenerMap ? listenerMap[type] : undefined;
}


/**
 * Get the lookup of listeners.  If one does not exist on the target, it is
 * created.
 * @param {module:ol/events/EventTarget~EventTargetLike} target Target.
 * @return {!Object.<string, Array.<module:ol/events~EventsKey>>} Map of
 *     listeners by event type.
 */
function getListenerMap(target) {
  let listenerMap = target.ol_lm;
  if (!listenerMap) {
    listenerMap = target.ol_lm = {};
  }
  return listenerMap;
}


/**
 * Clean up all listener objects of the given type.  All properties on the
 * listener objects will be removed, and if no listeners remain in the listener
 * map, it will be removed from the target.
 * @param {module:ol/events/EventTarget~EventTargetLike} target Target.
 * @param {string} type Type.
 */
function removeListeners(target, type) {
  const listeners = getListeners(target, type);
  if (listeners) {
    for (let i = 0, ii = listeners.length; i < ii; ++i) {
      target.removeEventListener(type, listeners[i].boundListener);
      Object(_obj_js__WEBPACK_IMPORTED_MODULE_0__[/* clear */ "b"])(listeners[i]);
    }
    listeners.length = 0;
    const listenerMap = target.ol_lm;
    if (listenerMap) {
      delete listenerMap[type];
      if (Object.keys(listenerMap).length === 0) {
        delete target.ol_lm;
      }
    }
  }
}


/**
 * Registers an event listener on an event target. Inspired by
 * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}
 *
 * This function efficiently binds a `listener` to a `this` object, and returns
 * a key for use with {@link module:ol/events~unlistenByKey}.
 *
 * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.
 * @param {string} type Event type.
 * @param {module:ol/events~ListenerFunction} listener Listener.
 * @param {Object=} opt_this Object referenced by the `this` keyword in the
 *     listener. Default is the `target`.
 * @param {boolean=} opt_once If true, add the listener as one-off listener.
 * @return {module:ol/events~EventsKey} Unique key for the listener.
 */
function listen(target, type, listener, opt_this, opt_once) {
  const listenerMap = getListenerMap(target);
  let listeners = listenerMap[type];
  if (!listeners) {
    listeners = listenerMap[type] = [];
  }
  let listenerObj = findListener(listeners, listener, opt_this, false);
  if (listenerObj) {
    if (!opt_once) {
      // Turn one-off listener into a permanent one.
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = /** @type {module:ol/events~EventsKey} */ ({
      bindTo: opt_this,
      callOnce: !!opt_once,
      listener: listener,
      target: target,
      type: type
    });
    target.addEventListener(type, bindListener(listenerObj));
    listeners.push(listenerObj);
  }

  return listenerObj;
}


/**
 * Registers a one-off event listener on an event target. Inspired by
 * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}
 *
 * This function efficiently binds a `listener` as self-unregistering listener
 * to a `this` object, and returns a key for use with
 * {@link module:ol/events~unlistenByKey} in case the listener needs to be
 * unregistered before it is called.
 *
 * When {@link module:ol/events~listen} is called with the same arguments after this
 * function, the self-unregistering listener will be turned into a permanent
 * listener.
 *
 * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.
 * @param {string} type Event type.
 * @param {module:ol/events~ListenerFunction} listener Listener.
 * @param {Object=} opt_this Object referenced by the `this` keyword in the
 *     listener. Default is the `target`.
 * @return {module:ol/events~EventsKey} Key for unlistenByKey.
 */
function listenOnce(target, type, listener, opt_this) {
  return listen(target, type, listener, opt_this, true);
}


/**
 * Unregisters an event listener on an event target. Inspired by
 * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}
 *
 * To return a listener, this function needs to be called with the exact same
 * arguments that were used for a previous {@link module:ol/events~listen} call.
 *
 * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.
 * @param {string} type Event type.
 * @param {module:ol/events~ListenerFunction} listener Listener.
 * @param {Object=} opt_this Object referenced by the `this` keyword in the
 *     listener. Default is the `target`.
 */
function unlisten(target, type, listener, opt_this) {
  const listeners = getListeners(target, type);
  if (listeners) {
    const listenerObj = findListener(listeners, listener, opt_this, true);
    if (listenerObj) {
      unlistenByKey(listenerObj);
    }
  }
}


/**
 * Unregisters event listeners on an event target. Inspired by
 * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}
 *
 * The argument passed to this function is the key returned from
 * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.
 *
 * @param {module:ol/events~EventsKey} key The key.
 */
function unlistenByKey(key) {
  if (key && key.target) {
    key.target.removeEventListener(key.type, key.boundListener);
    const listeners = getListeners(key.target, key.type);
    if (listeners) {
      const i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);
      if (i !== -1) {
        listeners.splice(i, 1);
      }
      if (listeners.length === 0) {
        removeListeners(key.target, key.type);
      }
    }
    Object(_obj_js__WEBPACK_IMPORTED_MODULE_0__[/* clear */ "b"])(key);
  }
}


/**
 * Unregisters all event listeners on an event target. Inspired by
 * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}
 *
 * @param {module:ol/events/EventTarget~EventTargetLike} target Target.
 */
function unlistenAll(target) {
  const listenerMap = getListenerMap(target);
  for (const type in listenerMap) {
    removeListeners(target, type);
  }
}


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/geom/GeometryType
 */

/**
 * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
 * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
 * `'GeometryCollection'`, `'Circle'`.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  POINT: 'Point',
  LINE_STRING: 'LineString',
  LINEAR_RING: 'LinearRing',
  POLYGON: 'Polygon',
  MULTI_POINT: 'MultiPoint',
  MULTI_LINE_STRING: 'MultiLineString',
  MULTI_POLYGON: 'MultiPolygon',
  GEOMETRY_COLLECTION: 'GeometryCollection',
  CIRCLE: 'Circle'
});


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/layer/Group.js
var Group = __webpack_require__(199);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/Object.js
var ol_Object = __webpack_require__(31);

// EXTERNAL MODULE: ../src/ol/dom.js
var dom = __webpack_require__(32);

// EXTERNAL MODULE: ../src/ol/layer/Vector.js
var Vector = __webpack_require__(24);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// EXTERNAL MODULE: ../src/ol/obj.js
var obj = __webpack_require__(15);

// EXTERNAL MODULE: ../src/ol/render/EventType.js
var EventType = __webpack_require__(78);

// EXTERNAL MODULE: ../src/ol/style/Icon.js
var Icon = __webpack_require__(160);

// EXTERNAL MODULE: ../src/ol/style/Style.js
var Style = __webpack_require__(75);

// CONCATENATED MODULE: ../src/ol/layer/Heatmap.js
/**
 * @module ol/layer/Heatmap
 */












/**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {Array.<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient
 * of the heatmap, specified as an array of CSS color strings.
 * @property {number} [radius=8] Radius size in pixels.
 * @property {number} [blur=15] Blur size in pixels.
 * @property {number} [shadow=250] Shadow size in pixels.
 * @property {string|function(module:ol/Feature):number} [weight='weight'] The feature
 * attribute to use for the weight or a function that returns a weight from a feature. Weight values
 * should range from 0 to 1 (and values outside will be clamped to that range).
 * @property {module:ol/source/Vector} [source] Source.
 */


/**
 * @enum {string}
 * @private
 */
const Property = {
  BLUR: 'blur',
  GRADIENT: 'gradient',
  RADIUS: 'radius'
};


/**
 * @const
 * @type {Array.<string>}
 */
const DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];


/**
 * @classdesc
 * Layer for rendering vector data as a heatmap.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @constructor
 * @extends {module:ol/layer/Vector}
 * @fires module:ol/render/Event~RenderEvent
 * @param {module:ol/layer/Heatmap~Options=} opt_options Options.
 * @api
 */
const Heatmap = function(opt_options) {
  const options = opt_options ? opt_options : {};

  const baseOptions = Object(obj["a" /* assign */])({}, options);

  delete baseOptions.gradient;
  delete baseOptions.radius;
  delete baseOptions.blur;
  delete baseOptions.shadow;
  delete baseOptions.weight;
  Vector["a" /* default */].call(this, /** @type {module:ol/layer/Vector~Options} */ (baseOptions));

  /**
   * @private
   * @type {Uint8ClampedArray}
   */
  this.gradient_ = null;

  /**
   * @private
   * @type {number}
   */
  this.shadow_ = options.shadow !== undefined ? options.shadow : 250;

  /**
   * @private
   * @type {string|undefined}
   */
  this.circleImage_ = undefined;

  /**
   * @private
   * @type {Array.<Array.<module:ol/style/Style>>}
   */
  this.styleCache_ = null;

  Object(events["a" /* listen */])(this,
    Object(ol_Object["b" /* getChangeEventType */])(Property.GRADIENT),
    this.handleGradientChanged_, this);

  this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);

  this.setBlur(options.blur !== undefined ? options.blur : 15);

  this.setRadius(options.radius !== undefined ? options.radius : 8);

  Object(events["a" /* listen */])(this,
    Object(ol_Object["b" /* getChangeEventType */])(Property.BLUR),
    this.handleStyleChanged_, this);
  Object(events["a" /* listen */])(this,
    Object(ol_Object["b" /* getChangeEventType */])(Property.RADIUS),
    this.handleStyleChanged_, this);

  this.handleStyleChanged_();

  const weight = options.weight ? options.weight : 'weight';
  let weightFunction;
  if (typeof weight === 'string') {
    weightFunction = function(feature) {
      return feature.get(weight);
    };
  } else {
    weightFunction = weight;
  }

  this.setStyle(function(feature, resolution) {
    const weight = weightFunction(feature);
    const opacity = weight !== undefined ? Object(math["a" /* clamp */])(weight, 0, 1) : 1;
    // cast to 8 bits
    const index = (255 * opacity) | 0;
    let style = this.styleCache_[index];
    if (!style) {
      style = [
        new Style["c" /* default */]({
          image: new Icon["a" /* default */]({
            opacity: opacity,
            src: this.circleImage_
          })
        })
      ];
      this.styleCache_[index] = style;
    }
    return style;
  }.bind(this));

  // For performance reasons, don't sort the features before rendering.
  // The render order is not relevant for a heatmap representation.
  this.setRenderOrder(null);

  Object(events["a" /* listen */])(this, EventType["a" /* default */].RENDER, this.handleRender_, this);
};

Object(util["c" /* inherits */])(Heatmap, Vector["a" /* default */]);


/**
 * @param {Array.<string>} colors A list of colored.
 * @return {Uint8ClampedArray} An array.
 * @private
 */
const createGradient = function(colors) {
  const width = 1;
  const height = 256;
  const context = Object(dom["a" /* createCanvasContext2D */])(width, height);

  const gradient = context.createLinearGradient(0, 0, width, height);
  const step = 1 / (colors.length - 1);
  for (let i = 0, ii = colors.length; i < ii; ++i) {
    gradient.addColorStop(i * step, colors[i]);
  }

  context.fillStyle = gradient;
  context.fillRect(0, 0, width, height);

  return context.getImageData(0, 0, width, height).data;
};


/**
 * @return {string} Data URL for a circle.
 * @private
 */
Heatmap.prototype.createCircle_ = function() {
  const radius = this.getRadius();
  const blur = this.getBlur();
  const halfSize = radius + blur + 1;
  const size = 2 * halfSize;
  const context = Object(dom["a" /* createCanvasContext2D */])(size, size);
  context.shadowOffsetX = context.shadowOffsetY = this.shadow_;
  context.shadowBlur = blur;
  context.shadowColor = '#000';
  context.beginPath();
  const center = halfSize - this.shadow_;
  context.arc(center, center, radius, 0, Math.PI * 2, true);
  context.fill();
  return context.canvas.toDataURL();
};


/**
 * Return the blur size in pixels.
 * @return {number} Blur size in pixels.
 * @api
 * @observable
 */
Heatmap.prototype.getBlur = function() {
  return /** @type {number} */ (this.get(Property.BLUR));
};


/**
 * Return the gradient colors as array of strings.
 * @return {Array.<string>} Colors.
 * @api
 * @observable
 */
Heatmap.prototype.getGradient = function() {
  return /** @type {Array.<string>} */ (this.get(Property.GRADIENT));
};


/**
 * Return the size of the radius in pixels.
 * @return {number} Radius size in pixel.
 * @api
 * @observable
 */
Heatmap.prototype.getRadius = function() {
  return /** @type {number} */ (this.get(Property.RADIUS));
};


/**
 * @private
 */
Heatmap.prototype.handleGradientChanged_ = function() {
  this.gradient_ = createGradient(this.getGradient());
};


/**
 * @private
 */
Heatmap.prototype.handleStyleChanged_ = function() {
  this.circleImage_ = this.createCircle_();
  this.styleCache_ = new Array(256);
  this.changed();
};


/**
 * @param {module:ol/render/Event} event Post compose event
 * @private
 */
Heatmap.prototype.handleRender_ = function(event) {
  const context = event.context;
  const canvas = context.canvas;
  const image = context.getImageData(0, 0, canvas.width, canvas.height);
  const view8 = image.data;
  for (let i = 0, ii = view8.length; i < ii; i += 4) {
    const alpha = view8[i + 3] * 4;
    if (alpha) {
      view8[i] = this.gradient_[alpha];
      view8[i + 1] = this.gradient_[alpha + 1];
      view8[i + 2] = this.gradient_[alpha + 2];
    }
  }
  context.putImageData(image, 0, 0);
};


/**
 * Set the blur size in pixels.
 * @param {number} blur Blur size in pixels.
 * @api
 * @observable
 */
Heatmap.prototype.setBlur = function(blur) {
  this.set(Property.BLUR, blur);
};


/**
 * Set the gradient colors as array of strings.
 * @param {Array.<string>} colors Gradient.
 * @api
 * @observable
 */
Heatmap.prototype.setGradient = function(colors) {
  this.set(Property.GRADIENT, colors);
};


/**
 * Set the size of the radius in pixels.
 * @param {number} radius Radius size in pixel.
 * @api
 * @observable
 */
Heatmap.prototype.setRadius = function(radius) {
  this.set(Property.RADIUS, radius);
};

/* harmony default export */ var layer_Heatmap = (Heatmap);

// EXTERNAL MODULE: ../src/ol/layer/Image.js
var Image = __webpack_require__(97);

// EXTERNAL MODULE: ../src/ol/layer/Layer.js
var Layer = __webpack_require__(66);

// EXTERNAL MODULE: ../src/ol/layer/Tile.js
var Tile = __webpack_require__(11);

// EXTERNAL MODULE: ../src/ol/layer/VectorTile.js
var VectorTile = __webpack_require__(119);

// CONCATENATED MODULE: ../src/ol/layer.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "a", function() { return Group["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "b", function() { return layer_Heatmap; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "c", function() { return Image["a" /* default */]; });
/* unused concated harmony import Layer */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Layer["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "d", function() { return Tile["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "e", function() { return Vector["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "f", function() { return VectorTile["a" /* default */]; });

/**
 * @module ol/layer
 */










/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _LayerType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60);
/* harmony import */ var _layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66);
/* harmony import */ var _layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(144);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15);
/**
 * @module ol/layer/Tile
 */







/**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
 * means no preloading.
 * @property {module:ol/source/Tile} [source] Source for this layer.
 * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage
 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
 * use {@link module:ol/Map#addLayer}.
 * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
 */


/**
 * @classdesc
 * For layer sources that provide pre-rendered, tiled images in grids that are
 * organized by zoom levels for specific resolutions.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @constructor
 * @extends {module:ol/layer/Layer}
 * @fires module:ol/render/Event~RenderEvent
 * @param {module:ol/layer/Tile~Options=} opt_options Tile layer options.
 * @api
 */
const TileLayer = function(opt_options) {
  const options = opt_options ? opt_options : {};

  const baseOptions = Object(_obj_js__WEBPACK_IMPORTED_MODULE_4__[/* assign */ "a"])({}, options);

  delete baseOptions.preload;
  delete baseOptions.useInterimTilesOnError;
  _layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this,  /** @type {module:ol/layer/Layer~Options} */ (baseOptions));

  this.setPreload(options.preload !== undefined ? options.preload : 0);
  this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?
    options.useInterimTilesOnError : true);

  /**
   * The layer type.
   * @protected
   * @type {module:ol/LayerType}
   */
  this.type = _LayerType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].TILE;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(TileLayer, _layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * Return the level as number to which we will preload tiles up to.
 * @return {number} The level to preload tiles up to.
 * @observable
 * @api
 */
TileLayer.prototype.getPreload = function() {
  return /** @type {number} */ (this.get(_layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].PRELOAD));
};


/**
 * Return the associated {@link module:ol/source/Tile tilesource} of the layer.
 * @function
 * @return {module:ol/source/Tile} Source.
 * @api
 */
TileLayer.prototype.getSource;


/**
 * Set the level as number to which we will preload tiles up to.
 * @param {number} preload The level to preload tiles up to.
 * @observable
 * @api
 */
TileLayer.prototype.setPreload = function(preload) {
  this.set(_layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].PRELOAD, preload);
};


/**
 * Whether we use interim tiles on error.
 * @return {boolean} Use interim tiles on error.
 * @observable
 * @api
 */
TileLayer.prototype.getUseInterimTilesOnError = function() {
  return /** @type {boolean} */ (this.get(_layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].USE_INTERIM_TILES_ON_ERROR));
};


/**
 * Set whether we use interim tiles on error.
 * @param {boolean} useInterimTilesOnError Use interim tiles on error.
 * @observable
 * @api
 */
TileLayer.prototype.setUseInterimTilesOnError = function(useInterimTilesOnError) {
  this.set(_layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
};
/* harmony default export */ __webpack_exports__["a"] = (TileLayer);


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return ONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return SRC_ALPHA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return COLOR_ATTACHMENT0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return COLOR_BUFFER_BIT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return TRIANGLES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return TRIANGLE_STRIP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return ONE_MINUS_SRC_ALPHA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ARRAY_BUFFER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return ELEMENT_ARRAY_BUFFER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return STREAM_DRAW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return STATIC_DRAW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return DYNAMIC_DRAW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return CULL_FACE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return BLEND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return STENCIL_TEST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return DEPTH_TEST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return SCISSOR_TEST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return UNSIGNED_BYTE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function() { return UNSIGNED_SHORT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return UNSIGNED_INT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return FLOAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return RGBA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return FRAGMENT_SHADER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "K", function() { return VERTEX_SHADER; });
/* unused harmony export LINK_STATUS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return LINEAR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return TEXTURE_MAG_FILTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return TEXTURE_MIN_FILTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return TEXTURE_WRAP_S; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return TEXTURE_WRAP_T; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return TEXTURE_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return TEXTURE0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return CLAMP_TO_EDGE; });
/* unused harmony export COMPILE_STATUS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return FRAMEBUFFER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "L", function() { return getContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return DEBUG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return HAS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return MAX_TEXTURE_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return EXTENSIONS; });
/**
 * @module ol/webgl
 */


/**
 * Constants taken from goog.webgl
 */


/**
 * @const
 * @type {number}
 */
const ONE = 1;


/**
 * @const
 * @type {number}
 */
const SRC_ALPHA = 0x0302;


/**
 * @const
 * @type {number}
 */
const COLOR_ATTACHMENT0 = 0x8CE0;


/**
 * @const
 * @type {number}
 */
const COLOR_BUFFER_BIT = 0x00004000;


/**
 * @const
 * @type {number}
 */
const TRIANGLES = 0x0004;


/**
 * @const
 * @type {number}
 */
const TRIANGLE_STRIP = 0x0005;


/**
 * @const
 * @type {number}
 */
const ONE_MINUS_SRC_ALPHA = 0x0303;


/**
 * @const
 * @type {number}
 */
const ARRAY_BUFFER = 0x8892;


/**
 * @const
 * @type {number}
 */
const ELEMENT_ARRAY_BUFFER = 0x8893;


/**
 * @const
 * @type {number}
 */
const STREAM_DRAW = 0x88E0;


/**
 * @const
 * @type {number}
 */
const STATIC_DRAW = 0x88E4;


/**
 * @const
 * @type {number}
 */
const DYNAMIC_DRAW = 0x88E8;


/**
 * @const
 * @type {number}
 */
const CULL_FACE = 0x0B44;


/**
 * @const
 * @type {number}
 */
const BLEND = 0x0BE2;


/**
 * @const
 * @type {number}
 */
const STENCIL_TEST = 0x0B90;


/**
 * @const
 * @type {number}
 */
const DEPTH_TEST = 0x0B71;


/**
 * @const
 * @type {number}
 */
const SCISSOR_TEST = 0x0C11;


/**
 * @const
 * @type {number}
 */
const UNSIGNED_BYTE = 0x1401;


/**
 * @const
 * @type {number}
 */
const UNSIGNED_SHORT = 0x1403;


/**
 * @const
 * @type {number}
 */
const UNSIGNED_INT = 0x1405;


/**
 * @const
 * @type {number}
 */
const FLOAT = 0x1406;


/**
 * @const
 * @type {number}
 */
const RGBA = 0x1908;


/**
 * @const
 * @type {number}
 */
const FRAGMENT_SHADER = 0x8B30;


/**
 * @const
 * @type {number}
 */
const VERTEX_SHADER = 0x8B31;


/**
 * @const
 * @type {number}
 */
const LINK_STATUS = 0x8B82;


/**
 * @const
 * @type {number}
 */
const LINEAR = 0x2601;


/**
 * @const
 * @type {number}
 */
const TEXTURE_MAG_FILTER = 0x2800;


/**
 * @const
 * @type {number}
 */
const TEXTURE_MIN_FILTER = 0x2801;


/**
 * @const
 * @type {number}
 */
const TEXTURE_WRAP_S = 0x2802;


/**
 * @const
 * @type {number}
 */
const TEXTURE_WRAP_T = 0x2803;


/**
 * @const
 * @type {number}
 */
const TEXTURE_2D = 0x0DE1;


/**
 * @const
 * @type {number}
 */
const TEXTURE0 = 0x84C0;


/**
 * @const
 * @type {number}
 */
const CLAMP_TO_EDGE = 0x812F;


/**
 * @const
 * @type {number}
 */
const COMPILE_STATUS = 0x8B81;


/**
 * @const
 * @type {number}
 */
const FRAMEBUFFER = 0x8D40;


/** end of goog.webgl constants
 */


/**
 * @const
 * @type {Array.<string>}
 */
const CONTEXT_IDS = [
  'experimental-webgl',
  'webgl',
  'webkit-3d',
  'moz-webgl'
];


/**
 * @param {HTMLCanvasElement} canvas Canvas.
 * @param {Object=} opt_attributes Attributes.
 * @return {WebGLRenderingContext} WebGL rendering context.
 */
function getContext(canvas, opt_attributes) {
  const ii = CONTEXT_IDS.length;
  for (let i = 0; i < ii; ++i) {
    try {
      const context = canvas.getContext(CONTEXT_IDS[i], opt_attributes);
      if (context) {
        return /** @type {!WebGLRenderingContext} */ (context);
      }
    } catch (e) {
      // pass
    }
  }
  return null;
}


/**
 * Include debuggable shader sources.  Default is `true`. This should be set to
 * `false` for production builds.
 * @type {boolean}
 */
const DEBUG = true;


/**
 * The maximum supported WebGL texture size in pixels. If WebGL is not
 * supported, the value is set to `undefined`.
 * @type {number|undefined}
 */
let MAX_TEXTURE_SIZE; // value is set below


/**
 * List of supported WebGL extensions.
 * @type {Array.<string>}
 */
let EXTENSIONS; // value is set below


/**
 * True if both OpenLayers and browser support WebGL.
 * @const ol/has.WEBGL
 * @type {boolean}
 * @api
 */
let HAS = false;

//TODO Remove side effects
if (typeof window !== 'undefined' && 'WebGLRenderingContext' in window) {
  try {
    const canvas = /** @type {HTMLCanvasElement} */ (document.createElement('CANVAS'));
    const gl = getContext(canvas, {failIfMajorPerformanceCaveat: true});
    if (gl) {
      HAS = true;
      MAX_TEXTURE_SIZE = /** @type {number} */ (gl.getParameter(gl.MAX_TEXTURE_SIZE));
      EXTENSIONS = gl.getSupportedExtensions();
    }
  } catch (e) {
    // pass
  }
}




/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VectorSourceEvent; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51);
/* harmony import */ var _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62);
/* harmony import */ var _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(125);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(16);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(27);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(36);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(3);
/* harmony import */ var _featureloader_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(227);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(29);
/* harmony import */ var _loadingstrategy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(139);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(15);
/* harmony import */ var _source_Source_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(131);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(50);
/* harmony import */ var _source_VectorEventType_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(113);
/* harmony import */ var _structs_RBush_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(132);
/**
 * @module ol/source/Vector
 */




















/**
 * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
 * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
 * is one of the standard {@link module:ol/loadingstrategy} strategies.
 *
 * @typedef {function(module:ol/extent~Extent, number): Array.<module:ol/extent~Extent>} LoadingStrategy
 * @api
 */


/**
 * @classdesc
 * Events emitted by {@link module:ol/source/Vector} instances are instances of this
 * type.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {string} type Type.
 * @param {module:ol/Feature=} opt_feature Feature.
 */
const VectorSourceEvent = function(type, opt_feature) {

  _events_Event_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].call(this, type);

  /**
   * The feature being added or removed.
   * @type {module:ol/Feature|undefined}
   * @api
   */
  this.feature = opt_feature;

};
Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(VectorSourceEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]);


/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {Array.<module:ol/Feature>|module:ol/Collection.<module:ol/Feature>} [features]
 * Features. If provided as {@link module:ol/Collection}, the features in the source
 * and the collection will stay in sync.
 * @property {module:ol/format/Feature} [format] The feature format used by the XHR
 * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
 * @property {module:ol/featureloader~FeatureLoader} [loader]
 * The loader function used to load features, from a remote source for example.
 * If this is not set and `url` is set, the source will create and use an XHR
 * feature loader.
 *
 * Example:
 *
 * ```js
 * import {Vector} from 'ol/source';
 * import {GeoJSON} from 'ol/format';
 * import {bbox} from 'ol/loadingstrategy';
 *
 * var vectorSource = new Vector({
 *   format: new GeoJSON(),
 *   loader: function(extent, resolution, projection) {
 *      var proj = projection.getCode();
 *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
 *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
 *          'outputFormat=application/json&srsname=' + proj + '&' +
 *          'bbox=' + extent.join(',') + ',' + proj;
 *      var xhr = new XMLHttpRequest();
 *      xhr.open('GET', url);
 *      var onError = function() {
 *        vectorSource.removeLoadedExtent(extent);
 *      }
 *      xhr.onerror = onError;
 *      xhr.onload = function() {
 *        if (xhr.status == 200) {
 *          vectorSource.addFeatures(
 *              vectorSource.getFormat().readFeatures(xhr.responseText));
 *        } else {
 *          onError();
 *        }
 *      }
 *      xhr.send();
 *    },
 *    strategy: bbox
 *  });
 * ```
 * @property {boolean} [overlaps=true] This source may have overlapping geometries.
 * Setting this to `false` (e.g. for sources with polygons that represent administrative
 * boundaries or TopoJSON sources) allows the renderer to optimise fill and
 * stroke operations.
 * @property {module:ol/source/Vector~LoadingStrategy} [strategy] The loading strategy to use.
 * By default an {@link module:ol/loadingstrategy~all}
 * strategy is used, a one-off strategy which loads all features at once.
 * @property {string|module:ol/featureloader~FeatureUrlfunction} [url]
 * Setting this option instructs the source to load features using an XHR loader
 * (see {@link module:ol/featureloader~xhr}). Use a `string` and an
 * {@link module:ol/loadingstrategy~all} for a one-off download of all features from
 * the given URL. Use a {@link module:ol/featureloader~FeatureUrlfunction} to generate the url with
 * other loading strategies.
 * Requires `format` to be set as well.
 * When default XHR feature loader is provided, the features will
 * be transformed from the data projection to the view projection
 * during parsing. If your remote data source does not advertise its projection
 * properly, this transformation will be incorrect. For some formats, the
 * default projection (usually EPSG:4326) can be overridden by setting the
 * dataProjection constructor option on the format.
 * Note that if a source contains non-feature data, such as a GeoJSON geometry
 * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
 * @property {boolean} [useSpatialIndex=true]
 * By default, an RTree is used as spatial index. When features are removed and
 * added frequently, and the total number of features is low, setting this to
 * `false` may improve performance.
 *
 * Note that
 * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
 * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
 * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
 * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
 * through all features.
 *
 * When set to `false`, the features will be maintained in an
 * {@link module:ol/Collection}, which can be retrieved through
 * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
 * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
 * -180° and 180° meridians to work properly, this should be set to `false`. The
 * resulting geometry coordinates will then exceed the world bounds.
 */


/**
 * @classdesc
 * Provides a source of features for vector layers. Vector features provided
 * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
 * vector data that is optimized for rendering.
 *
 * @constructor
 * @extends {module:ol/source/Source}
 * @fires ol/source/Vector~VectorSourceEvent
 * @param {module:ol/source/Vector~Options=} opt_options Vector source options.
 * @api
 */
const VectorSource = function(opt_options) {

  const options = opt_options || {};

  _source_Source_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].call(this, {
    attributions: options.attributions,
    projection: undefined,
    state: _source_State_js__WEBPACK_IMPORTED_MODULE_15__[/* default */ "a"].READY,
    wrapX: options.wrapX !== undefined ? options.wrapX : true
  });

  /**
   * @private
   * @type {module:ol/featureloader~FeatureLoader}
   */
  this.loader_ = _functions_js__WEBPACK_IMPORTED_MODULE_11__[/* UNDEFINED */ "c"];

  /**
   * @private
   * @type {module:ol/format/Feature|undefined}
   */
  this.format_ = options.format;

  /**
   * @private
   * @type {boolean}
   */
  this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;

  /**
   * @private
   * @type {string|module:ol/featureloader~FeatureUrlFunction|undefined}
   */
  this.url_ = options.url;

  if (options.loader !== undefined) {
    this.loader_ = options.loader;
  } else if (this.url_ !== undefined) {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_5__[/* assert */ "a"])(this.format_, 7); // `format` must be set when `url` is set
    // create a XHR feature loader for "url" and "format"
    this.loader_ = Object(_featureloader_js__WEBPACK_IMPORTED_MODULE_10__[/* xhr */ "b"])(this.url_, /** @type {module:ol/format/Feature} */ (this.format_));
  }

  /**
   * @private
   * @type {module:ol/source/Vector~LoadingStrategy}
   */
  this.strategy_ = options.strategy !== undefined ? options.strategy : _loadingstrategy_js__WEBPACK_IMPORTED_MODULE_12__[/* all */ "a"];

  const useSpatialIndex =
      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;

  /**
   * @private
   * @type {module:ol/structs/RBush.<module:ol/Feature>}
   */
  this.featuresRtree_ = useSpatialIndex ? new _structs_RBush_js__WEBPACK_IMPORTED_MODULE_17__[/* default */ "a"]() : null;

  /**
   * @private
   * @type {module:ol/structs/RBush.<{extent: module:ol/extent~Extent}>}
   */
  this.loadedExtentsRtree_ = new _structs_RBush_js__WEBPACK_IMPORTED_MODULE_17__[/* default */ "a"]();

  /**
   * @private
   * @type {!Object.<string, module:ol/Feature>}
   */
  this.nullGeometryFeatures_ = {};

  /**
   * A lookup of features by id (the return from feature.getId()).
   * @private
   * @type {!Object.<string, module:ol/Feature>}
   */
  this.idIndex_ = {};

  /**
   * A lookup of features without id (keyed by getUid(feature)).
   * @private
   * @type {!Object.<string, module:ol/Feature>}
   */
  this.undefIdIndex_ = {};

  /**
   * @private
   * @type {Object.<string, Array.<module:ol/events~EventsKey>>}
   */
  this.featureChangeKeys_ = {};

  /**
   * @private
   * @type {module:ol/Collection.<module:ol/Feature>}
   */
  this.featuresCollection_ = null;

  let collection, features;
  if (options.features instanceof _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"]) {
    collection = options.features;
    features = collection.getArray();
  } else if (Array.isArray(options.features)) {
    features = options.features;
  }
  if (!useSpatialIndex && collection === undefined) {
    collection = new _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"](features);
  }
  if (features !== undefined) {
    this.addFeaturesInternal(features);
  }
  if (collection !== undefined) {
    this.bindFeaturesCollection_(collection);
  }

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(VectorSource, _source_Source_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"]);


/**
 * Add a single feature to the source.  If you want to add a batch of features
 * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
 * instead. A feature will not be added to the source if feature with
 * the same id is already there. The reason for this behavior is to avoid
 * feature duplication when using bbox or tile loading strategies.
 * @param {module:ol/Feature} feature Feature to add.
 * @api
 */
VectorSource.prototype.addFeature = function(feature) {
  this.addFeatureInternal(feature);
  this.changed();
};


/**
 * Add a feature without firing a `change` event.
 * @param {module:ol/Feature} feature Feature.
 * @protected
 */
VectorSource.prototype.addFeatureInternal = function(feature) {
  const featureKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();

  if (!this.addToIndex_(featureKey, feature)) {
    return;
  }

  this.setupChangeEvents_(featureKey, feature);

  const geometry = feature.getGeometry();
  if (geometry) {
    const extent = geometry.getExtent();
    if (this.featuresRtree_) {
      this.featuresRtree_.insert(extent, feature);
    }
  } else {
    this.nullGeometryFeatures_[featureKey] = feature;
  }

  this.dispatchEvent(
    new VectorSourceEvent(_source_VectorEventType_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"].ADDFEATURE, feature));
};


/**
 * @param {string} featureKey Unique identifier for the feature.
 * @param {module:ol/Feature} feature The feature.
 * @private
 */
VectorSource.prototype.setupChangeEvents_ = function(featureKey, feature) {
  this.featureChangeKeys_[featureKey] = [
    Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(feature, _events_EventType_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].CHANGE,
      this.handleFeatureChange_, this),
    Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(feature, _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].PROPERTYCHANGE,
      this.handleFeatureChange_, this)
  ];
};


/**
 * @param {string} featureKey Unique identifier for the feature.
 * @param {module:ol/Feature} feature The feature.
 * @return {boolean} The feature is "valid", in the sense that it is also a
 *     candidate for insertion into the Rtree.
 * @private
 */
VectorSource.prototype.addToIndex_ = function(featureKey, feature) {
  let valid = true;
  const id = feature.getId();
  if (id !== undefined) {
    if (!(id.toString() in this.idIndex_)) {
      this.idIndex_[id.toString()] = feature;
    } else {
      valid = false;
    }
  } else {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_5__[/* assert */ "a"])(!(featureKey in this.undefIdIndex_),
      30); // The passed `feature` was already added to the source
    this.undefIdIndex_[featureKey] = feature;
  }
  return valid;
};


/**
 * Add a batch of features to the source.
 * @param {Array.<module:ol/Feature>} features Features to add.
 * @api
 */
VectorSource.prototype.addFeatures = function(features) {
  this.addFeaturesInternal(features);
  this.changed();
};


/**
 * Add features without firing a `change` event.
 * @param {Array.<module:ol/Feature>} features Features.
 * @protected
 */
VectorSource.prototype.addFeaturesInternal = function(features) {
  const extents = [];
  const newFeatures = [];
  const geometryFeatures = [];

  for (let i = 0, length = features.length; i < length; i++) {
    const feature = features[i];
    const featureKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();
    if (this.addToIndex_(featureKey, feature)) {
      newFeatures.push(feature);
    }
  }

  for (let i = 0, length = newFeatures.length; i < length; i++) {
    const feature = newFeatures[i];
    const featureKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();
    this.setupChangeEvents_(featureKey, feature);

    const geometry = feature.getGeometry();
    if (geometry) {
      const extent = geometry.getExtent();
      extents.push(extent);
      geometryFeatures.push(feature);
    } else {
      this.nullGeometryFeatures_[featureKey] = feature;
    }
  }
  if (this.featuresRtree_) {
    this.featuresRtree_.load(extents, geometryFeatures);
  }

  for (let i = 0, length = newFeatures.length; i < length; i++) {
    this.dispatchEvent(new VectorSourceEvent(_source_VectorEventType_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"].ADDFEATURE, newFeatures[i]));
  }
};


/**
 * @param {!module:ol/Collection.<module:ol/Feature>} collection Collection.
 * @private
 */
VectorSource.prototype.bindFeaturesCollection_ = function(collection) {
  let modifyingCollection = false;
  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(this, _source_VectorEventType_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"].ADDFEATURE,
    function(evt) {
      if (!modifyingCollection) {
        modifyingCollection = true;
        collection.push(evt.feature);
        modifyingCollection = false;
      }
    });
  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(this, _source_VectorEventType_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"].REMOVEFEATURE,
    function(evt) {
      if (!modifyingCollection) {
        modifyingCollection = true;
        collection.remove(evt.feature);
        modifyingCollection = false;
      }
    });
  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(collection, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ADD,
    function(evt) {
      if (!modifyingCollection) {
        modifyingCollection = true;
        this.addFeature(/** @type {module:ol/Feature} */ (evt.element));
        modifyingCollection = false;
      }
    }, this);
  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(collection, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].REMOVE,
    function(evt) {
      if (!modifyingCollection) {
        modifyingCollection = true;
        this.removeFeature(/** @type {module:ol/Feature} */ (evt.element));
        modifyingCollection = false;
      }
    }, this);
  this.featuresCollection_ = collection;
};


/**
 * Remove all features from the source.
 * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector~VectorSourceEvent#removefeature} events.
 * @api
 */
VectorSource.prototype.clear = function(opt_fast) {
  if (opt_fast) {
    for (const featureId in this.featureChangeKeys_) {
      const keys = this.featureChangeKeys_[featureId];
      keys.forEach(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* unlistenByKey */ "e"]);
    }
    if (!this.featuresCollection_) {
      this.featureChangeKeys_ = {};
      this.idIndex_ = {};
      this.undefIdIndex_ = {};
    }
  } else {
    if (this.featuresRtree_) {
      this.featuresRtree_.forEach(this.removeFeatureInternal, this);
      for (const id in this.nullGeometryFeatures_) {
        this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
      }
    }
  }
  if (this.featuresCollection_) {
    this.featuresCollection_.clear();
  }

  if (this.featuresRtree_) {
    this.featuresRtree_.clear();
  }
  this.loadedExtentsRtree_.clear();
  this.nullGeometryFeatures_ = {};

  const clearEvent = new VectorSourceEvent(_source_VectorEventType_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"].CLEAR);
  this.dispatchEvent(clearEvent);
  this.changed();
};


/**
 * Iterate through all features on the source, calling the provided callback
 * with each one.  If the callback returns any "truthy" value, iteration will
 * stop and the function will return the same value.
 * Note: this function only iterate through the feature that have a defined geometry.
 *
 * @param {function(module:ol/Feature): T} callback Called with each feature
 *     on the source.  Return a truthy value to stop iteration.
 * @return {T|undefined} The return value from the last call to the callback.
 * @template T
 * @api
 */
VectorSource.prototype.forEachFeature = function(callback) {
  if (this.featuresRtree_) {
    return this.featuresRtree_.forEach(callback);
  } else if (this.featuresCollection_) {
    return this.featuresCollection_.forEach(callback);
  }
};


/**
 * Iterate through all features whose geometries contain the provided
 * coordinate, calling the callback with each feature.  If the callback returns
 * a "truthy" value, iteration will stop and the function will return the same
 * value.
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {function(module:ol/Feature): T} callback Called with each feature
 *     whose goemetry contains the provided coordinate.
 * @return {T|undefined} The return value from the last call to the callback.
 * @template T
 */
VectorSource.prototype.forEachFeatureAtCoordinateDirect = function(coordinate, callback) {
  const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
  return this.forEachFeatureInExtent(extent, function(feature) {
    const geometry = feature.getGeometry();
    if (geometry.intersectsCoordinate(coordinate)) {
      return callback(feature);
    } else {
      return undefined;
    }
  });
};


/**
 * Iterate through all features whose bounding box intersects the provided
 * extent (note that the feature's geometry may not intersect the extent),
 * calling the callback with each feature.  If the callback returns a "truthy"
 * value, iteration will stop and the function will return the same value.
 *
 * If you are interested in features whose geometry intersects an extent, call
 * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
 *
 * When `useSpatialIndex` is set to false, this method will loop through all
 * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
 *
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {function(module:ol/Feature): T} callback Called with each feature
 *     whose bounding box intersects the provided extent.
 * @return {T|undefined} The return value from the last call to the callback.
 * @template T
 * @api
 */
VectorSource.prototype.forEachFeatureInExtent = function(extent, callback) {
  if (this.featuresRtree_) {
    return this.featuresRtree_.forEachInExtent(extent, callback);
  } else if (this.featuresCollection_) {
    return this.featuresCollection_.forEach(callback);
  }
};


/**
 * Iterate through all features whose geometry intersects the provided extent,
 * calling the callback with each feature.  If the callback returns a "truthy"
 * value, iteration will stop and the function will return the same value.
 *
 * If you only want to test for bounding box intersection, call the
 * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
 *
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {function(module:ol/Feature): T} callback Called with each feature
 *     whose geometry intersects the provided extent.
 * @return {T|undefined} The return value from the last call to the callback.
 * @template T
 * @api
 */
VectorSource.prototype.forEachFeatureIntersectingExtent = function(extent, callback) {
  return this.forEachFeatureInExtent(extent,
    /**
     * @param {module:ol/Feature} feature Feature.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     */
    function(feature) {
      const geometry = feature.getGeometry();
      if (geometry.intersectsExtent(extent)) {
        const result = callback(feature);
        if (result) {
          return result;
        }
      }
    });
};


/**
 * Get the features collection associated with this source. Will be `null`
 * unless the source was configured with `useSpatialIndex` set to `false`, or
 * with an {@link module:ol/Collection} as `features`.
 * @return {module:ol/Collection.<module:ol/Feature>} The collection of features.
 * @api
 */
VectorSource.prototype.getFeaturesCollection = function() {
  return this.featuresCollection_;
};


/**
 * Get all features on the source in random order.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
VectorSource.prototype.getFeatures = function() {
  let features;
  if (this.featuresCollection_) {
    features = this.featuresCollection_.getArray();
  } else if (this.featuresRtree_) {
    features = this.featuresRtree_.getAll();
    if (!Object(_obj_js__WEBPACK_IMPORTED_MODULE_13__[/* isEmpty */ "d"])(this.nullGeometryFeatures_)) {
      Object(_array_js__WEBPACK_IMPORTED_MODULE_4__[/* extend */ "c"])(features, Object(_obj_js__WEBPACK_IMPORTED_MODULE_13__[/* getValues */ "c"])(this.nullGeometryFeatures_));
    }
  }
  return (
    /** @type {Array.<module:ol/Feature>} */ (features)
  );
};


/**
 * Get all features whose geometry intersects the provided coordinate.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
VectorSource.prototype.getFeaturesAtCoordinate = function(coordinate) {
  const features = [];
  this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {
    features.push(feature);
  });
  return features;
};


/**
 * Get all features in the provided extent.  Note that this returns an array of
 * all features intersecting the given extent in random order (so it may include
 * features whose geometries do not intersect the extent).
 *
 * This method is not available when the source is configured with
 * `useSpatialIndex` set to `false`.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
VectorSource.prototype.getFeaturesInExtent = function(extent) {
  return this.featuresRtree_.getInExtent(extent);
};


/**
 * Get the closest feature to the provided coordinate.
 *
 * This method is not available when the source is configured with
 * `useSpatialIndex` set to `false`.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {function(module:ol/Feature):boolean=} opt_filter Feature filter function.
 *     The filter function will receive one argument, the {@link module:ol/Feature feature}
 *     and it should return a boolean value. By default, no filtering is made.
 * @return {module:ol/Feature} Closest feature.
 * @api
 */
VectorSource.prototype.getClosestFeatureToCoordinate = function(coordinate, opt_filter) {
  // Find the closest feature using branch and bound.  We start searching an
  // infinite extent, and find the distance from the first feature found.  This
  // becomes the closest feature.  We then compute a smaller extent which any
  // closer feature must intersect.  We continue searching with this smaller
  // extent, trying to find a closer feature.  Every time we find a closer
  // feature, we update the extent being searched so that any even closer
  // feature must intersect it.  We continue until we run out of features.
  const x = coordinate[0];
  const y = coordinate[1];
  let closestFeature = null;
  const closestPoint = [NaN, NaN];
  let minSquaredDistance = Infinity;
  const extent = [-Infinity, -Infinity, Infinity, Infinity];
  const filter = opt_filter ? opt_filter : _functions_js__WEBPACK_IMPORTED_MODULE_11__[/* TRUE */ "b"];
  this.featuresRtree_.forEachInExtent(extent,
    /**
     * @param {module:ol/Feature} feature Feature.
     */
    function(feature) {
      if (filter(feature)) {
        const geometry = feature.getGeometry();
        const previousMinSquaredDistance = minSquaredDistance;
        minSquaredDistance = geometry.closestPointXY(
          x, y, closestPoint, minSquaredDistance);
        if (minSquaredDistance < previousMinSquaredDistance) {
          closestFeature = feature;
          // This is sneaky.  Reduce the extent that it is currently being
          // searched while the R-Tree traversal using this same extent object
          // is still in progress.  This is safe because the new extent is
          // strictly contained by the old extent.
          const minDistance = Math.sqrt(minSquaredDistance);
          extent[0] = x - minDistance;
          extent[1] = y - minDistance;
          extent[2] = x + minDistance;
          extent[3] = y + minDistance;
        }
      }
    });
  return closestFeature;
};


/**
 * Get the extent of the features currently in the source.
 *
 * This method is not available when the source is configured with
 * `useSpatialIndex` set to `false`.
 * @param {module:ol/extent~Extent=} opt_extent Destination extent. If provided, no new extent
 *     will be created. Instead, that extent's coordinates will be overwritten.
 * @return {module:ol/extent~Extent} Extent.
 * @api
 */
VectorSource.prototype.getExtent = function(opt_extent) {
  return this.featuresRtree_.getExtent(opt_extent);
};


/**
 * Get a feature by its identifier (the value returned by feature.getId()).
 * Note that the index treats string and numeric identifiers as the same.  So
 * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
 *
 * @param {string|number} id Feature identifier.
 * @return {module:ol/Feature} The feature (or `null` if not found).
 * @api
 */
VectorSource.prototype.getFeatureById = function(id) {
  const feature = this.idIndex_[id.toString()];
  return feature !== undefined ? feature : null;
};


/**
 * Get the format associated with this source.
 *
 * @return {module:ol/format/Feature|undefined} The feature format.
 * @api
 */
VectorSource.prototype.getFormat = function() {
  return this.format_;
};


/**
 * @return {boolean} The source can have overlapping geometries.
 */
VectorSource.prototype.getOverlaps = function() {
  return this.overlaps_;
};


/**
 * @override
 */
VectorSource.prototype.getResolutions = function() {};


/**
 * Get the url associated with this source.
 *
 * @return {string|module:ol/featureloader~FeatureUrlFunction|undefined} The url.
 * @api
 */
VectorSource.prototype.getUrl = function() {
  return this.url_;
};


/**
 * @param {module:ol/events/Event} event Event.
 * @private
 */
VectorSource.prototype.handleFeatureChange_ = function(event) {
  const feature = /** @type {module:ol/Feature} */ (event.target);
  const featureKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();
  const geometry = feature.getGeometry();
  if (!geometry) {
    if (!(featureKey in this.nullGeometryFeatures_)) {
      if (this.featuresRtree_) {
        this.featuresRtree_.remove(feature);
      }
      this.nullGeometryFeatures_[featureKey] = feature;
    }
  } else {
    const extent = geometry.getExtent();
    if (featureKey in this.nullGeometryFeatures_) {
      delete this.nullGeometryFeatures_[featureKey];
      if (this.featuresRtree_) {
        this.featuresRtree_.insert(extent, feature);
      }
    } else {
      if (this.featuresRtree_) {
        this.featuresRtree_.update(extent, feature);
      }
    }
  }
  const id = feature.getId();
  if (id !== undefined) {
    const sid = id.toString();
    if (featureKey in this.undefIdIndex_) {
      delete this.undefIdIndex_[featureKey];
      this.idIndex_[sid] = feature;
    } else {
      if (this.idIndex_[sid] !== feature) {
        this.removeFromIdIndex_(feature);
        this.idIndex_[sid] = feature;
      }
    }
  } else {
    if (!(featureKey in this.undefIdIndex_)) {
      this.removeFromIdIndex_(feature);
      this.undefIdIndex_[featureKey] = feature;
    }
  }
  this.changed();
  this.dispatchEvent(new VectorSourceEvent(
    _source_VectorEventType_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"].CHANGEFEATURE, feature));
};

/**
 * Returns true if the feature is contained within the source.
 * @param {module:ol/Feature} feature Feature.
 * @return {boolean} Has feature.
 * @api
 */
VectorSource.prototype.hasFeature = function(feature) {
  const id = feature.getId();
  if (id !== undefined) {
    return id in this.idIndex_;
  } else {
    const featureKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();
    return featureKey in this.undefIdIndex_;
  }
};

/**
 * @return {boolean} Is empty.
 */
VectorSource.prototype.isEmpty = function() {
  return this.featuresRtree_.isEmpty() && Object(_obj_js__WEBPACK_IMPORTED_MODULE_13__[/* isEmpty */ "d"])(this.nullGeometryFeatures_);
};


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @param {module:ol/proj/Projection} projection Projection.
 */
VectorSource.prototype.loadFeatures = function(extent, resolution, projection) {
  const loadedExtentsRtree = this.loadedExtentsRtree_;
  const extentsToLoad = this.strategy_(extent, resolution);
  for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {
    const extentToLoad = extentsToLoad[i];
    const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,
      /**
       * @param {{extent: module:ol/extent~Extent}} object Object.
       * @return {boolean} Contains.
       */
      function(object) {
        return Object(_extent_js__WEBPACK_IMPORTED_MODULE_9__[/* containsExtent */ "g"])(object.extent, extentToLoad);
      });
    if (!alreadyLoaded) {
      this.loader_.call(this, extentToLoad, resolution, projection);
      loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});
    }
  }
};


/**
 * Remove an extent from the list of loaded extents.
 * @param {module:ol/extent~Extent} extent Extent.
 * @api
 */
VectorSource.prototype.removeLoadedExtent = function(extent) {
  const loadedExtentsRtree = this.loadedExtentsRtree_;
  let obj;
  loadedExtentsRtree.forEachInExtent(extent, function(object) {
    if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_9__[/* equals */ "p"])(object.extent, extent)) {
      obj = object;
      return true;
    }
  });
  if (obj) {
    loadedExtentsRtree.remove(obj);
  }
};


/**
 * Remove a single feature from the source.  If you want to remove all features
 * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
 * instead.
 * @param {module:ol/Feature} feature Feature to remove.
 * @api
 */
VectorSource.prototype.removeFeature = function(feature) {
  const featureKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();
  if (featureKey in this.nullGeometryFeatures_) {
    delete this.nullGeometryFeatures_[featureKey];
  } else {
    if (this.featuresRtree_) {
      this.featuresRtree_.remove(feature);
    }
  }
  this.removeFeatureInternal(feature);
  this.changed();
};


/**
 * Remove feature without firing a `change` event.
 * @param {module:ol/Feature} feature Feature.
 * @protected
 */
VectorSource.prototype.removeFeatureInternal = function(feature) {
  const featureKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();
  this.featureChangeKeys_[featureKey].forEach(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* unlistenByKey */ "e"]);
  delete this.featureChangeKeys_[featureKey];
  const id = feature.getId();
  if (id !== undefined) {
    delete this.idIndex_[id.toString()];
  } else {
    delete this.undefIdIndex_[featureKey];
  }
  this.dispatchEvent(new VectorSourceEvent(
    _source_VectorEventType_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"].REMOVEFEATURE, feature));
};


/**
 * Remove a feature from the id index.  Called internally when the feature id
 * may have changed.
 * @param {module:ol/Feature} feature The feature.
 * @return {boolean} Removed the feature from the index.
 * @private
 */
VectorSource.prototype.removeFromIdIndex_ = function(feature) {
  let removed = false;
  for (const id in this.idIndex_) {
    if (this.idIndex_[id] === feature) {
      delete this.idIndex_[id];
      removed = true;
      break;
    }
  }
  return removed;
};


/**
 * Set the new loader of the source. The next loadFeatures call will use the
 * new loader.
 * @param {module:ol/featureloader~FeatureLoader} loader The loader to set.
 * @api
 */
VectorSource.prototype.setLoader = function(loader) {
  this.loader_ = loader;
};

/* harmony default export */ __webpack_exports__["b"] = (VectorSource);


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/events/EventType
 */

/**
 * @enum {string}
 * @const
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  /**
   * Generic change event. Triggered when the revision counter is increased.
   * @event module:ol/events/Event~Event#change
   * @api
   */
  CHANGE: 'change',

  CLEAR: 'clear',
  CONTEXTMENU: 'contextmenu',
  CLICK: 'click',
  DBLCLICK: 'dblclick',
  DRAGENTER: 'dragenter',
  DRAGOVER: 'dragover',
  DROP: 'drop',
  ERROR: 'error',
  KEYDOWN: 'keydown',
  KEYPRESS: 'keypress',
  LOAD: 'load',
  MOUSEDOWN: 'mousedown',
  MOUSEMOVE: 'mousemove',
  MOUSEOUT: 'mouseout',
  MOUSEUP: 'mouseup',
  MOUSEWHEEL: 'mousewheel',
  MSPOINTERDOWN: 'MSPointerDown',
  RESIZE: 'resize',
  TOUCHSTART: 'touchstart',
  TOUCHMOVE: 'touchmove',
  TOUCHEND: 'touchend',
  WHEEL: 'wheel'
});


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return clear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isEmpty; });
/**
 * @module ol/obj
 */


/**
 * Polyfill for Object.assign().  Assigns enumerable and own properties from
 * one or more source objects to a target object.
 *
 * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 * @param {!Object} target The target object.
 * @param {...Object} var_sources The source object(s).
 * @return {!Object} The modified target object.
 */
const assign = (typeof Object.assign === 'function') ? Object.assign : function(target, var_sources) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  const output = Object(target);
  for (let i = 1, ii = arguments.length; i < ii; ++i) {
    const source = arguments[i];
    if (source !== undefined && source !== null) {
      for (const key in source) {
        if (source.hasOwnProperty(key)) {
          output[key] = source[key];
        }
      }
    }
  }
  return output;
};


/**
 * Removes all properties from an object.
 * @param {Object} object The object to clear.
 */
function clear(object) {
  for (const property in object) {
    delete object[property];
  }
}


/**
 * Get an array of property values from an object.
 * @param {Object<K,V>} object The object from which to get the values.
 * @return {!Array<V>} The property values.
 * @template K,V
 */
function getValues(object) {
  const values = [];
  for (const property in object) {
    values.push(object[property]);
  }
  return values;
}


/**
 * Determine if an object has any properties.
 * @param {Object} object The object to check.
 * @return {boolean} The object is empty.
 */
function isEmpty(object) {
  let property;
  for (property in object) {
    return false;
  }
  return !property;
}


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return binarySearch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return numberSafeCompareFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return includes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return linearFindNearest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return reverseSubArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return remove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return find; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return stableSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return findIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return isSorted; });
/**
 * @module ol/array
 */


/**
 * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
 * https://github.com/darkskyapp/binary-search
 *
 * @param {Array.<*>} haystack Items to search through.
 * @param {*} needle The item to look for.
 * @param {Function=} opt_comparator Comparator function.
 * @return {number} The index of the item if found, -1 if not.
 */
function binarySearch(haystack, needle, opt_comparator) {
  let mid, cmp;
  const comparator = opt_comparator || numberSafeCompareFunction;
  let low = 0;
  let high = haystack.length;
  let found = false;

  while (low < high) {
    /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
     * to double (which gives the wrong results). */
    mid = low + (high - low >> 1);
    cmp = +comparator(haystack[mid], needle);

    if (cmp < 0.0) { /* Too low. */
      low  = mid + 1;

    } else { /* Key found or too high */
      high = mid;
      found = !cmp;
    }
  }

  /* Key not found. */
  return found ? low : ~low;
}


/**
 * Compare function for array sort that is safe for numbers.
 * @param {*} a The first object to be compared.
 * @param {*} b The second object to be compared.
 * @return {number} A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 */
function numberSafeCompareFunction(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
}


/**
 * Whether the array contains the given object.
 * @param {Array.<*>} arr The array to test for the presence of the element.
 * @param {*} obj The object for which to test.
 * @return {boolean} The object is in the array.
 */
function includes(arr, obj) {
  return arr.indexOf(obj) >= 0;
}


/**
 * @param {Array.<number>} arr Array.
 * @param {number} target Target.
 * @param {number} direction 0 means return the nearest, > 0
 *    means return the largest nearest, < 0 means return the
 *    smallest nearest.
 * @return {number} Index.
 */
function linearFindNearest(arr, target, direction) {
  const n = arr.length;
  if (arr[0] <= target) {
    return 0;
  } else if (target <= arr[n - 1]) {
    return n - 1;
  } else {
    let i;
    if (direction > 0) {
      for (i = 1; i < n; ++i) {
        if (arr[i] < target) {
          return i - 1;
        }
      }
    } else if (direction < 0) {
      for (i = 1; i < n; ++i) {
        if (arr[i] <= target) {
          return i;
        }
      }
    } else {
      for (i = 1; i < n; ++i) {
        if (arr[i] == target) {
          return i;
        } else if (arr[i] < target) {
          if (arr[i - 1] - target < target - arr[i]) {
            return i - 1;
          } else {
            return i;
          }
        }
      }
    }
    return n - 1;
  }
}


/**
 * @param {Array.<*>} arr Array.
 * @param {number} begin Begin index.
 * @param {number} end End index.
 */
function reverseSubArray(arr, begin, end) {
  while (begin < end) {
    const tmp = arr[begin];
    arr[begin] = arr[end];
    arr[end] = tmp;
    ++begin;
    --end;
  }
}


/**
 * @param {Array.<VALUE>} arr The array to modify.
 * @param {!Array.<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
 * @template VALUE
 */
function extend(arr, data) {
  const extension = Array.isArray(data) ? data : [data];
  const length = extension.length;
  for (let i = 0; i < length; i++) {
    arr[arr.length] = extension[i];
  }
}


/**
 * @param {Array.<VALUE>} arr The array to modify.
 * @param {VALUE} obj The element to remove.
 * @template VALUE
 * @return {boolean} If the element was removed.
 */
function remove(arr, obj) {
  const i = arr.indexOf(obj);
  const found = i > -1;
  if (found) {
    arr.splice(i, 1);
  }
  return found;
}


/**
 * @param {Array.<VALUE>} arr The array to search in.
 * @param {function(VALUE, number, ?) : boolean} func The function to compare.
 * @template VALUE
 * @return {VALUE|null} The element found or null.
 */
function find(arr, func) {
  const length = arr.length >>> 0;
  let value;

  for (let i = 0; i < length; i++) {
    value = arr[i];
    if (func(value, i, arr)) {
      return value;
    }
  }
  return null;
}


/**
 * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
 * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
 * @return {boolean} Whether the two arrays are equal.
 */
function equals(arr1, arr2) {
  const len1 = arr1.length;
  if (len1 !== arr2.length) {
    return false;
  }
  for (let i = 0; i < len1; i++) {
    if (arr1[i] !== arr2[i]) {
      return false;
    }
  }
  return true;
}


/**
 * @param {Array.<*>} arr The array to sort (modifies original).
 * @param {Function} compareFnc Comparison function.
 */
function stableSort(arr, compareFnc) {
  const length = arr.length;
  const tmp = Array(arr.length);
  let i;
  for (i = 0; i < length; i++) {
    tmp[i] = {index: i, value: arr[i]};
  }
  tmp.sort(function(a, b) {
    return compareFnc(a.value, b.value) || a.index - b.index;
  });
  for (i = 0; i < arr.length; i++) {
    arr[i] = tmp[i].value;
  }
}


/**
 * @param {Array.<*>} arr The array to search in.
 * @param {Function} func Comparison function.
 * @return {number} Return index.
 */
function findIndex(arr, func) {
  let index;
  const found = !arr.every(function(el, idx) {
    index = idx;
    return !func(el, idx, arr);
  });
  return found ? index : -1;
}


/**
 * @param {Array.<*>} arr The array to test.
 * @param {Function=} opt_func Comparison function.
 * @param {boolean=} opt_strict Strictly sorted (default false).
 * @return {boolean} Return index.
 */
function isSorted(arr, opt_func, opt_strict) {
  const compare = opt_func || numberSafeCompareFunction;
  return arr.every(function(currentVal, index) {
    if (index === 0) {
      return true;
    }
    const res = compare(arr[index - 1], currentVal);
    return !(res > 0 || opt_strict && res === 0);
  });
}


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/source/BingMaps.js
var BingMaps = __webpack_require__(46);

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/obj.js
var obj = __webpack_require__(15);

// EXTERNAL MODULE: ../src/ol/source/State.js
var State = __webpack_require__(50);

// EXTERNAL MODULE: ../src/ol/source/XYZ.js
var XYZ = __webpack_require__(54);

// CONCATENATED MODULE: ../src/ol/source/CartoDB.js
/**
 * @module ol/source/CartoDB
 */





/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=2048] Cache size.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857'] Projection.
 * @property {number} [maxZoom=18] Max zoom.
 * @property {number} [minZoom] Minimum zoom.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See
 * {@link http://docs.cartodb.com/cartodb-platform/maps-api/anonymous-maps/}
 * for more detail.
 * If using named maps, a key-value lookup with the template parameters.
 * See {@link http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/}
 * for more detail.
 * @property {string} [map] If using named maps, this will be the name of the template to load.
 * See {@link http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/}
 * for more detail.
 * @property {string} account If using named maps, this will be the name of the template to load.
 */


/**
 * @classdesc
 * Layer source for the CartoDB Maps API.
 *
 * @constructor
 * @extends {module:ol/source/XYZ}
 * @param {module:ol/source/CartoDB~Options=} options CartoDB options.
 * @api
 */
const CartoDB = function(options) {

  /**
   * @type {string}
   * @private
   */
  this.account_ = options.account;

  /**
   * @type {string}
   * @private
   */
  this.mapId_ = options.map || '';

  /**
   * @type {!Object}
   * @private
   */
  this.config_ = options.config || {};

  /**
   * @type {!Object.<string, CartoDBLayerInfo>}
   * @private
   */
  this.templateCache_ = {};

  XYZ["a" /* default */].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize,
    crossOrigin: options.crossOrigin,
    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,
    minZoom: options.minZoom,
    projection: options.projection,
    state: State["a" /* default */].LOADING,
    wrapX: options.wrapX
  });
  this.initializeMap_();
};

Object(util["c" /* inherits */])(CartoDB, XYZ["a" /* default */]);


/**
 * Returns the current config.
 * @return {!Object} The current configuration.
 * @api
 */
CartoDB.prototype.getConfig = function() {
  return this.config_;
};


/**
 * Updates the carto db config.
 * @param {Object} config a key-value lookup. Values will replace current values
 *     in the config.
 * @api
 */
CartoDB.prototype.updateConfig = function(config) {
  Object(obj["a" /* assign */])(this.config_, config);
  this.initializeMap_();
};


/**
 * Sets the CartoDB config
 * @param {Object} config In the case of anonymous maps, a CartoDB configuration
 *     object.
 * If using named maps, a key-value lookup with the template parameters.
 * @api
 */
CartoDB.prototype.setConfig = function(config) {
  this.config_ = config || {};
  this.initializeMap_();
};


/**
 * Issue a request to initialize the CartoDB map.
 * @private
 */
CartoDB.prototype.initializeMap_ = function() {
  const paramHash = JSON.stringify(this.config_);
  if (this.templateCache_[paramHash]) {
    this.applyTemplate_(this.templateCache_[paramHash]);
    return;
  }
  let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';

  if (this.mapId_) {
    mapUrl += '/named/' + this.mapId_;
  }

  const client = new XMLHttpRequest();
  client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));
  client.addEventListener('error', this.handleInitError_.bind(this));
  client.open('POST', mapUrl);
  client.setRequestHeader('Content-type', 'application/json');
  client.send(JSON.stringify(this.config_));
};


/**
 * Handle map initialization response.
 * @param {string} paramHash a hash representing the parameter set that was used
 *     for the request
 * @param {Event} event Event.
 * @private
 */
CartoDB.prototype.handleInitResponse_ = function(paramHash, event) {
  const client = /** @type {XMLHttpRequest} */ (event.target);
  // status will be 0 for file:// urls
  if (!client.status || client.status >= 200 && client.status < 300) {
    let response;
    try {
      response = /** @type {CartoDBLayerInfo} */(JSON.parse(client.responseText));
    } catch (err) {
      this.setState(State["a" /* default */].ERROR);
      return;
    }
    this.applyTemplate_(response);
    this.templateCache_[paramHash] = response;
    this.setState(State["a" /* default */].READY);
  } else {
    this.setState(State["a" /* default */].ERROR);
  }
};


/**
 * @private
 * @param {Event} event Event.
 */
CartoDB.prototype.handleInitError_ = function(event) {
  this.setState(State["a" /* default */].ERROR);
};


/**
 * Apply the new tile urls returned by carto db
 * @param {CartoDBLayerInfo} data Result of carto db call.
 * @private
 */
CartoDB.prototype.applyTemplate_ = function(data) {
  const tilesUrl = 'https://' + data.cdn_url.https + '/' + this.account_ +
      '/api/v1/map/' + data.layergroupid + '/{z}/{x}/{y}.png';
  this.setUrl(tilesUrl);
};
/* harmony default export */ var source_CartoDB = (CartoDB);

// EXTERNAL MODULE: ../src/ol/asserts.js
var asserts = __webpack_require__(27);

// EXTERNAL MODULE: ../src/ol/Feature.js
var Feature = __webpack_require__(23);

// EXTERNAL MODULE: ../src/ol/coordinate.js
var coordinate = __webpack_require__(34);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/events/EventType.js
var EventType = __webpack_require__(14);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/geom/Point.js
var Point = __webpack_require__(30);

// EXTERNAL MODULE: ../src/ol/source/Vector.js
var Vector = __webpack_require__(13);

// CONCATENATED MODULE: ../src/ol/source/Cluster.js
/**
 * @module ol/source/Cluster
 */











/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [distance=20] Minimum distance in pixels between clusters.
 * @property {module:ol/extent~Extent} [extent] Extent.
 * @property {function(module:ol/Feature):module:ol/geom/Point} [geometryFunction]
 * Function that takes an {@link module:ol/Feature} as argument and returns an
 * {@link module:ol/geom/Point} as cluster calculation point for the feature. When a
 * feature should not be considered for clustering, the function should return
 * `null`. The default, which works when the underyling source contains point
 * features only, is
 * ```js
 * function(feature) {
 *   return feature.getGeometry();
 * }
 * ```
 * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster
 * calculation point for polygons.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {module:ol/source/Vector} source Source.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 */


/**
 * @classdesc
 * Layer source to cluster vector data. Works out of the box with point
 * geometries. For other geometry types, or if not all geometries should be
 * considered for clustering, a custom `geometryFunction` can be defined.
 *
 * @constructor
 * @param {module:ol/source/Cluster~Options=} options Cluster options.
 * @extends {module:ol/source/Vector}
 * @api
 */
const Cluster = function(options) {
  Vector["b" /* default */].call(this, {
    attributions: options.attributions,
    extent: options.extent,
    projection: options.projection,
    wrapX: options.wrapX
  });

  /**
   * @type {number|undefined}
   * @protected
   */
  this.resolution = undefined;

  /**
   * @type {number}
   * @protected
   */
  this.distance = options.distance !== undefined ? options.distance : 20;

  /**
   * @type {Array.<module:ol/Feature>}
   * @protected
   */
  this.features = [];

  /**
   * @param {module:ol/Feature} feature Feature.
   * @return {module:ol/geom/Point} Cluster calculation point.
   * @protected
   */
  this.geometryFunction = options.geometryFunction || function(feature) {
    const geometry = /** @type {module:ol/geom/Point} */ (feature.getGeometry());
    Object(asserts["a" /* assert */])(geometry instanceof Point["a" /* default */],
      10); // The default `geometryFunction` can only handle `module:ol/geom/Point~Point` geometries
    return geometry;
  };

  /**
   * @type {module:ol/source/Vector}
   * @protected
   */
  this.source = options.source;

  Object(events["a" /* listen */])(this.source, EventType["a" /* default */].CHANGE, this.refresh, this);
};

Object(util["c" /* inherits */])(Cluster, Vector["b" /* default */]);


/**
 * Get the distance in pixels between clusters.
 * @return {number} Distance.
 * @api
 */
Cluster.prototype.getDistance = function() {
  return this.distance;
};


/**
 * Get a reference to the wrapped source.
 * @return {module:ol/source/Vector} Source.
 * @api
 */
Cluster.prototype.getSource = function() {
  return this.source;
};


/**
 * @inheritDoc
 */
Cluster.prototype.loadFeatures = function(extent, resolution, projection) {
  this.source.loadFeatures(extent, resolution, projection);
  if (resolution !== this.resolution) {
    this.clear();
    this.resolution = resolution;
    this.cluster();
    this.addFeatures(this.features);
  }
};


/**
 * Set the distance in pixels between clusters.
 * @param {number} distance The distance in pixels.
 * @api
 */
Cluster.prototype.setDistance = function(distance) {
  this.distance = distance;
  this.refresh();
};


/**
 * handle the source changing
 * @override
 */
Cluster.prototype.refresh = function() {
  this.clear();
  this.cluster();
  this.addFeatures(this.features);
  Vector["b" /* default */].prototype.refresh.call(this);
};


/**
 * @protected
 */
Cluster.prototype.cluster = function() {
  if (this.resolution === undefined) {
    return;
  }
  this.features.length = 0;
  const extent = Object(ol_extent["j" /* createEmpty */])();
  const mapDistance = this.distance * this.resolution;
  const features = this.source.getFeatures();

  /**
   * @type {!Object.<string, boolean>}
   */
  const clustered = {};

  for (let i = 0, ii = features.length; i < ii; i++) {
    const feature = features[i];
    if (!(Object(util["b" /* getUid */])(feature).toString() in clustered)) {
      const geometry = this.geometryFunction(feature);
      if (geometry) {
        const coordinates = geometry.getCoordinates();
        Object(ol_extent["m" /* createOrUpdateFromCoordinate */])(coordinates, extent);
        Object(ol_extent["c" /* buffer */])(extent, mapDistance, extent);

        let neighbors = this.source.getFeaturesInExtent(extent);
        neighbors = neighbors.filter(function(neighbor) {
          const uid = Object(util["b" /* getUid */])(neighbor).toString();
          if (!(uid in clustered)) {
            clustered[uid] = true;
            return true;
          } else {
            return false;
          }
        });
        this.features.push(this.createCluster(neighbors));
      }
    }
  }
};


/**
 * @param {Array.<module:ol/Feature>} features Features
 * @return {module:ol/Feature} The cluster feature.
 * @protected
 */
Cluster.prototype.createCluster = function(features) {
  const centroid = [0, 0];
  for (let i = features.length - 1; i >= 0; --i) {
    const geometry = this.geometryFunction(features[i]);
    if (geometry) {
      Object(coordinate["a" /* add */])(centroid, geometry.getCoordinates());
    } else {
      features.splice(i, 1);
    }
  }
  Object(coordinate["i" /* scale */])(centroid, 1 / features.length);

  const cluster = new Feature["a" /* default */](new Point["a" /* default */](centroid));
  cluster.set('features', features);
  return cluster;
};
/* harmony default export */ var source_Cluster = (Cluster);

// EXTERNAL MODULE: ../src/ol/source/Image.js + 1 modules
var Image = __webpack_require__(64);

// EXTERNAL MODULE: ../src/ol/Image.js
var ol_Image = __webpack_require__(138);

// EXTERNAL MODULE: ../src/ol/uri.js
var uri = __webpack_require__(115);

// CONCATENATED MODULE: ../src/ol/source/ImageArcGISRest.js
/**
 * @module ol/source/ImageArcGISRest
 */











/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from
 * the remote server.
 * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given
 * a URL.
 * @property {Object.<string,*>} params ArcGIS Rest parameters. This field is optional. Service
 * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is
 * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX, `SIZE`, `BBOXSR`, and `IMAGESR`
 * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See
 * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}
 * for further reference.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,
 * `2` means twice the size of the map viewport, and so on.
 * @property {Array.<number>} [resolutions] Resolutions. If specified, requests will be made for
 * these resolutions only.
 * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url
 * should include /MapServer or /ImageServer.
 */


/**
 * @classdesc
 * Source for data from ArcGIS Rest services providing single, untiled images.
 * Useful when underlying map service has labels.
 *
 * If underlying map service is not using labels,
 * take advantage of ol image caching and use
 * {@link module:ol/source/TileArcGISRest} data source.
 *
 * @constructor
 * @fires ol/source/Image~ImageSourceEvent
 * @extends {module:ol/source/Image}
 * @param {module:ol/source/ImageArcGISRest~Options=} opt_options Image ArcGIS Rest Options.
 * @api
 */
const ImageArcGISRest = function(opt_options) {

  const options = opt_options || {};

  Image["a" /* default */].call(this, {
    attributions: options.attributions,
    projection: options.projection,
    resolutions: options.resolutions
  });

  /**
   * @private
   * @type {?string}
   */
  this.crossOrigin_ =
      options.crossOrigin !== undefined ? options.crossOrigin : null;

  /**
   * @private
   * @type {boolean}
   */
  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

  /**
   * @private
   * @type {string|undefined}
   */
  this.url_ = options.url;

  /**
   * @private
   * @type {module:ol/Image~LoadFunction}
   */
  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?
    options.imageLoadFunction : Image["b" /* defaultImageLoadFunction */];


  /**
   * @private
   * @type {!Object}
   */
  this.params_ = options.params || {};

  /**
   * @private
   * @type {module:ol/Image}
   */
  this.image_ = null;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.imageSize_ = [0, 0];


  /**
   * @private
   * @type {number}
   */
  this.renderedRevision_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;

};

Object(util["c" /* inherits */])(ImageArcGISRest, Image["a" /* default */]);


/**
 * Get the user-provided params, i.e. those passed to the constructor through
 * the "params" option, and possibly updated using the updateParams method.
 * @return {Object} Params.
 * @api
 */
ImageArcGISRest.prototype.getParams = function() {
  return this.params_;
};


/**
 * @inheritDoc
 */
ImageArcGISRest.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {

  if (this.url_ === undefined) {
    return null;
  }

  resolution = this.findNearestResolution(resolution);
  pixelRatio = this.hidpi_ ? pixelRatio : 1;

  const image = this.image_;
  if (image &&
      this.renderedRevision_ == this.getRevision() &&
      image.getResolution() == resolution &&
      image.getPixelRatio() == pixelRatio &&
      Object(ol_extent["g" /* containsExtent */])(image.getExtent(), extent)) {
    return image;
  }

  const params = {
    'F': 'image',
    'FORMAT': 'PNG32',
    'TRANSPARENT': true
  };
  Object(obj["a" /* assign */])(params, this.params_);

  extent = extent.slice();
  const centerX = (extent[0] + extent[2]) / 2;
  const centerY = (extent[1] + extent[3]) / 2;
  if (this.ratio_ != 1) {
    const halfWidth = this.ratio_ * Object(ol_extent["E" /* getWidth */])(extent) / 2;
    const halfHeight = this.ratio_ * Object(ol_extent["A" /* getHeight */])(extent) / 2;
    extent[0] = centerX - halfWidth;
    extent[1] = centerY - halfHeight;
    extent[2] = centerX + halfWidth;
    extent[3] = centerY + halfHeight;
  }

  const imageResolution = resolution / pixelRatio;

  // Compute an integer width and height.
  const width = Math.ceil(Object(ol_extent["E" /* getWidth */])(extent) / imageResolution);
  const height = Math.ceil(Object(ol_extent["A" /* getHeight */])(extent) / imageResolution);

  // Modify the extent to match the integer width and height.
  extent[0] = centerX - imageResolution * width / 2;
  extent[2] = centerX + imageResolution * width / 2;
  extent[1] = centerY - imageResolution * height / 2;
  extent[3] = centerY + imageResolution * height / 2;

  this.imageSize_[0] = width;
  this.imageSize_[1] = height;

  const url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio,
    projection, params);

  this.image_ = new ol_Image["a" /* default */](extent, resolution, pixelRatio,
    url, this.crossOrigin_, this.imageLoadFunction_);

  this.renderedRevision_ = this.getRevision();

  Object(events["a" /* listen */])(this.image_, EventType["a" /* default */].CHANGE,
    this.handleImageChange, this);

  return this.image_;

};


/**
 * Return the image load function of the source.
 * @return {module:ol/Image~LoadFunction} The image load function.
 * @api
 */
ImageArcGISRest.prototype.getImageLoadFunction = function() {
  return this.imageLoadFunction_;
};


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/size~Size} size Size.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {Object} params Params.
 * @return {string} Request URL.
 * @private
 */
ImageArcGISRest.prototype.getRequestUrl_ = function(extent, size, pixelRatio, projection, params) {
  // ArcGIS Server only wants the numeric portion of the projection ID.
  const srid = projection.getCode().split(':').pop();

  params['SIZE'] = size[0] + ',' + size[1];
  params['BBOX'] = extent.join(',');
  params['BBOXSR'] = srid;
  params['IMAGESR'] = srid;
  params['DPI'] = Math.round(90 * pixelRatio);

  const url = this.url_;

  const modifiedUrl = url
    .replace(/MapServer\/?$/, 'MapServer/export')
    .replace(/ImageServer\/?$/, 'ImageServer/exportImage');
  if (modifiedUrl == url) {
    Object(asserts["a" /* assert */])(false, 50); // `options.featureTypes` should be an Array
  }
  return Object(uri["a" /* appendParams */])(modifiedUrl, params);
};


/**
 * Return the URL used for this ArcGIS source.
 * @return {string|undefined} URL.
 * @api
 */
ImageArcGISRest.prototype.getUrl = function() {
  return this.url_;
};


/**
 * Set the image load function of the source.
 * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.
 * @api
 */
ImageArcGISRest.prototype.setImageLoadFunction = function(imageLoadFunction) {
  this.image_ = null;
  this.imageLoadFunction_ = imageLoadFunction;
  this.changed();
};


/**
 * Set the URL to use for requests.
 * @param {string|undefined} url URL.
 * @api
 */
ImageArcGISRest.prototype.setUrl = function(url) {
  if (url != this.url_) {
    this.url_ = url;
    this.image_ = null;
    this.changed();
  }
};


/**
 * Update the user-provided params.
 * @param {Object} params Params.
 * @api
 */
ImageArcGISRest.prototype.updateParams = function(params) {
  Object(obj["a" /* assign */])(this.params_, params);
  this.image_ = null;
  this.changed();
};
/* harmony default export */ var source_ImageArcGISRest = (ImageArcGISRest);

// EXTERNAL MODULE: ../src/ol/ImageCanvas.js
var ImageCanvas = __webpack_require__(157);

// CONCATENATED MODULE: ../src/ol/source/ImageCanvas.js
/**
 * @module ol/source/ImageCanvas
 */






/**
 * A function returning the canvas element (`{HTMLCanvasElement}`)
 * used by the source as an image. The arguments passed to the function are:
 * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,
 * `{number}` the device pixel ratio, {@link module:ol/size~Size} the image size, and
 * {@link module:ol/proj/Projection} the image projection. The canvas returned by
 * this function is cached by the source. The this keyword inside the function
 * references the {@link module:ol/source/ImageCanvas}.
 *
 * @typedef {function(this:module:ol/ImageCanvas, module:ol/extent~Extent, number,
 *     number, module:ol/size~Size, module:ol/proj/Projection): HTMLCanvasElement} FunctionType
 */


/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {module:ol/source/ImageCanvas~FunctionType} [canvasFunction] Canvas function.
 * The function returning the canvas element used by the source
 * as an image. The arguments passed to the function are: `{module:ol/extent~Extent}` the
 * image extent, `{number}` the image resolution, `{number}` the device pixel
 * ratio, `{module:ol/size~Size}` the image size, and `{module:ol/proj/Projection~Projection}` the image
 * projection. The canvas returned by this function is cached by the source. If
 * the value returned by the function is later changed then
 * `changed` should be called on the source for the source to
 * invalidate the current cached image. See @link: {@link module:ol/Observable~Observable#changed}
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the
 * width and height of the map viewport, and so on. Must be `1` or higher.
 * @property {Array.<number>} [resolutions] Resolutions.
 * If specified, new canvases will be created for these resolutions
 * @property {module:ol/source/State} [state] Source state.
 */


/**
 * @classdesc
 * Base class for image sources where a canvas element is the image.
 *
 * @constructor
 * @extends {module:ol/source/Image}
 * @param {module:ol/source/ImageCanvas~Options=} options ImageCanvas options.
 * @api
 */
const ImageCanvasSource = function(options) {

  Image["a" /* default */].call(this, {
    attributions: options.attributions,
    projection: options.projection,
    resolutions: options.resolutions,
    state: options.state
  });

  /**
   * @private
   * @type {module:ol/source/ImageCanvas~FunctionType}
   */
  this.canvasFunction_ = options.canvasFunction;

  /**
   * @private
   * @type {module:ol/ImageCanvas}
   */
  this.canvas_ = null;

  /**
   * @private
   * @type {number}
   */
  this.renderedRevision_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.ratio_ = options.ratio !== undefined ?
    options.ratio : 1.5;

};

Object(util["c" /* inherits */])(ImageCanvasSource, Image["a" /* default */]);


/**
 * @inheritDoc
 */
ImageCanvasSource.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {
  resolution = this.findNearestResolution(resolution);

  let canvas = this.canvas_;
  if (canvas &&
      this.renderedRevision_ == this.getRevision() &&
      canvas.getResolution() == resolution &&
      canvas.getPixelRatio() == pixelRatio &&
      Object(ol_extent["g" /* containsExtent */])(canvas.getExtent(), extent)) {
    return canvas;
  }

  extent = extent.slice();
  Object(ol_extent["J" /* scaleFromCenter */])(extent, this.ratio_);
  const width = Object(ol_extent["E" /* getWidth */])(extent) / resolution;
  const height = Object(ol_extent["A" /* getHeight */])(extent) / resolution;
  const size = [width * pixelRatio, height * pixelRatio];

  const canvasElement = this.canvasFunction_(
    extent, resolution, pixelRatio, size, projection);
  if (canvasElement) {
    canvas = new ImageCanvas["a" /* default */](extent, resolution, pixelRatio, canvasElement);
  }
  this.canvas_ = canvas;
  this.renderedRevision_ = this.getRevision();

  return canvas;
};
/* harmony default export */ var source_ImageCanvas = (ImageCanvasSource);

// EXTERNAL MODULE: ../src/ol/source/ImageMapGuide.js
var ImageMapGuide = __webpack_require__(213);

// EXTERNAL MODULE: ../src/ol/source/ImageStatic.js
var ImageStatic = __webpack_require__(184);

// EXTERNAL MODULE: ../src/ol/source/ImageWMS.js
var ImageWMS = __webpack_require__(114);

// EXTERNAL MODULE: ../src/ol/source/OSM.js
var OSM = __webpack_require__(20);

// EXTERNAL MODULE: ../src/ol/source/Raster.js
var Raster = __webpack_require__(156);

// EXTERNAL MODULE: ../src/ol/source/Source.js
var Source = __webpack_require__(131);

// EXTERNAL MODULE: ../src/ol/source/Stamen.js
var Stamen = __webpack_require__(87);

// EXTERNAL MODULE: ../src/ol/source/Tile.js
var Tile = __webpack_require__(110);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// EXTERNAL MODULE: ../src/ol/size.js
var ol_size = __webpack_require__(58);

// EXTERNAL MODULE: ../src/ol/source/TileImage.js + 1 modules
var TileImage = __webpack_require__(65);

// EXTERNAL MODULE: ../src/ol/tilecoord.js
var tilecoord = __webpack_require__(57);

// CONCATENATED MODULE: ../src/ol/source/TileArcGISRest.js
/**
 * @module ol/source/TileArcGISRest
 */









/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=2048] Cache size.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.
 * Note that you must provide a `crossOrigin` value if you are using the WebGL renderer
 * or if you want to access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
 * for more detail.
 * @property {Object.<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be
 * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by
 * default. `TRANSPARENT` is `true` by default.  `BBOX, `SIZE`, `BBOXSR`,
 * and `IMAGESR` will be set dynamically. Set `LAYERS` to
 * override the default service layer visibility. See
 * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}
 * for further reference.
 * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid. Base this on the resolutions,
 * tilesize and extent supported by the server.
 * If this is not defined, a default grid will be used: if there is a projection
 * extent, the grid will be based on that; if not, a grid based on a global
 * extent with origin at 0,0 will be used.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.
 * The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The
 * url should include /MapServer or /ImageServer.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity
 * transition, pass `transition: 0`.
 * @property {Array.<string>} urls ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS
 * Service supports multiple urls for export requests.
 */


/**
 * @classdesc
 * Layer source for tile data from ArcGIS Rest services. Map and Image
 * Services are supported.
 *
 * For cached ArcGIS services, better performance is available using the
 * {@link module:ol/source/XYZ~XYZ} data source.
 *
 * @constructor
 * @extends {module:ol/source/TileImage}
 * @param {module:ol/source/TileArcGISRest~Options=} opt_options Tile ArcGIS Rest options.
 * @api
 */
const TileArcGISRest = function(opt_options) {

  const options = opt_options || {};

  TileImage["a" /* default */].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize,
    crossOrigin: options.crossOrigin,
    projection: options.projection,
    reprojectionErrorThreshold: options.reprojectionErrorThreshold,
    tileGrid: options.tileGrid,
    tileLoadFunction: options.tileLoadFunction,
    url: options.url,
    urls: options.urls,
    wrapX: options.wrapX !== undefined ? options.wrapX : true,
    transition: options.transition
  });

  /**
   * @private
   * @type {!Object}
   */
  this.params_ = options.params || {};

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.tmpExtent_ = Object(ol_extent["j" /* createEmpty */])();

  this.setKey(this.getKeyForParams_());
};

Object(util["c" /* inherits */])(TileArcGISRest, TileImage["a" /* default */]);


/**
 * @private
 * @return {string} The key for the current params.
 */
TileArcGISRest.prototype.getKeyForParams_ = function() {
  let i = 0;
  const res = [];
  for (const key in this.params_) {
    res[i++] = key + '-' + this.params_[key];
  }
  return res.join('/');
};


/**
 * Get the user-provided params, i.e. those passed to the constructor through
 * the "params" option, and possibly updated using the updateParams method.
 * @return {Object} Params.
 * @api
 */
TileArcGISRest.prototype.getParams = function() {
  return this.params_;
};


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/size~Size} tileSize Tile size.
 * @param {module:ol/extent~Extent} tileExtent Tile extent.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {Object} params Params.
 * @return {string|undefined} Request URL.
 * @private
 */
TileArcGISRest.prototype.getRequestUrl_ = function(tileCoord, tileSize, tileExtent,
  pixelRatio, projection, params) {

  const urls = this.urls;
  if (!urls) {
    return undefined;
  }

  // ArcGIS Server only wants the numeric portion of the projection ID.
  const srid = projection.getCode().split(':').pop();

  params['SIZE'] = tileSize[0] + ',' + tileSize[1];
  params['BBOX'] = tileExtent.join(',');
  params['BBOXSR'] = srid;
  params['IMAGESR'] = srid;
  params['DPI'] = Math.round(
    params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio
  );

  let url;
  if (urls.length == 1) {
    url = urls[0];
  } else {
    const index = Object(math["d" /* modulo */])(Object(tilecoord["e" /* hash */])(tileCoord), urls.length);
    url = urls[index];
  }

  const modifiedUrl = url
    .replace(/MapServer\/?$/, 'MapServer/export')
    .replace(/ImageServer\/?$/, 'ImageServer/exportImage');
  return Object(uri["a" /* appendParams */])(modifiedUrl, params);
};


/**
 * @inheritDoc
 */
TileArcGISRest.prototype.getTilePixelRatio = function(pixelRatio) {
  return /** @type {number} */ (pixelRatio);
};


/**
 * @inheritDoc
 */
TileArcGISRest.prototype.fixedTileUrlFunction = function(tileCoord, pixelRatio, projection) {

  let tileGrid = this.getTileGrid();
  if (!tileGrid) {
    tileGrid = this.getTileGridForProjection(projection);
  }

  if (tileGrid.getResolutions().length <= tileCoord[0]) {
    return undefined;
  }

  const tileExtent = tileGrid.getTileCoordExtent(
    tileCoord, this.tmpExtent_);
  let tileSize = Object(ol_size["d" /* toSize */])(
    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);

  if (pixelRatio != 1) {
    tileSize = Object(ol_size["c" /* scale */])(tileSize, pixelRatio, this.tmpSize);
  }

  // Apply default params and override with user specified values.
  const baseParams = {
    'F': 'image',
    'FORMAT': 'PNG32',
    'TRANSPARENT': true
  };
  Object(obj["a" /* assign */])(baseParams, this.params_);

  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,
    pixelRatio, projection, baseParams);
};


/**
 * Update the user-provided params.
 * @param {Object} params Params.
 * @api
 */
TileArcGISRest.prototype.updateParams = function(params) {
  Object(obj["a" /* assign */])(this.params_, params);
  this.setKey(this.getKeyForParams_());
};
/* harmony default export */ var source_TileArcGISRest = (TileArcGISRest);

// EXTERNAL MODULE: ../src/ol/Tile.js
var ol_Tile = __webpack_require__(69);

// EXTERNAL MODULE: ../src/ol/TileState.js
var TileState = __webpack_require__(19);

// EXTERNAL MODULE: ../src/ol/dom.js
var dom = __webpack_require__(32);

// CONCATENATED MODULE: ../src/ol/source/TileDebug.js
/**
 * @module ol/source/TileDebug
 */









/**
 * @constructor
 * @extends {module:ol/Tile}
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/size~Size} tileSize Tile size.
 * @param {string} text Text.
 */
const LabeledTile = function(tileCoord, tileSize, text) {

  ol_Tile["a" /* default */].call(this, tileCoord, TileState["a" /* default */].LOADED);

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.tileSize_ = tileSize;

  /**
   * @private
   * @type {string}
   */
  this.text_ = text;

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = null;

};
Object(util["c" /* inherits */])(LabeledTile, ol_Tile["a" /* default */]);


/**
 * Get the image element for this tile.
 * @return {HTMLCanvasElement} Image.
 */
LabeledTile.prototype.getImage = function() {
  if (this.canvas_) {
    return this.canvas_;
  } else {
    const tileSize = this.tileSize_;
    const context = Object(dom["a" /* createCanvasContext2D */])(tileSize[0], tileSize[1]);

    context.strokeStyle = 'black';
    context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);

    context.fillStyle = 'black';
    context.textAlign = 'center';
    context.textBaseline = 'middle';
    context.font = '24px sans-serif';
    context.fillText(this.text_, tileSize[0] / 2, tileSize[1] / 2);

    this.canvas_ = context.canvas;
    return context.canvas;
  }
};


/**
 * @override
 */
LabeledTile.prototype.load = function() {};


/**
 * @typedef {Object} Options
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 */


/**
 * @classdesc
 * A pseudo tile source, which does not fetch tiles from a server, but renders
 * a grid outline for the tile grid/projection along with the coordinates for
 * each tile. See examples/canvas-tiles for an example.
 *
 * Uses Canvas context2d, so requires Canvas support.
 *
 * @constructor
 * @extends {module:ol/source/Tile}
 * @param {module:ol/source/TileDebug~Options=} options Debug tile options.
 * @api
 */
const TileDebug = function(options) {

  Tile["b" /* default */].call(this, {
    opaque: false,
    projection: options.projection,
    tileGrid: options.tileGrid,
    wrapX: options.wrapX !== undefined ? options.wrapX : true
  });

};

Object(util["c" /* inherits */])(TileDebug, Tile["b" /* default */]);


/**
 * @inheritDoc
 */
TileDebug.prototype.getTile = function(z, x, y) {
  const tileCoordKey = Object(tilecoord["d" /* getKeyZXY */])(z, x, y);
  if (this.tileCache.containsKey(tileCoordKey)) {
    return /** @type {!module:ol/source/TileDebug~LabeledTile} */ (this.tileCache.get(tileCoordKey));
  } else {
    const tileSize = Object(ol_size["d" /* toSize */])(this.tileGrid.getTileSize(z));
    const tileCoord = [z, x, y];
    const textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);
    const text = !textTileCoord ? '' :
      this.getTileCoordForTileUrlFunction(textTileCoord).toString();
    const tile = new LabeledTile(tileCoord, tileSize, text);
    this.tileCache.set(tileCoordKey, tile);
    return tile;
  }
};


/* harmony default export */ var source_TileDebug = (TileDebug);

// EXTERNAL MODULE: ../src/ol/source/TileJSON.js
var TileJSON = __webpack_require__(63);

// EXTERNAL MODULE: ../src/ol/source/TileWMS.js
var TileWMS = __webpack_require__(74);

// EXTERNAL MODULE: ../src/ol/source/UrlTile.js + 1 modules
var UrlTile = __webpack_require__(116);

// EXTERNAL MODULE: ../src/ol/source/UTFGrid.js
var UTFGrid = __webpack_require__(212);

// EXTERNAL MODULE: ../src/ol/source/WMTS.js + 1 modules
var WMTS = __webpack_require__(98);

// EXTERNAL MODULE: ../src/ol/source/Zoomify.js
var Zoomify = __webpack_require__(190);

// CONCATENATED MODULE: ../src/ol/source.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "a", function() { return BingMaps["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "b", function() { return source_CartoDB; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "c", function() { return source_Cluster; });
/* unused concated harmony import Image */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Image["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "d", function() { return source_ImageArcGISRest; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "e", function() { return source_ImageCanvas; });
/* unused concated harmony import ImageMapGuide */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return ImageMapGuide["a" /* default */]; });
/* unused concated harmony import ImageStatic */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return ImageStatic["a" /* default */]; });
/* unused concated harmony import ImageWMS */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return ImageWMS["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "f", function() { return OSM["b" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "g", function() { return Raster["a" /* default */]; });
/* unused concated harmony import Source */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Source["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "h", function() { return Stamen["a" /* default */]; });
/* unused concated harmony import Tile */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Tile["b" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "i", function() { return source_TileArcGISRest; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "j", function() { return source_TileDebug; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "k", function() { return TileImage["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "l", function() { return TileJSON["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "m", function() { return TileWMS["a" /* default */]; });
/* unused concated harmony import UrlTile */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return UrlTile["a" /* default */]; });
/* unused concated harmony import UTFGrid */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return UTFGrid["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "n", function() { return Vector["b" /* default */]; });
/* unused concated harmony import WMTS */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return WMTS["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "o", function() { return XYZ["a" /* default */]; });
/* unused concated harmony import Zoomify */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Zoomify["a" /* default */]; });
/**
 * @module ol/source
 */




























/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return reset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return multiply; });
/* unused harmony export set */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return setFromArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return compose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return invert; });
/* unused harmony export determinant */
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/**
 * @module ol/transform
 */



/**
 * An array representing an affine 2d transformation for use with
 * {@link module:ol/transform} functions. The array has 6 elements.
 * @typedef {!Array.<number>} Transform
 */


/**
 * Collection of affine 2d transformation functions. The functions work on an
 * array of 6 elements. The element order is compatible with the [SVGMatrix
 * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
 * a subset (elements a to f) of a 3×3 matrix:
 * ```
 * [ a c e ]
 * [ b d f ]
 * [ 0 0 1 ]
 * ```
 */


/**
 * @private
 * @type {module:ol/transform~Transform}
 */
const tmp_ = new Array(6);


/**
 * Create an identity transform.
 * @return {!module:ol/transform~Transform} Identity transform.
 */
function create() {
  return [1, 0, 0, 1, 0, 0];
}


/**
 * Resets the given transform to an identity transform.
 * @param {!module:ol/transform~Transform} transform Transform.
 * @return {!module:ol/transform~Transform} Transform.
 */
function reset(transform) {
  return set(transform, 1, 0, 0, 1, 0, 0);
}


/**
 * Multiply the underlying matrices of two transforms and return the result in
 * the first transform.
 * @param {!module:ol/transform~Transform} transform1 Transform parameters of matrix 1.
 * @param {!module:ol/transform~Transform} transform2 Transform parameters of matrix 2.
 * @return {!module:ol/transform~Transform} transform1 multiplied with transform2.
 */
function multiply(transform1, transform2) {
  const a1 = transform1[0];
  const b1 = transform1[1];
  const c1 = transform1[2];
  const d1 = transform1[3];
  const e1 = transform1[4];
  const f1 = transform1[5];
  const a2 = transform2[0];
  const b2 = transform2[1];
  const c2 = transform2[2];
  const d2 = transform2[3];
  const e2 = transform2[4];
  const f2 = transform2[5];

  transform1[0] = a1 * a2 + c1 * b2;
  transform1[1] = b1 * a2 + d1 * b2;
  transform1[2] = a1 * c2 + c1 * d2;
  transform1[3] = b1 * c2 + d1 * d2;
  transform1[4] = a1 * e2 + c1 * f2 + e1;
  transform1[5] = b1 * e2 + d1 * f2 + f1;

  return transform1;
}

/**
 * Set the transform components a-f on a given transform.
 * @param {!module:ol/transform~Transform} transform Transform.
 * @param {number} a The a component of the transform.
 * @param {number} b The b component of the transform.
 * @param {number} c The c component of the transform.
 * @param {number} d The d component of the transform.
 * @param {number} e The e component of the transform.
 * @param {number} f The f component of the transform.
 * @return {!module:ol/transform~Transform} Matrix with transform applied.
 */
function set(transform, a, b, c, d, e, f) {
  transform[0] = a;
  transform[1] = b;
  transform[2] = c;
  transform[3] = d;
  transform[4] = e;
  transform[5] = f;
  return transform;
}


/**
 * Set transform on one matrix from another matrix.
 * @param {!module:ol/transform~Transform} transform1 Matrix to set transform to.
 * @param {!module:ol/transform~Transform} transform2 Matrix to set transform from.
 * @return {!module:ol/transform~Transform} transform1 with transform from transform2 applied.
 */
function setFromArray(transform1, transform2) {
  transform1[0] = transform2[0];
  transform1[1] = transform2[1];
  transform1[2] = transform2[2];
  transform1[3] = transform2[3];
  transform1[4] = transform2[4];
  transform1[5] = transform2[5];
  return transform1;
}


/**
 * Transforms the given coordinate with the given transform returning the
 * resulting, transformed coordinate. The coordinate will be modified in-place.
 *
 * @param {module:ol/transform~Transform} transform The transformation.
 * @param {module:ol/coordinate~Coordinate|module:ol~Pixel} coordinate The coordinate to transform.
 * @return {module:ol/coordinate~Coordinate|module:ol~Pixel} return coordinate so that operations can be
 *     chained together.
 */
function apply(transform, coordinate) {
  const x = coordinate[0];
  const y = coordinate[1];
  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
  return coordinate;
}


/**
 * Applies rotation to the given transform.
 * @param {!module:ol/transform~Transform} transform Transform.
 * @param {number} angle Angle in radians.
 * @return {!module:ol/transform~Transform} The rotated transform.
 */
function rotate(transform, angle) {
  const cos = Math.cos(angle);
  const sin = Math.sin(angle);
  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));
}


/**
 * Applies scale to a given transform.
 * @param {!module:ol/transform~Transform} transform Transform.
 * @param {number} x Scale factor x.
 * @param {number} y Scale factor y.
 * @return {!module:ol/transform~Transform} The scaled transform.
 */
function scale(transform, x, y) {
  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));
}


/**
 * Applies translation to the given transform.
 * @param {!module:ol/transform~Transform} transform Transform.
 * @param {number} dx Translation x.
 * @param {number} dy Translation y.
 * @return {!module:ol/transform~Transform} The translated transform.
 */
function translate(transform, dx, dy) {
  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));
}


/**
 * Creates a composite transform given an initial translation, scale, rotation, and
 * final translation (in that order only, not commutative).
 * @param {!module:ol/transform~Transform} transform The transform (will be modified in place).
 * @param {number} dx1 Initial translation x.
 * @param {number} dy1 Initial translation y.
 * @param {number} sx Scale factor x.
 * @param {number} sy Scale factor y.
 * @param {number} angle Rotation (in counter-clockwise radians).
 * @param {number} dx2 Final translation x.
 * @param {number} dy2 Final translation y.
 * @return {!module:ol/transform~Transform} The composite transform.
 */
function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
  const sin = Math.sin(angle);
  const cos = Math.cos(angle);
  transform[0] = sx * cos;
  transform[1] = sy * sin;
  transform[2] = -sx * sin;
  transform[3] = sy * cos;
  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
  return transform;
}


/**
 * Invert the given transform.
 * @param {!module:ol/transform~Transform} transform Transform.
 * @return {!module:ol/transform~Transform} Inverse of the transform.
 */
function invert(transform) {
  const det = determinant(transform);
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_0__[/* assert */ "a"])(det !== 0, 32); // Transformation matrix cannot be inverted

  const a = transform[0];
  const b = transform[1];
  const c = transform[2];
  const d = transform[3];
  const e = transform[4];
  const f = transform[5];

  transform[0] = d / det;
  transform[1] = -b / det;
  transform[2] = -c / det;
  transform[3] = a / det;
  transform[4] = (c * f - d * e) / det;
  transform[5] = -(a * f - b * e) / det;

  return transform;
}


/**
 * Returns the determinant of the given matrix.
 * @param {!module:ol/transform~Transform} mat Matrix.
 * @return {number} Determinant.
 */
function determinant(mat) {
  return mat[0] * mat[3] - mat[1] * mat[2];
}


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/TileState
 */

/**
 * @enum {number}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  IDLE: 0,
  LOADING: 1,
  LOADED: 2,
  ERROR: 3,
  EMPTY: 4,
  ABORT: 5
});


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ATTRIBUTION; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _source_XYZ_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(54);
/**
 * @module ol/source/OSM
 */




/**
 * The attribution containing a link to the OpenStreetMap Copyright and License
 * page.
 * @const
 * @type {string}
 * @api
 */
const ATTRIBUTION = '&copy; ' +
      '<a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> ' +
      'contributors.';


/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=2048] Cache size.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {number} [maxZoom=19] Max zoom.
 * @property {boolean} [opaque=true] Whether the layer is opaque.
 * @property {number} [reprojectionErrorThreshold=1.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
 * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 */


/**
 * @classdesc
 * Layer source for the OpenStreetMap tile server.
 *
 * @constructor
 * @extends {module:ol/source/XYZ}
 * @param {module:ol/source/OSM~Options=} [opt_options] Open Street Map options.
 * @api
 */
const OSM = function(opt_options) {

  const options = opt_options || {};

  let attributions;
  if (options.attributions !== undefined) {
    attributions = options.attributions;
  } else {
    attributions = [ATTRIBUTION];
  }

  const crossOrigin = options.crossOrigin !== undefined ?
    options.crossOrigin : 'anonymous';

  const url = options.url !== undefined ?
    options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';

  _source_XYZ_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, {
    attributions: attributions,
    cacheSize: options.cacheSize,
    crossOrigin: crossOrigin,
    opaque: options.opaque !== undefined ? options.opaque : true,
    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
    reprojectionErrorThreshold: options.reprojectionErrorThreshold,
    tileLoadFunction: options.tileLoadFunction,
    url: url,
    wrapX: options.wrapX
  });

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(OSM, _source_XYZ_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);

/* harmony default export */ __webpack_exports__["b"] = (OSM);


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cosh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return roundUpToPowerOfTwo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return squaredSegmentDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return solveLinearSystem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return toDegrees; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return toRadians; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return modulo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return lerp; });
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/**
 * @module ol/math
 */


/**
 * Takes a number and clamps it to within the provided bounds.
 * @param {number} value The input number.
 * @param {number} min The minimum value to return.
 * @param {number} max The maximum value to return.
 * @return {number} The input number if it is within bounds, or the nearest
 *     number within the bounds.
 */
function clamp(value, min, max) {
  return Math.min(Math.max(value, min), max);
}


/**
 * Return the hyperbolic cosine of a given number. The method will use the
 * native `Math.cosh` function if it is available, otherwise the hyperbolic
 * cosine will be calculated via the reference implementation of the Mozilla
 * developer network.
 *
 * @param {number} x X.
 * @return {number} Hyperbolic cosine of x.
 */
const cosh  = (function() {
  // Wrapped in a iife, to save the overhead of checking for the native
  // implementation on every invocation.
  let cosh;
  if ('cosh' in Math) {
    // The environment supports the native Math.cosh function, use it…
    cosh = Math.cosh;
  } else {
    // … else, use the reference implementation of MDN:
    cosh = function(x) {
      const y = Math.exp(x);
      return (y + 1 / y) / 2;
    };
  }
  return cosh;
}());


/**
 * @param {number} x X.
 * @return {number} The smallest power of two greater than or equal to x.
 */
function roundUpToPowerOfTwo(x) {
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_0__[/* assert */ "a"])(0 < x, 29); // `x` must be greater than `0`
  return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));
}


/**
 * Returns the square of the closest distance between the point (x, y) and the
 * line segment (x1, y1) to (x2, y2).
 * @param {number} x X.
 * @param {number} y Y.
 * @param {number} x1 X1.
 * @param {number} y1 Y1.
 * @param {number} x2 X2.
 * @param {number} y2 Y2.
 * @return {number} Squared distance.
 */
function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
  const dx = x2 - x1;
  const dy = y2 - y1;
  if (dx !== 0 || dy !== 0) {
    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
    if (t > 1) {
      x1 = x2;
      y1 = y2;
    } else if (t > 0) {
      x1 += dx * t;
      y1 += dy * t;
    }
  }
  return squaredDistance(x, y, x1, y1);
}


/**
 * Returns the square of the distance between the points (x1, y1) and (x2, y2).
 * @param {number} x1 X1.
 * @param {number} y1 Y1.
 * @param {number} x2 X2.
 * @param {number} y2 Y2.
 * @return {number} Squared distance.
 */
function squaredDistance(x1, y1, x2, y2) {
  const dx = x2 - x1;
  const dy = y2 - y1;
  return dx * dx + dy * dy;
}


/**
 * Solves system of linear equations using Gaussian elimination method.
 *
 * @param {Array.<Array.<number>>} mat Augmented matrix (n x n + 1 column)
 *                                     in row-major order.
 * @return {Array.<number>} The resulting vector.
 */
function solveLinearSystem(mat) {
  const n = mat.length;

  for (let i = 0; i < n; i++) {
    // Find max in the i-th column (ignoring i - 1 first rows)
    let maxRow = i;
    let maxEl = Math.abs(mat[i][i]);
    for (let r = i + 1; r < n; r++) {
      const absValue = Math.abs(mat[r][i]);
      if (absValue > maxEl) {
        maxEl = absValue;
        maxRow = r;
      }
    }

    if (maxEl === 0) {
      return null; // matrix is singular
    }

    // Swap max row with i-th (current) row
    const tmp = mat[maxRow];
    mat[maxRow] = mat[i];
    mat[i] = tmp;

    // Subtract the i-th row to make all the remaining rows 0 in the i-th column
    for (let j = i + 1; j < n; j++) {
      const coef = -mat[j][i] / mat[i][i];
      for (let k = i; k < n + 1; k++) {
        if (i == k) {
          mat[j][k] = 0;
        } else {
          mat[j][k] += coef * mat[i][k];
        }
      }
    }
  }

  // Solve Ax=b for upper triangular matrix A (mat)
  const x = new Array(n);
  for (let l = n - 1; l >= 0; l--) {
    x[l] = mat[l][n] / mat[l][l];
    for (let m = l - 1; m >= 0; m--) {
      mat[m][n] -= mat[m][l] * x[l];
    }
  }
  return x;
}


/**
 * Converts radians to to degrees.
 *
 * @param {number} angleInRadians Angle in radians.
 * @return {number} Angle in degrees.
 */
function toDegrees(angleInRadians) {
  return angleInRadians * 180 / Math.PI;
}


/**
 * Converts degrees to radians.
 *
 * @param {number} angleInDegrees Angle in degrees.
 * @return {number} Angle in radians.
 */
function toRadians(angleInDegrees) {
  return angleInDegrees * Math.PI / 180;
}

/**
 * Returns the modulo of a / b, depending on the sign of b.
 *
 * @param {number} a Dividend.
 * @param {number} b Divisor.
 * @return {number} Modulo.
 */
function modulo(a, b) {
  const r = a % b;
  return r * b < 0 ? r + b : r;
}

/**
 * Calculates the linearly interpolated value of x between a and b.
 *
 * @param {number} a Number
 * @param {number} b Number
 * @param {number} x Value to be interpolated.
 * @return {number} Interpolated value.
 */
function lerp(a, b, x) {
  return a + x * (b - a);
}


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/geom/GeometryLayout
 */

/**
 * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
 * or measure ('M') coordinate is available. Supported values are `'XY'`,
 * `'XYZ'`, `'XYM'`, `'XYZM'`.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  XY: 'XY',
  XYZ: 'XYZ',
  XYM: 'XYM',
  XYZM: 'XYZM'
});


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export createStyleFunction */
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(31);
/* harmony import */ var _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(83);
/* harmony import */ var _style_Style_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(75);
/**
 * @module ol/Feature
 */








/**
 * @classdesc
 * A vector object for geographic features with a geometry and other
 * attribute properties, similar to the features in vector file formats like
 * GeoJSON.
 *
 * Features can be styled individually with `setStyle`; otherwise they use the
 * style of their vector layer.
 *
 * Note that attribute properties are set as {@link module:ol/Object} properties on
 * the feature object, so they are observable, and have get/set accessors.
 *
 * Typically, a feature has a single geometry property. You can set the
 * geometry using the `setGeometry` method and get it with `getGeometry`.
 * It is possible to store more than one geometry on a feature using attribute
 * properties. By default, the geometry used for rendering is identified by
 * the property name `geometry`. If you want to use another geometry property
 * for rendering, use the `setGeometryName` method to change the attribute
 * property associated with the geometry for the feature.  For example:
 *
 * ```js
 *
 * import Feature from 'ol/Feature';
 * import Polygon from 'ol/geom/Polygon';
 * import Point from 'ol/geom/Point';
 *
 * var feature = new Feature({
 *   geometry: new Polygon(polyCoords),
 *   labelPoint: new Point(labelCoords),
 *   name: 'My Polygon'
 * });
 *
 * // get the polygon geometry
 * var poly = feature.getGeometry();
 *
 * // Render the feature as a point using the coordinates from labelPoint
 * feature.setGeometryName('labelPoint');
 *
 * // get the point geometry
 * var point = feature.getGeometry();
 * ```
 *
 * @constructor
 * @extends {module:ol/Object}
 * @param {module:ol/geom/Geometry|Object.<string, *>=} opt_geometryOrProperties
 * You may pass a Geometry object directly, or an object literal containing
 * properties. If you pass an object literal, you may include a Geometry
 * associated with a `geometry` key.
 * @api
 */
const Feature = function(opt_geometryOrProperties) {

  _Object_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {number|string|undefined}
   */
  this.id_ = undefined;

  /**
   * @type {string}
   * @private
   */
  this.geometryName_ = 'geometry';

  /**
   * User provided style.
   * @private
   * @type {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}
   */
  this.style_ = null;

  /**
   * @private
   * @type {module:ol/style/Style~StyleFunction|undefined}
   */
  this.styleFunction_ = undefined;

  /**
   * @private
   * @type {?module:ol/events~EventsKey}
   */
  this.geometryChangeKey_ = null;

  Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(
    this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_4__[/* getChangeEventType */ "b"])(this.geometryName_),
    this.handleGeometryChanged_, this);

  if (opt_geometryOrProperties !== undefined) {
    if (opt_geometryOrProperties instanceof _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"] ||
        !opt_geometryOrProperties) {
      const geometry = opt_geometryOrProperties;
      this.setGeometry(geometry);
    } else {
      /** @type {Object.<string, *>} */
      const properties = opt_geometryOrProperties;
      this.setProperties(properties);
    }
  }
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_3__[/* inherits */ "c"])(Feature, _Object_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * Clone this feature. If the original feature has a geometry it
 * is also cloned. The feature id is not set in the clone.
 * @return {module:ol/Feature} The clone.
 * @api
 */
Feature.prototype.clone = function() {
  const clone = new Feature(this.getProperties());
  clone.setGeometryName(this.getGeometryName());
  const geometry = this.getGeometry();
  if (geometry) {
    clone.setGeometry(geometry.clone());
  }
  const style = this.getStyle();
  if (style) {
    clone.setStyle(style);
  }
  return clone;
};


/**
 * Get the feature's default geometry.  A feature may have any number of named
 * geometries.  The "default" geometry (the one that is rendered by default) is
 * set when calling {@link module:ol/Feature~Feature#setGeometry}.
 * @return {module:ol/geom/Geometry|undefined} The default geometry for the feature.
 * @api
 * @observable
 */
Feature.prototype.getGeometry = function() {
  return (
    /** @type {module:ol/geom/Geometry|undefined} */ (this.get(this.geometryName_))
  );
};


/**
 * Get the feature identifier.  This is a stable identifier for the feature and
 * is either set when reading data from a remote source or set explicitly by
 * calling {@link module:ol/Feature~Feature#setId}.
 * @return {number|string|undefined} Id.
 * @api
 */
Feature.prototype.getId = function() {
  return this.id_;
};


/**
 * Get the name of the feature's default geometry.  By default, the default
 * geometry is named `geometry`.
 * @return {string} Get the property name associated with the default geometry
 *     for this feature.
 * @api
 */
Feature.prototype.getGeometryName = function() {
  return this.geometryName_;
};


/**
 * Get the feature's style. Will return what was provided to the
 * {@link module:ol/Feature~Feature#setStyle} method.
 * @return {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} The feature style.
 * @api
 */
Feature.prototype.getStyle = function() {
  return this.style_;
};


/**
 * Get the feature's style function.
 * @return {module:ol/style/Style~StyleFunction|undefined} Return a function
 * representing the current style of this feature.
 * @api
 */
Feature.prototype.getStyleFunction = function() {
  return this.styleFunction_;
};


/**
 * @private
 */
Feature.prototype.handleGeometryChange_ = function() {
  this.changed();
};


/**
 * @private
 */
Feature.prototype.handleGeometryChanged_ = function() {
  if (this.geometryChangeKey_) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* unlistenByKey */ "e"])(this.geometryChangeKey_);
    this.geometryChangeKey_ = null;
  }
  const geometry = this.getGeometry();
  if (geometry) {
    this.geometryChangeKey_ = Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(geometry,
      _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].CHANGE, this.handleGeometryChange_, this);
  }
  this.changed();
};


/**
 * Set the default geometry for the feature.  This will update the property
 * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
 * @param {module:ol/geom/Geometry|undefined} geometry The new geometry.
 * @api
 * @observable
 */
Feature.prototype.setGeometry = function(geometry) {
  this.set(this.geometryName_, geometry);
};


/**
 * Set the style for the feature.  This can be a single style object, an array
 * of styles, or a function that takes a resolution and returns an array of
 * styles. If it is `null` the feature has no style (a `null` style).
 * @param {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} style Style for this feature.
 * @api
 * @fires module:ol/events/Event~Event#event:change
 */
Feature.prototype.setStyle = function(style) {
  this.style_ = style;
  this.styleFunction_ = !style ? undefined : createStyleFunction(style);
  this.changed();
};


/**
 * Set the feature id.  The feature id is considered stable and may be used when
 * requesting features or comparing identifiers returned from a remote source.
 * The feature id can be used with the
 * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
 * @param {number|string|undefined} id The feature id.
 * @api
 * @fires module:ol/events/Event~Event#event:change
 */
Feature.prototype.setId = function(id) {
  this.id_ = id;
  this.changed();
};


/**
 * Set the property name to be used when getting the feature's default geometry.
 * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
 * this name will be returned.
 * @param {string} name The property name of the default geometry.
 * @api
 */
Feature.prototype.setGeometryName = function(name) {
  Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* unlisten */ "c"])(
    this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_4__[/* getChangeEventType */ "b"])(this.geometryName_),
    this.handleGeometryChanged_, this);
  this.geometryName_ = name;
  Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(
    this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_4__[/* getChangeEventType */ "b"])(this.geometryName_),
    this.handleGeometryChanged_, this);
  this.handleGeometryChanged_();
};


/**
 * Convert the provided object into a feature style function.  Functions passed
 * through unchanged.  Arrays of module:ol/style/Style or single style objects wrapped
 * in a new feature style function.
 * @param {module:ol/style/Style~StyleFunction|!Array.<module:ol/style/Style>|!module:ol/style/Style} obj
 *     A feature style function, a single style, or an array of styles.
 * @return {module:ol/style/Style~StyleFunction} A style function.
 */
function createStyleFunction(obj) {
  if (typeof obj === 'function') {
    return obj;
  } else {
    /**
     * @type {Array.<module:ol/style/Style>}
     */
    let styles;
    if (Array.isArray(obj)) {
      styles = obj;
    } else {
      Object(_asserts_js__WEBPACK_IMPORTED_MODULE_0__[/* assert */ "a"])(obj instanceof _style_Style_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "c"],
        41); // Expected an `module:ol/style/Style~Style` or an array of `module:ol/style/Style~Style`
      styles = [obj];
    }
    return function() {
      return styles;
    };
  }
}
/* harmony default export */ __webpack_exports__["a"] = (Feature);


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RenderType */
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _LayerType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60);
/* harmony import */ var _layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66);
/* harmony import */ var _layer_VectorRenderType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(228);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15);
/* harmony import */ var _style_Style_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(75);
/**
 * @module ol/layer/Vector
 */








/**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {module:ol/render~OrderFunction} [renderOrder] Render order. Function to be used when sorting
 * features before rendering. By default features are drawn in the order that they are created. Use
 * `null` to avoid the sort, but get an undefined draw order.
 * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
 * renderer when getting features from the vector source for the rendering or hit-detection.
 * Recommended value: the size of the largest symbol, line width or label.
 * @property {module:ol/layer/VectorRenderType|string} [renderMode='vector'] Render mode for vector layers:
 *  * `'image'`: Vector layers are rendered as images. Great performance, but point symbols and
 *    texts are always rotated with the view and pixels are scaled during zoom animations.
 *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering even during
 *    animations, but slower performance.
 * @property {module:ol/source/Vector} [source] Source.
 * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage
 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
 * use {@link module:ol/Map#addLayer}.
 * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
 * image and text styles, and the priority is defined by the z-index of the style. Lower z-index
 * means higher priority.
 * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style] Layer style. See
 * {@link module:ol/style} for default style which will be used if this is not defined.
 * @property {boolean} [updateWhileAnimating=false] When set to `true` and `renderMode`
 * is `vector`, feature batches will be recreated during animations. This means that no
 * vectors will be shown clipped, but the setting will have a performance impact for large
 * amounts of vector data. When set to `false`, batches will be recreated when no animation
 * is active.
 * @property {boolean} [updateWhileInteracting=false] When set to `true` and `renderMode`
 * is `vector`, feature batches will be recreated during interactions. See also
 * `updateWhileAnimating`.
 */


/**
 * @enum {string}
 * Render mode for vector layers:
 *  * `'image'`: Vector layers are rendered as images. Great performance, but
 *    point symbols and texts are always rotated with the view and pixels are
 *    scaled during zoom animations.
 *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering
 *    even during animations, but slower performance.
 * @api
 */
const RenderType = {
  IMAGE: 'image',
  VECTOR: 'vector'
};


/**
 * @enum {string}
 * @private
 */
const Property = {
  RENDER_ORDER: 'renderOrder'
};


/**
 * @classdesc
 * Vector data that is rendered client-side.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @constructor
 * @extends {module:ol/layer/Layer}
 * @fires module:ol/render/Event~RenderEvent
 * @param {module:ol/layer/Vector~Options=} opt_options Options.
 * @api
 */
const VectorLayer = function(opt_options) {
  const options = opt_options ?
    opt_options : /** @type {module:ol/layer/Vector~Options} */ ({});

  const baseOptions = Object(_obj_js__WEBPACK_IMPORTED_MODULE_4__[/* assign */ "a"])({}, options);

  delete baseOptions.style;
  delete baseOptions.renderBuffer;
  delete baseOptions.updateWhileAnimating;
  delete baseOptions.updateWhileInteracting;
  _layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this, /** @type {module:ol/layer/Layer~Options} */ (baseOptions));

  /**
   * @private
   * @type {boolean}
   */
  this.declutter_ = options.declutter !== undefined ? options.declutter : false;

  /**
   * @type {number}
   * @private
   */
  this.renderBuffer_ = options.renderBuffer !== undefined ?
    options.renderBuffer : 100;

  /**
   * User provided style.
   * @type {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}
   * @private
   */
  this.style_ = null;

  /**
   * Style function for use within the library.
   * @type {module:ol/style/Style~StyleFunction|undefined}
   * @private
   */
  this.styleFunction_ = undefined;

  this.setStyle(options.style);

  /**
   * @type {boolean}
   * @private
   */
  this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?
    options.updateWhileAnimating : false;

  /**
   * @type {boolean}
   * @private
   */
  this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?
    options.updateWhileInteracting : false;

  /**
   * @private
   * @type {module:ol/layer/VectorTileRenderType|string}
   */
  this.renderMode_ = options.renderMode || _layer_VectorRenderType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].VECTOR;

  /**
   * The layer type.
   * @protected
   * @type {module:ol/LayerType}
   */
  this.type = _LayerType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].VECTOR;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(VectorLayer, _layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * @return {boolean} Declutter.
 */
VectorLayer.prototype.getDeclutter = function() {
  return this.declutter_;
};


/**
 * @param {boolean} declutter Declutter.
 */
VectorLayer.prototype.setDeclutter = function(declutter) {
  this.declutter_ = declutter;
};


/**
 * @return {number|undefined} Render buffer.
 */
VectorLayer.prototype.getRenderBuffer = function() {
  return this.renderBuffer_;
};


/**
 * @return {function(module:ol/Feature, module:ol/Feature): number|null|undefined} Render
 *     order.
 */
VectorLayer.prototype.getRenderOrder = function() {
  return (
    /** @type {module:ol/render~OrderFunction|null|undefined} */ (this.get(Property.RENDER_ORDER))
  );
};


/**
 * Return the associated {@link module:ol/source/Vector vectorsource} of the layer.
 * @function
 * @return {module:ol/source/Vector} Source.
 * @api
 */
VectorLayer.prototype.getSource;


/**
 * Get the style for features.  This returns whatever was passed to the `style`
 * option at construction or to the `setStyle` method.
 * @return {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}
 *     Layer style.
 * @api
 */
VectorLayer.prototype.getStyle = function() {
  return this.style_;
};


/**
 * Get the style function.
 * @return {module:ol/style/Style~StyleFunction|undefined} Layer style function.
 * @api
 */
VectorLayer.prototype.getStyleFunction = function() {
  return this.styleFunction_;
};


/**
 * @return {boolean} Whether the rendered layer should be updated while
 *     animating.
 */
VectorLayer.prototype.getUpdateWhileAnimating = function() {
  return this.updateWhileAnimating_;
};


/**
 * @return {boolean} Whether the rendered layer should be updated while
 *     interacting.
 */
VectorLayer.prototype.getUpdateWhileInteracting = function() {
  return this.updateWhileInteracting_;
};


/**
 * @param {module:ol/render~OrderFunction|null|undefined} renderOrder
 *     Render order.
 */
VectorLayer.prototype.setRenderOrder = function(renderOrder) {
  this.set(Property.RENDER_ORDER, renderOrder);
};


/**
 * Set the style for features.  This can be a single style object, an array
 * of styles, or a function that takes a feature and resolution and returns
 * an array of styles. If it is `undefined` the default style is used. If
 * it is `null` the layer has no style (a `null` style), so only features
 * that have their own styles will be rendered in the layer. See
 * {@link module:ol/style} for information on the default style.
 * @param {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction|null|undefined}
 *     style Layer style.
 * @api
 */
VectorLayer.prototype.setStyle = function(style) {
  this.style_ = style !== undefined ? style : _style_Style_js__WEBPACK_IMPORTED_MODULE_5__[/* createDefaultStyle */ "a"];
  this.styleFunction_ = style === null ?
    undefined : Object(_style_Style_js__WEBPACK_IMPORTED_MODULE_5__[/* toFunction */ "d"])(this.style_);
  this.changed();
};


/**
 * @return {module:ol/layer/VectorRenderType|string} The render mode.
 */
VectorLayer.prototype.getRenderMode = function() {
  return this.renderMode_;
};


/* harmony default export */ __webpack_exports__["a"] = (VectorLayer);


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/control/Attribution.js
var Attribution = __webpack_require__(219);

// EXTERNAL MODULE: ../src/ol/control/Control.js
var Control = __webpack_require__(53);

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/css.js
var css = __webpack_require__(47);

// EXTERNAL MODULE: ../src/ol/dom.js
var dom = __webpack_require__(32);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/events/EventType.js
var EventType = __webpack_require__(14);

// CONCATENATED MODULE: ../src/ol/control/FullScreen.js
/**
 * @module ol/control/FullScreen
 */








/**
 * @return {string} Change type.
 */
const getChangeType = (function() {
  let changeType;
  return function() {
    if (!changeType) {
      const body = document.body;
      if (body.webkitRequestFullscreen) {
        changeType = 'webkitfullscreenchange';
      } else if (body.mozRequestFullScreen) {
        changeType = 'mozfullscreenchange';
      } else if (body.msRequestFullscreen) {
        changeType = 'MSFullscreenChange';
      } else if (body.requestFullscreen) {
        changeType = 'fullscreenchange';
      }
    }
    return changeType;
  };
})();


/**
 * @typedef {Object} Options
 * @property {string} [className='ol-full-screen'] CSS class name.
 * @property {string|Element} [label='\u2922'] Text label to use for the button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string|Element} [labelActive='\u00d7'] Text label to use for the
 * button when full-screen is active.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.
 * @property {boolean} [keys=false] Full keyboard access.
 * @property {Element|string} [target] Specify a target if you want the
 * control to be rendered outside of the map's viewport.
 * @property {Element|string} [source] The element to be displayed
 * fullscreen. When not provided, the element containing the map viewport will
 * be displayed fullscreen.
 */


/**
 * @classdesc
 * Provides a button that when clicked fills up the full screen with the map.
 * The full screen source element is by default the element containing the map viewport unless
 * overridden by providing the `source` option. In which case, the dom
 * element introduced using this parameter will be displayed in full screen.
 *
 * When in full screen mode, a close button is shown to exit full screen mode.
 * The [Fullscreen API](http://www.w3.org/TR/fullscreen/) is used to
 * toggle the map in full screen mode.
 *
 *
 * @constructor
 * @extends {module:ol/control/Control}
 * @param {module:ol/control/FullScreen~Options=} opt_options Options.
 * @api
 */
const FullScreen = function(opt_options) {

  const options = opt_options ? opt_options : {};

  /**
   * @private
   * @type {string}
   */
  this.cssClassName_ = options.className !== undefined ? options.className :
    'ol-full-screen';

  const label = options.label !== undefined ? options.label : '\u2922';

  /**
   * @private
   * @type {Element}
   */
  this.labelNode_ = typeof label === 'string' ?
    document.createTextNode(label) : label;

  const labelActive = options.labelActive !== undefined ? options.labelActive : '\u00d7';

  /**
   * @private
   * @type {Element}
   */
  this.labelActiveNode_ = typeof labelActive === 'string' ?
    document.createTextNode(labelActive) : labelActive;

  const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';
  const button = document.createElement('button');
  button.className = this.cssClassName_ + '-' + isFullScreen();
  button.setAttribute('type', 'button');
  button.title = tipLabel;
  button.appendChild(this.labelNode_);

  Object(events["a" /* listen */])(button, EventType["a" /* default */].CLICK,
    this.handleClick_, this);

  const cssClasses = this.cssClassName_ + ' ' + css["e" /* CLASS_UNSELECTABLE */] +
      ' ' + css["b" /* CLASS_CONTROL */] + ' ' +
      (!isFullScreenSupported() ? css["f" /* CLASS_UNSUPPORTED */] : '');
  const element = document.createElement('div');
  element.className = cssClasses;
  element.appendChild(button);

  Control["a" /* default */].call(this, {
    element: element,
    target: options.target
  });

  /**
   * @private
   * @type {boolean}
   */
  this.keys_ = options.keys !== undefined ? options.keys : false;

  /**
   * @private
   * @type {Element|string|undefined}
   */
  this.source_ = options.source;

};

Object(util["c" /* inherits */])(FullScreen, Control["a" /* default */]);


/**
 * @param {MouseEvent} event The event to handle
 * @private
 */
FullScreen.prototype.handleClick_ = function(event) {
  event.preventDefault();
  this.handleFullScreen_();
};


/**
 * @private
 */
FullScreen.prototype.handleFullScreen_ = function() {
  if (!isFullScreenSupported()) {
    return;
  }
  const map = this.getMap();
  if (!map) {
    return;
  }
  if (isFullScreen()) {
    exitFullScreen();
  } else {
    let element;
    if (this.source_) {
      element = typeof this.source_ === 'string' ?
        document.getElementById(this.source_) :
        this.source_;
    } else {
      element = map.getTargetElement();
    }
    if (this.keys_) {
      requestFullScreenWithKeys(element);

    } else {
      requestFullScreen(element);
    }
  }
};


/**
 * @private
 */
FullScreen.prototype.handleFullScreenChange_ = function() {
  const button = this.element.firstElementChild;
  const map = this.getMap();
  if (isFullScreen()) {
    button.className = this.cssClassName_ + '-true';
    Object(dom["f" /* replaceNode */])(this.labelActiveNode_, this.labelNode_);
  } else {
    button.className = this.cssClassName_ + '-false';
    Object(dom["f" /* replaceNode */])(this.labelNode_, this.labelActiveNode_);
  }
  if (map) {
    map.updateSize();
  }
};


/**
 * @inheritDoc
 * @api
 */
FullScreen.prototype.setMap = function(map) {
  Control["a" /* default */].prototype.setMap.call(this, map);
  if (map) {
    this.listenerKeys.push(Object(events["a" /* listen */])(document,
      getChangeType(),
      this.handleFullScreenChange_, this)
    );
  }
};

/**
 * @return {boolean} Fullscreen is supported by the current platform.
 */
function isFullScreenSupported() {
  const body = document.body;
  return !!(
    body.webkitRequestFullscreen ||
    (body.mozRequestFullScreen && document.mozFullScreenEnabled) ||
    (body.msRequestFullscreen && document.msFullscreenEnabled) ||
    (body.requestFullscreen && document.fullscreenEnabled)
  );
}

/**
 * @return {boolean} Element is currently in fullscreen.
 */
function isFullScreen() {
  return !!(
    document.webkitIsFullScreen || document.mozFullScreen ||
    document.msFullscreenElement || document.fullscreenElement
  );
}

/**
 * Request to fullscreen an element.
 * @param {Element} element Element to request fullscreen
 */
function requestFullScreen(element) {
  if (element.requestFullscreen) {
    element.requestFullscreen();
  } else if (element.msRequestFullscreen) {
    element.msRequestFullscreen();
  } else if (element.mozRequestFullScreen) {
    element.mozRequestFullScreen();
  } else if (element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen();
  }
}

/**
 * Request to fullscreen an element with keyboard input.
 * @param {Element} element Element to request fullscreen
 */
function requestFullScreenWithKeys(element) {
  if (element.mozRequestFullScreenWithKeys) {
    element.mozRequestFullScreenWithKeys();
  } else if (element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
  } else {
    requestFullScreen(element);
  }
}

/**
 * Exit fullscreen.
 */
function exitFullScreen() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  }
}

/* harmony default export */ var control_FullScreen = (FullScreen);

// EXTERNAL MODULE: ../src/ol/Collection.js
var Collection = __webpack_require__(51);

// EXTERNAL MODULE: ../src/ol/Map.js + 11 modules
var Map = __webpack_require__(5);

// EXTERNAL MODULE: ../src/ol/MapEventType.js
var MapEventType = __webpack_require__(142);

// EXTERNAL MODULE: ../src/ol/MapProperty.js
var MapProperty = __webpack_require__(96);

// EXTERNAL MODULE: ../src/ol/Object.js
var ol_Object = __webpack_require__(31);

// EXTERNAL MODULE: ../src/ol/ObjectEventType.js
var ObjectEventType = __webpack_require__(125);

// EXTERNAL MODULE: ../src/ol/Overlay.js
var Overlay = __webpack_require__(88);

// EXTERNAL MODULE: ../src/ol/OverlayPositioning.js
var OverlayPositioning = __webpack_require__(103);

// EXTERNAL MODULE: ../src/ol/ViewProperty.js
var ViewProperty = __webpack_require__(81);

// EXTERNAL MODULE: ../src/ol/coordinate.js
var ol_coordinate = __webpack_require__(34);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// CONCATENATED MODULE: ../src/ol/control/OverviewMap.js
/**
 * @module ol/control/OverviewMap
 */



















/**
 * Maximum width and/or height extent ratio that determines when the overview
 * map should be zoomed out.
 * @type {number}
 */
const MAX_RATIO = 0.75;


/**
 * Minimum width and/or height extent ratio that determines when the overview
 * map should be zoomed in.
 * @type {number}
 */
const MIN_RATIO = 0.1;


/**
 * @typedef {Object} Options
 * @property {string} [className='ol-overviewmap'] CSS class name.
 * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).
 * @property {string|Element} [collapseLabel='«'] Text label to use for the
 * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.
 * @property {string|Element} [label='»'] Text label to use for the collapsed
 * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {Array.<module:ol/layer/Layer>|module:ol/Collection.<module:ol/layer/Layer>} [layers]
 * Layers for the overview map. If not set, then all main map layers are used
 * instead.
 * @property {function(module:ol/MapEvent)} [render] Function called when the control
 * should be re-rendered. This is called in a `requestAnimationFrame` callback.
 * @property {Element|string} [target] Specify a target if you want the control
 * to be rendered outside of the map's viewport.
 * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.
 * @property {module:ol/View} [view] Custom view for the overview map. If not provided,
 * a default view with an EPSG:3857 projection will be used.
 */


/**
 * Create a new control with a map acting as an overview map for an other
 * defined map.
 * @constructor
 * @extends {module:ol/control/Control}
 * @param {module:ol/control/OverviewMap~Options=} opt_options OverviewMap options.
 * @api
 */
const OverviewMap = function(opt_options) {

  const options = opt_options ? opt_options : {};

  /**
   * @type {boolean}
   * @private
   */
  this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;

  /**
   * @private
   * @type {boolean}
   */
  this.collapsible_ = options.collapsible !== undefined ?
    options.collapsible : true;

  if (!this.collapsible_) {
    this.collapsed_ = false;
  }

  const className = options.className !== undefined ? options.className : 'ol-overviewmap';

  const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';

  const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00AB';

  if (typeof collapseLabel === 'string') {
    /**
     * @private
     * @type {Element}
     */
    this.collapseLabel_ = document.createElement('span');
    this.collapseLabel_.textContent = collapseLabel;
  } else {
    this.collapseLabel_ = collapseLabel;
  }

  const label = options.label !== undefined ? options.label : '\u00BB';


  if (typeof label === 'string') {
    /**
     * @private
     * @type {Element}
     */
    this.label_ = document.createElement('span');
    this.label_.textContent = label;
  } else {
    this.label_ = label;
  }

  const activeLabel = (this.collapsible_ && !this.collapsed_) ?
    this.collapseLabel_ : this.label_;
  const button = document.createElement('button');
  button.setAttribute('type', 'button');
  button.title = tipLabel;
  button.appendChild(activeLabel);

  Object(events["a" /* listen */])(button, EventType["a" /* default */].CLICK,
    this.handleClick_, this);

  /**
   * @type {Element}
   * @private
   */
  this.ovmapDiv_ = document.createElement('DIV');
  this.ovmapDiv_.className = 'ol-overviewmap-map';

  /**
   * @type {module:ol/Map}
   * @private
   */
  this.ovmap_ = new Map["a" /* default */]({
    controls: new Collection["b" /* default */](),
    interactions: new Collection["b" /* default */](),
    view: options.view
  });
  const ovmap = this.ovmap_;

  if (options.layers) {
    options.layers.forEach(
      /**
       * @param {module:ol/layer/Layer} layer Layer.
       */
      (function(layer) {
        ovmap.addLayer(layer);
      }).bind(this));
  }

  const box = document.createElement('DIV');
  box.className = 'ol-overviewmap-box';
  box.style.boxSizing = 'border-box';

  /**
   * @type {module:ol/Overlay}
   * @private
   */
  this.boxOverlay_ = new Overlay["a" /* default */]({
    position: [0, 0],
    positioning: OverlayPositioning["a" /* default */].BOTTOM_LEFT,
    element: box
  });
  this.ovmap_.addOverlay(this.boxOverlay_);

  const cssClasses = className + ' ' + css["e" /* CLASS_UNSELECTABLE */] + ' ' + css["b" /* CLASS_CONTROL */] +
      (this.collapsed_ && this.collapsible_ ? ' ' + css["a" /* CLASS_COLLAPSED */] : '') +
      (this.collapsible_ ? '' : ' ol-uncollapsible');
  const element = document.createElement('div');
  element.className = cssClasses;
  element.appendChild(this.ovmapDiv_);
  element.appendChild(button);

  Control["a" /* default */].call(this, {
    element: element,
    render: options.render || render,
    target: options.target
  });

  /* Interactive map */

  const scope = this;

  const overlay = this.boxOverlay_;
  const overlayBox = this.boxOverlay_.getElement();

  /* Functions definition */

  const computeDesiredMousePosition = function(mousePosition) {
    return {
      clientX: mousePosition.clientX - (overlayBox.offsetWidth / 2),
      clientY: mousePosition.clientY + (overlayBox.offsetHeight / 2)
    };
  };

  const move = function(event) {
    const coordinates = ovmap.getEventCoordinate(computeDesiredMousePosition(event));

    overlay.setPosition(coordinates);
  };

  const endMoving = function(event) {
    const coordinates = ovmap.getEventCoordinate(event);

    scope.getMap().getView().setCenter(coordinates);

    window.removeEventListener('mousemove', move);
    window.removeEventListener('mouseup', endMoving);
  };

  /* Binding */

  overlayBox.addEventListener('mousedown', function() {
    window.addEventListener('mousemove', move);
    window.addEventListener('mouseup', endMoving);
  });
};

Object(util["c" /* inherits */])(OverviewMap, Control["a" /* default */]);


/**
 * @inheritDoc
 * @api
 */
OverviewMap.prototype.setMap = function(map) {
  const oldMap = this.getMap();
  if (map === oldMap) {
    return;
  }
  if (oldMap) {
    const oldView = oldMap.getView();
    if (oldView) {
      this.unbindView_(oldView);
    }
    this.ovmap_.setTarget(null);
  }
  Control["a" /* default */].prototype.setMap.call(this, map);

  if (map) {
    this.ovmap_.setTarget(this.ovmapDiv_);
    this.listenerKeys.push(Object(events["a" /* listen */])(
      map, ObjectEventType["a" /* default */].PROPERTYCHANGE,
      this.handleMapPropertyChange_, this));

    // TODO: to really support map switching, this would need to be reworked
    if (this.ovmap_.getLayers().getLength() === 0) {
      this.ovmap_.setLayerGroup(map.getLayerGroup());
    }

    const view = map.getView();
    if (view) {
      this.bindView_(view);
      if (view.isDef()) {
        this.ovmap_.updateSize();
        this.resetExtent_();
      }
    }
  }
};


/**
 * Handle map property changes.  This only deals with changes to the map's view.
 * @param {module:ol/Object~ObjectEvent} event The propertychange event.
 * @private
 */
OverviewMap.prototype.handleMapPropertyChange_ = function(event) {
  if (event.key === MapProperty["a" /* default */].VIEW) {
    const oldView = /** @type {module:ol/View} */ (event.oldValue);
    if (oldView) {
      this.unbindView_(oldView);
    }
    const newView = this.getMap().getView();
    this.bindView_(newView);
  }
};


/**
 * Register listeners for view property changes.
 * @param {module:ol/View} view The view.
 * @private
 */
OverviewMap.prototype.bindView_ = function(view) {
  Object(events["a" /* listen */])(view,
    Object(ol_Object["b" /* getChangeEventType */])(ViewProperty["a" /* default */].ROTATION),
    this.handleRotationChanged_, this);
};


/**
 * Unregister listeners for view property changes.
 * @param {module:ol/View} view The view.
 * @private
 */
OverviewMap.prototype.unbindView_ = function(view) {
  Object(events["c" /* unlisten */])(view,
    Object(ol_Object["b" /* getChangeEventType */])(ViewProperty["a" /* default */].ROTATION),
    this.handleRotationChanged_, this);
};


/**
 * Handle rotation changes to the main map.
 * TODO: This should rotate the extent rectrangle instead of the
 * overview map's view.
 * @private
 */
OverviewMap.prototype.handleRotationChanged_ = function() {
  this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());
};


/**
 * Update the overview map element.
 * @param {module:ol/MapEvent} mapEvent Map event.
 * @this {module:ol/control/OverviewMap}
 * @api
 */
function render(mapEvent) {
  this.validateExtent_();
  this.updateBox_();
}


/**
 * Reset the overview map extent if the box size (width or
 * height) is less than the size of the overview map size times minRatio
 * or is greater than the size of the overview size times maxRatio.
 *
 * If the map extent was not reset, the box size can fits in the defined
 * ratio sizes. This method then checks if is contained inside the overview
 * map current extent. If not, recenter the overview map to the current
 * main map center location.
 * @private
 */
OverviewMap.prototype.validateExtent_ = function() {
  const map = this.getMap();
  const ovmap = this.ovmap_;

  if (!map.isRendered() || !ovmap.isRendered()) {
    return;
  }

  const mapSize = /** @type {module:ol/size~Size} */ (map.getSize());

  const view = map.getView();
  const extent = view.calculateExtent(mapSize);

  const ovmapSize = /** @type {module:ol/size~Size} */ (ovmap.getSize());

  const ovview = ovmap.getView();
  const ovextent = ovview.calculateExtent(ovmapSize);

  const topLeftPixel =
      ovmap.getPixelFromCoordinate(Object(ol_extent["C" /* getTopLeft */])(extent));
  const bottomRightPixel =
      ovmap.getPixelFromCoordinate(Object(ol_extent["w" /* getBottomRight */])(extent));

  const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);
  const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);

  const ovmapWidth = ovmapSize[0];
  const ovmapHeight = ovmapSize[1];

  if (boxWidth < ovmapWidth * MIN_RATIO ||
      boxHeight < ovmapHeight * MIN_RATIO ||
      boxWidth > ovmapWidth * MAX_RATIO ||
      boxHeight > ovmapHeight * MAX_RATIO) {
    this.resetExtent_();
  } else if (!Object(ol_extent["g" /* containsExtent */])(ovextent, extent)) {
    this.recenter_();
  }
};


/**
 * Reset the overview map extent to half calculated min and max ratio times
 * the extent of the main map.
 * @private
 */
OverviewMap.prototype.resetExtent_ = function() {
  if (MAX_RATIO === 0 || MIN_RATIO === 0) {
    return;
  }

  const map = this.getMap();
  const ovmap = this.ovmap_;

  const mapSize = /** @type {module:ol/size~Size} */ (map.getSize());

  const view = map.getView();
  const extent = view.calculateExtent(mapSize);

  const ovview = ovmap.getView();

  // get how many times the current map overview could hold different
  // box sizes using the min and max ratio, pick the step in the middle used
  // to calculate the extent from the main map to set it to the overview map,
  const steps = Math.log(
    MAX_RATIO / MIN_RATIO) / Math.LN2;
  const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);
  Object(ol_extent["J" /* scaleFromCenter */])(extent, ratio);
  ovview.fit(extent);
};


/**
 * Set the center of the overview map to the map center without changing its
 * resolution.
 * @private
 */
OverviewMap.prototype.recenter_ = function() {
  const map = this.getMap();
  const ovmap = this.ovmap_;

  const view = map.getView();

  const ovview = ovmap.getView();

  ovview.setCenter(view.getCenter());
};


/**
 * Update the box using the main map extent
 * @private
 */
OverviewMap.prototype.updateBox_ = function() {
  const map = this.getMap();
  const ovmap = this.ovmap_;

  if (!map.isRendered() || !ovmap.isRendered()) {
    return;
  }

  const mapSize = /** @type {module:ol/size~Size} */ (map.getSize());

  const view = map.getView();

  const ovview = ovmap.getView();

  const rotation = view.getRotation();

  const overlay = this.boxOverlay_;
  const box = this.boxOverlay_.getElement();
  const extent = view.calculateExtent(mapSize);
  const ovresolution = ovview.getResolution();
  const bottomLeft = Object(ol_extent["v" /* getBottomLeft */])(extent);
  const topRight = Object(ol_extent["D" /* getTopRight */])(extent);

  // set position using bottom left coordinates
  const rotateBottomLeft = this.calculateCoordinateRotate_(rotation, bottomLeft);
  overlay.setPosition(rotateBottomLeft);

  // set box size calculated from map extent size and overview map resolution
  if (box) {
    box.style.width = Math.abs((bottomLeft[0] - topRight[0]) / ovresolution) + 'px';
    box.style.height = Math.abs((topRight[1] - bottomLeft[1]) / ovresolution) + 'px';
  }
};


/**
 * @param {number} rotation Target rotation.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @return {module:ol/coordinate~Coordinate|undefined} Coordinate for rotation and center anchor.
 * @private
 */
OverviewMap.prototype.calculateCoordinateRotate_ = function(
  rotation, coordinate) {
  let coordinateRotate;

  const map = this.getMap();
  const view = map.getView();

  const currentCenter = view.getCenter();

  if (currentCenter) {
    coordinateRotate = [
      coordinate[0] - currentCenter[0],
      coordinate[1] - currentCenter[1]
    ];
    Object(ol_coordinate["h" /* rotate */])(coordinateRotate, rotation);
    Object(ol_coordinate["a" /* add */])(coordinateRotate, currentCenter);
  }
  return coordinateRotate;
};


/**
 * @param {MouseEvent} event The event to handle
 * @private
 */
OverviewMap.prototype.handleClick_ = function(event) {
  event.preventDefault();
  this.handleToggle_();
};


/**
 * @private
 */
OverviewMap.prototype.handleToggle_ = function() {
  this.element.classList.toggle(css["a" /* CLASS_COLLAPSED */]);
  if (this.collapsed_) {
    Object(dom["f" /* replaceNode */])(this.collapseLabel_, this.label_);
  } else {
    Object(dom["f" /* replaceNode */])(this.label_, this.collapseLabel_);
  }
  this.collapsed_ = !this.collapsed_;

  // manage overview map if it had not been rendered before and control
  // is expanded
  const ovmap = this.ovmap_;
  if (!this.collapsed_ && !ovmap.isRendered()) {
    ovmap.updateSize();
    this.resetExtent_();
    Object(events["b" /* listenOnce */])(ovmap, MapEventType["a" /* default */].POSTRENDER,
      function(event) {
        this.updateBox_();
      },
      this);
  }
};


/**
 * Return `true` if the overview map is collapsible, `false` otherwise.
 * @return {boolean} True if the widget is collapsible.
 * @api
 */
OverviewMap.prototype.getCollapsible = function() {
  return this.collapsible_;
};


/**
 * Set whether the overview map should be collapsible.
 * @param {boolean} collapsible True if the widget is collapsible.
 * @api
 */
OverviewMap.prototype.setCollapsible = function(collapsible) {
  if (this.collapsible_ === collapsible) {
    return;
  }
  this.collapsible_ = collapsible;
  this.element.classList.toggle('ol-uncollapsible');
  if (!collapsible && this.collapsed_) {
    this.handleToggle_();
  }
};


/**
 * Collapse or expand the overview map according to the passed parameter. Will
 * not do anything if the overview map isn't collapsible or if the current
 * collapsed state is already the one requested.
 * @param {boolean} collapsed True if the widget is collapsed.
 * @api
 */
OverviewMap.prototype.setCollapsed = function(collapsed) {
  if (!this.collapsible_ || this.collapsed_ === collapsed) {
    return;
  }
  this.handleToggle_();
};


/**
 * Determine if the overview map is collapsed.
 * @return {boolean} The overview map is collapsed.
 * @api
 */
OverviewMap.prototype.getCollapsed = function() {
  return this.collapsed_;
};


/**
 * Return the overview map.
 * @return {module:ol/PluggableMap} Overview map.
 * @api
 */
OverviewMap.prototype.getOverviewMap = function() {
  return this.ovmap_;
};
/* harmony default export */ var control_OverviewMap = (OverviewMap);

// EXTERNAL MODULE: ../src/ol/control/Rotate.js
var Rotate = __webpack_require__(218);

// EXTERNAL MODULE: ../src/ol/asserts.js
var asserts = __webpack_require__(27);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// EXTERNAL MODULE: ../src/ol/proj/Units.js
var Units = __webpack_require__(59);

// CONCATENATED MODULE: ../src/ol/control/ScaleLine.js
/**
 * @module ol/control/ScaleLine
 */










/**
 * @type {string}
 */
const UNITS_PROP = 'units';

/**
 * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,
 * `'nautical'`, `'metric'`, `'us'`.
 * @enum {string}
 */
const ScaleLine_Units = {
  DEGREES: 'degrees',
  IMPERIAL: 'imperial',
  NAUTICAL: 'nautical',
  METRIC: 'metric',
  US: 'us'
};


/**
 * @const
 * @type {Array.<number>}
 */
const LEADING_DIGITS = [1, 2, 5];


/**
 * @typedef {Object} Options
 * @property {string} [className='ol-scale-line'] CSS Class name.
 * @property {number} [minWidth=64] Minimum width in pixels.
 * @property {function(module:ol/MapEvent)} [render] Function called when the control
 * should be re-rendered. This is called in a `requestAnimationFrame` callback.
 * @property {Element|string} [target] Specify a target if you want the control
 * to be rendered outside of the map's viewport.
 * @property {module:ol/control/ScaleLine~Units|string} [units='metric'] Units.
 */


/**
 * @classdesc
 * A control displaying rough y-axis distances, calculated for the center of the
 * viewport. For conformal projections (e.g. EPSG:3857, the default view
 * projection in OpenLayers), the scale is valid for all directions.
 * No scale line will be shown when the y-axis distance of a pixel at the
 * viewport center cannot be calculated in the view projection.
 * By default the scale line will show in the bottom left portion of the map,
 * but this can be changed by using the css selector `.ol-scale-line`.
 *
 * @constructor
 * @extends {module:ol/control/Control}
 * @param {module:ol/control/ScaleLine~Options=} opt_options Scale line options.
 * @api
 */
const ScaleLine = function(opt_options) {

  const options = opt_options ? opt_options : {};

  const className = options.className !== undefined ? options.className : 'ol-scale-line';

  /**
   * @private
   * @type {HTMLElement}
   */
  this.innerElement_ = document.createElement('DIV');
  this.innerElement_.className = className + '-inner';

  /**
   * @private
   * @type {HTMLElement}
   */
  this.element_ = document.createElement('DIV');
  this.element_.className = className + ' ' + css["e" /* CLASS_UNSELECTABLE */];
  this.element_.appendChild(this.innerElement_);

  /**
   * @private
   * @type {?module:ol/View~State}
   */
  this.viewState_ = null;

  /**
   * @private
   * @type {number}
   */
  this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;

  /**
   * @private
   * @type {boolean}
   */
  this.renderedVisible_ = false;

  /**
   * @private
   * @type {number|undefined}
   */
  this.renderedWidth_ = undefined;

  /**
   * @private
   * @type {string}
   */
  this.renderedHTML_ = '';

  Control["a" /* default */].call(this, {
    element: this.element_,
    render: options.render || ScaleLine_render,
    target: options.target
  });

  Object(events["a" /* listen */])(
    this, Object(ol_Object["b" /* getChangeEventType */])(UNITS_PROP),
    this.handleUnitsChanged_, this);

  this.setUnits(/** @type {module:ol/control/ScaleLine~Units} */ (options.units) ||
      ScaleLine_Units.METRIC);

};

Object(util["c" /* inherits */])(ScaleLine, Control["a" /* default */]);


/**
 * Return the units to use in the scale line.
 * @return {module:ol/control/ScaleLine~Units|undefined} The units
 * to use in the scale line.
 * @observable
 * @api
 */
ScaleLine.prototype.getUnits = function() {
  return (
    /** @type {module:ol/control/ScaleLine~Units|undefined} */ (this.get(UNITS_PROP))
  );
};


/**
 * Update the scale line element.
 * @param {module:ol/MapEvent} mapEvent Map event.
 * @this {module:ol/control/ScaleLine}
 * @api
 */
function ScaleLine_render(mapEvent) {
  const frameState = mapEvent.frameState;
  if (!frameState) {
    this.viewState_ = null;
  } else {
    this.viewState_ = frameState.viewState;
  }
  this.updateElement_();
}


/**
 * @private
 */
ScaleLine.prototype.handleUnitsChanged_ = function() {
  this.updateElement_();
};


/**
 * Set the units to use in the scale line.
 * @param {module:ol/control/ScaleLine~Units} units The units to use in the scale line.
 * @observable
 * @api
 */
ScaleLine.prototype.setUnits = function(units) {
  this.set(UNITS_PROP, units);
};


/**
 * @private
 */
ScaleLine.prototype.updateElement_ = function() {
  const viewState = this.viewState_;

  if (!viewState) {
    if (this.renderedVisible_) {
      this.element_.style.display = 'none';
      this.renderedVisible_ = false;
    }
    return;
  }

  const center = viewState.center;
  const projection = viewState.projection;
  const units = this.getUnits();
  const pointResolutionUnits = units == ScaleLine_Units.DEGREES ?
    Units["b" /* default */].DEGREES :
    Units["b" /* default */].METERS;
  let pointResolution =
      Object(proj["i" /* getPointResolution */])(projection, viewState.resolution, center, pointResolutionUnits);
  if (projection.getUnits() != Units["b" /* default */].DEGREES && projection.getMetersPerUnit()
    && pointResolutionUnits == Units["b" /* default */].METERS) {
    pointResolution *= projection.getMetersPerUnit();
  }

  let nominalCount = this.minWidth_ * pointResolution;
  let suffix = '';
  if (units == ScaleLine_Units.DEGREES) {
    const metersPerDegree = proj["a" /* METERS_PER_UNIT */][Units["b" /* default */].DEGREES];
    if (projection.getUnits() == Units["b" /* default */].DEGREES) {
      nominalCount *= metersPerDegree;
    } else {
      pointResolution /= metersPerDegree;
    }
    if (nominalCount < metersPerDegree / 60) {
      suffix = '\u2033'; // seconds
      pointResolution *= 3600;
    } else if (nominalCount < metersPerDegree) {
      suffix = '\u2032'; // minutes
      pointResolution *= 60;
    } else {
      suffix = '\u00b0'; // degrees
    }
  } else if (units == ScaleLine_Units.IMPERIAL) {
    if (nominalCount < 0.9144) {
      suffix = 'in';
      pointResolution /= 0.0254;
    } else if (nominalCount < 1609.344) {
      suffix = 'ft';
      pointResolution /= 0.3048;
    } else {
      suffix = 'mi';
      pointResolution /= 1609.344;
    }
  } else if (units == ScaleLine_Units.NAUTICAL) {
    pointResolution /= 1852;
    suffix = 'nm';
  } else if (units == ScaleLine_Units.METRIC) {
    if (nominalCount < 0.001) {
      suffix = 'μm';
      pointResolution *= 1000000;
    } else if (nominalCount < 1) {
      suffix = 'mm';
      pointResolution *= 1000;
    } else if (nominalCount < 1000) {
      suffix = 'm';
    } else {
      suffix = 'km';
      pointResolution /= 1000;
    }
  } else if (units == ScaleLine_Units.US) {
    if (nominalCount < 0.9144) {
      suffix = 'in';
      pointResolution *= 39.37;
    } else if (nominalCount < 1609.344) {
      suffix = 'ft';
      pointResolution /= 0.30480061;
    } else {
      suffix = 'mi';
      pointResolution /= 1609.3472;
    }
  } else {
    Object(asserts["a" /* assert */])(false, 33); // Invalid units
  }

  let i = 3 * Math.floor(
    Math.log(this.minWidth_ * pointResolution) / Math.log(10));
  let count, width;
  while (true) {
    count = LEADING_DIGITS[((i % 3) + 3) % 3] *
        Math.pow(10, Math.floor(i / 3));
    width = Math.round(count / pointResolution);
    if (isNaN(width)) {
      this.element_.style.display = 'none';
      this.renderedVisible_ = false;
      return;
    } else if (width >= this.minWidth_) {
      break;
    }
    ++i;
  }

  const html = count + ' ' + suffix;
  if (this.renderedHTML_ != html) {
    this.innerElement_.innerHTML = html;
    this.renderedHTML_ = html;
  }

  if (this.renderedWidth_ != width) {
    this.innerElement_.style.width = width + 'px';
    this.renderedWidth_ = width;
  }

  if (!this.renderedVisible_) {
    this.element_.style.display = '';
    this.renderedVisible_ = true;
  }

};

/* harmony default export */ var control_ScaleLine = (ScaleLine);

// EXTERNAL MODULE: ../src/ol/control/Zoom.js
var Zoom = __webpack_require__(217);

// EXTERNAL MODULE: ../src/ol/ViewHint.js
var ViewHint = __webpack_require__(43);

// EXTERNAL MODULE: ../src/ol/easing.js
var easing = __webpack_require__(56);

// EXTERNAL MODULE: ../src/ol/events/Event.js
var Event = __webpack_require__(36);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// EXTERNAL MODULE: ../src/ol/pointer/EventType.js
var pointer_EventType = __webpack_require__(102);

// EXTERNAL MODULE: ../src/ol/pointer/PointerEventHandler.js + 4 modules
var PointerEventHandler = __webpack_require__(200);

// CONCATENATED MODULE: ../src/ol/control/ZoomSlider.js
/**
 * @module ol/control/ZoomSlider
 */













/**
 * The enum for available directions.
 *
 * @enum {number}
 */
const Direction = {
  VERTICAL: 0,
  HORIZONTAL: 1
};


/**
 * @typedef {Object} Options
 * @property {string} [className='ol-zoomslider'] CSS class name.
 * @property {number} [duration=200] Animation duration in milliseconds.
 * @property {function(module:ol/MapEvent)} [render] Function called when the control
 * should be re-rendered. This is called in a `requestAnimationFrame` callback.
 */


/**
 * @classdesc
 * A slider type of control for zooming.
 *
 * Example:
 *
 *     map.addControl(new ZoomSlider());
 *
 * @constructor
 * @extends {module:ol/control/Control}
 * @param {module:ol/control/ZoomSlider~Options=} opt_options Zoom slider options.
 * @api
 */
const ZoomSlider = function(opt_options) {

  const options = opt_options ? opt_options : {};

  /**
   * Will hold the current resolution of the view.
   *
   * @type {number|undefined}
   * @private
   */
  this.currentResolution_ = undefined;

  /**
   * The direction of the slider. Will be determined from actual display of the
   * container and defaults to Direction.VERTICAL.
   *
   * @type {Direction}
   * @private
   */
  this.direction_ = Direction.VERTICAL;

  /**
   * @type {boolean}
   * @private
   */
  this.dragging_;

  /**
   * @type {number}
   * @private
   */
  this.heightLimit_ = 0;

  /**
   * @type {number}
   * @private
   */
  this.widthLimit_ = 0;

  /**
   * @type {number|undefined}
   * @private
   */
  this.previousX_;

  /**
   * @type {number|undefined}
   * @private
   */
  this.previousY_;

  /**
   * The calculated thumb size (border box plus margins).  Set when initSlider_
   * is called.
   * @type {module:ol/size~Size}
   * @private
   */
  this.thumbSize_ = null;

  /**
   * Whether the slider is initialized.
   * @type {boolean}
   * @private
   */
  this.sliderInitialized_ = false;

  /**
   * @type {number}
   * @private
   */
  this.duration_ = options.duration !== undefined ? options.duration : 200;

  const className = options.className !== undefined ? options.className : 'ol-zoomslider';
  const thumbElement = document.createElement('button');
  thumbElement.setAttribute('type', 'button');
  thumbElement.className = className + '-thumb ' + css["e" /* CLASS_UNSELECTABLE */];
  const containerElement = document.createElement('div');
  containerElement.className = className + ' ' + css["e" /* CLASS_UNSELECTABLE */] + ' ' + css["b" /* CLASS_CONTROL */];
  containerElement.appendChild(thumbElement);
  /**
   * @type {module:ol/pointer/PointerEventHandler}
   * @private
   */
  this.dragger_ = new PointerEventHandler["a" /* default */](containerElement);

  Object(events["a" /* listen */])(this.dragger_, pointer_EventType["a" /* default */].POINTERDOWN,
    this.handleDraggerStart_, this);
  Object(events["a" /* listen */])(this.dragger_, pointer_EventType["a" /* default */].POINTERMOVE,
    this.handleDraggerDrag_, this);
  Object(events["a" /* listen */])(this.dragger_, pointer_EventType["a" /* default */].POINTERUP,
    this.handleDraggerEnd_, this);

  Object(events["a" /* listen */])(containerElement, EventType["a" /* default */].CLICK, this.handleContainerClick_, this);
  Object(events["a" /* listen */])(thumbElement, EventType["a" /* default */].CLICK, Event["b" /* stopPropagation */]);

  Control["a" /* default */].call(this, {
    element: containerElement,
    render: options.render || ZoomSlider_render
  });
};

Object(util["c" /* inherits */])(ZoomSlider, Control["a" /* default */]);


/**
 * @inheritDoc
 */
ZoomSlider.prototype.disposeInternal = function() {
  this.dragger_.dispose();
  Control["a" /* default */].prototype.disposeInternal.call(this);
};


/**
 * @inheritDoc
 */
ZoomSlider.prototype.setMap = function(map) {
  Control["a" /* default */].prototype.setMap.call(this, map);
  if (map) {
    map.render();
  }
};


/**
 * Initializes the slider element. This will determine and set this controls
 * direction_ and also constrain the dragging of the thumb to always be within
 * the bounds of the container.
 *
 * @private
 */
ZoomSlider.prototype.initSlider_ = function() {
  const container = this.element;
  const containerSize = {
    width: container.offsetWidth, height: container.offsetHeight
  };

  const thumb = container.firstElementChild;
  const computedStyle = getComputedStyle(thumb);
  const thumbWidth = thumb.offsetWidth +
      parseFloat(computedStyle['marginRight']) +
      parseFloat(computedStyle['marginLeft']);
  const thumbHeight = thumb.offsetHeight +
      parseFloat(computedStyle['marginTop']) +
      parseFloat(computedStyle['marginBottom']);
  this.thumbSize_ = [thumbWidth, thumbHeight];

  if (containerSize.width > containerSize.height) {
    this.direction_ = Direction.HORIZONTAL;
    this.widthLimit_ = containerSize.width - thumbWidth;
  } else {
    this.direction_ = Direction.VERTICAL;
    this.heightLimit_ = containerSize.height - thumbHeight;
  }
  this.sliderInitialized_ = true;
};


/**
 * Update the zoomslider element.
 * @param {module:ol/MapEvent} mapEvent Map event.
 * @this {module:ol/control/ZoomSlider}
 * @api
 */
function ZoomSlider_render(mapEvent) {
  if (!mapEvent.frameState) {
    return;
  }
  if (!this.sliderInitialized_) {
    this.initSlider_();
  }
  const res = mapEvent.frameState.viewState.resolution;
  if (res !== this.currentResolution_) {
    this.currentResolution_ = res;
    this.setThumbPosition_(res);
  }
}


/**
 * @param {MouseEvent} event The browser event to handle.
 * @private
 */
ZoomSlider.prototype.handleContainerClick_ = function(event) {
  const view = this.getMap().getView();

  const relativePosition = this.getRelativePosition_(
    event.offsetX - this.thumbSize_[0] / 2,
    event.offsetY - this.thumbSize_[1] / 2);

  const resolution = this.getResolutionForPosition_(relativePosition);

  view.animate({
    resolution: view.constrainResolution(resolution),
    duration: this.duration_,
    easing: easing["b" /* easeOut */]
  });
};


/**
 * Handle dragger start events.
 * @param {module:ol/pointer/PointerEvent} event The drag event.
 * @private
 */
ZoomSlider.prototype.handleDraggerStart_ = function(event) {
  if (!this.dragging_ && event.originalEvent.target === this.element.firstElementChild) {
    this.getMap().getView().setHint(ViewHint["a" /* default */].INTERACTING, 1);
    this.previousX_ = event.clientX;
    this.previousY_ = event.clientY;
    this.dragging_ = true;
  }
};


/**
 * Handle dragger drag events.
 *
 * @param {module:ol/pointer/PointerEvent|Event} event The drag event.
 * @private
 */
ZoomSlider.prototype.handleDraggerDrag_ = function(event) {
  if (this.dragging_) {
    const element = this.element.firstElementChild;
    const deltaX = event.clientX - this.previousX_ + parseInt(element.style.left, 10);
    const deltaY = event.clientY - this.previousY_ + parseInt(element.style.top, 10);
    const relativePosition = this.getRelativePosition_(deltaX, deltaY);
    this.currentResolution_ = this.getResolutionForPosition_(relativePosition);
    this.getMap().getView().setResolution(this.currentResolution_);
    this.setThumbPosition_(this.currentResolution_);
    this.previousX_ = event.clientX;
    this.previousY_ = event.clientY;
  }
};


/**
 * Handle dragger end events.
 * @param {module:ol/pointer/PointerEvent|Event} event The drag event.
 * @private
 */
ZoomSlider.prototype.handleDraggerEnd_ = function(event) {
  if (this.dragging_) {
    const view = this.getMap().getView();
    view.setHint(ViewHint["a" /* default */].INTERACTING, -1);

    view.animate({
      resolution: view.constrainResolution(this.currentResolution_),
      duration: this.duration_,
      easing: easing["b" /* easeOut */]
    });

    this.dragging_ = false;
    this.previousX_ = undefined;
    this.previousY_ = undefined;
  }
};


/**
 * Positions the thumb inside its container according to the given resolution.
 *
 * @param {number} res The res.
 * @private
 */
ZoomSlider.prototype.setThumbPosition_ = function(res) {
  const position = this.getPositionForResolution_(res);
  const thumb = this.element.firstElementChild;

  if (this.direction_ == Direction.HORIZONTAL) {
    thumb.style.left = this.widthLimit_ * position + 'px';
  } else {
    thumb.style.top = this.heightLimit_ * position + 'px';
  }
};


/**
 * Calculates the relative position of the thumb given x and y offsets.  The
 * relative position scales from 0 to 1.  The x and y offsets are assumed to be
 * in pixel units within the dragger limits.
 *
 * @param {number} x Pixel position relative to the left of the slider.
 * @param {number} y Pixel position relative to the top of the slider.
 * @return {number} The relative position of the thumb.
 * @private
 */
ZoomSlider.prototype.getRelativePosition_ = function(x, y) {
  let amount;
  if (this.direction_ === Direction.HORIZONTAL) {
    amount = x / this.widthLimit_;
  } else {
    amount = y / this.heightLimit_;
  }
  return Object(math["a" /* clamp */])(amount, 0, 1);
};


/**
 * Calculates the corresponding resolution of the thumb given its relative
 * position (where 0 is the minimum and 1 is the maximum).
 *
 * @param {number} position The relative position of the thumb.
 * @return {number} The corresponding resolution.
 * @private
 */
ZoomSlider.prototype.getResolutionForPosition_ = function(position) {
  const fn = this.getMap().getView().getResolutionForValueFunction();
  return fn(1 - position);
};


/**
 * Determines the relative position of the slider for the given resolution.  A
 * relative position of 0 corresponds to the minimum view resolution.  A
 * relative position of 1 corresponds to the maximum view resolution.
 *
 * @param {number} res The resolution.
 * @return {number} The relative position value (between 0 and 1).
 * @private
 */
ZoomSlider.prototype.getPositionForResolution_ = function(res) {
  const fn = this.getMap().getView().getValueForResolutionFunction();
  return 1 - fn(res);
};

/* harmony default export */ var control_ZoomSlider = (ZoomSlider);

// CONCATENATED MODULE: ../src/ol/control/ZoomToExtent.js
/**
 * @module ol/control/ZoomToExtent
 */







/**
 * @typedef {Object} Options
 * @property {string} [className='ol-zoom-extent'] Class name.
 * @property {Element|string} [target] Specify a target if you want the control
 * to be rendered outside of the map's viewport.
 * @property {string|Element} [label='E'] Text label to use for the button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.
 * @property {module:ol/extent~Extent} [extent] The extent to zoom to. If undefined the validity
 * extent of the view projection is used.
 */


/**
 * @classdesc
 * A button control which, when pressed, changes the map view to a specific
 * extent. To style this control use the css selector `.ol-zoom-extent`.
 *
 * @constructor
 * @extends {module:ol/control/Control}
 * @param {module:ol/control/ZoomToExtent~Options=} opt_options Options.
 * @api
 */
const ZoomToExtent = function(opt_options) {
  const options = opt_options ? opt_options : {};

  /**
   * @type {module:ol/extent~Extent}
   * @protected
   */
  this.extent = options.extent ? options.extent : null;

  const className = options.className !== undefined ? options.className : 'ol-zoom-extent';

  const label = options.label !== undefined ? options.label : 'E';
  const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';
  const button = document.createElement('button');
  button.setAttribute('type', 'button');
  button.title = tipLabel;
  button.appendChild(
    typeof label === 'string' ? document.createTextNode(label) : label
  );

  Object(events["a" /* listen */])(button, EventType["a" /* default */].CLICK, this.handleClick_, this);

  const cssClasses = className + ' ' + css["e" /* CLASS_UNSELECTABLE */] + ' ' + css["b" /* CLASS_CONTROL */];
  const element = document.createElement('div');
  element.className = cssClasses;
  element.appendChild(button);

  Control["a" /* default */].call(this, {
    element: element,
    target: options.target
  });
};

Object(util["c" /* inherits */])(ZoomToExtent, Control["a" /* default */]);


/**
 * @param {MouseEvent} event The event to handle
 * @private
 */
ZoomToExtent.prototype.handleClick_ = function(event) {
  event.preventDefault();
  this.handleZoomToExtent();
};


/**
 * @protected
 */
ZoomToExtent.prototype.handleZoomToExtent = function() {
  const map = this.getMap();
  const view = map.getView();
  const extent = !this.extent ? view.getProjection().getExtent() : this.extent;
  view.fit(extent);
};
/* harmony default export */ var control_ZoomToExtent = (ZoomToExtent);

// EXTERNAL MODULE: ../src/ol/control/util.js
var control_util = __webpack_require__(220);

// CONCATENATED MODULE: ../src/ol/control.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "a", function() { return Attribution["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "b", function() { return Control["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "c", function() { return control_FullScreen; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "d", function() { return control_OverviewMap; });
/* unused concated harmony import Rotate */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Rotate["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "e", function() { return control_ScaleLine; });
/* unused concated harmony import Zoom */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Zoom["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "f", function() { return control_ZoomSlider; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "g", function() { return control_ZoomToExtent; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "h", function() { return control_util["a" /* defaults */]; });
/**
 * @module ol/control
 */













/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return defaultFont; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return defaultFillStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return defaultLineCap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return defaultLineDash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return defaultLineDashOffset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return defaultLineJoin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return defaultMiterLimit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return defaultStrokeStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return defaultTextAlign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return defaultTextBaseline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return defaultPadding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return defaultLineWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return labelCache; });
/* unused harmony export checkedFonts */
/* unused harmony export textHeights */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return checkFont; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return measureTextHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return measureTextWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return rotateAtOffset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return resetTransform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return drawImage; });
/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15);
/* harmony import */ var _structs_LRUCache_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(175);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(18);
/**
 * @module ol/render/canvas
 */







/**
 * @typedef {Object} FillState
 * @property {module:ol/colorlike~ColorLike} fillStyle
 */


/**
 * @typedef {Object} FillStrokeState
 * @property {module:ol/colorlike~ColorLike} [currentFillStyle]
 * @property {module:ol/colorlike~ColorLike} [currentStrokeStyle]
 * @property {string} [currentLineCap]
 * @property {Array.<number>} currentLineDash
 * @property {number} [currentLineDashOffset]
 * @property {string} [currentLineJoin]
 * @property {number} [currentLineWidth]
 * @property {number} [currentMiterLimit]
 * @property {number} [lastStroke]
 * @property {module:ol/colorlike~ColorLike} [fillStyle]
 * @property {module:ol/colorlike~ColorLike} [strokeStyle]
 * @property {string} [lineCap]
 * @property {Array.<number>} lineDash
 * @property {number} [lineDashOffset]
 * @property {string} [lineJoin]
 * @property {number} [lineWidth]
 * @property {number} [miterLimit]
 */


/**
 * @typedef {Object} StrokeState
 * @property {string} lineCap
 * @property {Array.<number>} lineDash
 * @property {number} lineDashOffset
 * @property {string} lineJoin
 * @property {number} lineWidth
 * @property {number} miterLimit
 * @property {module:ol/colorlike~ColorLike} strokeStyle
 */


/**
 * @typedef {Object} TextState
 * @property {string} font
 * @property {string} [textAlign]
 * @property {string} textBaseline
 */


/**
 * Container for decluttered replay instructions that need to be rendered or
 * omitted together, i.e. when styles render both an image and text, or for the
 * characters that form text along lines. The basic elements of this array are
 * `[minX, minY, maxX, maxY, count]`, where the first four entries are the
 * rendered extent of the group in pixel space. `count` is the number of styles
 * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.
 * In addition to these four elements, declutter instruction arrays (i.e. the
 * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.
 * @typedef {Array.<*>} DeclutterGroup
 */


/**
 * @const
 * @type {string}
 */
const defaultFont = '10px sans-serif';


/**
 * @const
 * @type {module:ol/color~Color}
 */
const defaultFillStyle = [0, 0, 0, 1];


/**
 * @const
 * @type {string}
 */
const defaultLineCap = 'round';


/**
 * @const
 * @type {Array.<number>}
 */
const defaultLineDash = [];


/**
 * @const
 * @type {number}
 */
const defaultLineDashOffset = 0;


/**
 * @const
 * @type {string}
 */
const defaultLineJoin = 'round';


/**
 * @const
 * @type {number}
 */
const defaultMiterLimit = 10;


/**
 * @const
 * @type {module:ol/color~Color}
 */
const defaultStrokeStyle = [0, 0, 0, 1];


/**
 * @const
 * @type {string}
 */
const defaultTextAlign = 'center';


/**
 * @const
 * @type {string}
 */
const defaultTextBaseline = 'middle';


/**
 * @const
 * @type {Array.<number>}
 */
const defaultPadding = [0, 0, 0, 0];


/**
 * @const
 * @type {number}
 */
const defaultLineWidth = 1;


/**
 * The label cache for text rendering. To change the default cache size of 2048
 * entries, use {@link module:ol/structs/LRUCache#setSize}.
 * @type {module:ol/structs/LRUCache.<HTMLCanvasElement>}
 * @api
 */
const labelCache = new _structs_LRUCache_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]();


/**
 * @type {!Object.<string, number>}
 */
const checkedFonts = {};


/**
 * @type {CanvasRenderingContext2D}
 */
let measureContext = null;


/**
 * @type {!Object.<string, number>}
 */
const textHeights = {};


/**
 * Clears the label cache when a font becomes available.
 * @param {string} fontSpec CSS font spec.
 */
const checkFont = (function() {
  const retries = 60;
  const checked = checkedFonts;
  const size = '32px ';
  const referenceFonts = ['monospace', 'serif'];
  const len = referenceFonts.length;
  const text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
  let interval, referenceWidth;

  function isAvailable(font) {
    const context = getMeasureContext();
    let available = true;
    for (let i = 0; i < len; ++i) {
      const referenceFont = referenceFonts[i];
      context.font = size + referenceFont;
      referenceWidth = context.measureText(text).width;
      if (font != referenceFont) {
        context.font = size + font + ',' + referenceFont;
        const width = context.measureText(text).width;
        // If width and referenceWidth are the same, then the fallback was used
        // instead of the font we wanted, so the font is not available.
        available = available && width != referenceWidth;
      }
    }
    return available;
  }

  function check() {
    let done = true;
    for (const font in checked) {
      if (checked[font] < retries) {
        if (isAvailable(font)) {
          checked[font] = retries;
          Object(_obj_js__WEBPACK_IMPORTED_MODULE_2__[/* clear */ "b"])(textHeights);
          // Make sure that loaded fonts are picked up by Safari
          measureContext = null;
          labelCache.clear();
        } else {
          ++checked[font];
          done = false;
        }
      }
    }
    if (done) {
      clearInterval(interval);
      interval = undefined;
    }
  }

  return function(fontSpec) {
    const fontFamilies = Object(_css_js__WEBPACK_IMPORTED_MODULE_0__[/* getFontFamilies */ "g"])(fontSpec);
    if (!fontFamilies) {
      return;
    }
    for (let i = 0, ii = fontFamilies.length; i < ii; ++i) {
      const fontFamily = fontFamilies[i];
      if (!(fontFamily in checked)) {
        checked[fontFamily] = retries;
        if (!isAvailable(fontFamily)) {
          checked[fontFamily] = 0;
          if (interval === undefined) {
            interval = setInterval(check, 32);
          }
        }
      }
    }
  };
})();


/**
 * @return {CanvasRenderingContext2D} Measure context.
 */
function getMeasureContext() {
  if (!measureContext) {
    measureContext = Object(_dom_js__WEBPACK_IMPORTED_MODULE_1__[/* createCanvasContext2D */ "a"])(1, 1);
  }
  return measureContext;
}


/**
 * @param {string} font Font to use for measuring.
 * @return {module:ol/size~Size} Measurement.
 */
const measureTextHeight = (function() {
  let span;
  const heights = textHeights;
  return function(font) {
    let height = heights[font];
    if (height == undefined) {
      if (!span) {
        span = document.createElement('span');
        span.textContent = 'M';
        span.style.margin = span.style.padding = '0 !important';
        span.style.position = 'absolute !important';
        span.style.left = '-99999px !important';
      }
      span.style.font = font;
      document.body.appendChild(span);
      height = heights[font] = span.offsetHeight;
      document.body.removeChild(span);
    }
    return height;
  };
})();


/**
 * @param {string} font Font.
 * @param {string} text Text.
 * @return {number} Width.
 */
function measureTextWidth(font, text) {
  const measureContext = getMeasureContext();
  if (font != measureContext.font) {
    measureContext.font = font;
  }
  return measureContext.measureText(text).width;
}


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {number} rotation Rotation.
 * @param {number} offsetX X offset.
 * @param {number} offsetY Y offset.
 */
function rotateAtOffset(context, rotation, offsetX, offsetY) {
  if (rotation !== 0) {
    context.translate(offsetX, offsetY);
    context.rotate(rotation);
    context.translate(-offsetX, -offsetY);
  }
}


const resetTransform = Object(_transform_js__WEBPACK_IMPORTED_MODULE_4__[/* create */ "c"])();


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/transform~Transform|null} transform Transform.
 * @param {number} opacity Opacity.
 * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
 * @param {number} originX Origin X.
 * @param {number} originY Origin Y.
 * @param {number} w Width.
 * @param {number} h Height.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {number} scale Scale.
 */
function drawImage(context,
  transform, opacity, image, originX, originY, w, h, x, y, scale) {
  let alpha;
  if (opacity != 1) {
    alpha = context.globalAlpha;
    context.globalAlpha = alpha * opacity;
  }
  if (transform) {
    context.setTransform.apply(context, transform);
  }

  context.drawImage(image, originX, originY, w, h, x, y, w * scale, h * scale);

  if (alpha) {
    context.globalAlpha = alpha;
  }
  if (transform) {
    context.setTransform.apply(context, resetTransform);
  }
}


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assert; });
/* harmony import */ var _AssertionError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/**
 * @module ol/asserts
 */


/**
 * @param {*} assertion Assertion we expected to be truthy.
 * @param {number} errorCode Error code.
 */
function assert(assertion, errorCode) {
  if (!assertion) {
    throw new _AssertionError_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](errorCode);
  }
}


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42);
/* harmony import */ var _format_JSONFeature_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(152);
/* harmony import */ var _geom_GeometryCollection_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(151);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(41);
/* harmony import */ var _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(71);
/* harmony import */ var _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(73);
/* harmony import */ var _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(82);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(30);
/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(39);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(15);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(7);
/**
 * @module ol/format/GeoJSON
 */
// TODO: serialize dataProjection as crs member when writing
// see https://github.com/openlayers/openlayers/issues/2078

















/**
 * @typedef {Object} Options
 * @property {module:ol/proj~ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
 * @property {module:ol/proj~ProjectionLike} [featureProjection] Projection for features read or
 * written by the format.  Options passed to read or write methods will take precedence.
 * @property {string} [geometryName] Geometry name to use when creating features.
 * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include
 * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader
 * will look for that field to set the geometry name. If both this field is set to `true`
 * and a `geometryName` is provided, the `geometryName` will take precedence.
 */


/**
 * @classdesc
 * Feature format for reading and writing data in the GeoJSON format.
 *
 * @constructor
 * @extends {module:ol/format/JSONFeature}
 * @param {module:ol/format/GeoJSON~Options=} opt_options Options.
 * @api
 */
const GeoJSON = function(opt_options) {

  const options = opt_options ? opt_options : {};

  _format_JSONFeature_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this);

  /**
   * @inheritDoc
   */
  this.dataProjection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_13__[/* get */ "h"])(
    options.dataProjection ?
      options.dataProjection : 'EPSG:4326');

  if (options.featureProjection) {
    this.defaultFeatureProjection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_13__[/* get */ "h"])(options.featureProjection);
  }

  /**
   * Name of the geometry attribute for features.
   * @type {string|undefined}
   * @private
   */
  this.geometryName_ = options.geometryName;

  /**
   * Look for the geometry name in the feature GeoJSON
   * @type {boolean|undefined}
   * @private
   */
  this.extractGeometryName_ = options.extractGeometryName;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(GeoJSON, _format_JSONFeature_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * @const
 * @type {Object.<string, function(GeoJSONObject): module:ol/geom/Geometry>}
 */
const GEOMETRY_READERS = {
  'Point': readPointGeometry,
  'LineString': readLineStringGeometry,
  'Polygon': readPolygonGeometry,
  'MultiPoint': readMultiPointGeometry,
  'MultiLineString': readMultiLineStringGeometry,
  'MultiPolygon': readMultiPolygonGeometry,
  'GeometryCollection': readGeometryCollectionGeometry
};


/**
 * @const
 * @type {Object.<string, function(module:ol/geom/Geometry, module:ol/format/Feature~WriteOptions=): (GeoJSONGeometry|GeoJSONGeometryCollection)>}
 */
const GEOMETRY_WRITERS = {
  'Point': writePointGeometry,
  'LineString': writeLineStringGeometry,
  'Polygon': writePolygonGeometry,
  'MultiPoint': writeMultiPointGeometry,
  'MultiLineString': writeMultiLineStringGeometry,
  'MultiPolygon': writeMultiPolygonGeometry,
  'GeometryCollection': writeGeometryCollectionGeometry,
  'Circle': writeEmptyGeometryCollectionGeometry
};


/**
 * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/geom/Geometry} Geometry.
 */
function readGeometry(object, opt_options) {
  if (!object) {
    return null;
  }
  const geometryReader = GEOMETRY_READERS[object.type];
  return (
    /** @type {module:ol/geom/Geometry} */ (Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_3__[/* transformWithOptions */ "b"])(geometryReader(object), false, opt_options))
  );
}


/**
 * @param {GeoJSONGeometryCollection} object Object.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/geom/GeometryCollection} Geometry collection.
 */
function readGeometryCollectionGeometry(object, opt_options) {
  const geometries = object.geometries.map(
    /**
     * @param {GeoJSONGeometry} geometry Geometry.
     * @return {module:ol/geom/Geometry} geometry Geometry.
     */
    function(geometry) {
      return readGeometry(geometry, opt_options);
    });
  return new _geom_GeometryCollection_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](geometries);
}


/**
 * @param {GeoJSONGeometry} object Object.
 * @return {module:ol/geom/Point} Point.
 */
function readPointGeometry(object) {
  return new _geom_Point_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"](object.coordinates);
}


/**
 * @param {GeoJSONGeometry} object Object.
 * @return {module:ol/geom/LineString} LineString.
 */
function readLineStringGeometry(object) {
  return new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](object.coordinates);
}


/**
 * @param {GeoJSONGeometry} object Object.
 * @return {module:ol/geom/MultiLineString} MultiLineString.
 */
function readMultiLineStringGeometry(object) {
  return new _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"](object.coordinates);
}


/**
 * @param {GeoJSONGeometry} object Object.
 * @return {module:ol/geom/MultiPoint} MultiPoint.
 */
function readMultiPointGeometry(object) {
  return new _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](object.coordinates);
}


/**
 * @param {GeoJSONGeometry} object Object.
 * @return {module:ol/geom/MultiPolygon} MultiPolygon.
 */
function readMultiPolygonGeometry(object) {
  return new _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"](object.coordinates);
}


/**
 * @param {GeoJSONGeometry} object Object.
 * @return {module:ol/geom/Polygon} Polygon.
 */
function readPolygonGeometry(object) {
  return new _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "b"](object.coordinates);
}


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONGeometry|GeoJSONGeometryCollection} GeoJSON geometry.
 */
function writeGeometry(geometry, opt_options) {
  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];
  return geometryWriter(/** @type {module:ol/geom/Geometry} */ (
    Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_3__[/* transformWithOptions */ "b"])(geometry, true, opt_options)), opt_options);
}


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @return {GeoJSONGeometryCollection} Empty GeoJSON geometry collection.
 */
function writeEmptyGeometryCollectionGeometry(geometry) {
  return /** @type {GeoJSONGeometryCollection} */ ({
    type: 'GeometryCollection',
    geometries: []
  });
}


/**
 * @param {module:ol/geom/GeometryCollection} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.
 */
function writeGeometryCollectionGeometry(geometry, opt_options) {
  const geometries = geometry.getGeometriesArray().map(function(geometry) {
    const options = Object(_obj_js__WEBPACK_IMPORTED_MODULE_12__[/* assign */ "a"])({}, opt_options);
    delete options.featureProjection;
    return writeGeometry(geometry, options);
  });
  return /** @type {GeoJSONGeometryCollection} */ ({
    type: 'GeometryCollection',
    geometries: geometries
  });
}


/**
 * @param {module:ol/geom/LineString} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */
function writeLineStringGeometry(geometry, opt_options) {
  return /** @type {GeoJSONGeometry} */ ({
    type: 'LineString',
    coordinates: geometry.getCoordinates()
  });
}


/**
 * @param {module:ol/geom/MultiLineString} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */
function writeMultiLineStringGeometry(geometry, opt_options) {
  return /** @type {GeoJSONGeometry} */ ({
    type: 'MultiLineString',
    coordinates: geometry.getCoordinates()
  });
}


/**
 * @param {module:ol/geom/MultiPoint} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */
function writeMultiPointGeometry(geometry, opt_options) {
  return /** @type {GeoJSONGeometry} */ ({
    type: 'MultiPoint',
    coordinates: geometry.getCoordinates()
  });
}


/**
 * @param {module:ol/geom/MultiPolygon} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */
function writeMultiPolygonGeometry(geometry, opt_options) {
  let right;
  if (opt_options) {
    right = opt_options.rightHanded;
  }
  return /** @type {GeoJSONGeometry} */ ({
    type: 'MultiPolygon',
    coordinates: geometry.getCoordinates(right)
  });
}


/**
 * @param {module:ol/geom/Point} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */
function writePointGeometry(geometry, opt_options) {
  return /** @type {GeoJSONGeometry} */ ({
    type: 'Point',
    coordinates: geometry.getCoordinates()
  });
}


/**
 * @param {module:ol/geom/Polygon} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */
function writePolygonGeometry(geometry, opt_options) {
  let right;
  if (opt_options) {
    right = opt_options.rightHanded;
  }
  return /** @type {GeoJSONGeometry} */ ({
    type: 'Polygon',
    coordinates: geometry.getCoordinates(right)
  });
}


/**
 * Read a feature from a GeoJSON Feature source.  Only works for Feature or
 * geometry types.  Use {@link module:ol/format/GeoJSON#readFeatures} to read
 * FeatureCollection source. If feature at source has an id, it will be used
 * as Feature id by calling {@link module:ol/Feature#setId} internally.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature} Feature.
 * @api
 */
GeoJSON.prototype.readFeature;


/**
 * Read all features from a GeoJSON source.  Works for all GeoJSON types.
 * If the source includes only geometries, features will be created with those
 * geometries.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
GeoJSON.prototype.readFeatures;


/**
 * @inheritDoc
 */
GeoJSON.prototype.readFeatureFromObject = function(object, opt_options) {
  /**
   * @type {GeoJSONFeature}
   */
  let geoJSONFeature = null;
  if (object.type === 'Feature') {
    geoJSONFeature = /** @type {GeoJSONFeature} */ (object);
  } else {
    geoJSONFeature = /** @type {GeoJSONFeature} */ ({
      type: 'Feature',
      geometry: /** @type {GeoJSONGeometry|GeoJSONGeometryCollection} */ (object)
    });
  }

  const geometry = readGeometry(geoJSONFeature.geometry, opt_options);
  const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]();
  if (this.geometryName_) {
    feature.setGeometryName(this.geometryName_);
  } else if (this.extractGeometryName_ && geoJSONFeature.geometry_name !== undefined) {
    feature.setGeometryName(geoJSONFeature.geometry_name);
  }
  feature.setGeometry(geometry);
  if (geoJSONFeature.id !== undefined) {
    feature.setId(geoJSONFeature.id);
  }
  if (geoJSONFeature.properties) {
    feature.setProperties(geoJSONFeature.properties);
  }
  return feature;
};


/**
 * @inheritDoc
 */
GeoJSON.prototype.readFeaturesFromObject = function(object, opt_options) {
  const geoJSONObject = /** @type {GeoJSONObject} */ (object);
  /** @type {Array.<module:ol/Feature>} */
  let features = null;
  if (geoJSONObject.type === 'FeatureCollection') {
    const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);
    features = [];
    const geoJSONFeatures = geoJSONFeatureCollection.features;
    for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {
      features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));
    }
  } else {
    features = [this.readFeatureFromObject(object, opt_options)];
  }
  return features;
};


/**
 * Read a geometry from a GeoJSON source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/geom/Geometry} Geometry.
 * @api
 */
GeoJSON.prototype.readGeometry;


/**
 * @inheritDoc
 */
GeoJSON.prototype.readGeometryFromObject = function(object, opt_options) {
  return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);
};


/**
 * Read the projection from a GeoJSON source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @return {module:ol/proj/Projection} Projection.
 * @api
 */
GeoJSON.prototype.readProjection;


/**
 * @inheritDoc
 */
GeoJSON.prototype.readProjectionFromObject = function(object) {
  const geoJSONObject = /** @type {GeoJSONObject} */ (object);
  const crs = geoJSONObject.crs;
  let projection;
  if (crs) {
    if (crs.type == 'name') {
      projection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_13__[/* get */ "h"])(crs.properties.name);
    } else {
      Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(false, 36); // Unknown SRS type
    }
  } else {
    projection = this.dataProjection;
  }
  return (
    /** @type {module:ol/proj/Projection} */ (projection)
  );
};


/**
 * Encode a feature as a GeoJSON Feature string.
 *
 * @function
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} GeoJSON.
 * @override
 * @api
 */
GeoJSON.prototype.writeFeature;


/**
 * Encode a feature as a GeoJSON Feature object.
 *
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONFeature} Object.
 * @override
 * @api
 */
GeoJSON.prototype.writeFeatureObject = function(feature, opt_options) {
  opt_options = this.adaptOptions(opt_options);

  const object = /** @type {GeoJSONFeature} */ ({
    'type': 'Feature'
  });
  const id = feature.getId();
  if (id !== undefined) {
    object.id = id;
  }
  const geometry = feature.getGeometry();
  if (geometry) {
    object.geometry = writeGeometry(geometry, opt_options);
  } else {
    object.geometry = null;
  }
  const properties = feature.getProperties();
  delete properties[feature.getGeometryName()];
  if (!Object(_obj_js__WEBPACK_IMPORTED_MODULE_12__[/* isEmpty */ "d"])(properties)) {
    object.properties = properties;
  } else {
    object.properties = null;
  }
  return object;
};


/**
 * Encode an array of features as GeoJSON.
 *
 * @function
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} GeoJSON.
 * @api
 */
GeoJSON.prototype.writeFeatures;


/**
 * Encode an array of features as a GeoJSON object.
 *
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONFeatureCollection} GeoJSON Object.
 * @override
 * @api
 */
GeoJSON.prototype.writeFeaturesObject = function(features, opt_options) {
  opt_options = this.adaptOptions(opt_options);
  const objects = [];
  for (let i = 0, ii = features.length; i < ii; ++i) {
    objects.push(this.writeFeatureObject(features[i], opt_options));
  }
  return /** @type {GeoJSONFeatureCollection} */ ({
    type: 'FeatureCollection',
    features: objects
  });
};


/**
 * Encode a geometry as a GeoJSON string.
 *
 * @function
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} GeoJSON.
 * @api
 */
GeoJSON.prototype.writeGeometry;


/**
 * Encode a geometry as a GeoJSON object.
 *
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.
 * @override
 * @api
 */
GeoJSON.prototype.writeGeometryObject = function(geometry, opt_options) {
  return writeGeometry(geometry, this.adaptOptions(opt_options));
};
/* harmony default export */ __webpack_exports__["a"] = (GeoJSON);


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TRUE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FALSE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return UNDEFINED; });
/**
 * @module ol/functions
 */

/**
 * Always returns true.
 * @returns {boolean} true.
 */
function TRUE() {
  return true;
}

/**
 * Always returns false.
 * @returns {boolean} false.
 */
function FALSE() {
  return false;
}

/**
 * A reusable function, used e.g. as a default for callbacks.
 *
 * @return {undefined} Nothing.
 */
function UNDEFINED() {}


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(55);
/* harmony import */ var _geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(90);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21);
/**
 * @module ol/geom/Point
 */








/**
 * @classdesc
 * Point geometry.
 *
 * @constructor
 * @extends {module:ol/geom/SimpleGeometry}
 * @param {module:ol/coordinate~Coordinate} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @api
 */
const Point = function(coordinates, opt_layout) {
  _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this);
  this.setCoordinates(coordinates, opt_layout);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Point, _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * Make a complete copy of the geometry.
 * @return {!module:ol/geom/Point} Clone.
 * @override
 * @api
 */
Point.prototype.clone = function() {
  const point = new Point(null);
  point.setFlatCoordinates(this.layout, this.flatCoordinates.slice());
  return point;
};


/**
 * @inheritDoc
 */
Point.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
  const flatCoordinates = this.flatCoordinates;
  const squaredDistance = Object(_math_js__WEBPACK_IMPORTED_MODULE_6__[/* squaredDistance */ "g"])(x, y, flatCoordinates[0], flatCoordinates[1]);
  if (squaredDistance < minSquaredDistance) {
    const stride = this.stride;
    for (let i = 0; i < stride; ++i) {
      closestPoint[i] = flatCoordinates[i];
    }
    closestPoint.length = stride;
    return squaredDistance;
  } else {
    return minSquaredDistance;
  }
};


/**
 * Return the coordinate of the point.
 * @return {module:ol/coordinate~Coordinate} Coordinates.
 * @override
 * @api
 */
Point.prototype.getCoordinates = function() {
  return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
};


/**
 * @inheritDoc
 */
Point.prototype.computeExtent = function(extent) {
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* createOrUpdateFromCoordinate */ "m"])(this.flatCoordinates, extent);
};


/**
 * @inheritDoc
 * @api
 */
Point.prototype.getType = function() {
  return _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POINT;
};


/**
 * @inheritDoc
 * @api
 */
Point.prototype.intersectsExtent = function(extent) {
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* containsXY */ "h"])(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
};


/**
 * @inheritDoc
 * @api
 */
Point.prototype.setCoordinates = function(coordinates, opt_layout) {
  if (!coordinates) {
    this.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].XY, null);
  } else {
    this.setLayout(opt_layout, coordinates, 0);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    this.flatCoordinates.length = Object(_geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_5__[/* deflateCoordinate */ "a"])(
      this.flatCoordinates, 0, coordinates, this.stride);
    this.changed();
  }
};


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 */
Point.prototype.setFlatCoordinates = function(layout, flatCoordinates) {
  this.setFlatCoordinatesInternal(layout, flatCoordinates);
  this.changed();
};
/* harmony default export */ __webpack_exports__["a"] = (Point);


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getChangeEventType; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(125);
/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(108);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(36);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15);
/**
 * @module ol/Object
 */







/**
 * @classdesc
 * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of
 * this type.
 *
 * @param {string} type The event type.
 * @param {string} key The property name.
 * @param {*} oldValue The old value for `key`.
 * @extends {module:ol/events/Event}
 * @constructor
 */
const ObjectEvent = function(type, key, oldValue) {
  _events_Event_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this, type);

  /**
   * The name of the property whose value is changing.
   * @type {string}
   * @api
   */
  this.key = key;

  /**
   * The old value. To get the new value use `e.target.get(e.key)` where
   * `e` is the event object.
   * @type {*}
   * @api
   */
  this.oldValue = oldValue;

};
Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(ObjectEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Most non-trivial classes inherit from this.
 *
 * This extends {@link module:ol/Observable} with observable
 * properties, where each property is observable as well as the object as a
 * whole.
 *
 * Classes that inherit from this have pre-defined properties, to which you can
 * add your owns. The pre-defined properties are listed in this documentation as
 * 'Observable Properties', and have their own accessors; for example,
 * {@link module:ol/Map~Map} has a `target` property, accessed with
 * `getTarget()` and changed with `setTarget()`. Not all properties are however
 * settable. There are also general-purpose accessors `get()` and `set()`. For
 * example, `get('target')` is equivalent to `getTarget()`.
 *
 * The `set` accessors trigger a change event, and you can monitor this by
 * registering a listener. For example, {@link module:ol/View~View} has a
 * `center` property, so `view.on('change:center', function(evt) {...});` would
 * call the function whenever the value of the center property changes. Within
 * the function, `evt.target` would be the view, so `evt.target.getCenter()`
 * would return the new center.
 *
 * You can add your own observable properties with
 * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
 * You can listen for changes on that property value with
 * `object.on('change:prop', listener)`. You can get a list of all
 * properties with {@link module:ol/Object~BaseObject#getProperties}.
 *
 * Note that the observable properties are separate from standard JS properties.
 * You can, for example, give your map object a title with
 * `map.title='New title'` and with `map.set('title', 'Another title')`. The
 * first will be a `hasOwnProperty`; the second will appear in
 * `getProperties()`. Only the second is observable.
 *
 * Properties can be deleted by using the unset method. E.g.
 * object.unset('foo').
 *
 * @constructor
 * @extends {module:ol/Observable}
 * @param {Object.<string, *>=} opt_values An object with key-value pairs.
 * @fires module:ol/Object~ObjectEvent
 * @api
 */
const BaseObject = function(opt_values) {
  _Observable_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this);

  // Call {@link module:ol~getUid} to ensure that the order of objects' ids is
  // the same as the order in which they were created.  This also helps to
  // ensure that object properties are always added in the same order, which
  // helps many JavaScript engines generate faster code.
  Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(this);

  /**
   * @private
   * @type {!Object.<string, *>}
   */
  this.values_ = {};

  if (opt_values !== undefined) {
    this.setProperties(opt_values);
  }
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(BaseObject, _Observable_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * @type {Object.<string, string>}
 */
const changeEventTypeCache = {};


/**
 * @param {string} key Key name.
 * @return {string} Change name.
 */
function getChangeEventType(key) {
  return changeEventTypeCache.hasOwnProperty(key) ?
    changeEventTypeCache[key] :
    (changeEventTypeCache[key] = 'change:' + key);
}


/**
 * Gets a value.
 * @param {string} key Key name.
 * @return {*} Value.
 * @api
 */
BaseObject.prototype.get = function(key) {
  let value;
  if (this.values_.hasOwnProperty(key)) {
    value = this.values_[key];
  }
  return value;
};


/**
 * Get a list of object property names.
 * @return {Array.<string>} List of property names.
 * @api
 */
BaseObject.prototype.getKeys = function() {
  return Object.keys(this.values_);
};


/**
 * Get an object of all property names and values.
 * @return {Object.<string, *>} Object.
 * @api
 */
BaseObject.prototype.getProperties = function() {
  return Object(_obj_js__WEBPACK_IMPORTED_MODULE_4__[/* assign */ "a"])({}, this.values_);
};


/**
 * @param {string} key Key name.
 * @param {*} oldValue Old value.
 */
BaseObject.prototype.notify = function(key, oldValue) {
  let eventType;
  eventType = getChangeEventType(key);
  this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
  eventType = _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].PROPERTYCHANGE;
  this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
};


/**
 * Sets a value.
 * @param {string} key Key name.
 * @param {*} value Value.
 * @param {boolean=} opt_silent Update without triggering an event.
 * @api
 */
BaseObject.prototype.set = function(key, value, opt_silent) {
  if (opt_silent) {
    this.values_[key] = value;
  } else {
    const oldValue = this.values_[key];
    this.values_[key] = value;
    if (oldValue !== value) {
      this.notify(key, oldValue);
    }
  }
};


/**
 * Sets a collection of key-value pairs.  Note that this changes any existing
 * properties and adds new ones (it does not remove any existing properties).
 * @param {Object.<string, *>} values Values.
 * @param {boolean=} opt_silent Update without triggering an event.
 * @api
 */
BaseObject.prototype.setProperties = function(values, opt_silent) {
  for (const key in values) {
    this.set(key, values[key], opt_silent);
  }
};


/**
 * Unsets a property.
 * @param {string} key Key name.
 * @param {boolean=} opt_silent Unset without triggering an event.
 * @api
 */
BaseObject.prototype.unset = function(key, opt_silent) {
  if (key in this.values_) {
    const oldValue = this.values_[key];
    delete this.values_[key];
    if (!opt_silent) {
      this.notify(key, oldValue);
    }
  }
};


/* harmony default export */ __webpack_exports__["a"] = (BaseObject);


/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createCanvasContext2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return outerWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return outerHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return replaceNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return removeChildren; });
/**
 * @module ol/dom
 */


/**
 * Create an html canvas element and returns its 2d context.
 * @param {number=} opt_width Canvas width.
 * @param {number=} opt_height Canvas height.
 * @return {CanvasRenderingContext2D} The context.
 */
function createCanvasContext2D(opt_width, opt_height) {
  const canvas = /** @type {HTMLCanvasElement} */ (document.createElement('CANVAS'));
  if (opt_width) {
    canvas.width = opt_width;
  }
  if (opt_height) {
    canvas.height = opt_height;
  }
  return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));
}


/**
 * Get the current computed width for the given element including margin,
 * padding and border.
 * Equivalent to jQuery's `$(el).outerWidth(true)`.
 * @param {!HTMLElement} element Element.
 * @return {number} The width.
 */
function outerWidth(element) {
  let width = element.offsetWidth;
  const style = getComputedStyle(element);
  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);

  return width;
}


/**
 * Get the current computed height for the given element including margin,
 * padding and border.
 * Equivalent to jQuery's `$(el).outerHeight(true)`.
 * @param {!HTMLElement} element Element.
 * @return {number} The height.
 */
function outerHeight(element) {
  let height = element.offsetHeight;
  const style = getComputedStyle(element);
  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);

  return height;
}

/**
 * @param {Node} newNode Node to replace old node
 * @param {Node} oldNode The node to be replaced
 */
function replaceNode(newNode, oldNode) {
  const parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
}

/**
 * @param {Node} node The node to remove.
 * @returns {Node} The node that was removed or null.
 */
function removeNode(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
}

/**
 * @param {Node} node The node to remove the children from.
 */
function removeChildren(node) {
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
}


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/Collection.js
var Collection = __webpack_require__(51);

// EXTERNAL MODULE: ../src/ol/Kinetic.js
var Kinetic = __webpack_require__(216);

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/MapBrowserEventType.js
var MapBrowserEventType = __webpack_require__(40);

// EXTERNAL MODULE: ../src/ol/interaction/Interaction.js
var Interaction = __webpack_require__(45);

// CONCATENATED MODULE: ../src/ol/interaction/DoubleClickZoom.js
/**
 * @module ol/interaction/DoubleClickZoom
 */





/**
 * @typedef {Object} Options
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {number} [delta=1] The zoom delta applied on each double click.
 */


/**
 * @classdesc
 * Allows the user to zoom by double-clicking on the map.
 *
 * @constructor
 * @extends {module:ol/interaction/Interaction}
 * @param {module:ol/interaction/DoubleClickZoom~Options=} opt_options Options.
 * @api
 */
const DoubleClickZoom = function(opt_options) {

  const options = opt_options ? opt_options : {};

  /**
   * @private
   * @type {number}
   */
  this.delta_ = options.delta ? options.delta : 1;

  Interaction["a" /* default */].call(this, {
    handleEvent: handleEvent
  });

  /**
   * @private
   * @type {number}
   */
  this.duration_ = options.duration !== undefined ? options.duration : 250;

};

Object(util["c" /* inherits */])(DoubleClickZoom, Interaction["a" /* default */]);


/**
 * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
 * doubleclick) and eventually zooms the map.
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} `false` to stop event propagation.
 * @this {module:ol/interaction/DoubleClickZoom}
 */
function handleEvent(mapBrowserEvent) {
  let stopEvent = false;
  const browserEvent = mapBrowserEvent.originalEvent;
  if (mapBrowserEvent.type == MapBrowserEventType["a" /* default */].DBLCLICK) {
    const map = mapBrowserEvent.map;
    const anchor = mapBrowserEvent.coordinate;
    const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
    const view = map.getView();
    Object(Interaction["f" /* zoomByDelta */])(view, delta, anchor, this.duration_);
    mapBrowserEvent.preventDefault();
    stopEvent = true;
  }
  return !stopEvent;
}

/* harmony default export */ var interaction_DoubleClickZoom = (DoubleClickZoom);

// EXTERNAL MODULE: ../src/ol/ViewHint.js
var ViewHint = __webpack_require__(43);

// EXTERNAL MODULE: ../src/ol/coordinate.js
var ol_coordinate = __webpack_require__(34);

// EXTERNAL MODULE: ../src/ol/easing.js
var easing = __webpack_require__(56);

// EXTERNAL MODULE: ../src/ol/events/condition.js
var events_condition = __webpack_require__(37);

// EXTERNAL MODULE: ../src/ol/functions.js
var functions = __webpack_require__(29);

// EXTERNAL MODULE: ../src/ol/interaction/Pointer.js
var Pointer = __webpack_require__(44);

// CONCATENATED MODULE: ../src/ol/interaction/DragPan.js
/**
 * @module ol/interaction/DragPan
 */









/**
 * @typedef {Object} Options
 * @property {module:ol/events/condition~Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
 * to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition~noModifierKeys}.
 * @property {module:ol/Kinetic} [kinetic] Kinetic inertia to apply to the pan.
 */


/**
 * @classdesc
 * Allows the user to pan the map by dragging the map.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @param {module:ol/interaction/DragPan~Options=} opt_options Options.
 * @api
 */
const DragPan = function(opt_options) {

  Pointer["b" /* default */].call(this, {
    handleDownEvent: handleDownEvent,
    handleDragEvent: handleDragEvent,
    handleUpEvent: handleUpEvent
  });

  const options = opt_options ? opt_options : {};

  /**
   * @private
   * @type {module:ol/Kinetic|undefined}
   */
  this.kinetic_ = options.kinetic;

  /**
   * @type {module:ol~Pixel}
   */
  this.lastCentroid = null;

  /**
   * @type {number}
   */
  this.lastPointersCount_;

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition ? options.condition : events_condition["i" /* noModifierKeys */];

  /**
   * @private
   * @type {boolean}
   */
  this.noKinetic_ = false;

};

Object(util["c" /* inherits */])(DragPan, Pointer["b" /* default */]);


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @this {module:ol/interaction/DragPan}
 */
function handleDragEvent(mapBrowserEvent) {
  const targetPointers = this.targetPointers;
  const centroid = Object(Pointer["a" /* centroid */])(targetPointers);
  if (targetPointers.length == this.lastPointersCount_) {
    if (this.kinetic_) {
      this.kinetic_.update(centroid[0], centroid[1]);
    }
    if (this.lastCentroid) {
      const deltaX = this.lastCentroid[0] - centroid[0];
      const deltaY = centroid[1] - this.lastCentroid[1];
      const map = mapBrowserEvent.map;
      const view = map.getView();
      let center = [deltaX, deltaY];
      Object(ol_coordinate["i" /* scale */])(center, view.getResolution());
      Object(ol_coordinate["h" /* rotate */])(center, view.getRotation());
      Object(ol_coordinate["a" /* add */])(center, view.getCenter());
      center = view.constrainCenter(center);
      view.setCenter(center);
    }
  } else if (this.kinetic_) {
    // reset so we don't overestimate the kinetic energy after
    // after one finger down, tiny drag, second finger down
    this.kinetic_.begin();
  }
  this.lastCentroid = centroid;
  this.lastPointersCount_ = targetPointers.length;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/DragPan}
 */
function handleUpEvent(mapBrowserEvent) {
  const map = mapBrowserEvent.map;
  const view = map.getView();
  if (this.targetPointers.length === 0) {
    if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
      const distance = this.kinetic_.getDistance();
      const angle = this.kinetic_.getAngle();
      const center = /** @type {!module:ol/coordinate~Coordinate} */ (view.getCenter());
      const centerpx = map.getPixelFromCoordinate(center);
      const dest = map.getCoordinateFromPixel([
        centerpx[0] - distance * Math.cos(angle),
        centerpx[1] - distance * Math.sin(angle)
      ]);
      view.animate({
        center: view.constrainCenter(dest),
        duration: 500,
        easing: easing["b" /* easeOut */]
      });
    }
    view.setHint(ViewHint["a" /* default */].INTERACTING, -1);
    return false;
  } else {
    if (this.kinetic_) {
      // reset so we don't overestimate the kinetic energy after
      // after one finger up, tiny drag, second finger up
      this.kinetic_.begin();
    }
    this.lastCentroid = null;
    return true;
  }
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Start drag sequence?
 * @this {module:ol/interaction/DragPan}
 */
function handleDownEvent(mapBrowserEvent) {
  if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
    const map = mapBrowserEvent.map;
    const view = map.getView();
    this.lastCentroid = null;
    if (!this.handlingDownUpSequence) {
      view.setHint(ViewHint["a" /* default */].INTERACTING, 1);
    }
    // stop any current animation
    if (view.getAnimating()) {
      view.setCenter(mapBrowserEvent.frameState.viewState.center);
    }
    if (this.kinetic_) {
      this.kinetic_.begin();
    }
    // No kinetic as soon as more than one pointer on the screen is
    // detected. This is to prevent nasty pans after pinch.
    this.noKinetic_ = this.targetPointers.length > 1;
    return true;
  } else {
    return false;
  }
}


/**
 * @inheritDoc
 */
DragPan.prototype.shouldStopEvent = functions["a" /* FALSE */];
/* harmony default export */ var interaction_DragPan = (DragPan);

// EXTERNAL MODULE: ../src/ol/rotationconstraint.js
var rotationconstraint = __webpack_require__(127);

// CONCATENATED MODULE: ../src/ol/interaction/DragRotate.js
/**
 * @module ol/interaction/DragRotate
 */









/**
 * @typedef {Object} Options
 * @property {module:ol/events/condition~Condition} [condition] A function that takes an
 * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
 * to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition~altShiftKeysOnly}.
 * @property {number} [duration=250] Animation duration in milliseconds.
 */


/**
 * @classdesc
 * Allows the user to rotate the map by clicking and dragging on the map,
 * normally combined with an {@link module:ol/events/condition} that limits
 * it to when the alt and shift keys are held down.
 *
 * This interaction is only supported for mouse devices.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @param {module:ol/interaction/DragRotate~Options=} opt_options Options.
 * @api
 */
const DragRotate = function(opt_options) {

  const options = opt_options ? opt_options : {};

  Pointer["b" /* default */].call(this, {
    handleDownEvent: DragRotate_handleDownEvent,
    handleDragEvent: DragRotate_handleDragEvent,
    handleUpEvent: DragRotate_handleUpEvent
  });

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition ? options.condition : events_condition["b" /* altShiftKeysOnly */];

  /**
   * @private
   * @type {number|undefined}
   */
  this.lastAngle_ = undefined;

  /**
   * @private
   * @type {number}
   */
  this.duration_ = options.duration !== undefined ? options.duration : 250;
};

Object(util["c" /* inherits */])(DragRotate, Pointer["b" /* default */]);


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @this {module:ol/interaction/DragRotate}
 */
function DragRotate_handleDragEvent(mapBrowserEvent) {
  if (!Object(events_condition["g" /* mouseOnly */])(mapBrowserEvent)) {
    return;
  }

  const map = mapBrowserEvent.map;
  const view = map.getView();
  if (view.getConstraints().rotation === rotationconstraint["c" /* disable */]) {
    return;
  }
  const size = map.getSize();
  const offset = mapBrowserEvent.pixel;
  const theta =
      Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
  if (this.lastAngle_ !== undefined) {
    const delta = theta - this.lastAngle_;
    const rotation = view.getRotation();
    Object(Interaction["d" /* rotateWithoutConstraints */])(view, rotation - delta);
  }
  this.lastAngle_ = theta;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/DragRotate}
 */
function DragRotate_handleUpEvent(mapBrowserEvent) {
  if (!Object(events_condition["g" /* mouseOnly */])(mapBrowserEvent)) {
    return true;
  }

  const map = mapBrowserEvent.map;
  const view = map.getView();
  view.setHint(ViewHint["a" /* default */].INTERACTING, -1);
  const rotation = view.getRotation();
  Object(Interaction["c" /* rotate */])(view, rotation, undefined, this.duration_);
  return false;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Start drag sequence?
 * @this {module:ol/interaction/DragRotate}
 */
function DragRotate_handleDownEvent(mapBrowserEvent) {
  if (!Object(events_condition["g" /* mouseOnly */])(mapBrowserEvent)) {
    return false;
  }

  if (Object(events_condition["f" /* mouseActionButton */])(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {
    const map = mapBrowserEvent.map;
    map.getView().setHint(ViewHint["a" /* default */].INTERACTING, 1);
    this.lastAngle_ = undefined;
    return true;
  } else {
    return false;
  }
}


/**
 * @inheritDoc
 */
DragRotate.prototype.shouldStopEvent = functions["a" /* FALSE */];
/* harmony default export */ var interaction_DragRotate = (DragRotate);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/events/Event.js
var Event = __webpack_require__(36);

// EXTERNAL MODULE: ../src/ol/Disposable.js
var Disposable = __webpack_require__(123);

// EXTERNAL MODULE: ../src/ol/geom/Polygon.js
var Polygon = __webpack_require__(39);

// CONCATENATED MODULE: ../src/ol/render/Box.js
/**
 * @module ol/render/Box
 */
// FIXME add rotation





/**
 * @constructor
 * @extends {module:ol/Disposable}
 * @param {string} className CSS class name.
 */
const RenderBox = function(className) {

  /**
   * @type {module:ol/geom/Polygon}
   * @private
   */
  this.geometry_ = null;

  /**
   * @type {HTMLDivElement}
   * @private
   */
  this.element_ = /** @type {HTMLDivElement} */ (document.createElement('div'));
  this.element_.style.position = 'absolute';
  this.element_.className = 'ol-box ' + className;

  /**
   * @private
   * @type {module:ol/PluggableMap}
   */
  this.map_ = null;

  /**
   * @private
   * @type {module:ol~Pixel}
   */
  this.startPixel_ = null;

  /**
   * @private
   * @type {module:ol~Pixel}
   */
  this.endPixel_ = null;

};

Object(util["c" /* inherits */])(RenderBox, Disposable["a" /* default */]);


/**
 * @inheritDoc
 */
RenderBox.prototype.disposeInternal = function() {
  this.setMap(null);
};


/**
 * @private
 */
RenderBox.prototype.render_ = function() {
  const startPixel = this.startPixel_;
  const endPixel = this.endPixel_;
  const px = 'px';
  const style = this.element_.style;
  style.left = Math.min(startPixel[0], endPixel[0]) + px;
  style.top = Math.min(startPixel[1], endPixel[1]) + px;
  style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
  style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
};


/**
 * @param {module:ol/PluggableMap} map Map.
 */
RenderBox.prototype.setMap = function(map) {
  if (this.map_) {
    this.map_.getOverlayContainer().removeChild(this.element_);
    const style = this.element_.style;
    style.left = style.top = style.width = style.height = 'inherit';
  }
  this.map_ = map;
  if (this.map_) {
    this.map_.getOverlayContainer().appendChild(this.element_);
  }
};


/**
 * @param {module:ol~Pixel} startPixel Start pixel.
 * @param {module:ol~Pixel} endPixel End pixel.
 */
RenderBox.prototype.setPixels = function(startPixel, endPixel) {
  this.startPixel_ = startPixel;
  this.endPixel_ = endPixel;
  this.createOrUpdateGeometry();
  this.render_();
};


/**
 * Creates or updates the cached geometry.
 */
RenderBox.prototype.createOrUpdateGeometry = function() {
  const startPixel = this.startPixel_;
  const endPixel = this.endPixel_;
  const pixels = [
    startPixel,
    [startPixel[0], endPixel[1]],
    endPixel,
    [endPixel[0], startPixel[1]]
  ];
  const coordinates = pixels.map(this.map_.getCoordinateFromPixel, this.map_);
  // close the polygon
  coordinates[4] = coordinates[0].slice();
  if (!this.geometry_) {
    this.geometry_ = new Polygon["b" /* default */]([coordinates]);
  } else {
    this.geometry_.setCoordinates([coordinates]);
  }
};


/**
 * @return {module:ol/geom/Polygon} Geometry.
 */
RenderBox.prototype.getGeometry = function() {
  return this.geometry_;
};
/* harmony default export */ var Box = (RenderBox);

// CONCATENATED MODULE: ../src/ol/interaction/DragBox.js
/**
 * @module ol/interaction/DragBox
 */
// FIXME draw drag box








/**
 * A function that takes a {@link module:ol/MapBrowserEvent} and two
 * {@link module:ol~Pixel}s and returns a `{boolean}`. If the condition is met,
 * true should be returned.
 * @typedef {function(this: ?, module:ol/MapBrowserEvent, module:ol~Pixel, module:ol~Pixel):boolean} EndCondition
 */


/**
 * @typedef {Object} Options
 * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
 * @property {module:ol/events/condition~Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
 * to indicate whether that event should be handled.
 * Default is {@link ol/events/condition~always}.
 * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
 * `boxEndCondition` function.
 * @property {module:ol/interaction/DragBox~EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
 * {@link module:ol~Pixel}s to indicate whether a `boxend` event should be fired.
 * Default is `true` if the area of the box is bigger than the `minArea` option.
 */


/**
 * @enum {string}
 */
const DragBoxEventType = {
  /**
   * Triggered upon drag box start.
   * @event module:ol/interaction/DragBox~DragBoxEvent#boxstart
   * @api
   */
  BOXSTART: 'boxstart',

  /**
   * Triggered on drag when box is active.
   * @event module:ol/interaction/DragBox~DragBoxEvent#boxdrag
   * @api
   */
  BOXDRAG: 'boxdrag',

  /**
   * Triggered upon drag box end.
   * @event module:ol/interaction/DragBox~DragBoxEvent#boxend
   * @api
   */
  BOXEND: 'boxend'
};


/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
 * this type.
 *
 * @param {string} type The event type.
 * @param {module:ol/coordinate~Coordinate} coordinate The event coordinate.
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Originating event.
 * @extends {module:ol/events/Event}
 * @constructor
 */
const DragBoxEvent = function(type, coordinate, mapBrowserEvent) {
  Event["a" /* default */].call(this, type);

  /**
   * The coordinate of the drag event.
   * @const
   * @type {module:ol/coordinate~Coordinate}
   * @api
   */
  this.coordinate = coordinate;

  /**
   * @const
   * @type {module:ol/MapBrowserEvent}
   * @api
   */
  this.mapBrowserEvent = mapBrowserEvent;

};

Object(util["c" /* inherits */])(DragBoxEvent, Event["a" /* default */]);


/**
 * @classdesc
 * Allows the user to draw a vector box by clicking and dragging on the map,
 * normally combined with an {@link module:ol/events/condition} that limits
 * it to when the shift or other key is held down. This is used, for example,
 * for zooming to a specific area of the map
 * (see {@link module:ol/interaction/DragZoom~DragZoom} and
 * {@link module:ol/interaction/DragRotateAndZoom}).
 *
 * This interaction is only supported for mouse devices.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @fires module:ol/interaction/DragBox~DragBoxEvent
 * @param {module:ol/interaction/DragBox~Options=} opt_options Options.
 * @api
 */
const DragBox = function(opt_options) {

  Pointer["b" /* default */].call(this, {
    handleDownEvent: DragBox_handleDownEvent,
    handleDragEvent: DragBox_handleDragEvent,
    handleUpEvent: DragBox_handleUpEvent
  });

  const options = opt_options ? opt_options : {};

  /**
   * @type {module:ol/render/Box}
   * @private
   */
  this.box_ = new Box(options.className || 'ol-dragbox');

  /**
   * @type {number}
   * @private
   */
  this.minArea_ = options.minArea !== undefined ? options.minArea : 64;

  /**
   * @type {module:ol~Pixel}
   * @private
   */
  this.startPixel_ = null;

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition ? options.condition : events_condition["c" /* always */];

  /**
   * @private
   * @type {module:ol/interaction/DragBox~EndCondition}
   */
  this.boxEndCondition_ = options.boxEndCondition ?
    options.boxEndCondition : defaultBoxEndCondition;
};

Object(util["c" /* inherits */])(DragBox, Pointer["b" /* default */]);


/**
 * The default condition for determining whether the boxend event
 * should fire.
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent The originating MapBrowserEvent
 *     leading to the box end.
 * @param {module:ol~Pixel} startPixel The starting pixel of the box.
 * @param {module:ol~Pixel} endPixel The end pixel of the box.
 * @return {boolean} Whether or not the boxend condition should be fired.
 * @this {module:ol/interaction/DragBox}
 */
function defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {
  const width = endPixel[0] - startPixel[0];
  const height = endPixel[1] - startPixel[1];
  return width * width + height * height >= this.minArea_;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @this {module:ol/interaction/DragBox}
 */
function DragBox_handleDragEvent(mapBrowserEvent) {
  if (!Object(events_condition["g" /* mouseOnly */])(mapBrowserEvent)) {
    return;
  }

  this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);

  this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG,
    mapBrowserEvent.coordinate, mapBrowserEvent));
}


/**
 * Returns geometry of last drawn box.
 * @return {module:ol/geom/Polygon} Geometry.
 * @api
 */
DragBox.prototype.getGeometry = function() {
  return this.box_.getGeometry();
};


/**
 * To be overridden by child classes.
 * FIXME: use constructor option instead of relying on overriding.
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @protected
 */
DragBox.prototype.onBoxEnd = functions["c" /* UNDEFINED */];


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/DragBox}
 */
function DragBox_handleUpEvent(mapBrowserEvent) {
  if (!Object(events_condition["g" /* mouseOnly */])(mapBrowserEvent)) {
    return true;
  }

  this.box_.setMap(null);

  if (this.boxEndCondition_(mapBrowserEvent,
    this.startPixel_, mapBrowserEvent.pixel)) {
    this.onBoxEnd(mapBrowserEvent);
    this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXEND,
      mapBrowserEvent.coordinate, mapBrowserEvent));
  }
  return false;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Start drag sequence?
 * @this {module:ol/interaction/DragBox}
 */
function DragBox_handleDownEvent(mapBrowserEvent) {
  if (!Object(events_condition["g" /* mouseOnly */])(mapBrowserEvent)) {
    return false;
  }

  if (Object(events_condition["f" /* mouseActionButton */])(mapBrowserEvent) &&
      this.condition_(mapBrowserEvent)) {
    this.startPixel_ = mapBrowserEvent.pixel;
    this.box_.setMap(mapBrowserEvent.map);
    this.box_.setPixels(this.startPixel_, this.startPixel_);
    this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART,
      mapBrowserEvent.coordinate, mapBrowserEvent));
    return true;
  } else {
    return false;
  }
}


/* harmony default export */ var interaction_DragBox = (DragBox);

// CONCATENATED MODULE: ../src/ol/interaction/DragZoom.js
/**
 * @module ol/interaction/DragZoom
 */







/**
 * @typedef {Object} Options
 * @property {string} [className='ol-dragzoom'] CSS class name for styling the
 * box.
 * @property {module:ol/events/condition~Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition~shiftKeyOnly}.
 * @property {number} [duration=200] Animation duration in milliseconds.
 * @property {boolean} [out=false] Use interaction for zooming out.
 */


/**
 * @classdesc
 * Allows the user to zoom the map by clicking and dragging on the map,
 * normally combined with an {@link module:ol/events/condition} that limits
 * it to when a key, shift by default, is held down.
 *
 * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
 * your custom one configured with `className`.
 *
 * @constructor
 * @extends {module:ol/interaction/DragBox}
 * @param {module:ol/interaction/DragZoom~Options=} opt_options Options.
 * @api
 */
const DragZoom = function(opt_options) {
  const options = opt_options ? opt_options : {};

  const condition = options.condition ? options.condition : events_condition["m" /* shiftKeyOnly */];

  /**
   * @private
   * @type {number}
   */
  this.duration_ = options.duration !== undefined ? options.duration : 200;

  /**
   * @private
   * @type {boolean}
   */
  this.out_ = options.out !== undefined ? options.out : false;

  interaction_DragBox.call(this, {
    condition: condition,
    className: options.className || 'ol-dragzoom'
  });

};

Object(util["c" /* inherits */])(DragZoom, interaction_DragBox);


/**
 * @inheritDoc
 */
DragZoom.prototype.onBoxEnd = function() {
  const map = this.getMap();

  const view = /** @type {!module:ol/View} */ (map.getView());

  const size = /** @type {!module:ol/size~Size} */ (map.getSize());

  let extent = this.getGeometry().getExtent();

  if (this.out_) {
    const mapExtent = view.calculateExtent(size);
    const boxPixelExtent = Object(ol_extent["n" /* createOrUpdateFromCoordinates */])([
      map.getPixelFromCoordinate(Object(ol_extent["v" /* getBottomLeft */])(extent)),
      map.getPixelFromCoordinate(Object(ol_extent["D" /* getTopRight */])(extent))]);
    const factor = view.getResolutionForExtent(boxPixelExtent, size);

    Object(ol_extent["J" /* scaleFromCenter */])(mapExtent, 1 / factor);
    extent = mapExtent;
  }

  const resolution = view.constrainResolution(
    view.getResolutionForExtent(extent, size));

  let center = Object(ol_extent["x" /* getCenter */])(extent);
  center = view.constrainCenter(center);

  view.animate({
    resolution: resolution,
    center: center,
    duration: this.duration_,
    easing: easing["b" /* easeOut */]
  });

};
/* harmony default export */ var interaction_DragZoom = (DragZoom);

// EXTERNAL MODULE: ../src/ol/events/EventType.js
var EventType = __webpack_require__(14);

// CONCATENATED MODULE: ../src/ol/events/KeyCode.js
/**
 * @module ol/events/KeyCode
 */

/**
 * @enum {number}
 * @const
 */
/* harmony default export */ var KeyCode = ({
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40
});

// CONCATENATED MODULE: ../src/ol/interaction/KeyboardPan.js
/**
 * @module ol/interaction/KeyboardPan
 */








/**
 * @typedef {Object} Options
 * @property {module:ol/events/condition~Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. Default is
 * {@link module:ol/events/condition~noModifierKeys} and
 * {@link module:ol/events/condition~targetNotEditable}.
 * @property {number} [duration=100] Animation duration in milliseconds.
 * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
 * press.
 */


/**
 * @classdesc
 * Allows the user to pan the map using keyboard arrows.
 * Note that, although this interaction is by default included in maps,
 * the keys can only be used when browser focus is on the element to which
 * the keyboard events are attached. By default, this is the map div,
 * though you can change this with the `keyboardEventTarget` in
 * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
 * element, focus will have to be on, and returned to, this element if the keys
 * are to function.
 * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
 *
 * @constructor
 * @extends {module:ol/interaction/Interaction}
 * @param {module:ol/interaction/KeyboardPan~Options=} opt_options Options.
 * @api
 */
const KeyboardPan = function(opt_options) {

  Interaction["a" /* default */].call(this, {
    handleEvent: KeyboardPan_handleEvent
  });

  const options = opt_options || {};

  /**
   * @private
   * @param {module:ol/MapBrowserEvent} mapBrowserEvent Browser event.
   * @return {boolean} Combined condition result.
   */
  this.defaultCondition_ = function(mapBrowserEvent) {
    return Object(events_condition["i" /* noModifierKeys */])(mapBrowserEvent) &&
      Object(events_condition["o" /* targetNotEditable */])(mapBrowserEvent);
  };

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition !== undefined ?
    options.condition : this.defaultCondition_;

  /**
   * @private
   * @type {number}
   */
  this.duration_ = options.duration !== undefined ? options.duration : 100;

  /**
   * @private
   * @type {number}
   */
  this.pixelDelta_ = options.pixelDelta !== undefined ?
    options.pixelDelta : 128;

};

Object(util["c" /* inherits */])(KeyboardPan, Interaction["a" /* default */]);

/**
 * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
 * `KeyEvent`, and decides the direction to pan to (if an arrow key was
 * pressed).
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} `false` to stop event propagation.
 * @this {module:ol/interaction/KeyboardPan}
 */
function KeyboardPan_handleEvent(mapBrowserEvent) {
  let stopEvent = false;
  if (mapBrowserEvent.type == EventType["a" /* default */].KEYDOWN) {
    const keyEvent = mapBrowserEvent.originalEvent;
    const keyCode = keyEvent.keyCode;
    if (this.condition_(mapBrowserEvent) &&
        (keyCode == KeyCode.DOWN ||
        keyCode == KeyCode.LEFT ||
        keyCode == KeyCode.RIGHT ||
        keyCode == KeyCode.UP)) {
      const map = mapBrowserEvent.map;
      const view = map.getView();
      const mapUnitsDelta = view.getResolution() * this.pixelDelta_;
      let deltaX = 0, deltaY = 0;
      if (keyCode == KeyCode.DOWN) {
        deltaY = -mapUnitsDelta;
      } else if (keyCode == KeyCode.LEFT) {
        deltaX = -mapUnitsDelta;
      } else if (keyCode == KeyCode.RIGHT) {
        deltaX = mapUnitsDelta;
      } else {
        deltaY = mapUnitsDelta;
      }
      const delta = [deltaX, deltaY];
      Object(ol_coordinate["h" /* rotate */])(delta, view.getRotation());
      Object(Interaction["b" /* pan */])(view, delta, this.duration_);
      mapBrowserEvent.preventDefault();
      stopEvent = true;
    }
  }
  return !stopEvent;
}

/* harmony default export */ var interaction_KeyboardPan = (KeyboardPan);

// CONCATENATED MODULE: ../src/ol/interaction/KeyboardZoom.js
/**
 * @module ol/interaction/KeyboardZoom
 */






/**
 * @typedef {Object} Options
 * @property {number} [duration=100] Animation duration in milliseconds.
 * @property {module:ol/events/condition~Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. Default is
 * {@link module:ol/events/condition~targetNotEditable}.
 * @property {number} [delta=1] The zoom level delta on each key press.
 */


/**
 * @classdesc
 * Allows the user to zoom the map using keyboard + and -.
 * Note that, although this interaction is by default included in maps,
 * the keys can only be used when browser focus is on the element to which
 * the keyboard events are attached. By default, this is the map div,
 * though you can change this with the `keyboardEventTarget` in
 * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
 * element, focus will have to be on, and returned to, this element if the keys
 * are to function.
 * See also {@link moudle:ol/interaction/KeyboardPan~KeyboardPan}.
 *
 * @constructor
 * @param {module:ol/interaction/KeyboardZoom~Options=} opt_options Options.
 * @extends {module:ol/interaction/Interaction}
 * @api
 */
const KeyboardZoom = function(opt_options) {

  Interaction["a" /* default */].call(this, {
    handleEvent: KeyboardZoom_handleEvent
  });

  const options = opt_options ? opt_options : {};

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition ? options.condition : events_condition["o" /* targetNotEditable */];

  /**
   * @private
   * @type {number}
   */
  this.delta_ = options.delta ? options.delta : 1;

  /**
   * @private
   * @type {number}
   */
  this.duration_ = options.duration !== undefined ? options.duration : 100;

};

Object(util["c" /* inherits */])(KeyboardZoom, Interaction["a" /* default */]);


/**
 * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
 * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
 * key pressed was '+' or '-').
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} `false` to stop event propagation.
 * @this {module:ol/interaction/KeyboardZoom}
 */
function KeyboardZoom_handleEvent(mapBrowserEvent) {
  let stopEvent = false;
  if (mapBrowserEvent.type == EventType["a" /* default */].KEYDOWN ||
      mapBrowserEvent.type == EventType["a" /* default */].KEYPRESS) {
    const keyEvent = mapBrowserEvent.originalEvent;
    const charCode = keyEvent.charCode;
    if (this.condition_(mapBrowserEvent) &&
        (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {
      const map = mapBrowserEvent.map;
      const delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;
      const view = map.getView();
      Object(Interaction["f" /* zoomByDelta */])(view, delta, undefined, this.duration_);
      mapBrowserEvent.preventDefault();
      stopEvent = true;
    }
  }
  return !stopEvent;
}

/* harmony default export */ var interaction_KeyboardZoom = (KeyboardZoom);

// EXTERNAL MODULE: ../src/ol/has.js
var has = __webpack_require__(48);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// CONCATENATED MODULE: ../src/ol/interaction/MouseWheelZoom.js
/**
 * @module ol/interaction/MouseWheelZoom
 */










/**
 * Maximum mouse wheel delta.
 * @type {number}
 */
const MAX_DELTA = 1;


/**
 * @enum {string}
 */
const Mode = {
  TRACKPAD: 'trackpad',
  WHEEL: 'wheel'
};


/**
 * @typedef {Object} Options
 * @property {module:ol/events/condition~Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. Default is
 * {@link module:ol/events/condition~always}.
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
 * @property {boolean} [constrainResolution=false] When using a trackpad or
 * magic mouse, zoom to the closest integer zoom level after the scroll gesture
 * ends.
 * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
 * location as the anchor. When set to `false`, zooming in and out will zoom to
 * the center of the screen instead of zooming on the mouse's location.
 */


/**
 * @classdesc
 * Allows the user to zoom the map by scrolling the mouse wheel.
 *
 * @constructor
 * @extends {module:ol/interaction/Interaction}
 * @param {module:ol/interaction/MouseWheelZoom~Options=} opt_options Options.
 * @api
 */
const MouseWheelZoom = function(opt_options) {

  Interaction["a" /* default */].call(this, {
    handleEvent: MouseWheelZoom_handleEvent
  });

  const options = opt_options || {};

  /**
   * @private
   * @type {number}
   */
  this.delta_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.duration_ = options.duration !== undefined ? options.duration : 250;

  /**
   * @private
   * @type {number}
   */
  this.timeout_ = options.timeout !== undefined ? options.timeout : 80;

  /**
   * @private
   * @type {boolean}
   */
  this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;

  /**
   * @private
   * @type {boolean}
   */
  this.constrainResolution_ = options.constrainResolution || false;

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition ? options.condition : events_condition["c" /* always */];

  /**
   * @private
   * @type {?module:ol/coordinate~Coordinate}
   */
  this.lastAnchor_ = null;

  /**
   * @private
   * @type {number|undefined}
   */
  this.startTime_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.timeoutId_ = undefined;

  /**
   * @private
   * @type {module:ol/interaction/MouseWheelZoom~Mode|undefined}
   */
  this.mode_ = undefined;

  /**
   * Trackpad events separated by this delay will be considered separate
   * interactions.
   * @type {number}
   */
  this.trackpadEventGap_ = 400;

  /**
   * @type {number|undefined}
   */
  this.trackpadTimeoutId_ = undefined;

  /**
   * The number of delta values per zoom level
   * @private
   * @type {number}
   */
  this.trackpadDeltaPerZoom_ = 300;

  /**
   * The zoom factor by which scroll zooming is allowed to exceed the limits.
   * @private
   * @type {number}
   */
  this.trackpadZoomBuffer_ = 1.5;

};

Object(util["c" /* inherits */])(MouseWheelZoom, Interaction["a" /* default */]);


/**
 * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
 * mousewheel-event) and eventually zooms the map.
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} Allow event propagation.
 * @this {module:ol/interaction/MouseWheelZoom}
 */
function MouseWheelZoom_handleEvent(mapBrowserEvent) {
  if (!this.condition_(mapBrowserEvent)) {
    return true;
  }
  const type = mapBrowserEvent.type;
  if (type !== EventType["a" /* default */].WHEEL && type !== EventType["a" /* default */].MOUSEWHEEL) {
    return true;
  }

  mapBrowserEvent.preventDefault();

  const map = mapBrowserEvent.map;
  const wheelEvent = /** @type {WheelEvent} */ (mapBrowserEvent.originalEvent);

  if (this.useAnchor_) {
    this.lastAnchor_ = mapBrowserEvent.coordinate;
  }

  // Delta normalisation inspired by
  // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
  let delta;
  if (mapBrowserEvent.type == EventType["a" /* default */].WHEEL) {
    delta = wheelEvent.deltaY;
    if (has["c" /* FIREFOX */] &&
        wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
      delta /= has["b" /* DEVICE_PIXEL_RATIO */];
    }
    if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
      delta *= 40;
    }
  } else if (mapBrowserEvent.type == EventType["a" /* default */].MOUSEWHEEL) {
    delta = -wheelEvent.wheelDeltaY;
    if (has["h" /* SAFARI */]) {
      delta /= 3;
    }
  }

  if (delta === 0) {
    return false;
  }

  const now = Date.now();

  if (this.startTime_ === undefined) {
    this.startTime_ = now;
  }

  if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
    this.mode_ = Math.abs(delta) < 4 ?
      Mode.TRACKPAD :
      Mode.WHEEL;
  }

  if (this.mode_ === Mode.TRACKPAD) {
    const view = map.getView();
    if (this.trackpadTimeoutId_) {
      clearTimeout(this.trackpadTimeoutId_);
    } else {
      view.setHint(ViewHint["a" /* default */].INTERACTING, 1);
    }
    this.trackpadTimeoutId_ = setTimeout(this.decrementInteractingHint_.bind(this), this.trackpadEventGap_);
    let resolution = view.getResolution() * Math.pow(2, delta / this.trackpadDeltaPerZoom_);
    const minResolution = view.getMinResolution();
    const maxResolution = view.getMaxResolution();
    let rebound = 0;
    if (resolution < minResolution) {
      resolution = Math.max(resolution, minResolution / this.trackpadZoomBuffer_);
      rebound = 1;
    } else if (resolution > maxResolution) {
      resolution = Math.min(resolution, maxResolution * this.trackpadZoomBuffer_);
      rebound = -1;
    }
    if (this.lastAnchor_) {
      const center = view.calculateCenterZoom(resolution, this.lastAnchor_);
      view.setCenter(view.constrainCenter(center));
    }
    view.setResolution(resolution);

    if (rebound === 0 && this.constrainResolution_) {
      view.animate({
        resolution: view.constrainResolution(resolution, delta > 0 ? -1 : 1),
        easing: easing["b" /* easeOut */],
        anchor: this.lastAnchor_,
        duration: this.duration_
      });
    }

    if (rebound > 0) {
      view.animate({
        resolution: minResolution,
        easing: easing["b" /* easeOut */],
        anchor: this.lastAnchor_,
        duration: 500
      });
    } else if (rebound < 0) {
      view.animate({
        resolution: maxResolution,
        easing: easing["b" /* easeOut */],
        anchor: this.lastAnchor_,
        duration: 500
      });
    }
    this.startTime_ = now;
    return false;
  }

  this.delta_ += delta;

  const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);

  clearTimeout(this.timeoutId_);
  this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);

  return false;
}


/**
 * @private
 */
MouseWheelZoom.prototype.decrementInteractingHint_ = function() {
  this.trackpadTimeoutId_ = undefined;
  const view = this.getMap().getView();
  view.setHint(ViewHint["a" /* default */].INTERACTING, -1);
};


/**
 * @private
 * @param {module:ol/PluggableMap} map Map.
 */
MouseWheelZoom.prototype.handleWheelZoom_ = function(map) {
  const view = map.getView();
  if (view.getAnimating()) {
    view.cancelAnimations();
  }
  const maxDelta = MAX_DELTA;
  const delta = Object(math["a" /* clamp */])(this.delta_, -maxDelta, maxDelta);
  Object(Interaction["f" /* zoomByDelta */])(view, -delta, this.lastAnchor_, this.duration_);
  this.mode_ = undefined;
  this.delta_ = 0;
  this.lastAnchor_ = null;
  this.startTime_ = undefined;
  this.timeoutId_ = undefined;
};


/**
 * Enable or disable using the mouse's location as an anchor when zooming
 * @param {boolean} useAnchor true to zoom to the mouse's location, false
 * to zoom to the center of the map
 * @api
 */
MouseWheelZoom.prototype.setMouseAnchor = function(useAnchor) {
  this.useAnchor_ = useAnchor;
  if (!useAnchor) {
    this.lastAnchor_ = null;
  }
};


/* harmony default export */ var interaction_MouseWheelZoom = (MouseWheelZoom);

// CONCATENATED MODULE: ../src/ol/interaction/PinchRotate.js
/**
 * @module ol/interaction/PinchRotate
 */








/**
 * @typedef {Object} Options
 * @property {number} [duration=250] The duration of the animation in
 * milliseconds.
 * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
 */


/**
 * @classdesc
 * Allows the user to rotate the map by twisting with two fingers
 * on a touch screen.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @param {module:ol/interaction/PinchRotate~Options=} opt_options Options.
 * @api
 */
const PinchRotate = function(opt_options) {

  Pointer["b" /* default */].call(this, {
    handleDownEvent: PinchRotate_handleDownEvent,
    handleDragEvent: PinchRotate_handleDragEvent,
    handleUpEvent: PinchRotate_handleUpEvent
  });

  const options = opt_options || {};

  /**
   * @private
   * @type {module:ol/coordinate~Coordinate}
   */
  this.anchor_ = null;

  /**
   * @private
   * @type {number|undefined}
   */
  this.lastAngle_ = undefined;

  /**
   * @private
   * @type {boolean}
   */
  this.rotating_ = false;

  /**
   * @private
   * @type {number}
   */
  this.rotationDelta_ = 0.0;

  /**
   * @private
   * @type {number}
   */
  this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;

  /**
   * @private
   * @type {number}
   */
  this.duration_ = options.duration !== undefined ? options.duration : 250;

};

Object(util["c" /* inherits */])(PinchRotate, Pointer["b" /* default */]);


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @this {module:ol/interaction/PinchRotate}
 */
function PinchRotate_handleDragEvent(mapBrowserEvent) {
  let rotationDelta = 0.0;

  const touch0 = this.targetPointers[0];
  const touch1 = this.targetPointers[1];

  // angle between touches
  const angle = Math.atan2(
    touch1.clientY - touch0.clientY,
    touch1.clientX - touch0.clientX);

  if (this.lastAngle_ !== undefined) {
    const delta = angle - this.lastAngle_;
    this.rotationDelta_ += delta;
    if (!this.rotating_ &&
        Math.abs(this.rotationDelta_) > this.threshold_) {
      this.rotating_ = true;
    }
    rotationDelta = delta;
  }
  this.lastAngle_ = angle;

  const map = mapBrowserEvent.map;
  const view = map.getView();
  if (view.getConstraints().rotation === rotationconstraint["c" /* disable */]) {
    return;
  }

  // rotate anchor point.
  // FIXME: should be the intersection point between the lines:
  //     touch0,touch1 and previousTouch0,previousTouch1
  const viewportPosition = map.getViewport().getBoundingClientRect();
  const centroid = Object(Pointer["a" /* centroid */])(this.targetPointers);
  centroid[0] -= viewportPosition.left;
  centroid[1] -= viewportPosition.top;
  this.anchor_ = map.getCoordinateFromPixel(centroid);

  // rotate
  if (this.rotating_) {
    const rotation = view.getRotation();
    map.render();
    Object(Interaction["d" /* rotateWithoutConstraints */])(view, rotation + rotationDelta, this.anchor_);
  }
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/PinchRotate}
 */
function PinchRotate_handleUpEvent(mapBrowserEvent) {
  if (this.targetPointers.length < 2) {
    const map = mapBrowserEvent.map;
    const view = map.getView();
    view.setHint(ViewHint["a" /* default */].INTERACTING, -1);
    if (this.rotating_) {
      const rotation = view.getRotation();
      Object(Interaction["c" /* rotate */])(view, rotation, this.anchor_, this.duration_);
    }
    return false;
  } else {
    return true;
  }
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Start drag sequence?
 * @this {module:ol/interaction/PinchRotate}
 */
function PinchRotate_handleDownEvent(mapBrowserEvent) {
  if (this.targetPointers.length >= 2) {
    const map = mapBrowserEvent.map;
    this.anchor_ = null;
    this.lastAngle_ = undefined;
    this.rotating_ = false;
    this.rotationDelta_ = 0.0;
    if (!this.handlingDownUpSequence) {
      map.getView().setHint(ViewHint["a" /* default */].INTERACTING, 1);
    }
    return true;
  } else {
    return false;
  }
}


/**
 * @inheritDoc
 */
PinchRotate.prototype.shouldStopEvent = functions["a" /* FALSE */];

/* harmony default export */ var interaction_PinchRotate = (PinchRotate);

// CONCATENATED MODULE: ../src/ol/interaction/PinchZoom.js
/**
 * @module ol/interaction/PinchZoom
 */







/**
 * @typedef {Object} Options
 * @property {number} [duration=400] Animation duration in milliseconds.
 * @property {boolean} [constrainResolution=false] Zoom to the closest integer
 * zoom level after the pinch gesture ends.
 */


/**
 * @classdesc
 * Allows the user to zoom the map by pinching with two fingers
 * on a touch screen.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @param {module:ol/interaction/PinchZoom~Options=} opt_options Options.
 * @api
 */
const PinchZoom = function(opt_options) {

  Pointer["b" /* default */].call(this, {
    handleDownEvent: PinchZoom_handleDownEvent,
    handleDragEvent: PinchZoom_handleDragEvent,
    handleUpEvent: PinchZoom_handleUpEvent
  });

  const options = opt_options ? opt_options : {};

  /**
   * @private
   * @type {boolean}
   */
  this.constrainResolution_ = options.constrainResolution || false;

  /**
   * @private
   * @type {module:ol/coordinate~Coordinate}
   */
  this.anchor_ = null;

  /**
   * @private
   * @type {number}
   */
  this.duration_ = options.duration !== undefined ? options.duration : 400;

  /**
   * @private
   * @type {number|undefined}
   */
  this.lastDistance_ = undefined;

  /**
   * @private
   * @type {number}
   */
  this.lastScaleDelta_ = 1;

};

Object(util["c" /* inherits */])(PinchZoom, Pointer["b" /* default */]);


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @this {module:ol/interaction/PinchZoom}
 */
function PinchZoom_handleDragEvent(mapBrowserEvent) {
  let scaleDelta = 1.0;

  const touch0 = this.targetPointers[0];
  const touch1 = this.targetPointers[1];
  const dx = touch0.clientX - touch1.clientX;
  const dy = touch0.clientY - touch1.clientY;

  // distance between touches
  const distance = Math.sqrt(dx * dx + dy * dy);

  if (this.lastDistance_ !== undefined) {
    scaleDelta = this.lastDistance_ / distance;
  }
  this.lastDistance_ = distance;


  const map = mapBrowserEvent.map;
  const view = map.getView();
  const resolution = view.getResolution();
  const maxResolution = view.getMaxResolution();
  const minResolution = view.getMinResolution();
  let newResolution = resolution * scaleDelta;
  if (newResolution > maxResolution) {
    scaleDelta = maxResolution / resolution;
    newResolution = maxResolution;
  } else if (newResolution < minResolution) {
    scaleDelta = minResolution / resolution;
    newResolution = minResolution;
  }

  if (scaleDelta != 1.0) {
    this.lastScaleDelta_ = scaleDelta;
  }

  // scale anchor point.
  const viewportPosition = map.getViewport().getBoundingClientRect();
  const centroid = Object(Pointer["a" /* centroid */])(this.targetPointers);
  centroid[0] -= viewportPosition.left;
  centroid[1] -= viewportPosition.top;
  this.anchor_ = map.getCoordinateFromPixel(centroid);

  // scale, bypass the resolution constraint
  map.render();
  Object(Interaction["g" /* zoomWithoutConstraints */])(view, newResolution, this.anchor_);
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/PinchZoom}
 */
function PinchZoom_handleUpEvent(mapBrowserEvent) {
  if (this.targetPointers.length < 2) {
    const map = mapBrowserEvent.map;
    const view = map.getView();
    view.setHint(ViewHint["a" /* default */].INTERACTING, -1);
    const resolution = view.getResolution();
    if (this.constrainResolution_ ||
        resolution < view.getMinResolution() ||
        resolution > view.getMaxResolution()) {
      // Zoom to final resolution, with an animation, and provide a
      // direction not to zoom out/in if user was pinching in/out.
      // Direction is > 0 if pinching out, and < 0 if pinching in.
      const direction = this.lastScaleDelta_ - 1;
      Object(Interaction["e" /* zoom */])(view, resolution, this.anchor_, this.duration_, direction);
    }
    return false;
  } else {
    return true;
  }
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Start drag sequence?
 * @this {module:ol/interaction/PinchZoom}
 */
function PinchZoom_handleDownEvent(mapBrowserEvent) {
  if (this.targetPointers.length >= 2) {
    const map = mapBrowserEvent.map;
    this.anchor_ = null;
    this.lastDistance_ = undefined;
    this.lastScaleDelta_ = 1;
    if (!this.handlingDownUpSequence) {
      map.getView().setHint(ViewHint["a" /* default */].INTERACTING, 1);
    }
    return true;
  } else {
    return false;
  }
}


/**
 * @inheritDoc
 */
PinchZoom.prototype.shouldStopEvent = functions["a" /* FALSE */];
/* harmony default export */ var interaction_PinchZoom = (PinchZoom);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// CONCATENATED MODULE: ../src/ol/interaction/DragAndDrop.js
/**
 * @module ol/interaction/DragAndDrop
 */
// FIXME should handle all geo-referenced data, not just vector data










/**
 * @typedef {Object} Options
 * @property {Array.<function(new: module:ol/format/Feature)>} [formatConstructors] Format constructors.
 * @property {module:ol/source/Vector} [source] Optional vector source where features will be added.  If a source is provided
 * all existing features will be removed and new features will be added when
 * they are dropped on the target.  If you want to add features to a vector
 * source without removing the existing features (append only), instead of
 * providing the source option listen for the "addfeatures" event.
 * @property {module:ol/proj~ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.
 * @property {Element} [target] The element that is used as the drop target, default is the viewport element.
 */


/**
 * @enum {string}
 */
const DragAndDropEventType = {
  /**
   * Triggered when features are added
   * @event module:ol/interaction/DragAndDrop~DragAndDropEvent#addfeatures
   * @api
   */
  ADD_FEATURES: 'addfeatures'
};


/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances
 * of this type.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {module:ol/interaction/DragAndDrop~DragAndDropEventType} type Type.
 * @param {File} file File.
 * @param {Array.<module:ol/Feature>=} opt_features Features.
 * @param {module:ol/proj/Projection=} opt_projection Projection.
 */
const DragAndDropEvent = function(type, file, opt_features, opt_projection) {

  Event["a" /* default */].call(this, type);

  /**
   * The features parsed from dropped data.
   * @type {Array.<module:ol/Feature>|undefined}
   * @api
   */
  this.features = opt_features;

  /**
   * The dropped file.
   * @type {File}
   * @api
   */
  this.file = file;

  /**
   * The feature projection.
   * @type {module:ol/proj/Projection|undefined}
   * @api
   */
  this.projection = opt_projection;

};
Object(util["c" /* inherits */])(DragAndDropEvent, Event["a" /* default */]);


/**
 * @classdesc
 * Handles input of vector data by drag and drop.
 *
 * @constructor
 * @extends {module:ol/interaction/Interaction}
 * @fires module:ol/interaction/DragAndDrop~DragAndDropEvent
 * @param {module:ol/interaction/DragAndDrop~Options=} opt_options Options.
 * @api
 */
const DragAndDrop = function(opt_options) {

  const options = opt_options ? opt_options : {};

  Interaction["a" /* default */].call(this, {
    handleEvent: functions["b" /* TRUE */]
  });

  /**
   * @private
   * @type {Array.<function(new: module:ol/format/Feature)>}
   */
  this.formatConstructors_ = options.formatConstructors ?
    options.formatConstructors : [];

  /**
   * @private
   * @type {module:ol/proj/Projection}
   */
  this.projection_ = options.projection ?
    Object(proj["h" /* get */])(options.projection) : null;

  /**
   * @private
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.dropListenKeys_ = null;

  /**
   * @private
   * @type {module:ol/source/Vector}
   */
  this.source_ = options.source || null;

  /**
   * @private
   * @type {Element}
   */
  this.target = options.target ? options.target : null;

};

Object(util["c" /* inherits */])(DragAndDrop, Interaction["a" /* default */]);


/**
 * @param {DragEvent} event Event.
 * @this {module:ol/interaction/DragAndDrop}
 */
function handleDrop(event) {
  const files = event.dataTransfer.files;
  for (let i = 0, ii = files.length; i < ii; ++i) {
    const file = files.item(i);
    const reader = new FileReader();
    reader.addEventListener(EventType["a" /* default */].LOAD, this.handleResult_.bind(this, file));
    reader.readAsText(file);
  }
}


/**
 * @param {DragEvent} event Event.
 */
function handleStop(event) {
  event.stopPropagation();
  event.preventDefault();
  event.dataTransfer.dropEffect = 'copy';
}


/**
 * @param {File} file File.
 * @param {Event} event Load event.
 * @private
 */
DragAndDrop.prototype.handleResult_ = function(file, event) {
  const result = event.target.result;
  const map = this.getMap();
  let projection = this.projection_;
  if (!projection) {
    const view = map.getView();
    projection = view.getProjection();
  }

  const formatConstructors = this.formatConstructors_;
  let features = [];
  for (let i = 0, ii = formatConstructors.length; i < ii; ++i) {
    /**
     * Avoid "cannot instantiate abstract class" error.
     * @type {Function}
     */
    const formatConstructor = formatConstructors[i];
    /**
     * @type {module:ol/format/Feature}
     */
    const format = new formatConstructor();
    features = this.tryReadFeatures_(format, result, {
      featureProjection: projection
    });
    if (features && features.length > 0) {
      break;
    }
  }
  if (this.source_) {
    this.source_.clear();
    this.source_.addFeatures(features);
  }
  this.dispatchEvent(
    new DragAndDropEvent(
      DragAndDropEventType.ADD_FEATURES, file,
      features, projection));
};


/**
 * @private
 */
DragAndDrop.prototype.registerListeners_ = function() {
  const map = this.getMap();
  if (map) {
    const dropArea = this.target ? this.target : map.getViewport();
    this.dropListenKeys_ = [
      Object(events["a" /* listen */])(dropArea, EventType["a" /* default */].DROP, handleDrop, this),
      Object(events["a" /* listen */])(dropArea, EventType["a" /* default */].DRAGENTER, handleStop, this),
      Object(events["a" /* listen */])(dropArea, EventType["a" /* default */].DRAGOVER, handleStop, this),
      Object(events["a" /* listen */])(dropArea, EventType["a" /* default */].DROP, handleStop, this)
    ];
  }
};


/**
 * @inheritDoc
 */
DragAndDrop.prototype.setActive = function(active) {
  Interaction["a" /* default */].prototype.setActive.call(this, active);
  if (active) {
    this.registerListeners_();
  } else {
    this.unregisterListeners_();
  }
};


/**
 * @inheritDoc
 */
DragAndDrop.prototype.setMap = function(map) {
  this.unregisterListeners_();
  Interaction["a" /* default */].prototype.setMap.call(this, map);
  if (this.getActive()) {
    this.registerListeners_();
  }
};


/**
 * @param {module:ol/format/Feature} format Format.
 * @param {string} text Text.
 * @param {module:ol/format/Feature~ReadOptions} options Read options.
 * @private
 * @return {Array.<module:ol/Feature>} Features.
 */
DragAndDrop.prototype.tryReadFeatures_ = function(format, text, options) {
  try {
    return format.readFeatures(text, options);
  } catch (e) {
    return null;
  }
};


/**
 * @private
 */
DragAndDrop.prototype.unregisterListeners_ = function() {
  if (this.dropListenKeys_) {
    this.dropListenKeys_.forEach(events["e" /* unlistenByKey */]);
    this.dropListenKeys_ = null;
  }
};


/* harmony default export */ var interaction_DragAndDrop = (DragAndDrop);

// CONCATENATED MODULE: ../src/ol/interaction/DragRotateAndZoom.js
/**
 * @module ol/interaction/DragRotateAndZoom
 */








/**
 * @typedef {Object} Options
 * @property {module:ol/events/condition~Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition~shiftKeyOnly}.
 * @property {number} [duration=400] Animation duration in milliseconds.
 */


/**
 * @classdesc
 * Allows the user to zoom and rotate the map by clicking and dragging
 * on the map.  By default, this interaction is limited to when the shift
 * key is held down.
 *
 * This interaction is only supported for mouse devices.
 *
 * And this interaction is not included in the default interactions.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @param {module:ol/interaction/DragRotateAndZoom~Options=} opt_options Options.
 * @api
 */
const DragRotateAndZoom = function(opt_options) {

  const options = opt_options ? opt_options : {};

  Pointer["b" /* default */].call(this, {
    handleDownEvent: DragRotateAndZoom_handleDownEvent,
    handleDragEvent: DragRotateAndZoom_handleDragEvent,
    handleUpEvent: DragRotateAndZoom_handleUpEvent
  });

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition ? options.condition : events_condition["m" /* shiftKeyOnly */];

  /**
   * @private
   * @type {number|undefined}
   */
  this.lastAngle_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.lastMagnitude_ = undefined;

  /**
   * @private
   * @type {number}
   */
  this.lastScaleDelta_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.duration_ = options.duration !== undefined ? options.duration : 400;

};

Object(util["c" /* inherits */])(DragRotateAndZoom, Pointer["b" /* default */]);


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @this {module:ol/interaction/DragRotateAndZoom}
 */
function DragRotateAndZoom_handleDragEvent(mapBrowserEvent) {
  if (!Object(events_condition["g" /* mouseOnly */])(mapBrowserEvent)) {
    return;
  }

  const map = mapBrowserEvent.map;
  const size = map.getSize();
  const offset = mapBrowserEvent.pixel;
  const deltaX = offset[0] - size[0] / 2;
  const deltaY = size[1] / 2 - offset[1];
  const theta = Math.atan2(deltaY, deltaX);
  const magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
  const view = map.getView();
  if (view.getConstraints().rotation !== rotationconstraint["c" /* disable */] && this.lastAngle_ !== undefined) {
    const angleDelta = theta - this.lastAngle_;
    Object(Interaction["d" /* rotateWithoutConstraints */])(view, view.getRotation() - angleDelta);
  }
  this.lastAngle_ = theta;
  if (this.lastMagnitude_ !== undefined) {
    const resolution = this.lastMagnitude_ * (view.getResolution() / magnitude);
    Object(Interaction["g" /* zoomWithoutConstraints */])(view, resolution);
  }
  if (this.lastMagnitude_ !== undefined) {
    this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;
  }
  this.lastMagnitude_ = magnitude;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/DragRotateAndZoom}
 */
function DragRotateAndZoom_handleUpEvent(mapBrowserEvent) {
  if (!Object(events_condition["g" /* mouseOnly */])(mapBrowserEvent)) {
    return true;
  }

  const map = mapBrowserEvent.map;
  const view = map.getView();
  view.setHint(ViewHint["a" /* default */].INTERACTING, -1);
  const direction = this.lastScaleDelta_ - 1;
  Object(Interaction["c" /* rotate */])(view, view.getRotation());
  Object(Interaction["e" /* zoom */])(view, view.getResolution(), undefined, this.duration_, direction);
  this.lastScaleDelta_ = 0;
  return false;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Start drag sequence?
 * @this {module:ol/interaction/DragRotateAndZoom}
 */
function DragRotateAndZoom_handleDownEvent(mapBrowserEvent) {
  if (!Object(events_condition["g" /* mouseOnly */])(mapBrowserEvent)) {
    return false;
  }

  if (this.condition_(mapBrowserEvent)) {
    mapBrowserEvent.map.getView().setHint(ViewHint["a" /* default */].INTERACTING, 1);
    this.lastAngle_ = undefined;
    this.lastMagnitude_ = undefined;
    return true;
  } else {
    return false;
  }
}

/* harmony default export */ var interaction_DragRotateAndZoom = (DragRotateAndZoom);

// EXTERNAL MODULE: ../src/ol/interaction/Draw.js
var Draw = __webpack_require__(101);

// EXTERNAL MODULE: ../src/ol/interaction/Extent.js
var Extent = __webpack_require__(215);

// EXTERNAL MODULE: ../src/ol/CollectionEventType.js
var CollectionEventType = __webpack_require__(62);

// EXTERNAL MODULE: ../src/ol/Feature.js
var Feature = __webpack_require__(23);

// EXTERNAL MODULE: ../src/ol/MapBrowserPointerEvent.js
var MapBrowserPointerEvent = __webpack_require__(92);

// EXTERNAL MODULE: ../src/ol/array.js
var array = __webpack_require__(16);

// EXTERNAL MODULE: ../src/ol/geom/GeometryType.js
var GeometryType = __webpack_require__(9);

// EXTERNAL MODULE: ../src/ol/geom/Point.js
var Point = __webpack_require__(30);

// EXTERNAL MODULE: ../src/ol/layer/Vector.js
var Vector = __webpack_require__(24);

// EXTERNAL MODULE: ../src/ol/source/Vector.js
var source_Vector = __webpack_require__(13);

// EXTERNAL MODULE: ../src/ol/source/VectorEventType.js
var VectorEventType = __webpack_require__(113);

// EXTERNAL MODULE: ../src/ol/structs/RBush.js
var RBush = __webpack_require__(132);

// EXTERNAL MODULE: ../src/ol/style/Style.js
var Style = __webpack_require__(75);

// CONCATENATED MODULE: ../src/ol/interaction/Modify.js
/**
 * @module ol/interaction/Modify
 */























/**
 * @enum {string}
 */
const ModifyEventType = {
  /**
   * Triggered upon feature modification start
   * @event ModifyEvent#modifystart
   * @api
   */
  MODIFYSTART: 'modifystart',
  /**
   * Triggered upon feature modification end
   * @event ModifyEvent#modifyend
   * @api
   */
  MODIFYEND: 'modifyend'
};


/**
 * @typedef {Object} SegmentData
 * @property {Array.<number>} [depth]
 * @property {module:ol/Feature} feature
 * @property {module:ol/geom/SimpleGeometry} geometry
 * @property {number} index
 * @property {Array.<module:ol/extent~Extent>} segment
 * @property {Array.<module:ol/interaction/Modify~SegmentData>} [featureSegments]
 */


/**
 * @typedef {Object} Options
 * @property {module:ol/events/condition~Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event will be considered to add or move a
 * vertex to the sketch. Default is
 * {@link module:ol/events/condition~primaryAction}.
 * @property {module:ol/events/condition~Condition} [deleteCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. By default,
 * {@link module:ol/events/condition~singleClick} with
 * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.
 * @property {module:ol/events/condition~Condition} [insertVertexCondition] A
 * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
 * returns a boolean to indicate whether a new vertex can be added to the sketch
 * features. Default is {@link module:ol/events/condition~always}.
 * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
 * pointer close enough to a segment or vertex for editing.
 * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style]
 * Style used for the features being modified. By default the default edit
 * style is used (see {@link module:ol/style}).
 * @property {module:ol/source/Vector} [source] The vector source with
 * features to modify.  If a vector source is not provided, a feature collection
 * must be provided with the features option.
 * @property {module:ol/Collection.<module:ol/Feature>} [features]
 * The features the interaction works on.  If a feature collection is not
 * provided, a vector source must be provided with the source option.
 * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
 * overlay.
 */


/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are
 * instances of this type.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {ModifyEventType} type Type.
 * @param {module:ol/Collection.<module:ol/Feature>} features
 * The features modified.
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserPointerEvent
 * Associated {@link module:ol/MapBrowserPointerEvent}.
 */
const ModifyEvent = function(type, features, mapBrowserPointerEvent) {

  Event["a" /* default */].call(this, type);

  /**
   * The features being modified.
   * @type {module:ol/Collection.<module:ol/Feature>}
   * @api
   */
  this.features = features;

  /**
   * Associated {@link module:ol/MapBrowserEvent}.
   * @type {module:ol/MapBrowserEvent}
   * @api
   */
  this.mapBrowserEvent = mapBrowserPointerEvent;
};

Object(util["c" /* inherits */])(ModifyEvent, Event["a" /* default */]);


/**
 * @classdesc
 * Interaction for modifying feature geometries.  To modify features that have
 * been added to an existing source, construct the modify interaction with the
 * `source` option.  If you want to modify features in a collection (for example,
 * the collection used by a select interaction), construct the interaction with
 * the `features` option.  The interaction must be constructed with either a
 * `source` or `features` option.
 *
 * By default, the interaction will allow deletion of vertices when the `alt`
 * key is pressed.  To configure the interaction with a different condition
 * for deletion, use the `deleteCondition` option.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @param {module:ol/interaction/Modify~Options} options Options.
 * @fires module:ol/interaction/Modify~ModifyEvent
 * @api
 */
const Modify = function(options) {

  Pointer["b" /* default */].call(this, {
    handleDownEvent: Modify_handleDownEvent,
    handleDragEvent: Modify_handleDragEvent,
    handleEvent: Modify_handleEvent,
    handleUpEvent: Modify_handleUpEvent
  });

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition ? options.condition : events_condition["l" /* primaryAction */];


  /**
   * @private
   * @param {module:ol/MapBrowserEvent} mapBrowserEvent Browser event.
   * @return {boolean} Combined condition result.
   */
  this.defaultDeleteCondition_ = function(mapBrowserEvent) {
    return Object(events_condition["a" /* altKeyOnly */])(mapBrowserEvent) && Object(events_condition["n" /* singleClick */])(mapBrowserEvent);
  };

  /**
   * @type {module:ol/events/condition~Condition}
   * @private
   */
  this.deleteCondition_ = options.deleteCondition ?
    options.deleteCondition : this.defaultDeleteCondition_;

  /**
   * @type {module:ol/events/condition~Condition}
   * @private
   */
  this.insertVertexCondition_ = options.insertVertexCondition ?
    options.insertVertexCondition : events_condition["c" /* always */];

  /**
   * Editing vertex.
   * @type {module:ol/Feature}
   * @private
   */
  this.vertexFeature_ = null;

  /**
   * Segments intersecting {@link this.vertexFeature_} by segment uid.
   * @type {Object.<string, boolean>}
   * @private
   */
  this.vertexSegments_ = null;

  /**
   * @type {module:ol~Pixel}
   * @private
   */
  this.lastPixel_ = [0, 0];

  /**
   * Tracks if the next `singleclick` event should be ignored to prevent
   * accidental deletion right after vertex creation.
   * @type {boolean}
   * @private
   */
  this.ignoreNextSingleClick_ = false;

  /**
   * @type {boolean}
   * @private
   */
  this.modified_ = false;

  /**
   * Segment RTree for each layer
   * @type {module:ol/structs/RBush.<module:ol/interaction/Modify~SegmentData>}
   * @private
   */
  this.rBush_ = new RBush["a" /* default */]();

  /**
   * @type {number}
   * @private
   */
  this.pixelTolerance_ = options.pixelTolerance !== undefined ?
    options.pixelTolerance : 10;

  /**
   * @type {boolean}
   * @private
   */
  this.snappedToVertex_ = false;

  /**
   * Indicate whether the interaction is currently changing a feature's
   * coordinates.
   * @type {boolean}
   * @private
   */
  this.changingFeature_ = false;

  /**
   * @type {Array}
   * @private
   */
  this.dragSegments_ = [];

  /**
   * Draw overlay where sketch features are drawn.
   * @type {module:ol/layer/Vector}
   * @private
   */
  this.overlay_ = new Vector["a" /* default */]({
    source: new source_Vector["b" /* default */]({
      useSpatialIndex: false,
      wrapX: !!options.wrapX
    }),
    style: options.style ? options.style :
      getDefaultStyleFunction(),
    updateWhileAnimating: true,
    updateWhileInteracting: true
  });

  /**
   * @const
   * @private
   * @type {!Object.<string, function(module:ol/Feature, module:ol/geom/Geometry)>}
   */
  this.SEGMENT_WRITERS_ = {
    'Point': this.writePointGeometry_,
    'LineString': this.writeLineStringGeometry_,
    'LinearRing': this.writeLineStringGeometry_,
    'Polygon': this.writePolygonGeometry_,
    'MultiPoint': this.writeMultiPointGeometry_,
    'MultiLineString': this.writeMultiLineStringGeometry_,
    'MultiPolygon': this.writeMultiPolygonGeometry_,
    'Circle': this.writeCircleGeometry_,
    'GeometryCollection': this.writeGeometryCollectionGeometry_
  };


  /**
   * @type {module:ol/source/Vector}
   * @private
   */
  this.source_ = null;

  let features;
  if (options.source) {
    this.source_ = options.source;
    features = new Collection["b" /* default */](this.source_.getFeatures());
    Object(events["a" /* listen */])(this.source_, VectorEventType["a" /* default */].ADDFEATURE,
      this.handleSourceAdd_, this);
    Object(events["a" /* listen */])(this.source_, VectorEventType["a" /* default */].REMOVEFEATURE,
      this.handleSourceRemove_, this);
  } else {
    features = options.features;
  }
  if (!features) {
    throw new Error('The modify interaction requires features or a source');
  }

  /**
   * @type {module:ol/Collection.<module:ol/Feature>}
   * @private
   */
  this.features_ = features;

  this.features_.forEach(this.addFeature_.bind(this));
  Object(events["a" /* listen */])(this.features_, CollectionEventType["a" /* default */].ADD,
    this.handleFeatureAdd_, this);
  Object(events["a" /* listen */])(this.features_, CollectionEventType["a" /* default */].REMOVE,
    this.handleFeatureRemove_, this);

  /**
   * @type {module:ol/MapBrowserPointerEvent}
   * @private
   */
  this.lastPointerEvent_ = null;

};

Object(util["c" /* inherits */])(Modify, Pointer["b" /* default */]);


/**
 * The segment index assigned to a circle's center when
 * breaking up a circle into ModifySegmentDataType segments.
 * @type {number}
 */
const CIRCLE_CENTER_INDEX = 0;

/**
 * The segment index assigned to a circle's circumference when
 * breaking up a circle into ModifySegmentDataType segments.
 * @type {number}
 */
const CIRCLE_CIRCUMFERENCE_INDEX = 1;


/**
 * @param {module:ol/Feature} feature Feature.
 * @private
 */
Modify.prototype.addFeature_ = function(feature) {
  const geometry = feature.getGeometry();
  if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {
    this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);
  }
  const map = this.getMap();
  if (map && map.isRendered() && this.getActive()) {
    this.handlePointerAtPixel_(this.lastPixel_, map);
  }
  Object(events["a" /* listen */])(feature, EventType["a" /* default */].CHANGE,
    this.handleFeatureChange_, this);
};


/**
 * @param {module:ol/MapBrowserPointerEvent} evt Map browser event
 * @private
 */
Modify.prototype.willModifyFeatures_ = function(evt) {
  if (!this.modified_) {
    this.modified_ = true;
    this.dispatchEvent(new ModifyEvent(
      ModifyEventType.MODIFYSTART, this.features_, evt));
  }
};


/**
 * @param {module:ol/Feature} feature Feature.
 * @private
 */
Modify.prototype.removeFeature_ = function(feature) {
  this.removeFeatureSegmentData_(feature);
  // Remove the vertex feature if the collection of canditate features
  // is empty.
  if (this.vertexFeature_ && this.features_.getLength() === 0) {
    this.overlay_.getSource().removeFeature(this.vertexFeature_);
    this.vertexFeature_ = null;
  }
  Object(events["c" /* unlisten */])(feature, EventType["a" /* default */].CHANGE,
    this.handleFeatureChange_, this);
};


/**
 * @param {module:ol/Feature} feature Feature.
 * @private
 */
Modify.prototype.removeFeatureSegmentData_ = function(feature) {
  const rBush = this.rBush_;
  const /** @type {Array.<module:ol/interaction/Modify~SegmentData>} */ nodesToRemove = [];
  rBush.forEach(
    /**
     * @param {module:ol/interaction/Modify~SegmentData} node RTree node.
     */
    function(node) {
      if (feature === node.feature) {
        nodesToRemove.push(node);
      }
    });
  for (let i = nodesToRemove.length - 1; i >= 0; --i) {
    rBush.remove(nodesToRemove[i]);
  }
};


/**
 * @inheritDoc
 */
Modify.prototype.setActive = function(active) {
  if (this.vertexFeature_ && !active) {
    this.overlay_.getSource().removeFeature(this.vertexFeature_);
    this.vertexFeature_ = null;
  }
  Pointer["b" /* default */].prototype.setActive.call(this, active);
};


/**
 * @inheritDoc
 */
Modify.prototype.setMap = function(map) {
  this.overlay_.setMap(map);
  Pointer["b" /* default */].prototype.setMap.call(this, map);
};


/**
 * @param {module:ol/source/Vector~VectorSourceEvent} event Event.
 * @private
 */
Modify.prototype.handleSourceAdd_ = function(event) {
  if (event.feature) {
    this.features_.push(event.feature);
  }
};


/**
 * @param {module:ol/source/Vector~VectorSourceEvent} event Event.
 * @private
 */
Modify.prototype.handleSourceRemove_ = function(event) {
  if (event.feature) {
    this.features_.remove(event.feature);
  }
};


/**
 * @param {module:ol/Collection~CollectionEvent} evt Event.
 * @private
 */
Modify.prototype.handleFeatureAdd_ = function(evt) {
  this.addFeature_(/** @type {module:ol/Feature} */ (evt.element));
};


/**
 * @param {module:ol/events/Event} evt Event.
 * @private
 */
Modify.prototype.handleFeatureChange_ = function(evt) {
  if (!this.changingFeature_) {
    const feature = /** @type {module:ol/Feature} */ (evt.target);
    this.removeFeature_(feature);
    this.addFeature_(feature);
  }
};


/**
 * @param {module:ol/Collection~CollectionEvent} evt Event.
 * @private
 */
Modify.prototype.handleFeatureRemove_ = function(evt) {
  const feature = /** @type {module:ol/Feature} */ (evt.element);
  this.removeFeature_(feature);
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/Point} geometry Geometry.
 * @private
 */
Modify.prototype.writePointGeometry_ = function(feature, geometry) {
  const coordinates = geometry.getCoordinates();
  const segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
    feature: feature,
    geometry: geometry,
    segment: [coordinates, coordinates]
  });
  this.rBush_.insert(geometry.getExtent(), segmentData);
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/MultiPoint} geometry Geometry.
 * @private
 */
Modify.prototype.writeMultiPointGeometry_ = function(feature, geometry) {
  const points = geometry.getCoordinates();
  for (let i = 0, ii = points.length; i < ii; ++i) {
    const coordinates = points[i];
    const segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
      feature: feature,
      geometry: geometry,
      depth: [i],
      index: i,
      segment: [coordinates, coordinates]
    });
    this.rBush_.insert(geometry.getExtent(), segmentData);
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/LineString} geometry Geometry.
 * @private
 */
Modify.prototype.writeLineStringGeometry_ = function(feature, geometry) {
  const coordinates = geometry.getCoordinates();
  for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
    const segment = coordinates.slice(i, i + 2);
    const segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
      feature: feature,
      geometry: geometry,
      index: i,
      segment: segment
    });
    this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(segment), segmentData);
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/MultiLineString} geometry Geometry.
 * @private
 */
Modify.prototype.writeMultiLineStringGeometry_ = function(feature, geometry) {
  const lines = geometry.getCoordinates();
  for (let j = 0, jj = lines.length; j < jj; ++j) {
    const coordinates = lines[j];
    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
      const segment = coordinates.slice(i, i + 2);
      const segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        depth: [j],
        index: i,
        segment: segment
      });
      this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(segment), segmentData);
    }
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/Polygon} geometry Geometry.
 * @private
 */
Modify.prototype.writePolygonGeometry_ = function(feature, geometry) {
  const rings = geometry.getCoordinates();
  for (let j = 0, jj = rings.length; j < jj; ++j) {
    const coordinates = rings[j];
    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
      const segment = coordinates.slice(i, i + 2);
      const segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        depth: [j],
        index: i,
        segment: segment
      });
      this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(segment), segmentData);
    }
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/MultiPolygon} geometry Geometry.
 * @private
 */
Modify.prototype.writeMultiPolygonGeometry_ = function(feature, geometry) {
  const polygons = geometry.getCoordinates();
  for (let k = 0, kk = polygons.length; k < kk; ++k) {
    const rings = polygons[k];
    for (let j = 0, jj = rings.length; j < jj; ++j) {
      const coordinates = rings[j];
      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        const segment = coordinates.slice(i, i + 2);
        const segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
          feature: feature,
          geometry: geometry,
          depth: [j, k],
          index: i,
          segment: segment
        });
        this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(segment), segmentData);
      }
    }
  }
};


/**
 * We convert a circle into two segments.  The segment at index
 * {@link CIRCLE_CENTER_INDEX} is the
 * circle's center (a point).  The segment at index
 * {@link CIRCLE_CIRCUMFERENCE_INDEX} is
 * the circumference, and is not a line segment.
 *
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/geom/Circle} geometry Geometry.
 * @private
 */
Modify.prototype.writeCircleGeometry_ = function(feature, geometry) {
  const coordinates = geometry.getCenter();
  const centerSegmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
    feature: feature,
    geometry: geometry,
    index: CIRCLE_CENTER_INDEX,
    segment: [coordinates, coordinates]
  });
  const circumferenceSegmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
    feature: feature,
    geometry: geometry,
    index: CIRCLE_CIRCUMFERENCE_INDEX,
    segment: [coordinates, coordinates]
  });
  const featureSegments = [centerSegmentData, circumferenceSegmentData];
  centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;
  this.rBush_.insert(Object(ol_extent["m" /* createOrUpdateFromCoordinate */])(coordinates), centerSegmentData);
  this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/GeometryCollection} geometry Geometry.
 * @private
 */
Modify.prototype.writeGeometryCollectionGeometry_ = function(feature, geometry) {
  const geometries = geometry.getGeometriesArray();
  for (let i = 0; i < geometries.length; ++i) {
    this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);
  }
};


/**
 * @param {module:ol/coordinate~Coordinate} coordinates Coordinates.
 * @return {module:ol/Feature} Vertex feature.
 * @private
 */
Modify.prototype.createOrUpdateVertexFeature_ = function(coordinates) {
  let vertexFeature = this.vertexFeature_;
  if (!vertexFeature) {
    vertexFeature = new Feature["a" /* default */](new Point["a" /* default */](coordinates));
    this.vertexFeature_ = vertexFeature;
    this.overlay_.getSource().addFeature(vertexFeature);
  } else {
    const geometry = /** @type {module:ol/geom/Point} */ (vertexFeature.getGeometry());
    geometry.setCoordinates(coordinates);
  }
  return vertexFeature;
};


/**
 * @param {module:ol/interaction/Modify~SegmentData} a The first segment data.
 * @param {module:ol/interaction/Modify~SegmentData} b The second segment data.
 * @return {number} The difference in indexes.
 */
function compareIndexes(a, b) {
  return a.index - b.index;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} evt Event.
 * @return {boolean} Start drag sequence?
 * @this {module:ol/interaction/Modify}
 */
function Modify_handleDownEvent(evt) {
  if (!this.condition_(evt)) {
    return false;
  }
  this.handlePointerAtPixel_(evt.pixel, evt.map);
  const pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);
  this.dragSegments_.length = 0;
  this.modified_ = false;
  const vertexFeature = this.vertexFeature_;
  if (vertexFeature) {
    const insertVertices = [];
    const geometry = /** @type {module:ol/geom/Point} */ (vertexFeature.getGeometry());
    const vertex = geometry.getCoordinates();
    const vertexExtent = Object(ol_extent["b" /* boundingExtent */])([vertex]);
    const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);
    const componentSegments = {};
    segmentDataMatches.sort(compareIndexes);
    for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {
      const segmentDataMatch = segmentDataMatches[i];
      const segment = segmentDataMatch.segment;
      let uid = Object(util["b" /* getUid */])(segmentDataMatch.feature);
      const depth = segmentDataMatch.depth;
      if (depth) {
        uid += '-' + depth.join('-'); // separate feature components
      }
      if (!componentSegments[uid]) {
        componentSegments[uid] = new Array(2);
      }
      if (segmentDataMatch.geometry.getType() === GeometryType["a" /* default */].CIRCLE &&
      segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {

        const closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);
        if (Object(ol_coordinate["g" /* equals */])(closestVertex, vertex) && !componentSegments[uid][0]) {
          this.dragSegments_.push([segmentDataMatch, 0]);
          componentSegments[uid][0] = segmentDataMatch;
        }
      } else if (Object(ol_coordinate["g" /* equals */])(segment[0], vertex) &&
          !componentSegments[uid][0]) {
        this.dragSegments_.push([segmentDataMatch, 0]);
        componentSegments[uid][0] = segmentDataMatch;
      } else if (Object(ol_coordinate["g" /* equals */])(segment[1], vertex) &&
          !componentSegments[uid][1]) {

        // prevent dragging closed linestrings by the connecting node
        if ((segmentDataMatch.geometry.getType() ===
            GeometryType["a" /* default */].LINE_STRING ||
            segmentDataMatch.geometry.getType() ===
            GeometryType["a" /* default */].MULTI_LINE_STRING) &&
            componentSegments[uid][0] &&
            componentSegments[uid][0].index === 0) {
          continue;
        }

        this.dragSegments_.push([segmentDataMatch, 1]);
        componentSegments[uid][1] = segmentDataMatch;
      } else if (this.insertVertexCondition_(evt) && Object(util["b" /* getUid */])(segment) in this.vertexSegments_ &&
          (!componentSegments[uid][0] && !componentSegments[uid][1])) {
        insertVertices.push([segmentDataMatch, vertex]);
      }
    }
    if (insertVertices.length) {
      this.willModifyFeatures_(evt);
    }
    for (let j = insertVertices.length - 1; j >= 0; --j) {
      this.insertVertex_.apply(this, insertVertices[j]);
    }
  }
  return !!this.vertexFeature_;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} evt Event.
 * @this {module:ol/interaction/Modify}
 */
function Modify_handleDragEvent(evt) {
  this.ignoreNextSingleClick_ = false;
  this.willModifyFeatures_(evt);

  const vertex = evt.coordinate;
  for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {
    const dragSegment = this.dragSegments_[i];
    const segmentData = dragSegment[0];
    const depth = segmentData.depth;
    const geometry = segmentData.geometry;
    let coordinates;
    const segment = segmentData.segment;
    const index = dragSegment[1];

    while (vertex.length < geometry.getStride()) {
      vertex.push(segment[index][vertex.length]);
    }

    switch (geometry.getType()) {
      case GeometryType["a" /* default */].POINT:
        coordinates = vertex;
        segment[0] = segment[1] = vertex;
        break;
      case GeometryType["a" /* default */].MULTI_POINT:
        coordinates = geometry.getCoordinates();
        coordinates[segmentData.index] = vertex;
        segment[0] = segment[1] = vertex;
        break;
      case GeometryType["a" /* default */].LINE_STRING:
        coordinates = geometry.getCoordinates();
        coordinates[segmentData.index + index] = vertex;
        segment[index] = vertex;
        break;
      case GeometryType["a" /* default */].MULTI_LINE_STRING:
        coordinates = geometry.getCoordinates();
        coordinates[depth[0]][segmentData.index + index] = vertex;
        segment[index] = vertex;
        break;
      case GeometryType["a" /* default */].POLYGON:
        coordinates = geometry.getCoordinates();
        coordinates[depth[0]][segmentData.index + index] = vertex;
        segment[index] = vertex;
        break;
      case GeometryType["a" /* default */].MULTI_POLYGON:
        coordinates = geometry.getCoordinates();
        coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;
        segment[index] = vertex;
        break;
      case GeometryType["a" /* default */].CIRCLE:
        segment[0] = segment[1] = vertex;
        if (segmentData.index === CIRCLE_CENTER_INDEX) {
          this.changingFeature_ = true;
          geometry.setCenter(vertex);
          this.changingFeature_ = false;
        } else { // We're dragging the circle's circumference:
          this.changingFeature_ = true;
          geometry.setRadius(Object(ol_coordinate["f" /* distance */])(geometry.getCenter(), vertex));
          this.changingFeature_ = false;
        }
        break;
      default:
        // pass
    }

    if (coordinates) {
      this.setGeometryCoordinates_(geometry, coordinates);
    }
  }
  this.createOrUpdateVertexFeature_(vertex);
}


/**
 * @param {module:ol/MapBrowserPointerEvent} evt Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/Modify}
 */
function Modify_handleUpEvent(evt) {
  for (let i = this.dragSegments_.length - 1; i >= 0; --i) {
    const segmentData = this.dragSegments_[i][0];
    const geometry = segmentData.geometry;
    if (geometry.getType() === GeometryType["a" /* default */].CIRCLE) {
      // Update a circle object in the R* bush:
      const coordinates = geometry.getCenter();
      const centerSegmentData = segmentData.featureSegments[0];
      const circumferenceSegmentData = segmentData.featureSegments[1];
      centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;
      circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;
      this.rBush_.update(Object(ol_extent["m" /* createOrUpdateFromCoordinate */])(coordinates), centerSegmentData);
      this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);
    } else {
      this.rBush_.update(Object(ol_extent["b" /* boundingExtent */])(segmentData.segment), segmentData);
    }
  }
  if (this.modified_) {
    this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
    this.modified_ = false;
  }
  return false;
}


/**
 * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the
 * geometry.
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} `false` to stop event propagation.
 * @this {module:ol/interaction/Modify}
 */
function Modify_handleEvent(mapBrowserEvent) {
  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent["a" /* default */])) {
    return true;
  }
  this.lastPointerEvent_ = mapBrowserEvent;

  let handled;
  if (!mapBrowserEvent.map.getView().getInteracting() &&
      mapBrowserEvent.type == MapBrowserEventType["a" /* default */].POINTERMOVE &&
      !this.handlingDownUpSequence) {
    this.handlePointerMove_(mapBrowserEvent);
  }
  if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {
    if (mapBrowserEvent.type != MapBrowserEventType["a" /* default */].SINGLECLICK || !this.ignoreNextSingleClick_) {
      handled = this.removePoint();
    } else {
      handled = true;
    }
  }

  if (mapBrowserEvent.type == MapBrowserEventType["a" /* default */].SINGLECLICK) {
    this.ignoreNextSingleClick_ = false;
  }

  return Pointer["c" /* handleEvent */].call(this, mapBrowserEvent) && !handled;
}


/**
 * @param {module:ol/MapBrowserEvent} evt Event.
 * @private
 */
Modify.prototype.handlePointerMove_ = function(evt) {
  this.lastPixel_ = evt.pixel;
  this.handlePointerAtPixel_(evt.pixel, evt.map);
};


/**
 * @param {module:ol~Pixel} pixel Pixel
 * @param {module:ol/PluggableMap} map Map.
 * @private
 */
Modify.prototype.handlePointerAtPixel_ = function(pixel, map) {
  const pixelCoordinate = map.getCoordinateFromPixel(pixel);
  const sortByDistance = function(a, b) {
    return pointDistanceToSegmentDataSquared(pixelCoordinate, a) -
        pointDistanceToSegmentDataSquared(pixelCoordinate, b);
  };

  const box = Object(ol_extent["c" /* buffer */])(Object(ol_extent["m" /* createOrUpdateFromCoordinate */])(pixelCoordinate),
    map.getView().getResolution() * this.pixelTolerance_);

  const rBush = this.rBush_;
  const nodes = rBush.getInExtent(box);
  if (nodes.length > 0) {
    nodes.sort(sortByDistance);
    const node = nodes[0];
    const closestSegment = node.segment;
    let vertex = closestOnSegmentData(pixelCoordinate, node);
    const vertexPixel = map.getPixelFromCoordinate(vertex);
    let dist = Object(ol_coordinate["f" /* distance */])(pixel, vertexPixel);
    if (dist <= this.pixelTolerance_) {
      const vertexSegments = {};

      if (node.geometry.getType() === GeometryType["a" /* default */].CIRCLE &&
      node.index === CIRCLE_CIRCUMFERENCE_INDEX) {

        this.snappedToVertex_ = true;
        this.createOrUpdateVertexFeature_(vertex);
      } else {
        const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
        const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
        const squaredDist1 = Object(ol_coordinate["j" /* squaredDistance */])(vertexPixel, pixel1);
        const squaredDist2 = Object(ol_coordinate["j" /* squaredDistance */])(vertexPixel, pixel2);
        dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
        this.snappedToVertex_ = dist <= this.pixelTolerance_;
        if (this.snappedToVertex_) {
          vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
        }
        this.createOrUpdateVertexFeature_(vertex);
        for (let i = 1, ii = nodes.length; i < ii; ++i) {
          const segment = nodes[i].segment;
          if ((Object(ol_coordinate["g" /* equals */])(closestSegment[0], segment[0]) &&
              Object(ol_coordinate["g" /* equals */])(closestSegment[1], segment[1]) ||
              (Object(ol_coordinate["g" /* equals */])(closestSegment[0], segment[1]) &&
              Object(ol_coordinate["g" /* equals */])(closestSegment[1], segment[0])))) {
            vertexSegments[Object(util["b" /* getUid */])(segment)] = true;
          } else {
            break;
          }
        }
      }

      vertexSegments[Object(util["b" /* getUid */])(closestSegment)] = true;
      this.vertexSegments_ = vertexSegments;
      return;
    }
  }
  if (this.vertexFeature_) {
    this.overlay_.getSource().removeFeature(this.vertexFeature_);
    this.vertexFeature_ = null;
  }
};


/**
 * Returns the distance from a point to a line segment.
 *
 * @param {module:ol/coordinate~Coordinate} pointCoordinates The coordinates of the point from
 *        which to calculate the distance.
 * @param {module:ol/interaction/Modify~SegmentData} segmentData The object describing the line
 *        segment we are calculating the distance to.
 * @return {number} The square of the distance between a point and a line segment.
 */
function pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {
  const geometry = segmentData.geometry;

  if (geometry.getType() === GeometryType["a" /* default */].CIRCLE) {
    const circleGeometry = /** @type {module:ol/geom/Circle} */ (geometry);

    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
      const distanceToCenterSquared =
            Object(ol_coordinate["j" /* squaredDistance */])(circleGeometry.getCenter(), pointCoordinates);
      const distanceToCircumference =
            Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();
      return distanceToCircumference * distanceToCircumference;
    }
  }
  return Object(ol_coordinate["k" /* squaredDistanceToSegment */])(pointCoordinates, segmentData.segment);
}

/**
 * Returns the point closest to a given line segment.
 *
 * @param {module:ol/coordinate~Coordinate} pointCoordinates The point to which a closest point
 *        should be found.
 * @param {module:ol/interaction/Modify~SegmentData} segmentData The object describing the line
 *        segment which should contain the closest point.
 * @return {module:ol/coordinate~Coordinate} The point closest to the specified line segment.
 */
function closestOnSegmentData(pointCoordinates, segmentData) {
  const geometry = segmentData.geometry;

  if (geometry.getType() === GeometryType["a" /* default */].CIRCLE &&
  segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
    return geometry.getClosestPoint(pointCoordinates);
  }
  return Object(ol_coordinate["c" /* closestOnSegment */])(pointCoordinates, segmentData.segment);
}


/**
 * @param {module:ol/interaction/Modify~SegmentData} segmentData Segment data.
 * @param {module:ol/coordinate~Coordinate} vertex Vertex.
 * @private
 */
Modify.prototype.insertVertex_ = function(segmentData, vertex) {
  const segment = segmentData.segment;
  const feature = segmentData.feature;
  const geometry = segmentData.geometry;
  const depth = segmentData.depth;
  const index = /** @type {number} */ (segmentData.index);
  let coordinates;

  while (vertex.length < geometry.getStride()) {
    vertex.push(0);
  }

  switch (geometry.getType()) {
    case GeometryType["a" /* default */].MULTI_LINE_STRING:
      coordinates = geometry.getCoordinates();
      coordinates[depth[0]].splice(index + 1, 0, vertex);
      break;
    case GeometryType["a" /* default */].POLYGON:
      coordinates = geometry.getCoordinates();
      coordinates[depth[0]].splice(index + 1, 0, vertex);
      break;
    case GeometryType["a" /* default */].MULTI_POLYGON:
      coordinates = geometry.getCoordinates();
      coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);
      break;
    case GeometryType["a" /* default */].LINE_STRING:
      coordinates = geometry.getCoordinates();
      coordinates.splice(index + 1, 0, vertex);
      break;
    default:
      return;
  }

  this.setGeometryCoordinates_(geometry, coordinates);
  const rTree = this.rBush_;
  rTree.remove(segmentData);
  this.updateSegmentIndices_(geometry, index, depth, 1);
  const newSegmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
    segment: [segment[0], vertex],
    feature: feature,
    geometry: geometry,
    depth: depth,
    index: index
  });
  rTree.insert(Object(ol_extent["b" /* boundingExtent */])(newSegmentData.segment),
    newSegmentData);
  this.dragSegments_.push([newSegmentData, 1]);

  const newSegmentData2 = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
    segment: [vertex, segment[1]],
    feature: feature,
    geometry: geometry,
    depth: depth,
    index: index + 1
  });
  rTree.insert(Object(ol_extent["b" /* boundingExtent */])(newSegmentData2.segment), newSegmentData2);
  this.dragSegments_.push([newSegmentData2, 0]);
  this.ignoreNextSingleClick_ = true;
};

/**
 * Removes the vertex currently being pointed.
 * @return {boolean} True when a vertex was removed.
 * @api
 */
Modify.prototype.removePoint = function() {
  if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType["a" /* default */].POINTERDRAG) {
    const evt = this.lastPointerEvent_;
    this.willModifyFeatures_(evt);
    this.removeVertex_();
    this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
    this.modified_ = false;
    return true;
  }
  return false;
};

/**
 * Removes a vertex from all matching features.
 * @return {boolean} True when a vertex was removed.
 * @private
 */
Modify.prototype.removeVertex_ = function() {
  const dragSegments = this.dragSegments_;
  const segmentsByFeature = {};
  let deleted = false;
  let component, coordinates, dragSegment, geometry, i, index, left;
  let newIndex, right, segmentData, uid;
  for (i = dragSegments.length - 1; i >= 0; --i) {
    dragSegment = dragSegments[i];
    segmentData = dragSegment[0];
    uid = Object(util["b" /* getUid */])(segmentData.feature);
    if (segmentData.depth) {
      // separate feature components
      uid += '-' + segmentData.depth.join('-');
    }
    if (!(uid in segmentsByFeature)) {
      segmentsByFeature[uid] = {};
    }
    if (dragSegment[1] === 0) {
      segmentsByFeature[uid].right = segmentData;
      segmentsByFeature[uid].index = segmentData.index;
    } else if (dragSegment[1] == 1) {
      segmentsByFeature[uid].left = segmentData;
      segmentsByFeature[uid].index = segmentData.index + 1;
    }

  }
  for (uid in segmentsByFeature) {
    right = segmentsByFeature[uid].right;
    left = segmentsByFeature[uid].left;
    index = segmentsByFeature[uid].index;
    newIndex = index - 1;
    if (left !== undefined) {
      segmentData = left;
    } else {
      segmentData = right;
    }
    if (newIndex < 0) {
      newIndex = 0;
    }
    geometry = segmentData.geometry;
    coordinates = geometry.getCoordinates();
    component = coordinates;
    deleted = false;
    switch (geometry.getType()) {
      case GeometryType["a" /* default */].MULTI_LINE_STRING:
        if (coordinates[segmentData.depth[0]].length > 2) {
          coordinates[segmentData.depth[0]].splice(index, 1);
          deleted = true;
        }
        break;
      case GeometryType["a" /* default */].LINE_STRING:
        if (coordinates.length > 2) {
          coordinates.splice(index, 1);
          deleted = true;
        }
        break;
      case GeometryType["a" /* default */].MULTI_POLYGON:
        component = component[segmentData.depth[1]];
        /* falls through */
      case GeometryType["a" /* default */].POLYGON:
        component = component[segmentData.depth[0]];
        if (component.length > 4) {
          if (index == component.length - 1) {
            index = 0;
          }
          component.splice(index, 1);
          deleted = true;
          if (index === 0) {
            // close the ring again
            component.pop();
            component.push(component[0]);
            newIndex = component.length - 1;
          }
        }
        break;
      default:
        // pass
    }

    if (deleted) {
      this.setGeometryCoordinates_(geometry, coordinates);
      const segments = [];
      if (left !== undefined) {
        this.rBush_.remove(left);
        segments.push(left.segment[0]);
      }
      if (right !== undefined) {
        this.rBush_.remove(right);
        segments.push(right.segment[1]);
      }
      if (left !== undefined && right !== undefined) {
        const newSegmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({
          depth: segmentData.depth,
          feature: segmentData.feature,
          geometry: segmentData.geometry,
          index: newIndex,
          segment: segments
        });
        this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(newSegmentData.segment),
          newSegmentData);
      }
      this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);
      if (this.vertexFeature_) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      dragSegments.length = 0;
    }

  }
  return deleted;
};


/**
 * @param {module:ol/geom/SimpleGeometry} geometry Geometry.
 * @param {Array} coordinates Coordinates.
 * @private
 */
Modify.prototype.setGeometryCoordinates_ = function(geometry, coordinates) {
  this.changingFeature_ = true;
  geometry.setCoordinates(coordinates);
  this.changingFeature_ = false;
};


/**
 * @param {module:ol/geom/SimpleGeometry} geometry Geometry.
 * @param {number} index Index.
 * @param {Array.<number>|undefined} depth Depth.
 * @param {number} delta Delta (1 or -1).
 * @private
 */
Modify.prototype.updateSegmentIndices_ = function(
  geometry, index, depth, delta) {
  this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {
    if (segmentDataMatch.geometry === geometry &&
        (depth === undefined || segmentDataMatch.depth === undefined ||
        Object(array["b" /* equals */])(segmentDataMatch.depth, depth)) &&
        segmentDataMatch.index > index) {
      segmentDataMatch.index += delta;
    }
  });
};


/**
 * @return {module:ol/style/Style~StyleFunction} Styles.
 */
function getDefaultStyleFunction() {
  const style = Object(Style["b" /* createEditingStyle */])();
  return function(feature, resolution) {
    return style[GeometryType["a" /* default */].POINT];
  };
}


/* harmony default export */ var interaction_Modify = (Modify);

// EXTERNAL MODULE: ../src/ol/interaction/Select.js
var Select = __webpack_require__(146);

// EXTERNAL MODULE: ../src/ol/obj.js
var obj = __webpack_require__(15);

// CONCATENATED MODULE: ../src/ol/interaction/Snap.js
/**
 * @module ol/interaction/Snap
 */

















/**
 * @typedef {Object} Result
 * @property {boolean} snapped
 * @property {module:ol/coordinate~Coordinate|null} vertex
 * @property {module:ol~Pixel|null} vertexPixel
 */


/**
 * @typedef {Object} SegmentData
 * @property {module:ol/Feature} feature
 * @property {Array.<module:ol/coordinate~Coordinate>} segment
 */


/**
 * @typedef {Object} Options
 * @property {module:ol/Collection.<module:ol/Feature>} [features] Snap to these features. Either this option or source should be provided.
 * @property {boolean} [edge=true] Snap to edges.
 * @property {boolean} [vertex=true] Snap to vertices.
 * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or
 * vertex for snapping.
 * @property {module:ol/source/Vector} [source] Snap to features from this source. Either this option or features should be provided
 */


/**
 * @classdesc
 * Handles snapping of vector features while modifying or drawing them.  The
 * features can come from a {@link module:ol/source/Vector} or {@link module:ol/Collection~Collection}
 * Any interaction object that allows the user to interact
 * with the features using the mouse can benefit from the snapping, as long
 * as it is added before.
 *
 * The snap interaction modifies map browser event `coordinate` and `pixel`
 * properties to force the snap to occur to any interaction that them.
 *
 * Example:
 *
 *     import Snap from 'ol/interaction/Snap';
 *
 *     var snap = new Snap({
 *       source: source
 *     });
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @param {module:ol/interaction/Snap~Options=} opt_options Options.
 * @api
 */
const Snap = function(opt_options) {

  Pointer["b" /* default */].call(this, {
    handleEvent: Snap_handleEvent,
    handleDownEvent: functions["b" /* TRUE */],
    handleUpEvent: Snap_handleUpEvent
  });

  const options = opt_options ? opt_options : {};

  /**
   * @type {module:ol/source/Vector}
   * @private
   */
  this.source_ = options.source ? options.source : null;

  /**
   * @private
   * @type {boolean}
   */
  this.vertex_ = options.vertex !== undefined ? options.vertex : true;

  /**
   * @private
   * @type {boolean}
   */
  this.edge_ = options.edge !== undefined ? options.edge : true;

  /**
   * @type {module:ol/Collection.<module:ol/Feature>}
   * @private
   */
  this.features_ = options.features ? options.features : null;

  /**
   * @type {Array.<module:ol/events~EventsKey>}
   * @private
   */
  this.featuresListenerKeys_ = [];

  /**
   * @type {Object.<number, module:ol/events~EventsKey>}
   * @private
   */
  this.featureChangeListenerKeys_ = {};

  /**
   * Extents are preserved so indexed segment can be quickly removed
   * when its feature geometry changes
   * @type {Object.<number, module:ol/extent~Extent>}
   * @private
   */
  this.indexedFeaturesExtents_ = {};

  /**
   * If a feature geometry changes while a pointer drag|move event occurs, the
   * feature doesn't get updated right away.  It will be at the next 'pointerup'
   * event fired.
   * @type {!Object.<number, module:ol/Feature>}
   * @private
   */
  this.pendingFeatures_ = {};

  /**
   * Used for distance sorting in sortByDistance_
   * @type {module:ol/coordinate~Coordinate}
   * @private
   */
  this.pixelCoordinate_ = null;

  /**
   * @type {number}
   * @private
   */
  this.pixelTolerance_ = options.pixelTolerance !== undefined ?
    options.pixelTolerance : 10;

  /**
   * @type {function(module:ol/interaction/Snap~SegmentData, module:ol/interaction/Snap~SegmentData): number}
   * @private
   */
  this.sortByDistance_ = Snap_sortByDistance.bind(this);


  /**
  * Segment RTree for each layer
  * @type {module:ol/structs/RBush.<module:ol/interaction/Snap~SegmentData>}
  * @private
  */
  this.rBush_ = new RBush["a" /* default */]();


  /**
  * @const
  * @private
  * @type {Object.<string, function(module:ol/Feature, module:ol/geom/Geometry)>}
  */
  this.SEGMENT_WRITERS_ = {
    'Point': this.writePointGeometry_,
    'LineString': this.writeLineStringGeometry_,
    'LinearRing': this.writeLineStringGeometry_,
    'Polygon': this.writePolygonGeometry_,
    'MultiPoint': this.writeMultiPointGeometry_,
    'MultiLineString': this.writeMultiLineStringGeometry_,
    'MultiPolygon': this.writeMultiPolygonGeometry_,
    'GeometryCollection': this.writeGeometryCollectionGeometry_,
    'Circle': this.writeCircleGeometry_
  };
};

Object(util["c" /* inherits */])(Snap, Pointer["b" /* default */]);


/**
 * Add a feature to the collection of features that we may snap to.
 * @param {module:ol/Feature} feature Feature.
 * @param {boolean=} opt_listen Whether to listen to the feature change or not
 *     Defaults to `true`.
 * @api
 */
Snap.prototype.addFeature = function(feature, opt_listen) {
  const register = opt_listen !== undefined ? opt_listen : true;
  const feature_uid = Object(util["b" /* getUid */])(feature);
  const geometry = feature.getGeometry();
  if (geometry) {
    const segmentWriter = this.SEGMENT_WRITERS_[geometry.getType()];
    if (segmentWriter) {
      this.indexedFeaturesExtents_[feature_uid] = geometry.getExtent(Object(ol_extent["j" /* createEmpty */])());
      segmentWriter.call(this, feature, geometry);
    }
  }

  if (register) {
    this.featureChangeListenerKeys_[feature_uid] = Object(events["a" /* listen */])(
      feature,
      EventType["a" /* default */].CHANGE,
      this.handleFeatureChange_, this);
  }
};


/**
 * @param {module:ol/Feature} feature Feature.
 * @private
 */
Snap.prototype.forEachFeatureAdd_ = function(feature) {
  this.addFeature(feature);
};


/**
 * @param {module:ol/Feature} feature Feature.
 * @private
 */
Snap.prototype.forEachFeatureRemove_ = function(feature) {
  this.removeFeature(feature);
};


/**
 * @return {module:ol/Collection.<module:ol/Feature>|Array.<module:ol/Feature>} Features.
 * @private
 */
Snap.prototype.getFeatures_ = function() {
  let features;
  if (this.features_) {
    features = this.features_;
  } else if (this.source_) {
    features = this.source_.getFeatures();
  }
  return (
    /** @type {!Array.<module:ol/Feature>|!module:ol/Collection.<module:ol/Feature>} */ (features)
  );
};


/**
 * @param {module:ol/source/Vector|module:ol/Collection~CollectionEvent} evt Event.
 * @private
 */
Snap.prototype.handleFeatureAdd_ = function(evt) {
  let feature;
  if (evt instanceof source_Vector["a" /* VectorSourceEvent */]) {
    feature = evt.feature;
  } else if (evt instanceof Collection["a" /* CollectionEvent */]) {
    feature = evt.element;
  }
  this.addFeature(/** @type {module:ol/Feature} */ (feature));
};


/**
 * @param {module:ol/source/Vector|module:ol/Collection~CollectionEvent} evt Event.
 * @private
 */
Snap.prototype.handleFeatureRemove_ = function(evt) {
  let feature;
  if (evt instanceof source_Vector["a" /* VectorSourceEvent */]) {
    feature = evt.feature;
  } else if (evt instanceof Collection["a" /* CollectionEvent */]) {
    feature = evt.element;
  }
  this.removeFeature(/** @type {module:ol/Feature} */ (feature));
};


/**
 * @param {module:ol/events/Event} evt Event.
 * @private
 */
Snap.prototype.handleFeatureChange_ = function(evt) {
  const feature = /** @type {module:ol/Feature} */ (evt.target);
  if (this.handlingDownUpSequence) {
    const uid = Object(util["b" /* getUid */])(feature);
    if (!(uid in this.pendingFeatures_)) {
      this.pendingFeatures_[uid] = feature;
    }
  } else {
    this.updateFeature_(feature);
  }
};


/**
 * Remove a feature from the collection of features that we may snap to.
 * @param {module:ol/Feature} feature Feature
 * @param {boolean=} opt_unlisten Whether to unlisten to the feature change
 *     or not. Defaults to `true`.
 * @api
 */
Snap.prototype.removeFeature = function(feature, opt_unlisten) {
  const unregister = opt_unlisten !== undefined ? opt_unlisten : true;
  const feature_uid = Object(util["b" /* getUid */])(feature);
  const extent = this.indexedFeaturesExtents_[feature_uid];
  if (extent) {
    const rBush = this.rBush_;
    const nodesToRemove = [];
    rBush.forEachInExtent(extent, function(node) {
      if (feature === node.feature) {
        nodesToRemove.push(node);
      }
    });
    for (let i = nodesToRemove.length - 1; i >= 0; --i) {
      rBush.remove(nodesToRemove[i]);
    }
  }

  if (unregister) {
    Object(events["e" /* unlistenByKey */])(this.featureChangeListenerKeys_[feature_uid]);
    delete this.featureChangeListenerKeys_[feature_uid];
  }
};


/**
 * @inheritDoc
 */
Snap.prototype.setMap = function(map) {
  const currentMap = this.getMap();
  const keys = this.featuresListenerKeys_;
  const features = this.getFeatures_();

  if (currentMap) {
    keys.forEach(events["e" /* unlistenByKey */]);
    keys.length = 0;
    features.forEach(this.forEachFeatureRemove_.bind(this));
  }
  Pointer["b" /* default */].prototype.setMap.call(this, map);

  if (map) {
    if (this.features_) {
      keys.push(
        Object(events["a" /* listen */])(this.features_, CollectionEventType["a" /* default */].ADD,
          this.handleFeatureAdd_, this),
        Object(events["a" /* listen */])(this.features_, CollectionEventType["a" /* default */].REMOVE,
          this.handleFeatureRemove_, this)
      );
    } else if (this.source_) {
      keys.push(
        Object(events["a" /* listen */])(this.source_, VectorEventType["a" /* default */].ADDFEATURE,
          this.handleFeatureAdd_, this),
        Object(events["a" /* listen */])(this.source_, VectorEventType["a" /* default */].REMOVEFEATURE,
          this.handleFeatureRemove_, this)
      );
    }
    features.forEach(this.forEachFeatureAdd_.bind(this));
  }
};


/**
 * @inheritDoc
 */
Snap.prototype.shouldStopEvent = functions["a" /* FALSE */];


/**
 * @param {module:ol~Pixel} pixel Pixel
 * @param {module:ol/coordinate~Coordinate} pixelCoordinate Coordinate
 * @param {module:ol/PluggableMap} map Map.
 * @return {module:ol/interaction/Snap~Result} Snap result
 */
Snap.prototype.snapTo = function(pixel, pixelCoordinate, map) {

  const lowerLeft = map.getCoordinateFromPixel(
    [pixel[0] - this.pixelTolerance_, pixel[1] + this.pixelTolerance_]);
  const upperRight = map.getCoordinateFromPixel(
    [pixel[0] + this.pixelTolerance_, pixel[1] - this.pixelTolerance_]);
  const box = Object(ol_extent["b" /* boundingExtent */])([lowerLeft, upperRight]);

  let segments = this.rBush_.getInExtent(box);

  // If snapping on vertices only, don't consider circles
  if (this.vertex_ && !this.edge_) {
    segments = segments.filter(function(segment) {
      return segment.feature.getGeometry().getType() !==
          GeometryType["a" /* default */].CIRCLE;
    });
  }

  let snappedToVertex = false;
  let snapped = false;
  let vertex = null;
  let vertexPixel = null;
  let dist, pixel1, pixel2, squaredDist1, squaredDist2;
  if (segments.length > 0) {
    this.pixelCoordinate_ = pixelCoordinate;
    segments.sort(this.sortByDistance_);
    const closestSegment = segments[0].segment;
    const isCircle = segments[0].feature.getGeometry().getType() ===
        GeometryType["a" /* default */].CIRCLE;
    if (this.vertex_ && !this.edge_) {
      pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
      pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
      squaredDist1 = Object(ol_coordinate["j" /* squaredDistance */])(pixel, pixel1);
      squaredDist2 = Object(ol_coordinate["j" /* squaredDistance */])(pixel, pixel2);
      dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
      snappedToVertex = dist <= this.pixelTolerance_;
      if (snappedToVertex) {
        snapped = true;
        vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
        vertexPixel = map.getPixelFromCoordinate(vertex);
      }
    } else if (this.edge_) {
      if (isCircle) {
        vertex = Object(ol_coordinate["b" /* closestOnCircle */])(pixelCoordinate,
          /** @type {module:ol/geom/Circle} */ (segments[0].feature.getGeometry()));
      } else {
        vertex = Object(ol_coordinate["c" /* closestOnSegment */])(pixelCoordinate, closestSegment);
      }
      vertexPixel = map.getPixelFromCoordinate(vertex);
      if (Object(ol_coordinate["f" /* distance */])(pixel, vertexPixel) <= this.pixelTolerance_) {
        snapped = true;
        if (this.vertex_ && !isCircle) {
          pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
          pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
          squaredDist1 = Object(ol_coordinate["j" /* squaredDistance */])(vertexPixel, pixel1);
          squaredDist2 = Object(ol_coordinate["j" /* squaredDistance */])(vertexPixel, pixel2);
          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
          snappedToVertex = dist <= this.pixelTolerance_;
          if (snappedToVertex) {
            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
            vertexPixel = map.getPixelFromCoordinate(vertex);
          }
        }
      }
    }
    if (snapped) {
      vertexPixel = [Math.round(vertexPixel[0]), Math.round(vertexPixel[1])];
    }
  }
  return (
    /** @type {module:ol/interaction/Snap~Result} */ ({
      snapped: snapped,
      vertex: vertex,
      vertexPixel: vertexPixel
    })
  );
};


/**
 * @param {module:ol/Feature} feature Feature
 * @private
 */
Snap.prototype.updateFeature_ = function(feature) {
  this.removeFeature(feature, false);
  this.addFeature(feature, false);
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/Circle} geometry Geometry.
 * @private
 */
Snap.prototype.writeCircleGeometry_ = function(feature, geometry) {
  const polygon = Object(Polygon["c" /* fromCircle */])(geometry);
  const coordinates = polygon.getCoordinates()[0];
  for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
    const segment = coordinates.slice(i, i + 2);
    const segmentData = /** @type {module:ol/interaction/Snap~SegmentData} */ ({
      feature: feature,
      segment: segment
    });
    this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(segment), segmentData);
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/GeometryCollection} geometry Geometry.
 * @private
 */
Snap.prototype.writeGeometryCollectionGeometry_ = function(feature, geometry) {
  const geometries = geometry.getGeometriesArray();
  for (let i = 0; i < geometries.length; ++i) {
    const segmentWriter = this.SEGMENT_WRITERS_[geometries[i].getType()];
    if (segmentWriter) {
      segmentWriter.call(this, feature, geometries[i]);
    }
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/LineString} geometry Geometry.
 * @private
 */
Snap.prototype.writeLineStringGeometry_ = function(feature, geometry) {
  const coordinates = geometry.getCoordinates();
  for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
    const segment = coordinates.slice(i, i + 2);
    const segmentData = /** @type {module:ol/interaction/Snap~SegmentData} */ ({
      feature: feature,
      segment: segment
    });
    this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(segment), segmentData);
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/MultiLineString} geometry Geometry.
 * @private
 */
Snap.prototype.writeMultiLineStringGeometry_ = function(feature, geometry) {
  const lines = geometry.getCoordinates();
  for (let j = 0, jj = lines.length; j < jj; ++j) {
    const coordinates = lines[j];
    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
      const segment = coordinates.slice(i, i + 2);
      const segmentData = /** @type {module:ol/interaction/Snap~SegmentData} */ ({
        feature: feature,
        segment: segment
      });
      this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(segment), segmentData);
    }
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/MultiPoint} geometry Geometry.
 * @private
 */
Snap.prototype.writeMultiPointGeometry_ = function(feature, geometry) {
  const points = geometry.getCoordinates();
  for (let i = 0, ii = points.length; i < ii; ++i) {
    const coordinates = points[i];
    const segmentData = /** @type {module:ol/interaction/Snap~SegmentData} */ ({
      feature: feature,
      segment: [coordinates, coordinates]
    });
    this.rBush_.insert(geometry.getExtent(), segmentData);
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/MultiPolygon} geometry Geometry.
 * @private
 */
Snap.prototype.writeMultiPolygonGeometry_ = function(feature, geometry) {
  const polygons = geometry.getCoordinates();
  for (let k = 0, kk = polygons.length; k < kk; ++k) {
    const rings = polygons[k];
    for (let j = 0, jj = rings.length; j < jj; ++j) {
      const coordinates = rings[j];
      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        const segment = coordinates.slice(i, i + 2);
        const segmentData = /** @type {module:ol/interaction/Snap~SegmentData} */ ({
          feature: feature,
          segment: segment
        });
        this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(segment), segmentData);
      }
    }
  }
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/Point} geometry Geometry.
 * @private
 */
Snap.prototype.writePointGeometry_ = function(feature, geometry) {
  const coordinates = geometry.getCoordinates();
  const segmentData = /** @type {module:ol/interaction/Snap~SegmentData} */ ({
    feature: feature,
    segment: [coordinates, coordinates]
  });
  this.rBush_.insert(geometry.getExtent(), segmentData);
};


/**
 * @param {module:ol/Feature} feature Feature
 * @param {module:ol/geom/Polygon} geometry Geometry.
 * @private
 */
Snap.prototype.writePolygonGeometry_ = function(feature, geometry) {
  const rings = geometry.getCoordinates();
  for (let j = 0, jj = rings.length; j < jj; ++j) {
    const coordinates = rings[j];
    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
      const segment = coordinates.slice(i, i + 2);
      const segmentData = /** @type {module:ol/interaction/Snap~SegmentData} */ ({
        feature: feature,
        segment: segment
      });
      this.rBush_.insert(Object(ol_extent["b" /* boundingExtent */])(segment), segmentData);
    }
  }
};


/**
 * Handle all pointer events events.
 * @param {module:ol/MapBrowserEvent} evt A move event.
 * @return {boolean} Pass the event to other interactions.
 * @this {module:ol/interaction/Snap}
 */
function Snap_handleEvent(evt) {
  const result = this.snapTo(evt.pixel, evt.coordinate, evt.map);
  if (result.snapped) {
    evt.coordinate = result.vertex.slice(0, 2);
    evt.pixel = result.vertexPixel;
  }
  return Pointer["c" /* handleEvent */].call(this, evt);
}


/**
 * @param {module:ol/MapBrowserPointerEvent} evt Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/Snap}
 */
function Snap_handleUpEvent(evt) {
  const featuresToUpdate = Object(obj["c" /* getValues */])(this.pendingFeatures_);
  if (featuresToUpdate.length) {
    featuresToUpdate.forEach(this.updateFeature_.bind(this));
    this.pendingFeatures_ = {};
  }
  return false;
}


/**
 * Sort segments by distance, helper function
 * @param {module:ol/interaction/Snap~SegmentData} a The first segment data.
 * @param {module:ol/interaction/Snap~SegmentData} b The second segment data.
 * @return {number} The difference in distance.
 * @this {module:ol/interaction/Snap}
 */
function Snap_sortByDistance(a, b) {
  const deltaA = Object(ol_coordinate["k" /* squaredDistanceToSegment */])(this.pixelCoordinate_, a.segment);
  const deltaB = Object(ol_coordinate["k" /* squaredDistanceToSegment */])(this.pixelCoordinate_, b.segment);
  return deltaA - deltaB;
}

/* harmony default export */ var interaction_Snap = (Snap);

// EXTERNAL MODULE: ../src/ol/Object.js
var ol_Object = __webpack_require__(31);

// EXTERNAL MODULE: ../src/ol/interaction/Property.js
var Property = __webpack_require__(176);

// CONCATENATED MODULE: ../src/ol/interaction/Translate.js
/**
 * @module ol/interaction/Translate
 */











/**
 * @enum {string}
 */
const TranslateEventType = {
  /**
   * Triggered upon feature translation start.
   * @event TranslateEvent#translatestart
   * @api
   */
  TRANSLATESTART: 'translatestart',
  /**
   * Triggered upon feature translation.
   * @event TranslateEvent#translating
   * @api
   */
  TRANSLATING: 'translating',
  /**
   * Triggered upon feature translation end.
   * @event TranslateEvent#translateend
   * @api
   */
  TRANSLATEEND: 'translateend'
};


/**
 * @typedef {Object} Options
 * @property {module:ol/Collection.<module:ol/Feature>} [features] Only features contained in this collection will be able to be translated. If
 * not specified, all features on the map will be able to be translated.
 * @property {Array.<module:ol/layer/Layer>|function(module:ol/layer/Layer): boolean} [layers] A list of layers from which features should be
 * translated. Alternatively, a filter function can be provided. The
 * function will be called for each layer in the map and should return
 * `true` for layers that you want to be translatable. If the option is
 * absent, all visible layers will be considered translatable.
 * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position
 * will be checked for features. This only works for the canvas renderer and
 * not for WebGL.
 */


/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Translate~Translate} instances
 * are instances of this type.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {module:ol/interaction/Translate~TranslateEventType} type Type.
 * @param {module:ol/Collection.<module:ol/Feature>} features The features translated.
 * @param {module:ol/coordinate~Coordinate} coordinate The event coordinate.
 */
const TranslateEvent = function(type, features, coordinate) {

  Event["a" /* default */].call(this, type);

  /**
   * The features being translated.
   * @type {module:ol/Collection.<module:ol/Feature>}
   * @api
   */
  this.features = features;

  /**
   * The coordinate of the drag event.
   * @const
   * @type {module:ol/coordinate~Coordinate}
   * @api
   */
  this.coordinate = coordinate;
};

Object(util["c" /* inherits */])(TranslateEvent, Event["a" /* default */]);


/**
 * @classdesc
 * Interaction for translating (moving) features.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @fires module:ol/interaction/Translate~TranslateEvent
 * @param {module:ol/interaction/Translate~Options=} opt_options Options.
 * @api
 */
const Translate = function(opt_options) {
  Pointer["b" /* default */].call(this, {
    handleDownEvent: Translate_handleDownEvent,
    handleDragEvent: Translate_handleDragEvent,
    handleMoveEvent: handleMoveEvent,
    handleUpEvent: Translate_handleUpEvent
  });

  const options = opt_options ? opt_options : {};

  /**
   * The last position we translated to.
   * @type {module:ol/coordinate~Coordinate}
   * @private
   */
  this.lastCoordinate_ = null;


  /**
   * @type {module:ol/Collection.<module:ol/Feature>}
   * @private
   */
  this.features_ = options.features !== undefined ? options.features : null;

  /** @type {function(module:ol/layer/Layer): boolean} */
  let layerFilter;
  if (options.layers) {
    if (typeof options.layers === 'function') {
      layerFilter = options.layers;
    } else {
      const layers = options.layers;
      layerFilter = function(layer) {
        return Object(array["f" /* includes */])(layers, layer);
      };
    }
  } else {
    layerFilter = functions["b" /* TRUE */];
  }

  /**
   * @private
   * @type {function(module:ol/layer/Layer): boolean}
   */
  this.layerFilter_ = layerFilter;

  /**
   * @private
   * @type {number}
   */
  this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

  /**
   * @type {module:ol/Feature}
   * @private
   */
  this.lastFeature_ = null;

  Object(events["a" /* listen */])(this,
    Object(ol_Object["b" /* getChangeEventType */])(Property["a" /* default */].ACTIVE),
    this.handleActiveChanged_, this);

};

Object(util["c" /* inherits */])(Translate, Pointer["b" /* default */]);


/**
 * @param {module:ol/MapBrowserPointerEvent} event Event.
 * @return {boolean} Start drag sequence?
 * @this {module:ol/interaction/Translate}
 */
function Translate_handleDownEvent(event) {
  this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
  if (!this.lastCoordinate_ && this.lastFeature_) {
    this.lastCoordinate_ = event.coordinate;
    handleMoveEvent.call(this, event);

    const features = this.features_ || new Collection["b" /* default */]([this.lastFeature_]);

    this.dispatchEvent(
      new TranslateEvent(
        TranslateEventType.TRANSLATESTART, features,
        event.coordinate));
    return true;
  }
  return false;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} event Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/Translate}
 */
function Translate_handleUpEvent(event) {
  if (this.lastCoordinate_) {
    this.lastCoordinate_ = null;
    handleMoveEvent.call(this, event);

    const features = this.features_ || new Collection["b" /* default */]([this.lastFeature_]);

    this.dispatchEvent(
      new TranslateEvent(
        TranslateEventType.TRANSLATEEND, features,
        event.coordinate));
    return true;
  }
  return false;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} event Event.
 * @this {module:ol/interaction/Translate}
 */
function Translate_handleDragEvent(event) {
  if (this.lastCoordinate_) {
    const newCoordinate = event.coordinate;
    const deltaX = newCoordinate[0] - this.lastCoordinate_[0];
    const deltaY = newCoordinate[1] - this.lastCoordinate_[1];

    const features = this.features_ || new Collection["b" /* default */]([this.lastFeature_]);

    features.forEach(function(feature) {
      const geom = feature.getGeometry();
      geom.translate(deltaX, deltaY);
      feature.setGeometry(geom);
    });

    this.lastCoordinate_ = newCoordinate;
    this.dispatchEvent(
      new TranslateEvent(
        TranslateEventType.TRANSLATING, features,
        newCoordinate));
  }
}


/**
 * @param {module:ol/MapBrowserEvent} event Event.
 * @this {module:ol/interaction/Translate}
 */
function handleMoveEvent(event) {
  const elem = event.map.getViewport();

  // Change the cursor to grab/grabbing if hovering any of the features managed
  // by the interaction
  if (this.featuresAtPixel_(event.pixel, event.map)) {
    elem.classList.remove(this.lastCoordinate_ ? 'ol-grab' : 'ol-grabbing');
    elem.classList.add(this.lastCoordinate_ ? 'ol-grabbing' : 'ol-grab');
  } else {
    elem.classList.remove('ol-grab', 'ol-grabbing');
  }
}


/**
 * Tests to see if the given coordinates intersects any of our selected
 * features.
 * @param {module:ol~Pixel} pixel Pixel coordinate to test for intersection.
 * @param {module:ol/PluggableMap} map Map to test the intersection on.
 * @return {module:ol/Feature} Returns the feature found at the specified pixel
 * coordinates.
 * @private
 */
Translate.prototype.featuresAtPixel_ = function(pixel, map) {
  return map.forEachFeatureAtPixel(pixel,
    function(feature) {
      if (!this.features_ || Object(array["f" /* includes */])(this.features_.getArray(), feature)) {
        return feature;
      }
    }.bind(this), {
      layerFilter: this.layerFilter_,
      hitTolerance: this.hitTolerance_
    });
};


/**
 * Returns the Hit-detection tolerance.
 * @returns {number} Hit tolerance in pixels.
 * @api
 */
Translate.prototype.getHitTolerance = function() {
  return this.hitTolerance_;
};


/**
 * Hit-detection tolerance. Pixels inside the radius around the given position
 * will be checked for features. This only works for the canvas renderer and
 * not for WebGL.
 * @param {number} hitTolerance Hit tolerance in pixels.
 * @api
 */
Translate.prototype.setHitTolerance = function(hitTolerance) {
  this.hitTolerance_ = hitTolerance;
};


/**
 * @inheritDoc
 */
Translate.prototype.setMap = function(map) {
  const oldMap = this.getMap();
  Pointer["b" /* default */].prototype.setMap.call(this, map);
  this.updateState_(oldMap);
};


/**
 * @private
 */
Translate.prototype.handleActiveChanged_ = function() {
  this.updateState_(null);
};


/**
 * @param {module:ol/PluggableMap} oldMap Old map.
 * @private
 */
Translate.prototype.updateState_ = function(oldMap) {
  let map = this.getMap();
  const active = this.getActive();
  if (!map || !active) {
    map = map || oldMap;
    if (map) {
      const elem = map.getViewport();
      elem.classList.remove('ol-grab', 'ol-grabbing');
    }
  }
};


/* harmony default export */ var interaction_Translate = (Translate);

// CONCATENATED MODULE: ../src/ol/interaction.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return defaults; });
/* unused concated harmony import DoubleClickZoom */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return interaction_DoubleClickZoom; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "a", function() { return interaction_DragAndDrop; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "b", function() { return interaction_DragBox; });
/* unused concated harmony import DragPan */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return interaction_DragPan; });
/* unused concated harmony import DragRotate */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return interaction_DragRotate; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "c", function() { return interaction_DragRotateAndZoom; });
/* unused concated harmony import DragZoom */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return interaction_DragZoom; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "d", function() { return Draw["c" /* default */]; });
/* unused concated harmony import Extent */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Extent["a" /* default */]; });
/* unused concated harmony import Interaction */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Interaction["a" /* default */]; });
/* unused concated harmony import KeyboardPan */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return interaction_KeyboardPan; });
/* unused concated harmony import KeyboardZoom */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return interaction_KeyboardZoom; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "e", function() { return interaction_Modify; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "f", function() { return interaction_MouseWheelZoom; });
/* unused concated harmony import PinchRotate */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return interaction_PinchRotate; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "g", function() { return interaction_PinchZoom; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "h", function() { return Pointer["b" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "i", function() { return Select["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "j", function() { return interaction_Snap; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "k", function() { return interaction_Translate; });
/**
 * @module ol/interaction
 */


































/**
 * @typedef {Object} DefaultsOptions
 * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
 * desired.
 * @property {boolean} [constrainResolution=false] Zoom to the closest integer
 * zoom level after the wheel/trackpad or pinch gesture ends.
 * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
 * desired.
 * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
 * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
 * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
 * @property {boolean} [dragPan=true] Whether drag pan is desired.
 * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
 * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
 * @property {number} [zoomDelta] Zoom level delta when using keyboard or
 * mousewheel zoom.
 * @property {number} [zoomDuration] Duration of the zoom animation in
 * milliseconds.
 */


/**
 * Set of interactions included in maps by default. Specific interactions can be
 * excluded by setting the appropriate option to false in the constructor
 * options, but the order of the interactions is fixed.  If you want to specify
 * a different order for interactions, you will need to create your own
 * {@link module:ol/interaction/Interaction} instances and insert
 * them into a {@link module:ol/Collection} in the order you want
 * before creating your {@link module:ol/Map~Map} instance. The default set of
 * interactions, in sequence, is:
 * * {@link module:ol/interaction/DragRotate~DragRotate}
 * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
 * * {@link module:ol/interaction/DragPan~DragPan}
 * * {@link module:ol/interaction/PinchRotate~PinchRotate}
 * * {@link module:ol/interaction/PinchZoom~PinchZoom}
 * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
 * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
 * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
 * * {@link module:ol/interaction/DragZoom~DragZoom}
 *
 * @param {module:ol/interaction/Interaction~DefaultsOptions=} opt_options
 * Defaults options.
 * @return {module:ol/Collection.<module:ol/interaction/Interaction>}
 * A collection of interactions to be used with the {@link module:ol/Map~Map}
 * constructor's `interactions` option.
 * @api
 */
function defaults(opt_options) {

  const options = opt_options ? opt_options : {};

  const interactions = new Collection["b" /* default */]();

  const kinetic = new Kinetic["a" /* default */](-0.005, 0.05, 100);

  const altShiftDragRotate = options.altShiftDragRotate !== undefined ?
    options.altShiftDragRotate : true;
  if (altShiftDragRotate) {
    interactions.push(new interaction_DragRotate());
  }

  const doubleClickZoom = options.doubleClickZoom !== undefined ?
    options.doubleClickZoom : true;
  if (doubleClickZoom) {
    interactions.push(new interaction_DoubleClickZoom({
      delta: options.zoomDelta,
      duration: options.zoomDuration
    }));
  }

  const dragPan = options.dragPan !== undefined ? options.dragPan : true;
  if (dragPan) {
    interactions.push(new interaction_DragPan({
      kinetic: kinetic
    }));
  }

  const pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate :
    true;
  if (pinchRotate) {
    interactions.push(new interaction_PinchRotate());
  }

  const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
  if (pinchZoom) {
    interactions.push(new interaction_PinchZoom({
      constrainResolution: options.constrainResolution,
      duration: options.zoomDuration
    }));
  }

  const keyboard = options.keyboard !== undefined ? options.keyboard : true;
  if (keyboard) {
    interactions.push(new interaction_KeyboardPan());
    interactions.push(new interaction_KeyboardZoom({
      delta: options.zoomDelta,
      duration: options.zoomDuration
    }));
  }

  const mouseWheelZoom = options.mouseWheelZoom !== undefined ?
    options.mouseWheelZoom : true;
  if (mouseWheelZoom) {
    interactions.push(new interaction_MouseWheelZoom({
      constrainResolution: options.constrainResolution,
      duration: options.zoomDuration
    }));
  }

  const shiftDragZoom = options.shiftDragZoom !== undefined ?
    options.shiftDragZoom : true;
  if (shiftDragZoom) {
    interactions.push(new interaction_DragZoom({
      duration: options.zoomDuration
    }));
  }

  return interactions;

}


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return closestOnCircle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return closestOnSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return createStringXY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return degreesToStringHDMS; });
/* unused harmony export format */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return squaredDistanceToSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return toStringHDMS; });
/* unused harmony export toStringXY */
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(117);
/**
 * @module ol/coordinate
 */




/**
 * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
 * @typedef {Array.<number>} Coordinate
 * @api
 */


/**
 * A function that takes a {@link module:ol/coordinate~Coordinate} and
 * transforms it into a `{string}`.
 *
 * @typedef {function((module:ol/coordinate~Coordinate|undefined)): string} CoordinateFormat
 * @api
 */


/**
 * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
 * by the function.
 *
 * Example:
 *
 *     import {add} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     add(coord, [-2, 4]);
 *     // coord is now [5.85, 51.983333]
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/coordinate~Coordinate} delta Delta.
 * @return {module:ol/coordinate~Coordinate} The input coordinate adjusted by
 * the given delta.
 * @api
 */
function add(coordinate, delta) {
  coordinate[0] += delta[0];
  coordinate[1] += delta[1];
  return coordinate;
}


/**
 * Calculates the point closest to the passed coordinate on the passed circle.
 *
 * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.
 * @param {module:ol/geom/Circle} circle The circle.
 * @return {module:ol/coordinate~Coordinate} Closest point on the circumference.
 */
function closestOnCircle(coordinate, circle) {
  const r = circle.getRadius();
  const center = circle.getCenter();
  const x0 = center[0];
  const y0 = center[1];
  const x1 = coordinate[0];
  const y1 = coordinate[1];

  let dx = x1 - x0;
  const dy = y1 - y0;
  if (dx === 0 && dy === 0) {
    dx = 1;
  }
  const d = Math.sqrt(dx * dx + dy * dy);

  const x = x0 + r * dx / d;
  const y = y0 + r * dy / d;

  return [x, y];
}


/**
 * Calculates the point closest to the passed coordinate on the passed segment.
 * This is the foot of the perpendicular of the coordinate to the segment when
 * the foot is on the segment, or the closest segment coordinate when the foot
 * is outside the segment.
 *
 * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.
 * @param {Array.<module:ol/coordinate~Coordinate>} segment The two coordinates
 * of the segment.
 * @return {module:ol/coordinate~Coordinate} The foot of the perpendicular of
 * the coordinate to the segment.
 */
function closestOnSegment(coordinate, segment) {
  const x0 = coordinate[0];
  const y0 = coordinate[1];
  const start = segment[0];
  const end = segment[1];
  const x1 = start[0];
  const y1 = start[1];
  const x2 = end[0];
  const y2 = end[1];
  const dx = x2 - x1;
  const dy = y2 - y1;
  const along = (dx === 0 && dy === 0) ? 0 :
    ((dx * (x0 - x1)) + (dy * (y0 - y1))) / ((dx * dx + dy * dy) || 0);
  let x, y;
  if (along <= 0) {
    x = x1;
    y = y1;
  } else if (along >= 1) {
    x = x2;
    y = y2;
  } else {
    x = x1 + along * dx;
    y = y1 + along * dy;
  }
  return [x, y];
}


/**
 * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be
 * used to format
 * a {module:ol/coordinate~Coordinate} to a string.
 *
 * Example without specifying the fractional digits:
 *
 *     import {createStringXY} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var stringifyFunc = createStringXY();
 *     var out = stringifyFunc(coord);
 *     // out is now '8, 48'
 *
 * Example with explicitly specifying 2 fractional digits:
 *
 *     import {createStringXY} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var stringifyFunc = createStringXY(2);
 *     var out = stringifyFunc(coord);
 *     // out is now '7.85, 47.98'
 *
 * @param {number=} opt_fractionDigits The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {module:ol/coordinate~CoordinateFormat} Coordinate format.
 * @api
 */
function createStringXY(opt_fractionDigits) {
  return (
    /**
     * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
     * @return {string} String XY.
     */
    function(coordinate) {
      return toStringXY(coordinate, opt_fractionDigits);
    }
  );
}


/**
 * @param {string} hemispheres Hemispheres.
 * @param {number} degrees Degrees.
 * @param {number=} opt_fractionDigits The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {string} String.
 */
function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {
  const normalizedDegrees = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* modulo */ "d"])(degrees + 180, 360) - 180;
  const x = Math.abs(3600 * normalizedDegrees);
  const dflPrecision = opt_fractionDigits || 0;
  const precision = Math.pow(10, dflPrecision);

  let deg = Math.floor(x / 3600);
  let min = Math.floor((x - deg * 3600) / 60);
  let sec = x - (deg * 3600) - (min * 60);
  sec = Math.ceil(sec * precision) / precision;

  if (sec >= 60) {
    sec = 0;
    min += 1;
  }

  if (min >= 60) {
    min = 0;
    deg += 1;
  }

  return deg + '\u00b0 ' + Object(_string_js__WEBPACK_IMPORTED_MODULE_1__[/* padNumber */ "b"])(min, 2) + '\u2032 ' +
    Object(_string_js__WEBPACK_IMPORTED_MODULE_1__[/* padNumber */ "b"])(sec, 2, dflPrecision) + '\u2033' +
    (normalizedDegrees == 0 ? '' : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));
}


/**
 * Transforms the given {@link module:ol/coordinate~Coordinate} to a string
 * using the given string template. The strings `{x}` and `{y}` in the template
 * will be replaced with the first and second coordinate values respectively.
 *
 * Example without specifying the fractional digits:
 *
 *     import {format} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var template = 'Coordinate is ({x}|{y}).';
 *     var out = format(coord, template);
 *     // out is now 'Coordinate is (8|48).'
 *
 * Example explicitly specifying the fractional digits:
 *
 *     import {format} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var template = 'Coordinate is ({x}|{y}).';
 *     var out = format(coord, template, 2);
 *     // out is now 'Coordinate is (7.85|47.98).'
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {string} template A template string with `{x}` and `{y}` placeholders
 *     that will be replaced by first and second coordinate values.
 * @param {number=} opt_fractionDigits The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {string} Formatted coordinate.
 * @api
 */
function format(coordinate, template, opt_fractionDigits) {
  if (coordinate) {
    return template
      .replace('{x}', coordinate[0].toFixed(opt_fractionDigits))
      .replace('{y}', coordinate[1].toFixed(opt_fractionDigits));
  } else {
    return '';
  }
}


/**
 * @param {module:ol/coordinate~Coordinate} coordinate1 First coordinate.
 * @param {module:ol/coordinate~Coordinate} coordinate2 Second coordinate.
 * @return {boolean} The two coordinates are equal.
 */
function equals(coordinate1, coordinate2) {
  let equals = true;
  for (let i = coordinate1.length - 1; i >= 0; --i) {
    if (coordinate1[i] != coordinate2[i]) {
      equals = false;
      break;
    }
  }
  return equals;
}


/**
 * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
 * returned by the function.
 *
 * Example:
 *
 *     import {rotate} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var rotateRadians = Math.PI / 2; // 90 degrees
 *     rotate(coord, rotateRadians);
 *     // coord is now [-47.983333, 7.85]
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} angle Angle in radian.
 * @return {module:ol/coordinate~Coordinate} Coordinate.
 * @api
 */
function rotate(coordinate, angle) {
  const cosAngle = Math.cos(angle);
  const sinAngle = Math.sin(angle);
  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
  coordinate[0] = x;
  coordinate[1] = y;
  return coordinate;
}


/**
 * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
 * by the function.
 *
 * Example:
 *
 *     import {scale as scaleCoordinate} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var scale = 1.2;
 *     scaleCoordinate(coord, scale);
 *     // coord is now [9.42, 57.5799996]
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} scale Scale factor.
 * @return {module:ol/coordinate~Coordinate} Coordinate.
 */
function scale(coordinate, scale) {
  coordinate[0] *= scale;
  coordinate[1] *= scale;
  return coordinate;
}


/**
 * @param {module:ol/coordinate~Coordinate} coord1 First coordinate.
 * @param {module:ol/coordinate~Coordinate} coord2 Second coordinate.
 * @return {number} Squared distance between coord1 and coord2.
 */
function squaredDistance(coord1, coord2) {
  const dx = coord1[0] - coord2[0];
  const dy = coord1[1] - coord2[1];
  return dx * dx + dy * dy;
}


/**
 * @param {module:ol/coordinate~Coordinate} coord1 First coordinate.
 * @param {module:ol/coordinate~Coordinate} coord2 Second coordinate.
 * @return {number} Distance between coord1 and coord2.
 */
function distance(coord1, coord2) {
  return Math.sqrt(squaredDistance(coord1, coord2));
}


/**
 * Calculate the squared distance from a coordinate to a line segment.
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate of the point.
 * @param {Array.<module:ol/coordinate~Coordinate>} segment Line segment (2
 * coordinates).
 * @return {number} Squared distance from the point to the line segment.
 */
function squaredDistanceToSegment(coordinate, segment) {
  return squaredDistance(coordinate,
    closestOnSegment(coordinate, segment));
}


/**
 * Format a geographic coordinate with the hemisphere, degrees, minutes, and
 * seconds.
 *
 * Example without specifying fractional digits:
 *
 *     import {toStringHDMS} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var out = toStringHDMS(coord);
 *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'
 *
 * Example explicitly specifying 1 fractional digit:
 *
 *     import {toStringHDMS} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var out = toStringHDMS(coord, 1);
 *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number=} opt_fractionDigits The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {string} Hemisphere, degrees, minutes and seconds.
 * @api
 */
function toStringHDMS(coordinate, opt_fractionDigits) {
  if (coordinate) {
    return degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) + ' ' +
        degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits);
  } else {
    return '';
  }
}


/**
 * Format a coordinate as a comma delimited string.
 *
 * Example without specifying fractional digits:
 *
 *     import {toStringXY} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var out = toStringXY(coord);
 *     // out is now '8, 48'
 *
 * Example explicitly specifying 1 fractional digit:
 *
 *     import {toStringXY} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var out = toStringXY(coord, 1);
 *     // out is now '7.8, 48.0'
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number=} opt_fractionDigits The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {string} XY.
 * @api
 */
function toStringXY(coordinate, opt_fractionDigits) {
  return format(coordinate, '{x}, {y}', opt_fractionDigits);
}


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/ImageState
 */

/**
 * @enum {number}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  IDLE: 0,
  LOADING: 1,
  LOADED: 2,
  ERROR: 3
});


/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return stopPropagation; });
/* unused harmony export preventDefault */
/**
 * @module ol/events/Event
 */
/**
 * @classdesc
 * Stripped down implementation of the W3C DOM Level 2 Event interface.
 * @see {@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface}
 *
 * This implementation only provides `type` and `target` properties, and
 * `stopPropagation` and `preventDefault` methods. It is meant as base class
 * for higher level events defined in the library, and works with
 * {@link module:ol/events/EventTarget~EventTarget}.
 *
 * @constructor
 * @param {string} type Type.
 */
const Event = function(type) {

  /**
   * @type {boolean}
   */
  this.propagationStopped;

  /**
   * The event type.
   * @type {string}
   * @api
   */
  this.type = type;

  /**
   * The event target.
   * @type {Object}
   * @api
   */
  this.target = null;

};


/**
 * Stop event propagation.
 * @function
 * @api
 */
Event.prototype.preventDefault =

  /**
   * Stop event propagation.
   * @function
   * @api
   */
  Event.prototype.stopPropagation = function() {
    this.propagationStopped = true;
  };


/**
 * @param {Event|module:ol/events/Event} evt Event
 */
function stopPropagation(evt) {
  evt.stopPropagation();
}


/**
 * @param {Event|module:ol/events/Event} evt Event
 */
function preventDefault(evt) {
  evt.preventDefault();
}

/* harmony default export */ __webpack_exports__["a"] = (Event);


/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return altKeyOnly; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return altShiftKeysOnly; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return focus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return always; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return click; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return mouseActionButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return never; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return pointerMove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return singleClick; });
/* unused harmony export doubleClick */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return noModifierKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return platformModifierKeyOnly; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return shiftKeyOnly; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return targetNotEditable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return mouseOnly; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return primaryAction; });
/* harmony import */ var _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(29);
/* harmony import */ var _has_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48);
/**
 * @module ol/events/condition
 */






/**
 * A function that takes an {@link module:ol/MapBrowserEvent} and returns a
 * `{boolean}`. If the condition is met, true should be returned.
 *
 * @typedef {function(this: ?, module:ol/MapBrowserEvent): boolean} Condition
 */


/**
 * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when
 * additionally the shift-key is pressed).
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if only the alt key is pressed.
 * @api
 */
const altKeyOnly = function(mapBrowserEvent) {
  const originalEvent = mapBrowserEvent.originalEvent;
  return (
    originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      !originalEvent.shiftKey);
};


/**
 * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
 * (e.g. when additionally the platform-modifier-key is pressed).
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if only the alt and shift keys are pressed.
 * @api
 */
const altShiftKeysOnly = function(mapBrowserEvent) {
  const originalEvent = mapBrowserEvent.originalEvent;
  return (
    originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      originalEvent.shiftKey);
};


/**
 * Return `true` if the map has the focus. This condition requires a map target
 * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
 *
 * @param {module:ol/MapBrowserEvent} event Map browser event.
 * @return {boolean} The map has the focus.
 * @api
 */
const focus = function(event) {
  return event.target.getTargetElement() === document.activeElement;
};


/**
 * Return always true.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True.
 * @function
 * @api
 */
const always = _functions_js__WEBPACK_IMPORTED_MODULE_2__[/* TRUE */ "b"];


/**
 * Return `true` if the event is a `click` event, `false` otherwise.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if the event is a map `click` event.
 * @api
 */
const click = function(mapBrowserEvent) {
  return mapBrowserEvent.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].CLICK;
};


/**
 * Return `true` if the event has an "action"-producing mouse button.
 *
 * By definition, this includes left-click on windows/linux, and left-click
 * without the ctrl key on Macs.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} The result.
 */
const mouseActionButton = function(mapBrowserEvent) {
  const originalEvent = mapBrowserEvent.originalEvent;
  return originalEvent.button == 0 &&
      !(_has_js__WEBPACK_IMPORTED_MODULE_3__[/* WEBKIT */ "k"] && _has_js__WEBPACK_IMPORTED_MODULE_3__[/* MAC */ "e"] && originalEvent.ctrlKey);
};


/**
 * Return always false.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} False.
 * @function
 * @api
 */
const never = _functions_js__WEBPACK_IMPORTED_MODULE_2__[/* FALSE */ "a"];


/**
 * Return `true` if the browser event is a `pointermove` event, `false`
 * otherwise.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if the browser event is a `pointermove` event.
 * @api
 */
const pointerMove = function(mapBrowserEvent) {
  return mapBrowserEvent.type == 'pointermove';
};


/**
 * Return `true` if the event is a map `singleclick` event, `false` otherwise.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if the event is a map `singleclick` event.
 * @api
 */
const singleClick = function(mapBrowserEvent) {
  return mapBrowserEvent.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].SINGLECLICK;
};


/**
 * Return `true` if the event is a map `dblclick` event, `false` otherwise.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if the event is a map `dblclick` event.
 * @api
 */
const doubleClick = function(mapBrowserEvent) {
  return mapBrowserEvent.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DBLCLICK;
};


/**
 * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
 * pressed.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True only if there no modifier keys are pressed.
 * @api
 */
const noModifierKeys = function(mapBrowserEvent) {
  const originalEvent = mapBrowserEvent.originalEvent;
  return (
    !originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      !originalEvent.shiftKey);
};


/**
 * Return `true` if only the platform-modifier-key (the meta-key on Mac,
 * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally
 * the shift-key is pressed).
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if only the platform modifier key is pressed.
 * @api
 */
const platformModifierKeyOnly = function(mapBrowserEvent) {
  const originalEvent = mapBrowserEvent.originalEvent;
  return !originalEvent.altKey &&
    (_has_js__WEBPACK_IMPORTED_MODULE_3__[/* MAC */ "e"] ? originalEvent.metaKey : originalEvent.ctrlKey) &&
    !originalEvent.shiftKey;
};


/**
 * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
 * additionally the alt-key is pressed).
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if only the shift key is pressed.
 * @api
 */
const shiftKeyOnly = function(mapBrowserEvent) {
  const originalEvent = mapBrowserEvent.originalEvent;
  return (
    !originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      originalEvent.shiftKey);
};


/**
 * Return `true` if the target element is not editable, i.e. not a `<input>`-,
 * `<select>`- or `<textarea>`-element, `false` otherwise.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True only if the target element is not editable.
 * @api
 */
const targetNotEditable = function(mapBrowserEvent) {
  const target = mapBrowserEvent.originalEvent.target;
  const tagName = target.tagName;
  return (
    tagName !== 'INPUT' &&
      tagName !== 'SELECT' &&
      tagName !== 'TEXTAREA');
};


/**
 * Return `true` if the event originates from a mouse device.
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if the event originates from a mouse device.
 * @api
 */
const mouseOnly = function(mapBrowserEvent) {
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(mapBrowserEvent.pointerEvent, 56); // mapBrowserEvent must originate from a pointer event
  // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
  return (
    /** @type {module:ol/MapBrowserEvent} */ (mapBrowserEvent).pointerEvent.pointerType == 'mouse'
  );
};


/**
 * Return `true` if the event originates from a primary pointer in
 * contact with the surface or if the left mouse button is pressed.
 * @see http://www.w3.org/TR/pointerevents/#button-states
 *
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} True if the event originates from a primary pointer.
 * @api
 */
const primaryAction = function(mapBrowserEvent) {
  const pointerEvent = mapBrowserEvent.pointerEvent;
  return pointerEvent.isPrimary && pointerEvent.button === 0;
};


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/render/ReplayType
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  CIRCLE: 'Circle',
  DEFAULT: 'Default',
  IMAGE: 'Image',
  LINE_STRING: 'LineString',
  POLYGON: 'Polygon',
  TEXT: 'Text'
});


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return circular; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return fromExtent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return fromCircle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return makeRegular; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _geom_LinearRing_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(141);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(30);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(55);
/* harmony import */ var _sphere_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(167);
/* harmony import */ var _geom_flat_area_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(165);
/* harmony import */ var _geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(105);
/* harmony import */ var _geom_flat_contains_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(112);
/* harmony import */ var _geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(90);
/* harmony import */ var _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(91);
/* harmony import */ var _geom_flat_interiorpoint_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(177);
/* harmony import */ var _geom_flat_intersectsextent_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(164);
/* harmony import */ var _geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(93);
/* harmony import */ var _geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(122);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(21);
/**
 * @module ol/geom/Polygon
 */




















/**
 * @classdesc
 * Polygon geometry.
 *
 * @constructor
 * @extends {module:ol/geom/SimpleGeometry}
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Array of linear
 *     rings that define the polygon. The first linear ring of the array
 *     defines the outer-boundary or surface of the polygon. Each subsequent
 *     linear ring defines a hole in the surface of the polygon. A linear ring
 *     is an array of vertices' coordinates where the first coordinate and the
 *     last are equivalent.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @api
 */
const Polygon = function(coordinates, opt_layout) {

  _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].call(this);

  /**
   * @type {Array.<number>}
   * @private
   */
  this.ends_ = [];

  /**
   * @private
   * @type {number}
   */
  this.flatInteriorPointRevision_ = -1;

  /**
   * @private
   * @type {module:ol/coordinate~Coordinate}
   */
  this.flatInteriorPoint_ = null;

  /**
   * @private
   * @type {number}
   */
  this.maxDelta_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.maxDeltaRevision_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.orientedRevision_ = -1;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.orientedFlatCoordinates_ = null;

  this.setCoordinates(coordinates, opt_layout);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Polygon, _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]);


/**
 * Append the passed linear ring to this polygon.
 * @param {module:ol/geom/LinearRing} linearRing Linear ring.
 * @api
 */
Polygon.prototype.appendLinearRing = function(linearRing) {
  if (!this.flatCoordinates) {
    this.flatCoordinates = linearRing.getFlatCoordinates().slice();
  } else {
    Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(this.flatCoordinates, linearRing.getFlatCoordinates());
  }
  this.ends_.push(this.flatCoordinates.length);
  this.changed();
};


/**
 * Make a complete copy of the geometry.
 * @return {!module:ol/geom/Polygon} Clone.
 * @override
 * @api
 */
Polygon.prototype.clone = function() {
  const polygon = new Polygon(null);
  polygon.setFlatCoordinates(
    this.layout, this.flatCoordinates.slice(), this.ends_.slice());
  return polygon;
};


/**
 * @inheritDoc
 */
Polygon.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
  if (minSquaredDistance < Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* closestSquaredDistanceXY */ "e"])(this.getExtent(), x, y)) {
    return minSquaredDistance;
  }
  if (this.maxDeltaRevision_ != this.getRevision()) {
    this.maxDelta_ = Math.sqrt(Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_10__[/* arrayMaxSquaredDelta */ "a"])(
      this.flatCoordinates, 0, this.ends_, this.stride, 0));
    this.maxDeltaRevision_ = this.getRevision();
  }
  return Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_10__[/* assignClosestArrayPoint */ "b"])(
    this.flatCoordinates, 0, this.ends_, this.stride,
    this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
};


/**
 * @inheritDoc
 */
Polygon.prototype.containsXY = function(x, y) {
  return Object(_geom_flat_contains_js__WEBPACK_IMPORTED_MODULE_11__[/* linearRingsContainsXY */ "c"])(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
};


/**
 * Return the area of the polygon on projected plane.
 * @return {number} Area (on projected plane).
 * @api
 */
Polygon.prototype.getArea = function() {
  return Object(_geom_flat_area_js__WEBPACK_IMPORTED_MODULE_9__[/* linearRings */ "b"])(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
};


/**
 * Get the coordinate array for this geometry.  This array has the structure
 * of a GeoJSON coordinate array for polygons.
 *
 * @param {boolean=} opt_right Orient coordinates according to the right-hand
 *     rule (counter-clockwise for exterior and clockwise for interior rings).
 *     If `false`, coordinates will be oriented according to the left-hand rule
 *     (clockwise for exterior and counter-clockwise for interior rings).
 *     By default, coordinate orientation will depend on how the geometry was
 *     constructed.
 * @return {Array.<Array.<module:ol/coordinate~Coordinate>>} Coordinates.
 * @override
 * @api
 */
Polygon.prototype.getCoordinates = function(opt_right) {
  let flatCoordinates;
  if (opt_right !== undefined) {
    flatCoordinates = this.getOrientedFlatCoordinates().slice();
    Object(_geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__[/* orientLinearRings */ "d"])(
      flatCoordinates, 0, this.ends_, this.stride, opt_right);
  } else {
    flatCoordinates = this.flatCoordinates;
  }

  return Object(_geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_13__[/* inflateCoordinatesArray */ "b"])(
    flatCoordinates, 0, this.ends_, this.stride);
};


/**
 * @return {Array.<number>} Ends.
 */
Polygon.prototype.getEnds = function() {
  return this.ends_;
};


/**
 * @return {Array.<number>} Interior point.
 */
Polygon.prototype.getFlatInteriorPoint = function() {
  if (this.flatInteriorPointRevision_ != this.getRevision()) {
    const flatCenter = Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* getCenter */ "x"])(this.getExtent());
    this.flatInteriorPoint_ = Object(_geom_flat_interiorpoint_js__WEBPACK_IMPORTED_MODULE_14__[/* getInteriorPointOfArray */ "a"])(
      this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride,
      flatCenter, 0);
    this.flatInteriorPointRevision_ = this.getRevision();
  }
  return this.flatInteriorPoint_;
};


/**
 * Return an interior point of the polygon.
 * @return {module:ol/geom/Point} Interior point as XYM coordinate, where M is the
 * length of the horizontal intersection that the point belongs to.
 * @api
 */
Polygon.prototype.getInteriorPoint = function() {
  return new _geom_Point_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](this.getFlatInteriorPoint(), _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XYM);
};


/**
 * Return the number of rings of the polygon,  this includes the exterior
 * ring and any interior rings.
 *
 * @return {number} Number of rings.
 * @api
 */
Polygon.prototype.getLinearRingCount = function() {
  return this.ends_.length;
};


/**
 * Return the Nth linear ring of the polygon geometry. Return `null` if the
 * given index is out of range.
 * The exterior linear ring is available at index `0` and the interior rings
 * at index `1` and beyond.
 *
 * @param {number} index Index.
 * @return {module:ol/geom/LinearRing} Linear ring.
 * @api
 */
Polygon.prototype.getLinearRing = function(index) {
  if (index < 0 || this.ends_.length <= index) {
    return null;
  }
  const linearRing = new _geom_LinearRing_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](null);
  linearRing.setFlatCoordinates(this.layout, this.flatCoordinates.slice(
    index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]));
  return linearRing;
};


/**
 * Return the linear rings of the polygon.
 * @return {Array.<module:ol/geom/LinearRing>} Linear rings.
 * @api
 */
Polygon.prototype.getLinearRings = function() {
  const layout = this.layout;
  const flatCoordinates = this.flatCoordinates;
  const ends = this.ends_;
  const linearRings = [];
  let offset = 0;
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    const linearRing = new _geom_LinearRing_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](null);
    linearRing.setFlatCoordinates(layout, flatCoordinates.slice(offset, end));
    linearRings.push(linearRing);
    offset = end;
  }
  return linearRings;
};


/**
 * @return {Array.<number>} Oriented flat coordinates.
 */
Polygon.prototype.getOrientedFlatCoordinates = function() {
  if (this.orientedRevision_ != this.getRevision()) {
    const flatCoordinates = this.flatCoordinates;
    if (Object(_geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__[/* linearRingIsOriented */ "b"])(
      flatCoordinates, 0, this.ends_, this.stride)) {
      this.orientedFlatCoordinates_ = flatCoordinates;
    } else {
      this.orientedFlatCoordinates_ = flatCoordinates.slice();
      this.orientedFlatCoordinates_.length =
          Object(_geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__[/* orientLinearRings */ "d"])(
            this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
    }
    this.orientedRevision_ = this.getRevision();
  }
  return this.orientedFlatCoordinates_;
};


/**
 * @inheritDoc
 */
Polygon.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
  const simplifiedFlatCoordinates = [];
  const simplifiedEnds = [];
  simplifiedFlatCoordinates.length = Object(_geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_17__[/* quantizeArray */ "c"])(
    this.flatCoordinates, 0, this.ends_, this.stride,
    Math.sqrt(squaredTolerance),
    simplifiedFlatCoordinates, 0, simplifiedEnds);
  const simplifiedPolygon = new Polygon(null);
  simplifiedPolygon.setFlatCoordinates(
    _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, simplifiedFlatCoordinates, simplifiedEnds);
  return simplifiedPolygon;
};


/**
 * @inheritDoc
 * @api
 */
Polygon.prototype.getType = function() {
  return _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].POLYGON;
};


/**
 * @inheritDoc
 * @api
 */
Polygon.prototype.intersectsExtent = function(extent) {
  return Object(_geom_flat_intersectsextent_js__WEBPACK_IMPORTED_MODULE_15__[/* intersectsLinearRingArray */ "c"])(
    this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
};


/**
 * Set the coordinates of the polygon.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @override
 * @api
 */
Polygon.prototype.setCoordinates = function(coordinates, opt_layout) {
  if (!coordinates) {
    this.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, null, this.ends_);
  } else {
    this.setLayout(opt_layout, coordinates, 2);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    const ends = Object(_geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_12__[/* deflateCoordinatesArray */ "c"])(
      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
    this.changed();
  }
};


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {Array.<number>} ends Ends.
 */
Polygon.prototype.setFlatCoordinates = function(layout, flatCoordinates, ends) {
  this.setFlatCoordinatesInternal(layout, flatCoordinates);
  this.ends_ = ends;
  this.changed();
};

/* harmony default export */ __webpack_exports__["b"] = (Polygon);


/**
 * Create an approximation of a circle on the surface of a sphere.
 * @param {module:ol/coordinate~Coordinate} center Center (`[lon, lat]` in degrees).
 * @param {number} radius The great-circle distance from the center to
 *     the polygon vertices.
 * @param {number=} opt_n Optional number of vertices for the resulting
 *     polygon. Default is `32`.
 * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to
 *     the Earth's mean radius using the WGS84 ellipsoid).
 * @return {module:ol/geom/Polygon} The "circular" polygon.
 * @api
 */
function circular(center, radius, opt_n, opt_sphereRadius) {
  const n = opt_n ? opt_n : 32;
  /** @type {Array.<number>} */
  const flatCoordinates = [];
  for (let i = 0; i < n; ++i) {
    Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(flatCoordinates, Object(_sphere_js__WEBPACK_IMPORTED_MODULE_8__[/* offset */ "d"])(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));
  }
  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
  const polygon = new Polygon(null);
  polygon.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, flatCoordinates, [flatCoordinates.length]);
  return polygon;
}


/**
 * Create a polygon from an extent. The layout used is `XY`.
 * @param {module:ol/extent~Extent} extent The extent.
 * @return {module:ol/geom/Polygon} The polygon.
 * @api
 */
function fromExtent(extent) {
  const minX = extent[0];
  const minY = extent[1];
  const maxX = extent[2];
  const maxY = extent[3];
  const flatCoordinates =
      [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];
  const polygon = new Polygon(null);
  polygon.setFlatCoordinates(
    _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, flatCoordinates, [flatCoordinates.length]);
  return polygon;
}


/**
 * Create a regular polygon from a circle.
 * @param {module:ol/geom/Circle} circle Circle geometry.
 * @param {number=} opt_sides Number of sides of the polygon. Default is 32.
 * @param {number=} opt_angle Start angle for the first vertex of the polygon in
 *     radians. Default is 0.
 * @return {module:ol/geom/Polygon} Polygon geometry.
 * @api
 */
function fromCircle(circle, opt_sides, opt_angle) {
  const sides = opt_sides ? opt_sides : 32;
  const stride = circle.getStride();
  const layout = circle.getLayout();
  const polygon = new Polygon(null, layout);
  const arrayLength = stride * (sides + 1);
  const flatCoordinates = new Array(arrayLength);
  for (let i = 0; i < arrayLength; i++) {
    flatCoordinates[i] = 0;
  }
  const ends = [flatCoordinates.length];
  polygon.setFlatCoordinates(layout, flatCoordinates, ends);
  makeRegular(polygon, circle.getCenter(), circle.getRadius(), opt_angle);
  return polygon;
}


/**
 * Modify the coordinates of a polygon to make it a regular polygon.
 * @param {module:ol/geom/Polygon} polygon Polygon geometry.
 * @param {module:ol/coordinate~Coordinate} center Center of the regular polygon.
 * @param {number} radius Radius of the regular polygon.
 * @param {number=} opt_angle Start angle for the first vertex of the polygon in
 *     radians. Default is 0.
 */
function makeRegular(polygon, center, radius, opt_angle) {
  const flatCoordinates = polygon.getFlatCoordinates();
  const layout = polygon.getLayout();
  const stride = polygon.getStride();
  const ends = polygon.getEnds();
  const sides = flatCoordinates.length / stride - 1;
  const startAngle = opt_angle ? opt_angle : 0;
  for (let i = 0; i <= sides; ++i) {
    const offset = i * stride;
    const angle = startAngle + (Object(_math_js__WEBPACK_IMPORTED_MODULE_18__[/* modulo */ "d"])(i, sides) * 2 * Math.PI / sides);
    flatCoordinates[offset] = center[0] + (radius * Math.cos(angle));
    flatCoordinates[offset + 1] = center[1] + (radius * Math.sin(angle));
  }
  polygon.setFlatCoordinates(layout, flatCoordinates, ends);
}


/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
/**
 * @module ol/MapBrowserEventType
 */


/**
 * Constants for event names.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({

  /**
   * A true single click with no dragging and no double click. Note that this
   * event is delayed by 250 ms to ensure that it is not a double click.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
   * @api
   */
  SINGLECLICK: 'singleclick',

  /**
   * A click with no dragging. A double click will fire two of this.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
   * @api
   */
  CLICK: _events_EventType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].CLICK,

  /**
   * A true double click, with no dragging.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
   * @api
   */
  DBLCLICK: _events_EventType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DBLCLICK,

  /**
   * Triggered when a pointer is dragged.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
   * @api
   */
  POINTERDRAG: 'pointerdrag',

  /**
   * Triggered when a pointer is moved. Note that on touch devices this is
   * triggered when the map is panned, so is not the same as mousemove.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
   * @api
   */
  POINTERMOVE: 'pointermove',

  POINTERDOWN: 'pointerdown',
  POINTERUP: 'pointerup',
  POINTEROVER: 'pointerover',
  POINTEROUT: 'pointerout',
  POINTERENTER: 'pointerenter',
  POINTERLEAVE: 'pointerleave',
  POINTERCANCEL: 'pointercancel'
});


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(55);
/* harmony import */ var _geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(105);
/* harmony import */ var _geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(90);
/* harmony import */ var _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(91);
/* harmony import */ var _geom_flat_interpolate_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(153);
/* harmony import */ var _geom_flat_intersectsextent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(164);
/* harmony import */ var _geom_flat_length_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(230);
/* harmony import */ var _geom_flat_segments_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(231);
/* harmony import */ var _geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(122);
/**
 * @module ol/geom/LineString
 */















/**
 * @classdesc
 * Linestring geometry.
 *
 * @constructor
 * @extends {module:ol/geom/SimpleGeometry}
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @api
 */
const LineString = function(coordinates, opt_layout) {

  _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {module:ol/coordinate~Coordinate}
   */
  this.flatMidpoint_ = null;

  /**
   * @private
   * @type {number}
   */
  this.flatMidpointRevision_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.maxDelta_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.maxDeltaRevision_ = -1;

  this.setCoordinates(coordinates, opt_layout);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(LineString, _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]);


/**
 * Append the passed coordinate to the coordinates of the linestring.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @api
 */
LineString.prototype.appendCoordinate = function(coordinate) {
  if (!this.flatCoordinates) {
    this.flatCoordinates = coordinate.slice();
  } else {
    Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(this.flatCoordinates, coordinate);
  }
  this.changed();
};


/**
 * Make a complete copy of the geometry.
 * @return {!module:ol/geom/LineString} Clone.
 * @override
 * @api
 */
LineString.prototype.clone = function() {
  const lineString = new LineString(null);
  lineString.setFlatCoordinates(this.layout, this.flatCoordinates.slice());
  return lineString;
};


/**
 * @inheritDoc
 */
LineString.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
  if (minSquaredDistance < Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* closestSquaredDistanceXY */ "e"])(this.getExtent(), x, y)) {
    return minSquaredDistance;
  }
  if (this.maxDeltaRevision_ != this.getRevision()) {
    this.maxDelta_ = Math.sqrt(Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_6__[/* maxSquaredDelta */ "e"])(
      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
    this.maxDeltaRevision_ = this.getRevision();
  }
  return Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_6__[/* assignClosestPoint */ "d"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
    this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
};


/**
 * Iterate over each segment, calling the provided callback.
 * If the callback returns a truthy value the function returns that
 * value immediately. Otherwise the function returns `false`.
 *
 * @param {function(this: S, module:ol/coordinate~Coordinate, module:ol/coordinate~Coordinate): T} callback Function
 *     called for each segment.
 * @return {T|boolean} Value.
 * @template T,S
 * @api
 */
LineString.prototype.forEachSegment = function(callback) {
  return Object(_geom_flat_segments_js__WEBPACK_IMPORTED_MODULE_12__[/* forEach */ "a"])(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
};


/**
 * Returns the coordinate at `m` using linear interpolation, or `null` if no
 * such coordinate exists.
 *
 * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
 * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
 * M will return the first coordinate and Ms greater than the last M will
 * return the last coordinate.
 *
 * @param {number} m M.
 * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
 * @return {module:ol/coordinate~Coordinate} Coordinate.
 * @api
 */
LineString.prototype.getCoordinateAtM = function(m, opt_extrapolate) {
  if (this.layout != _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XYM &&
      this.layout != _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XYZM) {
    return null;
  }
  const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
  return Object(_geom_flat_interpolate_js__WEBPACK_IMPORTED_MODULE_9__[/* lineStringCoordinateAtM */ "b"])(this.flatCoordinates, 0,
    this.flatCoordinates.length, this.stride, m, extrapolate);
};


/**
 * Return the coordinates of the linestring.
 * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.
 * @override
 * @api
 */
LineString.prototype.getCoordinates = function() {
  return Object(_geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_8__[/* inflateCoordinates */ "a"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
};


/**
 * Return the coordinate at the provided fraction along the linestring.
 * The `fraction` is a number between 0 and 1, where 0 is the start of the
 * linestring and 1 is the end.
 * @param {number} fraction Fraction.
 * @param {module:ol/coordinate~Coordinate=} opt_dest Optional coordinate whose values will
 *     be modified. If not provided, a new coordinate will be returned.
 * @return {module:ol/coordinate~Coordinate} Coordinate of the interpolated point.
 * @api
 */
LineString.prototype.getCoordinateAt = function(fraction, opt_dest) {
  return Object(_geom_flat_interpolate_js__WEBPACK_IMPORTED_MODULE_9__[/* interpolatePoint */ "a"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
    fraction, opt_dest);
};


/**
 * Return the length of the linestring on projected plane.
 * @return {number} Length (on projected plane).
 * @api
 */
LineString.prototype.getLength = function() {
  return Object(_geom_flat_length_js__WEBPACK_IMPORTED_MODULE_11__[/* lineStringLength */ "a"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
};


/**
 * @return {Array.<number>} Flat midpoint.
 */
LineString.prototype.getFlatMidpoint = function() {
  if (this.flatMidpointRevision_ != this.getRevision()) {
    this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
    this.flatMidpointRevision_ = this.getRevision();
  }
  return this.flatMidpoint_;
};


/**
 * @inheritDoc
 */
LineString.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
  const simplifiedFlatCoordinates = [];
  simplifiedFlatCoordinates.length = Object(_geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_13__[/* douglasPeucker */ "a"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
    squaredTolerance, simplifiedFlatCoordinates, 0);
  const simplifiedLineString = new LineString(null);
  simplifiedLineString.setFlatCoordinates(
    _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, simplifiedFlatCoordinates);
  return simplifiedLineString;
};


/**
 * @inheritDoc
 * @api
 */
LineString.prototype.getType = function() {
  return _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].LINE_STRING;
};


/**
 * @inheritDoc
 * @api
 */
LineString.prototype.intersectsExtent = function(extent) {
  return Object(_geom_flat_intersectsextent_js__WEBPACK_IMPORTED_MODULE_10__[/* intersectsLineString */ "a"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
    extent);
};


/**
 * Set the coordinates of the linestring.
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @override
 * @api
 */
LineString.prototype.setCoordinates = function(coordinates, opt_layout) {
  if (!coordinates) {
    this.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, null);
  } else {
    this.setLayout(opt_layout, coordinates, 1);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    this.flatCoordinates.length = Object(_geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_7__[/* deflateCoordinates */ "b"])(
      this.flatCoordinates, 0, coordinates, this.stride);
    this.changed();
  }
};


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 */
LineString.prototype.setFlatCoordinates = function(layout, flatCoordinates) {
  this.setFlatCoordinatesInternal(layout, flatCoordinates);
  this.changed();
};
/* harmony default export */ __webpack_exports__["a"] = (LineString);


/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return transformWithOptions; });
/* harmony import */ var _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(83);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/**
 * @module ol/format/Feature
 */





/**
 * @typedef {Object} ReadOptions
 * @property {module:ol/proj~ProjectionLike} dataProjection Projection of the data we are reading.
 * If not provided, the projection will be derived from the data (where possible) or
 * the `dataProjection` of the format is assigned (where set). If the projection
 * can not be derived from the data and if no `dataProjection` is set for a format,
 * the features will not be reprojected.
 * @property {module:ol/extent~Extent} extent Tile extent of the tile being read. This is only used and
 * required for {@link module:ol/format/MVT}.
 * @property {module:ol/proj~ProjectionLike} featureProjection Projection of the feature geometries
 * created by the format reader. If not provided, features will be returned in the
 * `dataProjection`.
 */


/**
 * @typedef {Object} WriteOptions
 * @property {module:ol/proj~ProjectionLike} dataProjection Projection of the data we are writing.
 * If not provided, the `dataProjection` of the format is assigned (where set).
 * If no `dataProjection` is set for a format, the features will be returned
 * in the `featureProjection`.
 * @property {module:ol/proj~ProjectionLike} featureProjection Projection of the feature geometries
 * that will be serialized by the format writer. If not provided, geometries are assumed
 * to be in the `dataProjection` if that is set; in other words, they are not transformed.
 * @property {boolean} [rightHanded] When writing geometries, follow the right-hand
 * rule for linear ring orientation.  This means that polygons will have counter-clockwise
 * exterior rings and clockwise interior rings.  By default, coordinates are serialized
 * as they are provided at construction.  If `true`, the right-hand rule will
 * be applied.  If `false`, the left-hand rule will be applied (clockwise for
 * exterior and counter-clockwise for interior rings).  Note that not all
 * formats support this.  The GeoJSON format does use this property when writing
 * geometries.
 * @property {number} [decimals] Maximum number of decimal places for coordinates.
 * Coordinates are stored internally as floats, but floating-point arithmetic can create
 * coordinates with a large number of decimal places, not generally wanted on output.
 * Set a number here to round coordinates. Can also be used to ensure that
 * coordinates read in can be written back out with the same number of decimals.
 * Default is no rounding.
 */


/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for feature formats.
 * {module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode
 * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial
 * file formats.  See the documentation for each format for more details.
 *
 * @constructor
 * @abstract
 * @api
 */
const FeatureFormat = function() {

  /**
   * @protected
   * @type {module:ol/proj/Projection}
   */
  this.dataProjection = null;

  /**
   * @protected
   * @type {module:ol/proj/Projection}
   */
  this.defaultFeatureProjection = null;

};


/**
 * Adds the data projection to the read options.
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.
 * @return {module:ol/format/Feature~ReadOptions|undefined} Options.
 * @protected
 */
FeatureFormat.prototype.getReadOptions = function(source, opt_options) {
  let options;
  if (opt_options) {
    options = {
      dataProjection: opt_options.dataProjection ?
        opt_options.dataProjection : this.readProjection(source),
      featureProjection: opt_options.featureProjection
    };
  }
  return this.adaptOptions(options);
};


/**
 * Sets the `dataProjection` on the options, if no `dataProjection`
 * is set.
 * @param {module:ol/format/Feature~WriteOptions|module:ol/format/Feature~ReadOptions|undefined} options
 *     Options.
 * @protected
 * @return {module:ol/format/Feature~WriteOptions|module:ol/format/Feature~ReadOptions|undefined}
 *     Updated options.
 */
FeatureFormat.prototype.adaptOptions = function(options) {
  return Object(_obj_js__WEBPACK_IMPORTED_MODULE_1__[/* assign */ "a"])({
    dataProjection: this.dataProjection,
    featureProjection: this.defaultFeatureProjection
  }, options);
};


/**
 * Get the extent from the source of the last {@link readFeatures} call.
 * @return {module:ol/extent~Extent} Tile extent.
 */
FeatureFormat.prototype.getLastExtent = function() {
  return null;
};


/**
 * @abstract
 * @return {module:ol/format/FormatType} Format.
 */
FeatureFormat.prototype.getType = function() {};


/**
 * Read a single feature from a source.
 *
 * @abstract
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature} Feature.
 */
FeatureFormat.prototype.readFeature = function(source, opt_options) {};


/**
 * Read all features from a source.
 *
 * @abstract
 * @param {Document|Node|ArrayBuffer|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Features.
 */
FeatureFormat.prototype.readFeatures = function(source, opt_options) {};


/**
 * Read a single geometry from a source.
 *
 * @abstract
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/geom/Geometry} Geometry.
 */
FeatureFormat.prototype.readGeometry = function(source, opt_options) {};


/**
 * Read the projection from a source.
 *
 * @abstract
 * @param {Document|Node|Object|string} source Source.
 * @return {module:ol/proj/Projection} Projection.
 */
FeatureFormat.prototype.readProjection = function(source) {};


/**
 * Encode a feature in this format.
 *
 * @abstract
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} Result.
 */
FeatureFormat.prototype.writeFeature = function(feature, opt_options) {};


/**
 * Encode an array of features in this format.
 *
 * @abstract
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} Result.
 */
FeatureFormat.prototype.writeFeatures = function(features, opt_options) {};


/**
 * Write a single geometry in this format.
 *
 * @abstract
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} Result.
 */
FeatureFormat.prototype.writeGeometry = function(geometry, opt_options) {};

/* harmony default export */ __webpack_exports__["a"] = (FeatureFormat);

/**
 * @param {module:ol/geom/Geometry|module:ol/extent~Extent} geometry Geometry.
 * @param {boolean} write Set to true for writing, false for reading.
 * @param {(module:ol/format/Feature~WriteOptions|module:ol/format/Feature~ReadOptions)=} opt_options
 *     Options.
 * @return {module:ol/geom/Geometry|module:ol/extent~Extent} Transformed geometry.
 */
function transformWithOptions(geometry, write, opt_options) {
  const featureProjection = opt_options ?
    Object(_proj_js__WEBPACK_IMPORTED_MODULE_2__[/* get */ "h"])(opt_options.featureProjection) : null;
  const dataProjection = opt_options ?
    Object(_proj_js__WEBPACK_IMPORTED_MODULE_2__[/* get */ "h"])(opt_options.dataProjection) : null;
  /**
   * @type {module:ol/geom/Geometry|module:ol/extent~Extent}
   */
  let transformed;
  if (featureProjection && dataProjection &&
      !Object(_proj_js__WEBPACK_IMPORTED_MODULE_2__[/* equivalent */ "f"])(featureProjection, dataProjection)) {
    if (geometry instanceof _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]) {
      transformed = (write ? geometry.clone() : geometry).transform(
        write ? featureProjection : dataProjection,
        write ? dataProjection : featureProjection);
    } else {
      // FIXME this is necessary because GML treats extents
      // as geometries
      transformed = Object(_proj_js__WEBPACK_IMPORTED_MODULE_2__[/* transformExtent */ "o"])(
        geometry,
        dataProjection,
        featureProjection);
    }
  } else {
    transformed = geometry;
  }
  if (write && opt_options && opt_options.decimals !== undefined) {
    const power = Math.pow(10, opt_options.decimals);
    // if decimals option on write, round each coordinate appropriately
    /**
     * @param {Array.<number>} coordinates Coordinates.
     * @return {Array.<number>} Transformed coordinates.
     */
    const transform = function(coordinates) {
      for (let i = 0, ii = coordinates.length; i < ii; ++i) {
        coordinates[i] = Math.round(coordinates[i] * power) / power;
      }
      return coordinates;
    };
    if (transformed === geometry) {
      transformed = transformed.clone();
    }
    transformed.applyTransform(transform);
  }
  return transformed;
}


/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/ViewHint
 */

/**
 * @enum {number}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  ANIMATING: 0,
  INTERACTING: 1
});


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return centroid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return handleEvent; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29);
/* harmony import */ var _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40);
/* harmony import */ var _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92);
/* harmony import */ var _interaction_Interaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(45);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15);
/**
 * @module ol/interaction/Pointer
 */








/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @this {module:ol/interaction/Pointer}
 */
const handleDragEvent = _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* UNDEFINED */ "c"];


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Capture dragging.
 * @this {module:ol/interaction/Pointer}
 */
const handleUpEvent = _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* FALSE */ "a"];


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Capture dragging.
 * @this {module:ol/interaction/Pointer}
 */
const handleDownEvent = _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* FALSE */ "a"];


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @this {module:ol/interaction/Pointer}
 */
const handleMoveEvent = _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* UNDEFINED */ "c"];


/**
 * @typedef {Object} Options
 * @property {(function(module:ol/MapBrowserPointerEvent):boolean)} [handleDownEvent]
 * Function handling "down" events. If the function returns `true` then a drag
 * sequence is started.
 * @property {(function(module:ol/MapBrowserPointerEvent))} [handleDragEvent]
 * Function handling "drag" events. This function is called on "move" events
 * during a drag sequence.
 * @property {(function(module:ol/MapBrowserEvent):boolean)} [handleEvent]
 * Method called by the map to notify the interaction that a browser event was
 * dispatched to the map. The function may return `false` to prevent the
 * propagation of the event to other interactions in the map's interactions
 * chain.
 * @property {(function(module:ol/MapBrowserPointerEvent))} [handleMoveEvent]
 * Function handling "move" events. This function is called on "move" events,
 * also during a drag sequence (so during a drag sequence both the
 * `handleDragEvent` function and this function are called).
 * @property {(function(module:ol/MapBrowserPointerEvent):boolean)} [handleUpEvent]
 *  Function handling "up" events. If the function returns `false` then the
 * current drag sequence is stopped.
 */


/**
 * @classdesc
 * Base class that calls user-defined functions on `down`, `move` and `up`
 * events. This class also manages "drag sequences".
 *
 * When the `handleDownEvent` user function returns `true` a drag sequence is
 * started. During a drag sequence the `handleDragEvent` user function is
 * called on `move` events. The drag sequence ends when the `handleUpEvent`
 * user function is called and returns `false`.
 *
 * @constructor
 * @param {module:ol/interaction/Pointer~Options=} opt_options Options.
 * @extends {module:ol/interaction/Interaction}
 * @api
 */
const PointerInteraction = function(opt_options) {

  const options = opt_options ? opt_options : {};

  _interaction_Interaction_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this, {
    handleEvent: options.handleEvent || handleEvent
  });

  /**
   * @type {function(module:ol/MapBrowserPointerEvent):boolean}
   * @private
   */
  this.handleDownEvent_ = options.handleDownEvent ?
    options.handleDownEvent : handleDownEvent;

  /**
   * @type {function(module:ol/MapBrowserPointerEvent)}
   * @private
   */
  this.handleDragEvent_ = options.handleDragEvent ?
    options.handleDragEvent : handleDragEvent;

  /**
   * @type {function(module:ol/MapBrowserPointerEvent)}
   * @private
   */
  this.handleMoveEvent_ = options.handleMoveEvent ?
    options.handleMoveEvent : handleMoveEvent;

  /**
   * @type {function(module:ol/MapBrowserPointerEvent):boolean}
   * @private
   */
  this.handleUpEvent_ = options.handleUpEvent ?
    options.handleUpEvent : handleUpEvent;

  /**
   * @type {boolean}
   * @protected
   */
  this.handlingDownUpSequence = false;

  /**
   * @type {!Object.<string, module:ol/pointer/PointerEvent>}
   * @private
   */
  this.trackedPointers_ = {};

  /**
   * @type {Array.<module:ol/pointer/PointerEvent>}
   * @protected
   */
  this.targetPointers = [];

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(PointerInteraction, _interaction_Interaction_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * @param {Array.<module:ol/pointer/PointerEvent>} pointerEvents List of events.
 * @return {module:ol~Pixel} Centroid pixel.
 */
function centroid(pointerEvents) {
  const length = pointerEvents.length;
  let clientX = 0;
  let clientY = 0;
  for (let i = 0; i < length; i++) {
    clientX += pointerEvents[i].clientX;
    clientY += pointerEvents[i].clientY;
  }
  return [clientX / length, clientY / length];
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Whether the event is a pointerdown, pointerdrag
 *     or pointerup event.
 */
function isPointerDraggingEvent(mapBrowserEvent) {
  const type = mapBrowserEvent.type;
  return type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERDOWN ||
    type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERDRAG ||
    type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERUP;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @private
 */
PointerInteraction.prototype.updateTrackedPointers_ = function(mapBrowserEvent) {
  if (isPointerDraggingEvent(mapBrowserEvent)) {
    const event = mapBrowserEvent.pointerEvent;

    const id = event.pointerId.toString();
    if (mapBrowserEvent.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERUP) {
      delete this.trackedPointers_[id];
    } else if (mapBrowserEvent.type ==
        _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERDOWN) {
      this.trackedPointers_[id] = event;
    } else if (id in this.trackedPointers_) {
      // update only when there was a pointerdown event for this pointer
      this.trackedPointers_[id] = event;
    }
    this.targetPointers = Object(_obj_js__WEBPACK_IMPORTED_MODULE_5__[/* getValues */ "c"])(this.trackedPointers_);
  }
};


/**
 * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into
 * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
 * detected.
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} `false` to stop event propagation.
 * @this {module:ol/interaction/Pointer}
 * @api
 */
function handleEvent(mapBrowserEvent) {
  if (!(mapBrowserEvent instanceof _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])) {
    return true;
  }

  let stopEvent = false;
  this.updateTrackedPointers_(mapBrowserEvent);
  if (this.handlingDownUpSequence) {
    if (mapBrowserEvent.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERDRAG) {
      this.handleDragEvent_(mapBrowserEvent);
    } else if (mapBrowserEvent.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERUP) {
      const handledUp = this.handleUpEvent_(mapBrowserEvent);
      this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;
    }
  } else {
    if (mapBrowserEvent.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERDOWN) {
      const handled = this.handleDownEvent_(mapBrowserEvent);
      this.handlingDownUpSequence = handled;
      stopEvent = this.shouldStopEvent(handled);
    } else if (mapBrowserEvent.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERMOVE) {
      this.handleMoveEvent_(mapBrowserEvent);
    }
  }
  return !stopEvent;
}


/**
 * This method is used to determine if "down" events should be propagated to
 * other interactions or should be stopped.
 *
 * The method receives the return code of the "handleDownEvent" function.
 *
 * By default this function is the "identity" function. It's overridden in
 * child classes.
 *
 * @param {boolean} handled Was the event handled by the interaction?
 * @return {boolean} Should the event be stopped?
 * @protected
 */
PointerInteraction.prototype.shouldStopEvent = function(handled) {
  return handled;
};

/* harmony default export */ __webpack_exports__["b"] = (PointerInteraction);


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return pan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return rotateWithoutConstraints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return zoom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return zoomByDelta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return zoomWithoutConstraints; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31);
/* harmony import */ var _easing_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56);
/* harmony import */ var _interaction_Property_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(176);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(21);
/**
 * @module ol/interaction/Interaction
 */







/**
 * Object literal with config options for interactions.
 * @typedef {Object} InteractionOptions
 * @property {function(module:ol/MapBrowserEvent):boolean} handleEvent
 * Method called by the map to notify the interaction that a browser event was
 * dispatched to the map. If the function returns a falsy value, propagation of
 * the event to other interactions in the map's interactions chain will be
 * prevented (this includes functions with no explicit return).
 */


/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * User actions that change the state of the map. Some are similar to controls,
 * but are not associated with a DOM element.
 * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
 * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
 * by a keyboard event not a button element event.
 * Although interactions do not have a DOM element, some of them do render
 * vectors and so are visible on the screen.
 *
 * @constructor
 * @param {module:ol/interaction/Interaction~InteractionOptions} options Options.
 * @extends {module:ol/Object}
 * @api
 */
const Interaction = function(options) {

  _Object_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {module:ol/PluggableMap}
   */
  this.map_ = null;

  this.setActive(true);

  /**
   * @type {function(module:ol/MapBrowserEvent):boolean}
   */
  this.handleEvent = options.handleEvent;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Interaction, _Object_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * Return whether the interaction is currently active.
 * @return {boolean} `true` if the interaction is active, `false` otherwise.
 * @observable
 * @api
 */
Interaction.prototype.getActive = function() {
  return /** @type {boolean} */ (this.get(_interaction_Property_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].ACTIVE));
};


/**
 * Get the map associated with this interaction.
 * @return {module:ol/PluggableMap} Map.
 * @api
 */
Interaction.prototype.getMap = function() {
  return this.map_;
};


/**
 * Activate or deactivate the interaction.
 * @param {boolean} active Active.
 * @observable
 * @api
 */
Interaction.prototype.setActive = function(active) {
  this.set(_interaction_Property_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].ACTIVE, active);
};


/**
 * Remove the interaction from its current map and attach it to the new map.
 * Subclasses may set up event handlers to get notified about changes to
 * the map here.
 * @param {module:ol/PluggableMap} map Map.
 */
Interaction.prototype.setMap = function(map) {
  this.map_ = map;
};


/**
 * @param {module:ol/View} view View.
 * @param {module:ol/coordinate~Coordinate} delta Delta.
 * @param {number=} opt_duration Duration.
 */
function pan(view, delta, opt_duration) {
  const currentCenter = view.getCenter();
  if (currentCenter) {
    const center = view.constrainCenter(
      [currentCenter[0] + delta[0], currentCenter[1] + delta[1]]);
    if (opt_duration) {
      view.animate({
        duration: opt_duration,
        easing: _easing_js__WEBPACK_IMPORTED_MODULE_2__[/* linear */ "d"],
        center: center
      });
    } else {
      view.setCenter(center);
    }
  }
}


/**
 * @param {module:ol/View} view View.
 * @param {number|undefined} rotation Rotation.
 * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.
 * @param {number=} opt_duration Duration.
 */
function rotate(view, rotation, opt_anchor, opt_duration) {
  rotation = view.constrainRotation(rotation, 0);
  rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration);
}


/**
 * @param {module:ol/View} view View.
 * @param {number|undefined} rotation Rotation.
 * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.
 * @param {number=} opt_duration Duration.
 */
function rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration) {
  if (rotation !== undefined) {
    const currentRotation = view.getRotation();
    const currentCenter = view.getCenter();
    if (currentRotation !== undefined && currentCenter && opt_duration > 0) {
      view.animate({
        rotation: rotation,
        anchor: opt_anchor,
        duration: opt_duration,
        easing: _easing_js__WEBPACK_IMPORTED_MODULE_2__[/* easeOut */ "b"]
      });
    } else {
      view.rotate(rotation, opt_anchor);
    }
  }
}


/**
 * @param {module:ol/View} view View.
 * @param {number|undefined} resolution Resolution to go to.
 * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.
 * @param {number=} opt_duration Duration.
 * @param {number=} opt_direction Zooming direction; > 0 indicates
 *     zooming out, in which case the constraints system will select
 *     the largest nearest resolution; < 0 indicates zooming in, in
 *     which case the constraints system will select the smallest
 *     nearest resolution; == 0 indicates that the zooming direction
 *     is unknown/not relevant, in which case the constraints system
 *     will select the nearest resolution. If not defined 0 is
 *     assumed.
 */
function zoom(view, resolution, opt_anchor, opt_duration, opt_direction) {
  resolution = view.constrainResolution(resolution, 0, opt_direction);
  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);
}


/**
 * @param {module:ol/View} view View.
 * @param {number} delta Delta from previous zoom level.
 * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.
 * @param {number=} opt_duration Duration.
 */
function zoomByDelta(view, delta, opt_anchor, opt_duration) {
  const currentResolution = view.getResolution();
  let resolution = view.constrainResolution(currentResolution, delta, 0);

  if (resolution !== undefined) {
    const resolutions = view.getResolutions();
    resolution = Object(_math_js__WEBPACK_IMPORTED_MODULE_4__[/* clamp */ "a"])(
      resolution,
      view.getMinResolution() || resolutions[resolutions.length - 1],
      view.getMaxResolution() || resolutions[0]);
  }

  // If we have a constraint on center, we need to change the anchor so that the
  // new center is within the extent. We first calculate the new center, apply
  // the constraint to it, and then calculate back the anchor
  if (opt_anchor && resolution !== undefined && resolution !== currentResolution) {
    const currentCenter = view.getCenter();
    let center = view.calculateCenterZoom(resolution, opt_anchor);
    center = view.constrainCenter(center);

    opt_anchor = [
      (resolution * currentCenter[0] - currentResolution * center[0]) /
          (resolution - currentResolution),
      (resolution * currentCenter[1] - currentResolution * center[1]) /
          (resolution - currentResolution)
    ];
  }

  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);
}


/**
 * @param {module:ol/View} view View.
 * @param {number|undefined} resolution Resolution to go to.
 * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.
 * @param {number=} opt_duration Duration.
 */
function zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration) {
  if (resolution) {
    const currentResolution = view.getResolution();
    const currentCenter = view.getCenter();
    if (currentResolution !== undefined && currentCenter &&
        resolution !== currentResolution && opt_duration) {
      view.animate({
        resolution: resolution,
        anchor: opt_anchor,
        duration: opt_duration,
        easing: _easing_js__WEBPACK_IMPORTED_MODULE_2__[/* easeOut */ "b"]
      });
    } else {
      if (opt_anchor) {
        const center = view.calculateCenterZoom(resolution, opt_anchor);
        view.setCenter(center);
      }
      view.setResolution(resolution);
    }
  }
}

/* harmony default export */ __webpack_exports__["a"] = (Interaction);


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _tileurlfunction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(84);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _net_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(174);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(50);
/* harmony import */ var _source_TileImage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(65);
/* harmony import */ var _tilecoord_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(57);
/* harmony import */ var _tilegrid_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(67);
/**
 * @module ol/source/BingMaps
 */










/**
 * @typedef {Object} Options
 * @property {number} [cacheSize=2048] Cache size.
 * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.
 * @property {string} [culture='en-us'] Culture code.
 * @property {string} key Bing Maps API key. Get yours at http://www.bingmapsportal.com/.
 * @property {string} imagerySet Type of imagery.
 * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.
 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * @property {number} [transition] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 */

/**
 * @classdesc
 * Layer source for Bing Maps tile data.
 *
 * @constructor
 * @extends {module:ol/source/TileImage}
 * @param {module:ol/source/BingMaps~Options=} options Bing Maps options.
 * @api
 */
const BingMaps = function(options) {

  /**
   * @private
   * @type {boolean}
   */
  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : false;

  _source_TileImage_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].call(this, {
    cacheSize: options.cacheSize,
    crossOrigin: 'anonymous',
    opaque: true,
    projection: Object(_proj_js__WEBPACK_IMPORTED_MODULE_4__[/* get */ "h"])('EPSG:3857'),
    reprojectionErrorThreshold: options.reprojectionErrorThreshold,
    state: _source_State_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].LOADING,
    tileLoadFunction: options.tileLoadFunction,
    tilePixelRatio: this.hidpi_ ? 2 : 1,
    wrapX: options.wrapX !== undefined ? options.wrapX : true,
    transition: options.transition
  });

  /**
   * @private
   * @type {string}
   */
  this.culture_ = options.culture !== undefined ? options.culture : 'en-us';

  /**
   * @private
   * @type {number}
   */
  this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;

  /**
   * @private
   * @type {string}
   */
  this.apiKey_ = options.key;

  /**
   * @private
   * @type {string}
   */
  this.imagerySet_ = options.imagerySet;

  const url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +
      this.imagerySet_ +
      '?uriScheme=https&include=ImageryProviders&key=' + this.apiKey_ +
      '&c=' + this.culture_;

  Object(_net_js__WEBPACK_IMPORTED_MODULE_3__[/* jsonp */ "a"])(url, this.handleImageryMetadataResponse.bind(this), undefined,
    'jsonp');

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(BingMaps, _source_TileImage_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"]);


/**
 * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’
 * Terms Of Use.
 * @const
 * @type {string}
 */
const TOS_ATTRIBUTION = '<a class="ol-attribution-bing-tos" ' +
      'href="https://www.microsoft.com/maps/product/terms.html">' +
      'Terms of Use</a>';


/**
 * Get the api key used for this source.
 *
 * @return {string} The api key.
 * @api
 */
BingMaps.prototype.getApiKey = function() {
  return this.apiKey_;
};


/**
 * Get the imagery set associated with this source.
 *
 * @return {string} The imagery set.
 * @api
 */
BingMaps.prototype.getImagerySet = function() {
  return this.imagerySet_;
};


/**
 * @param {BingMapsImageryMetadataResponse} response Response.
 */
BingMaps.prototype.handleImageryMetadataResponse = function(response) {
  if (response.statusCode != 200 ||
      response.statusDescription != 'OK' ||
      response.authenticationResultCode != 'ValidCredentials' ||
      response.resourceSets.length != 1 ||
      response.resourceSets[0].resources.length != 1) {
    this.setState(_source_State_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].ERROR);
    return;
  }

  const resource = response.resourceSets[0].resources[0];
  const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;

  const sourceProjection = this.getProjection();
  const extent = Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_8__[/* extentFromProjection */ "c"])(sourceProjection);
  const tileSize = resource.imageWidth == resource.imageHeight ?
    resource.imageWidth : [resource.imageWidth, resource.imageHeight];
  const tileGrid = Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_8__[/* createXYZ */ "b"])({
    extent: extent,
    minZoom: resource.zoomMin,
    maxZoom: maxZoom,
    tileSize: tileSize / (this.hidpi_ ? 2 : 1)
  });
  this.tileGrid = tileGrid;

  const culture = this.culture_;
  const hidpi = this.hidpi_;
  this.tileUrlFunction = Object(_tileurlfunction_js__WEBPACK_IMPORTED_MODULE_1__[/* createFromTileUrlFunctions */ "b"])(
    resource.imageUrlSubdomains.map(function(subdomain) {
      const quadKeyTileCoord = [0, 0, 0];
      const imageUrl = resource.imageUrl
        .replace('{subdomain}', subdomain)
        .replace('{culture}', culture);
      return (
        /**
         * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {module:ol/proj/Projection} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        function(tileCoord, pixelRatio, projection) {
          if (!tileCoord) {
            return undefined;
          } else {
            Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_7__[/* createOrUpdate */ "a"])(tileCoord[0], tileCoord[1], -tileCoord[2] - 1, quadKeyTileCoord);
            let url = imageUrl;
            if (hidpi) {
              url += '&dpi=d1&device=mobile';
            }
            return url.replace('{quadkey}', Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_7__[/* quadKey */ "f"])(quadKeyTileCoord));
          }
        }
      );
    }));

  if (resource.imageryProviders) {
    const transform = Object(_proj_js__WEBPACK_IMPORTED_MODULE_4__[/* getTransformFromProjections */ "k"])(
      Object(_proj_js__WEBPACK_IMPORTED_MODULE_4__[/* get */ "h"])('EPSG:4326'), this.getProjection());

    this.setAttributions(function(frameState) {
      const attributions = [];
      const zoom = frameState.viewState.zoom;
      resource.imageryProviders.map(function(imageryProvider) {
        let intersecting = false;
        const coverageAreas = imageryProvider.coverageAreas;
        for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {
          const coverageArea = coverageAreas[i];
          if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {
            const bbox = coverageArea.bbox;
            const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];
            const extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* applyTransform */ "a"])(epsg4326Extent, transform);
            if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* intersects */ "F"])(extent, frameState.extent)) {
              intersecting = true;
              break;
            }
          }
        }
        if (intersecting) {
          attributions.push(imageryProvider.attribution);
        }
      });

      attributions.push(TOS_ATTRIBUTION);
      return attributions;
    });
  }

  this.setState(_source_State_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].READY);
};
/* harmony default export */ __webpack_exports__["a"] = (BingMaps);


/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return CLASS_HIDDEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return CLASS_SELECTABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return CLASS_UNSELECTABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return CLASS_UNSUPPORTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CLASS_CONTROL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CLASS_COLLAPSED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getFontFamilies; });
/**
 * @module ol/css
 */


/**
 * The CSS class for hidden feature.
 *
 * @const
 * @type {string}
 */
const CLASS_HIDDEN = 'ol-hidden';


/**
 * The CSS class that we'll give the DOM elements to have them selectable.
 *
 * @const
 * @type {string}
 */
const CLASS_SELECTABLE = 'ol-selectable';


/**
 * The CSS class that we'll give the DOM elements to have them unselectable.
 *
 * @const
 * @type {string}
 */
const CLASS_UNSELECTABLE = 'ol-unselectable';


/**
 * The CSS class for unsupported feature.
 *
 * @const
 * @type {string}
 */
const CLASS_UNSUPPORTED = 'ol-unsupported';


/**
 * The CSS class for controls.
 *
 * @const
 * @type {string}
 */
const CLASS_CONTROL = 'ol-control';


/**
 * The CSS class that we'll give the DOM elements that are collapsed, i.e.
 * to those elements which usually can be expanded.
 *
 * @const
 * @type {string}
 */
const CLASS_COLLAPSED = 'ol-collapsed';


/**
 * Get the list of font families from a font spec.  Note that this doesn't work
 * for font families that have commas in them.
 * @param {string} The CSS font property.
 * @return {Object.<string>} The font families (or null if the input spec is invalid).
 */
const getFontFamilies = (function() {
  let style;
  const cache = {};
  return function(font) {
    if (!style) {
      style = document.createElement('div').style;
    }
    if (!(font in cache)) {
      style.font = font;
      const family = style.fontFamily;
      style.font = '';
      if (!family) {
        return null;
      }
      cache[font] = family.split(/,\s?/);
    }
    return cache[font];
  };
})();


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return FIREFOX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return SAFARI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return WEBKIT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return MAC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DEVICE_PIXEL_RATIO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CANVAS_LINE_DASH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return GEOLOCATION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return TOUCH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return POINTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return MSPOINTER; });
/* harmony import */ var _webgl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "j", function() { return _webgl_js__WEBPACK_IMPORTED_MODULE_0__["o"]; });

/**
 * @module ol/has
 */

const ua = typeof navigator !== 'undefined' ?
  navigator.userAgent.toLowerCase() : '';

/**
 * User agent string says we are dealing with Firefox as browser.
 * @type {boolean}
 */
const FIREFOX = ua.indexOf('firefox') !== -1;

/**
 * User agent string says we are dealing with Safari as browser.
 * @type {boolean}
 */
const SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;

/**
 * User agent string says we are dealing with a WebKit engine.
 * @type {boolean}
 */
const WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;

/**
 * User agent string says we are dealing with a Mac as platform.
 * @type {boolean}
 */
const MAC = ua.indexOf('macintosh') !== -1;


/**
 * The ratio between physical pixels and device-independent pixels
 * (dips) on the device (`window.devicePixelRatio`).
 * @const
 * @type {number}
 * @api
 */
const DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;


/**
 * True if the browser's Canvas implementation implements {get,set}LineDash.
 * @type {boolean}
 */
const CANVAS_LINE_DASH = function() {
  let has = false;
  try {
    has = !!document.createElement('CANVAS').getContext('2d').setLineDash;
  } catch (e) {
    // pass
  }
  return has;
}();


/**
 * Is HTML5 geolocation supported in the current browser?
 * @const
 * @type {boolean}
 * @api
 */
const GEOLOCATION = 'geolocation' in navigator;


/**
 * True if browser supports touch events.
 * @const
 * @type {boolean}
 * @api
 */
const TOUCH = 'ontouchstart' in window;


/**
 * True if browser supports pointer events.
 * @const
 * @type {boolean}
 */
const POINTER = 'PointerEvent' in window;


/**
 * True if browser supports ms pointer events (IE 10).
 * @const
 * @type {boolean}
 */
const MSPOINTER = !!(navigator.msPointerEnabled);





/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _geom_Circle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(172);
/* harmony import */ var _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(83);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(41);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _geom_LineString_js__WEBPACK_IMPORTED_MODULE_2__["a"]; });

/* harmony import */ var _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(71);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "b", function() { return _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_3__["a"]; });

/* harmony import */ var _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(73);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "c", function() { return _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_4__["a"]; });

/* harmony import */ var _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "d", function() { return _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_5__["a"]; });

/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(30);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "e", function() { return _geom_Point_js__WEBPACK_IMPORTED_MODULE_6__["a"]; });

/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(39);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "f", function() { return _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_7__["b"]; });

/**
 * @module ol/geom
 */











/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/source/State
 */

/**
 * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  UNDEFINED: 'undefined',
  LOADING: 'loading',
  READY: 'ready',
  ERROR: 'error'
});


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CollectionEvent; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _AssertionError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(31);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(36);
/**
 * @module ol/Collection
 */







/**
 * @enum {string}
 * @private
 */
const Property = {
  LENGTH: 'length'
};


/**
 * @classdesc
 * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
 * type.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {module:ol/CollectionEventType} type Type.
 * @param {*=} opt_element Element.
 */
const CollectionEvent = function(type, opt_element) {

  _events_Event_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this, type);

  /**
   * The element that is added to or removed from the collection.
   * @type {*}
   * @api
   */
  this.element = opt_element;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(CollectionEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * @typedef {Object} Options
 * @property {boolean} [unique=false] Disallow the same item from being added to
 * the collection twice.
 */

/**
 * @classdesc
 * An expanded version of standard JS Array, adding convenience methods for
 * manipulation. Add and remove changes to the Collection trigger a Collection
 * event. Note that this does not cover changes to the objects _within_ the
 * Collection; they trigger events on the appropriate object, not on the
 * Collection as a whole.
 *
 * @constructor
 * @extends {module:ol/Object}
 * @fires module:ol/Collection~CollectionEvent
 * @param {Array.<T>=} opt_array Array.
 * @param {module:ol/Collection~Options=} opt_options Collection options.
 * @template T
 * @api
 */
const Collection = function(opt_array, opt_options) {

  _Object_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this);

  const options = opt_options || {};

  /**
   * @private
   * @type {boolean}
   */
  this.unique_ = !!options.unique;

  /**
   * @private
   * @type {!Array.<T>}
   */
  this.array_ = opt_array ? opt_array : [];

  if (this.unique_) {
    for (let i = 0, ii = this.array_.length; i < ii; ++i) {
      this.assertUnique_(this.array_[i], i);
    }
  }

  this.updateLength_();

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Collection, _Object_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * Remove all elements from the collection.
 * @api
 */
Collection.prototype.clear = function() {
  while (this.getLength() > 0) {
    this.pop();
  }
};


/**
 * Add elements to the collection.  This pushes each item in the provided array
 * to the end of the collection.
 * @param {!Array.<T>} arr Array.
 * @return {module:ol/Collection.<T>} This collection.
 * @api
 */
Collection.prototype.extend = function(arr) {
  for (let i = 0, ii = arr.length; i < ii; ++i) {
    this.push(arr[i]);
  }
  return this;
};


/**
 * Iterate over each element, calling the provided callback.
 * @param {function(T, number, Array.<T>): *} f The function to call
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array). The return value is ignored.
 * @api
 */
Collection.prototype.forEach = function(f) {
  const array = this.array_;
  for (let i = 0, ii = array.length; i < ii; ++i) {
    f(array[i], i, array);
  }
};


/**
 * Get a reference to the underlying Array object. Warning: if the array
 * is mutated, no events will be dispatched by the collection, and the
 * collection's "length" property won't be in sync with the actual length
 * of the array.
 * @return {!Array.<T>} Array.
 * @api
 */
Collection.prototype.getArray = function() {
  return this.array_;
};


/**
 * Get the element at the provided index.
 * @param {number} index Index.
 * @return {T} Element.
 * @api
 */
Collection.prototype.item = function(index) {
  return this.array_[index];
};


/**
 * Get the length of this collection.
 * @return {number} The length of the array.
 * @observable
 * @api
 */
Collection.prototype.getLength = function() {
  return /** @type {number} */ (this.get(Property.LENGTH));
};


/**
 * Insert an element at the provided index.
 * @param {number} index Index.
 * @param {T} elem Element.
 * @api
 */
Collection.prototype.insertAt = function(index, elem) {
  if (this.unique_) {
    this.assertUnique_(elem);
  }
  this.array_.splice(index, 0, elem);
  this.updateLength_();
  this.dispatchEvent(
    new CollectionEvent(_CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ADD, elem));
};


/**
 * Remove the last element of the collection and return it.
 * Return `undefined` if the collection is empty.
 * @return {T|undefined} Element.
 * @api
 */
Collection.prototype.pop = function() {
  return this.removeAt(this.getLength() - 1);
};


/**
 * Insert the provided element at the end of the collection.
 * @param {T} elem Element.
 * @return {number} New length of the collection.
 * @api
 */
Collection.prototype.push = function(elem) {
  if (this.unique_) {
    this.assertUnique_(elem);
  }
  const n = this.getLength();
  this.insertAt(n, elem);
  return this.getLength();
};


/**
 * Remove the first occurrence of an element from the collection.
 * @param {T} elem Element.
 * @return {T|undefined} The removed element or undefined if none found.
 * @api
 */
Collection.prototype.remove = function(elem) {
  const arr = this.array_;
  for (let i = 0, ii = arr.length; i < ii; ++i) {
    if (arr[i] === elem) {
      return this.removeAt(i);
    }
  }
  return undefined;
};


/**
 * Remove the element at the provided index and return it.
 * Return `undefined` if the collection does not contain this index.
 * @param {number} index Index.
 * @return {T|undefined} Value.
 * @api
 */
Collection.prototype.removeAt = function(index) {
  const prev = this.array_[index];
  this.array_.splice(index, 1);
  this.updateLength_();
  this.dispatchEvent(new CollectionEvent(_CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].REMOVE, prev));
  return prev;
};


/**
 * Set the element at the provided index.
 * @param {number} index Index.
 * @param {T} elem Element.
 * @api
 */
Collection.prototype.setAt = function(index, elem) {
  const n = this.getLength();
  if (index < n) {
    if (this.unique_) {
      this.assertUnique_(elem, index);
    }
    const prev = this.array_[index];
    this.array_[index] = elem;
    this.dispatchEvent(
      new CollectionEvent(_CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].REMOVE, prev));
    this.dispatchEvent(
      new CollectionEvent(_CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ADD, elem));
  } else {
    for (let j = n; j < index; ++j) {
      this.insertAt(j, undefined);
    }
    this.insertAt(index, elem);
  }
};


/**
 * @private
 */
Collection.prototype.updateLength_ = function() {
  this.set(Property.LENGTH, this.array_.length);
};


/**
 * @private
 * @param {T} elem Element.
 * @param {number=} opt_except Optional index to ignore.
 */
Collection.prototype.assertUnique_ = function(elem, opt_except) {
  for (let i = 0, ii = this.array_.length; i < ii; ++i) {
    if (this.array_[i] === elem && i !== opt_except) {
      throw new _AssertionError_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](58);
    }
  }
};

/* harmony default export */ __webpack_exports__["b"] = (Collection);


/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GMLNS; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42);
/* harmony import */ var _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(94);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(22);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(41);
/* harmony import */ var _geom_LinearRing_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(141);
/* harmony import */ var _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(71);
/* harmony import */ var _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(73);
/* harmony import */ var _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(82);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(30);
/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(39);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(15);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(7);
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(0);
/**
 * @module ol/format/GMLBase
 */
// FIXME Envelopes should not be treated as geometries! readEnvelope_ is part
// of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect
// envelopes/extents, only geometries!


















/**
 * @const
 * @type {string}
 */
const GMLNS = 'http://www.opengis.net/gml';


/**
 * @typedef {Object} Options
 * @property {Object.<string, string>|string} [featureNS] Feature
 * namespace. If not defined will be derived from GML. If multiple
 * feature types have been configured which come from different feature
 * namespaces, this will be an object with the keys being the prefixes used
 * in the entries of featureType array. The values of the object will be the
 * feature namespaces themselves. So for instance there might be a featureType
 * item `topp:states` in the `featureType` array and then there will be a key
 * `topp` in the featureNS object with value `http://www.openplans.org/topp`.
 * @property {Array.<string>|string} [featureType] Feature type(s) to parse.
 * If multiple feature types need to be configured
 * which come from different feature namespaces, `featureNS` will be an object
 * with the keys being the prefixes used in the entries of featureType array.
 * The values of the object will be the feature namespaces themselves.
 * So for instance there might be a featureType item `topp:states` and then
 * there will be a key named `topp` in the featureNS object with value
 * `http://www.openplans.org/topp`.
 * @property {string} srsName srsName to use when writing geometries.
 * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon
 * elements. This also affects the elements in multi-part geometries.
 * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString
 * elements. This also affects the elements in multi-part geometries.
 * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.
 * Since the latter is deprecated in GML 3.
 * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of
 * gml:MultiPolygon. Since the latter is deprecated in GML 3.
 * @property {string} [schemaLocation] Optional schemaLocation to use when
 * writing out the GML, this will override the default provided.
 */


/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Feature base format for reading and writing data in the GML format.
 * This class cannot be instantiated, it contains only base content that
 * is shared with versioned format classes GML2 and GML3.
 *
 * @constructor
 * @abstract
 * @param {module:ol/format/GMLBase~Options=} opt_options
 *     Optional configuration object.
 * @extends {module:ol/format/XMLFeature}
 */
const GMLBase = function(opt_options) {
  const options = /** @type {module:ol/format/GMLBase~Options} */ (opt_options ? opt_options : {});

  /**
   * @protected
   * @type {Array.<string>|string|undefined}
   */
  this.featureType = options.featureType;

  /**
   * @protected
   * @type {Object.<string, string>|string|undefined}
   */
  this.featureNS = options.featureNS;

  /**
   * @protected
   * @type {string}
   */
  this.srsName = options.srsName;

  /**
   * @protected
   * @type {string}
   */
  this.schemaLocation = '';

  /**
   * @type {Object.<string, Object.<string, Object>>}
   */
  this.FEATURE_COLLECTION_PARSERS = {};
  this.FEATURE_COLLECTION_PARSERS[GMLNS] = {
    'featureMember': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeReplacer */ "o"])(GMLBase.prototype.readFeaturesInternal),
    'featureMembers': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeReplacer */ "o"])(GMLBase.prototype.readFeaturesInternal)
  };

  _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(GMLBase, _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * A regular expression that matches if a string only contains whitespace
 * characters. It will e.g. match `''`, `' '`, `'\n'` etc. The non-breaking
 * space (0xa0) is explicitly included as IE doesn't include it in its
 * definition of `\s`.
 *
 * Information from `goog.string.isEmptyOrWhitespace`: https://github.com/google/closure-library/blob/e877b1e/closure/goog/string/string.js#L156-L160
 *
 * @const
 * @type {RegExp}
 */
const ONLY_WHITESPACE_RE = /^[\s\xa0]*$/;


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Array.<module:ol/Feature> | undefined} Features.
 */
GMLBase.prototype.readFeaturesInternal = function(node, objectStack) {
  const localName = node.localName;
  let features = null;
  if (localName == 'FeatureCollection') {
    if (node.namespaceURI === 'http://www.opengis.net/wfs') {
      features = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])([],
        this.FEATURE_COLLECTION_PARSERS, node,
        objectStack, this);
    } else {
      features = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])(null,
        this.FEATURE_COLLECTION_PARSERS, node,
        objectStack, this);
    }
  } else if (localName == 'featureMembers' || localName == 'featureMember') {
    const context = objectStack[0];
    let featureType = context['featureType'];
    let featureNS = context['featureNS'];
    const prefix = 'p';
    const defaultPrefix = 'p0';
    if (!featureType && node.childNodes) {
      featureType = [], featureNS = {};
      for (let i = 0, ii = node.childNodes.length; i < ii; ++i) {
        const child = node.childNodes[i];
        if (child.nodeType === 1) {
          const ft = child.nodeName.split(':').pop();
          if (featureType.indexOf(ft) === -1) {
            let key = '';
            let count = 0;
            const uri = child.namespaceURI;
            for (const candidate in featureNS) {
              if (featureNS[candidate] === uri) {
                key = candidate;
                break;
              }
              ++count;
            }
            if (!key) {
              key = prefix + count;
              featureNS[key] = uri;
            }
            featureType.push(key + ':' + ft);
          }
        }
      }
      if (localName != 'featureMember') {
        // recheck featureType for each featureMember
        context['featureType'] = featureType;
        context['featureNS'] = featureNS;
      }
    }
    if (typeof featureNS === 'string') {
      const ns = featureNS;
      featureNS = {};
      featureNS[defaultPrefix] = ns;
    }
    const parsersNS = {};
    const featureTypes = Array.isArray(featureType) ? featureType : [featureType];
    for (const p in featureNS) {
      const parsers = {};
      for (let i = 0, ii = featureTypes.length; i < ii; ++i) {
        const featurePrefix = featureTypes[i].indexOf(':') === -1 ?
          defaultPrefix : featureTypes[i].split(':')[0];
        if (featurePrefix === p) {
          parsers[featureTypes[i].split(':').pop()] =
              (localName == 'featureMembers') ?
                Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(this.readFeatureElement, this) :
                Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeReplacer */ "o"])(this.readFeatureElement, this);
        }
      }
      parsersNS[featureNS[p]] = parsers;
    }
    if (localName == 'featureMember') {
      features = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])(undefined, parsersNS, node, objectStack);
    } else {
      features = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])([], parsersNS, node, objectStack);
    }
  }
  if (features === null) {
    features = [];
  }
  return features;
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/Geometry|undefined} Geometry.
 */
GMLBase.prototype.readGeometryElement = function(node, objectStack) {
  const context = /** @type {Object} */ (objectStack[0]);
  context['srsName'] = node.firstElementChild.getAttribute('srsName');
  context['srsDimension'] = node.firstElementChild.getAttribute('srsDimension');
  /** @type {module:ol/geom/Geometry} */
  const geometry = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])(null, this.GEOMETRY_PARSERS_, node, objectStack, this);
  if (geometry) {
    return (
      /** @type {module:ol/geom/Geometry} */ (Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_3__[/* transformWithOptions */ "b"])(geometry, false, context))
    );
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/Feature} Feature.
 */
GMLBase.prototype.readFeatureElement = function(node, objectStack) {
  let n;
  const fid = node.getAttribute('fid') || Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* getAttributeNS */ "f"])(node, GMLNS, 'id');
  const values = {};
  let geometryName;
  for (n = node.firstElementChild; n; n = n.nextElementSibling) {
    const localName = n.localName;
    // Assume attribute elements have one child node and that the child
    // is a text or CDATA node (to be treated as text).
    // Otherwise assume it is a geometry node.
    if (n.childNodes.length === 0 ||
        (n.childNodes.length === 1 &&
        (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))) {
      let value = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* getAllTextContent */ "e"])(n, false);
      if (ONLY_WHITESPACE_RE.test(value)) {
        value = undefined;
      }
      values[localName] = value;
    } else {
      // boundedBy is an extent and must not be considered as a geometry
      if (localName !== 'boundedBy') {
        geometryName = localName;
      }
      values[localName] = this.readGeometryElement(n, objectStack);
    }
  }
  const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](values);
  if (geometryName) {
    feature.setGeometryName(geometryName);
  }
  if (fid) {
    feature.setId(fid);
  }
  return feature;
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/Point|undefined} Point.
 */
GMLBase.prototype.readPoint = function(node, objectStack) {
  const flatCoordinates = this.readFlatCoordinatesFromNode_(node, objectStack);
  if (flatCoordinates) {
    const point = new _geom_Point_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"](null);
    point.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].XYZ, flatCoordinates);
    return point;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/MultiPoint|undefined} MultiPoint.
 */
GMLBase.prototype.readMultiPoint = function(node, objectStack) {
  /** @type {Array.<Array.<number>>} */
  const coordinates = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])([],
    this.MULTIPOINT_PARSERS_, node, objectStack, this);
  if (coordinates) {
    return new _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"](coordinates);
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/MultiLineString|undefined} MultiLineString.
 */
GMLBase.prototype.readMultiLineString = function(node, objectStack) {
  /** @type {Array.<module:ol/geom/LineString>} */
  const lineStrings = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])([],
    this.MULTILINESTRING_PARSERS_, node, objectStack, this);
  if (lineStrings) {
    const multiLineString = new _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](null);
    multiLineString.setLineStrings(lineStrings);
    return multiLineString;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/MultiPolygon|undefined} MultiPolygon.
 */
GMLBase.prototype.readMultiPolygon = function(node, objectStack) {
  /** @type {Array.<module:ol/geom/Polygon>} */
  const polygons = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])([], this.MULTIPOLYGON_PARSERS_, node, objectStack, this);
  if (polygons) {
    const multiPolygon = new _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"](null);
    multiPolygon.setPolygons(polygons);
    return multiPolygon;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
GMLBase.prototype.pointMemberParser_ = function(node, objectStack) {
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* parseNode */ "t"])(this.POINTMEMBER_PARSERS_, node, objectStack, this);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
GMLBase.prototype.lineStringMemberParser_ = function(node, objectStack) {
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* parseNode */ "t"])(this.LINESTRINGMEMBER_PARSERS_, node, objectStack, this);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
GMLBase.prototype.polygonMemberParser_ = function(node, objectStack) {
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* parseNode */ "t"])(this.POLYGONMEMBER_PARSERS_, node, objectStack, this);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/LineString|undefined} LineString.
 */
GMLBase.prototype.readLineString = function(node, objectStack) {
  const flatCoordinates = this.readFlatCoordinatesFromNode_(node, objectStack);
  if (flatCoordinates) {
    const lineString = new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](null);
    lineString.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].XYZ, flatCoordinates);
    return lineString;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<number>|undefined} LinearRing flat coordinates.
 */
GMLBase.prototype.readFlatLinearRing_ = function(node, objectStack) {
  const ring = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])(null,
    this.GEOMETRY_FLAT_COORDINATES_PARSERS_, node,
    objectStack, this);
  if (ring) {
    return ring;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/LinearRing|undefined} LinearRing.
 */
GMLBase.prototype.readLinearRing = function(node, objectStack) {
  const flatCoordinates = this.readFlatCoordinatesFromNode_(node, objectStack);
  if (flatCoordinates) {
    const ring = new _geom_LinearRing_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"](null);
    ring.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].XYZ, flatCoordinates);
    return ring;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/Polygon|undefined} Polygon.
 */
GMLBase.prototype.readPolygon = function(node, objectStack) {
  /** @type {Array.<Array.<number>>} */
  const flatLinearRings = Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])([null],
    this.FLAT_LINEAR_RINGS_PARSERS_, node, objectStack, this);
  if (flatLinearRings && flatLinearRings[0]) {
    const polygon = new _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "b"](null);
    const flatCoordinates = flatLinearRings[0];
    const ends = [flatCoordinates.length];
    let i, ii;
    for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
      Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(flatCoordinates, flatLinearRings[i]);
      ends.push(flatCoordinates.length);
    }
    polygon.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].XYZ, flatCoordinates, ends);
    return polygon;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<number>} Flat coordinates.
 */
GMLBase.prototype.readFlatCoordinatesFromNode_ = function(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* pushParseAndPop */ "u"])(null, this.GEOMETRY_FLAT_COORDINATES_PARSERS_, node, objectStack, this);
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GMLBase.prototype.MULTIPOINT_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'pointMember': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(GMLBase.prototype.pointMemberParser_),
    'pointMembers': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(GMLBase.prototype.pointMemberParser_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GMLBase.prototype.MULTILINESTRING_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'lineStringMember': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(GMLBase.prototype.lineStringMemberParser_),
    'lineStringMembers': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(GMLBase.prototype.lineStringMemberParser_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GMLBase.prototype.MULTIPOLYGON_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'polygonMember': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(GMLBase.prototype.polygonMemberParser_),
    'polygonMembers': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(GMLBase.prototype.polygonMemberParser_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GMLBase.prototype.POINTMEMBER_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'Point': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(GMLBase.prototype.readFlatCoordinatesFromNode_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GMLBase.prototype.LINESTRINGMEMBER_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'LineString': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(GMLBase.prototype.readLineString)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GMLBase.prototype.POLYGONMEMBER_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'Polygon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeArrayPusher */ "j"])(GMLBase.prototype.readPolygon)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @protected
 */
GMLBase.prototype.RING_PARSERS = {
  'http://www.opengis.net/gml': {
    'LinearRing': Object(_xml_js__WEBPACK_IMPORTED_MODULE_15__[/* makeReplacer */ "o"])(GMLBase.prototype.readFlatLinearRing_)
  }
};


/**
 * @inheritDoc
 */
GMLBase.prototype.readGeometryFromNode = function(node, opt_options) {
  const geometry = this.readGeometryElement(node,
    [this.getReadOptions(node, opt_options ? opt_options : {})]);
  return geometry ? geometry : null;
};


/**
 * Read all features from a GML FeatureCollection.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
GMLBase.prototype.readFeatures;


/**
 * @inheritDoc
 */
GMLBase.prototype.readFeaturesFromNode = function(node, opt_options) {
  const options = {
    featureType: this.featureType,
    featureNS: this.featureNS
  };
  if (opt_options) {
    Object(_obj_js__WEBPACK_IMPORTED_MODULE_13__[/* assign */ "a"])(options, this.getReadOptions(node, opt_options));
  }
  const features = this.readFeaturesInternal(node, [options]);
  return features || [];
};


/**
 * @inheritDoc
 */
GMLBase.prototype.readProjectionFromNode = function(node) {
  return Object(_proj_js__WEBPACK_IMPORTED_MODULE_14__[/* get */ "h"])(this.srsName ? this.srsName : node.firstElementChild.getAttribute('srsName'));
};
/* harmony default export */ __webpack_exports__["b"] = (GMLBase);


/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29);
/* harmony import */ var _MapEventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(142);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(31);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(32);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);
/**
 * @module ol/control/Control
 */








/**
 * @typedef {Object} Options
 * @property {Element} [element] The element is the control's
 * container element. This only needs to be specified if you're developing
 * a custom control.
 * @property {function(module:ol/MapEvent)} [render] Function called when
 * the control should be re-rendered. This is called in a `requestAnimationFrame`
 * callback.
 * @property {Element|string} [target] Specify a target if you want
 * the control to be rendered outside of the map's viewport.
 */


/**
 * @classdesc
 * A control is a visible widget with a DOM element in a fixed position on the
 * screen. They can involve user input (buttons), or be informational only;
 * the position is determined using CSS. By default these are placed in the
 * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
 * any outside DOM element.
 *
 * This is the base class for controls. You can use it for simple custom
 * controls by creating the element with listeners, creating an instance:
 * ```js
 * var myControl = new Control({element: myElement});
 * ```
 * and then adding this to the map.
 *
 * The main advantage of having this as a control rather than a simple separate
 * DOM element is that preventing propagation is handled for you. Controls
 * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
 *
 * You can also extend this base for your own control class. See
 * examples/custom-controls for an example of how to do this.
 *
 * @constructor
 * @extends {module:ol/Object}
 * @param {module:ol/control/Control~Options} options Control options.
 * @api
 */
const Control = function(options) {

  _Object_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this);

  /**
   * @protected
   * @type {Element}
   */
  this.element = options.element ? options.element : null;

  /**
   * @private
   * @type {Element}
   */
  this.target_ = null;

  /**
   * @private
   * @type {module:ol/PluggableMap}
   */
  this.map_ = null;

  /**
   * @protected
   * @type {!Array.<module:ol/events~EventsKey>}
   */
  this.listenerKeys = [];

  /**
   * @type {function(module:ol/MapEvent)}
   */
  this.render = options.render ? options.render : _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* UNDEFINED */ "c"];

  if (options.target) {
    this.setTarget(options.target);
  }

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Control, _Object_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @inheritDoc
 */
Control.prototype.disposeInternal = function() {
  Object(_dom_js__WEBPACK_IMPORTED_MODULE_4__[/* removeNode */ "e"])(this.element);
  _Object_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].prototype.disposeInternal.call(this);
};


/**
 * Get the map associated with this control.
 * @return {module:ol/PluggableMap} Map.
 * @api
 */
Control.prototype.getMap = function() {
  return this.map_;
};


/**
 * Remove the control from its current map and attach it to the new map.
 * Subclasses may set up event handlers to get notified about changes to
 * the map here.
 * @param {module:ol/PluggableMap} map Map.
 * @api
 */
Control.prototype.setMap = function(map) {
  if (this.map_) {
    Object(_dom_js__WEBPACK_IMPORTED_MODULE_4__[/* removeNode */ "e"])(this.element);
  }
  for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_5__[/* unlistenByKey */ "e"])(this.listenerKeys[i]);
  }
  this.listenerKeys.length = 0;
  this.map_ = map;
  if (this.map_) {
    const target = this.target_ ?
      this.target_ : map.getOverlayContainerStopEvent();
    target.appendChild(this.element);
    if (this.render !== _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* UNDEFINED */ "c"]) {
      this.listenerKeys.push(Object(_events_js__WEBPACK_IMPORTED_MODULE_5__[/* listen */ "a"])(map,
        _MapEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POSTRENDER, this.render, this));
    }
    map.render();
  }
};


/**
 * This function is used to set a target element for the control. It has no
 * effect if it is called after the control has been added to the map (i.e.
 * after `setMap` is called on the control). If no `target` is set in the
 * options passed to the control constructor and if `setTarget` is not called
 * then the control is added to the map's overlay container.
 * @param {Element|string} target Target.
 * @api
 */
Control.prototype.setTarget = function(target) {
  this.target_ = typeof target === 'string' ?
    document.getElementById(target) :
    target;
};
/* harmony default export */ __webpack_exports__["a"] = (Control);


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _source_TileImage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(65);
/* harmony import */ var _tilegrid_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(67);
/**
 * @module ol/source/XYZ
 */




/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=2048] Cache size.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {boolean} [opaque=true] Whether the layer is opaque.
 * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857'] Projection.
 * @property {boolean} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {number} [maxZoom=18] Optional max zoom level.
 * @property {number} [minZoom=0] Optional min zoom level.
 * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
 * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
 * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
 * should be set to `2`.
 * @property {number|module:ol/size~Size} [tileSize=[256, 256]] The tile size used by the tile service.
 * @property {module:ol/Tile~UrlFunction} [tileUrlFunction] Optional function to get
 * tile URL given a tile coordinate and the projection.
 * Required if url or urls are not provided.
 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
 * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
 * may be used instead of defining each one separately in the `urls` option.
 * @property {Array.<string>} [urls] An array of URL templates.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * @property {number} [transition] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 */


/**
 * @classdesc
 * Layer source for tile data with URLs in a set XYZ format that are
 * defined in a URL template. By default, this follows the widely-used
 * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
 * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
 * using the `{-y}` placeholder in the URL template, so long as the
 * source does not have a custom tile grid. In this case,
 * {@link module:ol/source/TileImage} can be used with a `tileUrlFunction`
 * such as:
 *
 *  tileUrlFunction: function(coordinate) {
 *    return 'http://mapserver.com/' + coordinate[0] + '/' +
 *        coordinate[1] + '/' + coordinate[2] + '.png';
 *    }
 *
 *
 * @constructor
 * @extends {module:ol/source/TileImage}
 * @param {module:ol/source/XYZ~Options=} opt_options XYZ options.
 * @api
 */
const XYZ = function(opt_options) {
  const options = opt_options || {};
  const projection = options.projection !== undefined ?
    options.projection : 'EPSG:3857';

  const tileGrid = options.tileGrid !== undefined ? options.tileGrid :
    Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_2__[/* createXYZ */ "b"])({
      extent: Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_2__[/* extentFromProjection */ "c"])(projection),
      maxZoom: options.maxZoom,
      minZoom: options.minZoom,
      tileSize: options.tileSize
    });

  _source_TileImage_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize,
    crossOrigin: options.crossOrigin,
    opaque: options.opaque,
    projection: projection,
    reprojectionErrorThreshold: options.reprojectionErrorThreshold,
    tileGrid: tileGrid,
    tileLoadFunction: options.tileLoadFunction,
    tilePixelRatio: options.tilePixelRatio,
    tileUrlFunction: options.tileUrlFunction,
    url: options.url,
    urls: options.urls,
    wrapX: options.wrapX !== undefined ? options.wrapX : true,
    transition: options.transition
  });

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(XYZ, _source_TileImage_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);
/* harmony default export */ __webpack_exports__["a"] = (XYZ);


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getStrideForLayout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return transformGeom2D; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(83);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22);
/* harmony import */ var _geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(61);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(15);
/**
 * @module ol/geom/SimpleGeometry
 */








/**
 * @classdesc
 * Abstract base class; only used for creating subclasses; do not instantiate
 * in apps, as cannot be rendered.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/geom/Geometry}
 * @api
 */
const SimpleGeometry = function() {

  _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this);

  /**
   * @protected
   * @type {module:ol/geom/GeometryLayout}
   */
  this.layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XY;

  /**
   * @protected
   * @type {number}
   */
  this.stride = 2;

  /**
   * @protected
   * @type {Array.<number>}
   */
  this.flatCoordinates = null;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(SimpleGeometry, _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @param {number} stride Stride.
 * @return {module:ol/geom/GeometryLayout} layout Layout.
 */
function getLayoutForStride(stride) {
  let layout;
  if (stride == 2) {
    layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XY;
  } else if (stride == 3) {
    layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XYZ;
  } else if (stride == 4) {
    layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XYZM;
  }
  return (
    /** @type {module:ol/geom/GeometryLayout} */ (layout)
  );
}


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @return {number} Stride.
 */
function getStrideForLayout(layout) {
  let stride;
  if (layout == _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XY) {
    stride = 2;
  } else if (layout == _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XYZ || layout == _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XYM) {
    stride = 3;
  } else if (layout == _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XYZM) {
    stride = 4;
  }
  return /** @type {number} */ (stride);
}


/**
 * @inheritDoc
 */
SimpleGeometry.prototype.containsXY = _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* FALSE */ "a"];


/**
 * @inheritDoc
 */
SimpleGeometry.prototype.computeExtent = function(extent) {
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* createOrUpdateFromFlatCoordinates */ "o"])(this.flatCoordinates,
    0, this.flatCoordinates.length, this.stride, extent);
};


/**
 * @abstract
 * @return {Array} Coordinates.
 */
SimpleGeometry.prototype.getCoordinates = function() {};


/**
 * Return the first coordinate of the geometry.
 * @return {module:ol/coordinate~Coordinate} First coordinate.
 * @api
 */
SimpleGeometry.prototype.getFirstCoordinate = function() {
  return this.flatCoordinates.slice(0, this.stride);
};


/**
 * @return {Array.<number>} Flat coordinates.
 */
SimpleGeometry.prototype.getFlatCoordinates = function() {
  return this.flatCoordinates;
};


/**
 * Return the last coordinate of the geometry.
 * @return {module:ol/coordinate~Coordinate} Last point.
 * @api
 */
SimpleGeometry.prototype.getLastCoordinate = function() {
  return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
};


/**
 * Return the {@link module:ol/geom/GeometryLayout~GeometryLayout layout} of the geometry.
 * @return {module:ol/geom/GeometryLayout} Layout.
 * @api
 */
SimpleGeometry.prototype.getLayout = function() {
  return this.layout;
};


/**
 * @inheritDoc
 */
SimpleGeometry.prototype.getSimplifiedGeometry = function(squaredTolerance) {
  if (this.simplifiedGeometryRevision != this.getRevision()) {
    Object(_obj_js__WEBPACK_IMPORTED_MODULE_6__[/* clear */ "b"])(this.simplifiedGeometryCache);
    this.simplifiedGeometryMaxMinSquaredTolerance = 0;
    this.simplifiedGeometryRevision = this.getRevision();
  }
  // If squaredTolerance is negative or if we know that simplification will not
  // have any effect then just return this.
  if (squaredTolerance < 0 ||
      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
       squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {
    return this;
  }
  const key = squaredTolerance.toString();
  if (this.simplifiedGeometryCache.hasOwnProperty(key)) {
    return this.simplifiedGeometryCache[key];
  } else {
    const simplifiedGeometry =
        this.getSimplifiedGeometryInternal(squaredTolerance);
    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
      this.simplifiedGeometryCache[key] = simplifiedGeometry;
      return simplifiedGeometry;
    } else {
      // Simplification did not actually remove any coordinates.  We now know
      // that any calls to getSimplifiedGeometry with a squaredTolerance less
      // than or equal to the current squaredTolerance will also not have any
      // effect.  This allows us to short circuit simplification (saving CPU
      // cycles) and prevents the cache of simplified geometries from filling
      // up with useless identical copies of this geometry (saving memory).
      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
      return this;
    }
  }
};


/**
 * @param {number} squaredTolerance Squared tolerance.
 * @return {module:ol/geom/SimpleGeometry} Simplified geometry.
 * @protected
 */
SimpleGeometry.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
  return this;
};


/**
 * @return {number} Stride.
 */
SimpleGeometry.prototype.getStride = function() {
  return this.stride;
};


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @protected
 */
SimpleGeometry.prototype.setFlatCoordinatesInternal = function(layout, flatCoordinates) {
  this.stride = getStrideForLayout(layout);
  this.layout = layout;
  this.flatCoordinates = flatCoordinates;
};


/**
 * @abstract
 * @param {Array} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 */
SimpleGeometry.prototype.setCoordinates = function(coordinates, opt_layout) {};


/**
 * @param {module:ol/geom/GeometryLayout|undefined} layout Layout.
 * @param {Array} coordinates Coordinates.
 * @param {number} nesting Nesting.
 * @protected
 */
SimpleGeometry.prototype.setLayout = function(layout, coordinates, nesting) {
  /** @type {number} */
  let stride;
  if (layout) {
    stride = getStrideForLayout(layout);
  } else {
    for (let i = 0; i < nesting; ++i) {
      if (coordinates.length === 0) {
        this.layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XY;
        this.stride = 2;
        return;
      } else {
        coordinates = /** @type {Array} */ (coordinates[0]);
      }
    }
    stride = coordinates.length;
    layout = getLayoutForStride(stride);
  }
  this.layout = layout;
  this.stride = stride;
};


/**
 * @inheritDoc
 * @api
 */
SimpleGeometry.prototype.applyTransform = function(transformFn) {
  if (this.flatCoordinates) {
    transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
    this.changed();
  }
};


/**
 * @inheritDoc
 * @api
 */
SimpleGeometry.prototype.rotate = function(angle, anchor) {
  const flatCoordinates = this.getFlatCoordinates();
  if (flatCoordinates) {
    const stride = this.getStride();
    Object(_geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_5__[/* rotate */ "a"])(
      flatCoordinates, 0, flatCoordinates.length,
      stride, angle, anchor, flatCoordinates);
    this.changed();
  }
};


/**
 * @inheritDoc
 * @api
 */
SimpleGeometry.prototype.scale = function(sx, opt_sy, opt_anchor) {
  let sy = opt_sy;
  if (sy === undefined) {
    sy = sx;
  }
  let anchor = opt_anchor;
  if (!anchor) {
    anchor = Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* getCenter */ "x"])(this.getExtent());
  }
  const flatCoordinates = this.getFlatCoordinates();
  if (flatCoordinates) {
    const stride = this.getStride();
    Object(_geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_5__[/* scale */ "b"])(
      flatCoordinates, 0, flatCoordinates.length,
      stride, sx, sy, anchor, flatCoordinates);
    this.changed();
  }
};


/**
 * @inheritDoc
 * @api
 */
SimpleGeometry.prototype.translate = function(deltaX, deltaY) {
  const flatCoordinates = this.getFlatCoordinates();
  if (flatCoordinates) {
    const stride = this.getStride();
    Object(_geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_5__[/* translate */ "d"])(
      flatCoordinates, 0, flatCoordinates.length, stride,
      deltaX, deltaY, flatCoordinates);
    this.changed();
  }
};


/**
 * @param {module:ol/geom/SimpleGeometry} simpleGeometry Simple geometry.
 * @param {module:ol/transform~Transform} transform Transform.
 * @param {Array.<number>=} opt_dest Destination.
 * @return {Array.<number>} Transformed flat coordinates.
 */
function transformGeom2D(simpleGeometry, transform, opt_dest) {
  const flatCoordinates = simpleGeometry.getFlatCoordinates();
  if (!flatCoordinates) {
    return null;
  } else {
    const stride = simpleGeometry.getStride();
    return Object(_geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_5__[/* transform2D */ "c"])(
      flatCoordinates, 0, flatCoordinates.length, stride,
      transform, opt_dest);
  }
}

/* harmony default export */ __webpack_exports__["a"] = (SimpleGeometry);


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return easeIn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return easeOut; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return inAndOut; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return linear; });
/* unused harmony export upAndDown */
/**
 * @module ol/easing
 */


/**
 * Start slow and speed up.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */
function easeIn(t) {
  return Math.pow(t, 3);
}


/**
 * Start fast and slow down.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */
function easeOut(t) {
  return 1 - easeIn(1 - t);
}


/**
 * Start slow, speed up, and then slow down again.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */
function inAndOut(t) {
  return 3 * t * t - 2 * t * t * t;
}


/**
 * Maintain a constant speed over time.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */
function linear(t) {
  return t;
}


/**
 * Start slow, speed up, and at the very end slow down again.  This has the
 * same general behavior as {@link module:ol/easing~inAndOut}, but the final
 * slowdown is delayed.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */
function upAndDown(t) {
  if (t < 0.5) {
    return inAndOut(2 * t);
  } else {
    return 1 - inAndOut(2 * (t - 0.5));
  }
}


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createOrUpdate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getKeyZXY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return fromKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return hash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return quadKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return withinExtentAndZ; });
/**
 * @module ol/tilecoord
 */


/**
 * An array of three numbers representing the location of a tile in a tile
 * grid. The order is `z`, `x`, and `y`. `z` is the zoom level.
 * @typedef {Array.<number>} TileCoord
 * @api
 */


/**
 * @param {number} z Z.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Tile coordinate.
 * @return {module:ol/tilecoord~TileCoord} Tile coordinate.
 */
function createOrUpdate(z, x, y, opt_tileCoord) {
  if (opt_tileCoord !== undefined) {
    opt_tileCoord[0] = z;
    opt_tileCoord[1] = x;
    opt_tileCoord[2] = y;
    return opt_tileCoord;
  } else {
    return [z, x, y];
  }
}


/**
 * @param {number} z Z.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {string} Key.
 */
function getKeyZXY(z, x, y) {
  return z + '/' + x + '/' + y;
}


/**
 * Get the key for a tile coord.
 * @param {module:ol/tilecoord~TileCoord} tileCoord The tile coord.
 * @return {string} Key.
 */
function getKey(tileCoord) {
  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
}


/**
 * Get a tile coord given a key.
 * @param {string} key The tile coord key.
 * @return {module:ol/tilecoord~TileCoord} The tile coord.
 */
function fromKey(key) {
  return key.split('/').map(Number);
}


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coord.
 * @return {number} Hash.
 */
function hash(tileCoord) {
  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
}


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coord.
 * @return {string} Quad key.
 */
function quadKey(tileCoord) {
  const z = tileCoord[0];
  const digits = new Array(z);
  let mask = 1 << (z - 1);
  let i, charCode;
  for (i = 0; i < z; ++i) {
    // 48 is charCode for 0 - '0'.charCodeAt(0)
    charCode = 48;
    if (tileCoord[1] & mask) {
      charCode += 1;
    }
    if (tileCoord[2] & mask) {
      charCode += 2;
    }
    digits[i] = String.fromCharCode(charCode);
    mask >>= 1;
  }
  return digits.join('');
}


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {!module:ol/tilegrid/TileGrid} tileGrid Tile grid.
 * @return {boolean} Tile coordinate is within extent and zoom level range.
 */
function withinExtentAndZ(tileCoord, tileGrid) {
  const z = tileCoord[0];
  const x = tileCoord[1];
  const y = tileCoord[2];

  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
    return false;
  }
  const extent = tileGrid.getExtent();
  let tileRange;
  if (!extent) {
    tileRange = tileGrid.getFullTileRange(z);
  } else {
    tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
  }
  if (!tileRange) {
    return true;
  } else {
    return tileRange.containsXY(x, y);
  }
}


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return buffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return hasArea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return toSize; });
/**
 * @module ol/size
 */


/**
 * An array of numbers representing a size: `[width, height]`.
 * @typedef {Array.<number>} Size
 * @api
 */


/**
 * Returns a buffered size.
 * @param {module:ol/size~Size} size Size.
 * @param {number} num The amount by which to buffer.
 * @param {module:ol/size~Size=} opt_size Optional reusable size array.
 * @return {module:ol/size~Size} The buffered size.
 */
function buffer(size, num, opt_size) {
  if (opt_size === undefined) {
    opt_size = [0, 0];
  }
  opt_size[0] = size[0] + 2 * num;
  opt_size[1] = size[1] + 2 * num;
  return opt_size;
}


/**
 * Determines if a size has a positive area.
 * @param {module:ol/size~Size} size The size to test.
 * @return {boolean} The size has a positive area.
 */
function hasArea(size) {
  return size[0] > 0 && size[1] > 0;
}


/**
 * Returns a size scaled by a ratio. The result will be an array of integers.
 * @param {module:ol/size~Size} size Size.
 * @param {number} ratio Ratio.
 * @param {module:ol/size~Size=} opt_size Optional reusable size array.
 * @return {module:ol/size~Size} The scaled size.
 */
function scale(size, ratio, opt_size) {
  if (opt_size === undefined) {
    opt_size = [0, 0];
  }
  opt_size[0] = (size[0] * ratio + 0.5) | 0;
  opt_size[1] = (size[1] * ratio + 0.5) | 0;
  return opt_size;
}


/**
 * Returns an `module:ol/size~Size` array for the passed in number (meaning: square) or
 * `module:ol/size~Size` array.
 * (meaning: non-square),
 * @param {number|module:ol/size~Size} size Width and height.
 * @param {module:ol/size~Size=} opt_size Optional reusable size array.
 * @return {module:ol/size~Size} Size.
 * @api
 */
function toSize(size, opt_size) {
  if (Array.isArray(size)) {
    return size;
  } else {
    if (opt_size === undefined) {
      opt_size = [size, size];
    } else {
      opt_size[0] = opt_size[1] = /** @type {number} */ (size);
    }
    return opt_size;
  }
}


/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return METERS_PER_UNIT; });
/**
 * @module ol/proj/Units
 */

/**
 * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
 * `'us-ft'`.
 * @enum {string}
 */
const Units = {
  DEGREES: 'degrees',
  FEET: 'ft',
  METERS: 'm',
  PIXELS: 'pixels',
  TILE_PIXELS: 'tile-pixels',
  USFEET: 'us-ft'
};


/**
 * Meters per unit lookup table.
 * @const
 * @type {Object.<module:ol/proj/Units, number>}
 * @api
 */
const METERS_PER_UNIT = {};
// use the radius of the Normal sphere
METERS_PER_UNIT[Units.DEGREES] = 2 * Math.PI * 6370997 / 360;
METERS_PER_UNIT[Units.FEET] = 0.3048;
METERS_PER_UNIT[Units.METERS] = 1;
METERS_PER_UNIT[Units.USFEET] = 1200 / 3937;

/* harmony default export */ __webpack_exports__["b"] = (Units);


/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/LayerType
 */

/**
 * A layer type used when creating layer renderers.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  IMAGE: 'IMAGE',
  TILE: 'TILE',
  VECTOR_TILE: 'VECTOR_TILE',
  VECTOR: 'VECTOR'
});


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return transform2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return translate; });
/**
 * @module ol/geom/flat/transform
 */


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {module:ol/transform~Transform} transform Transform.
 * @param {Array.<number>=} opt_dest Destination.
 * @return {Array.<number>} Transformed coordinates.
 */
function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
  const dest = opt_dest ? opt_dest : [];
  let i = 0;
  for (let j = offset; j < end; j += stride) {
    const x = flatCoordinates[j];
    const y = flatCoordinates[j + 1];
    dest[i++] = transform[0] * x + transform[2] * y + transform[4];
    dest[i++] = transform[1] * x + transform[3] * y + transform[5];
  }
  if (opt_dest && dest.length != i) {
    dest.length = i;
  }
  return dest;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} angle Angle.
 * @param {Array.<number>} anchor Rotation anchor point.
 * @param {Array.<number>=} opt_dest Destination.
 * @return {Array.<number>} Transformed coordinates.
 */
function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
  const dest = opt_dest ? opt_dest : [];
  const cos = Math.cos(angle);
  const sin = Math.sin(angle);
  const anchorX = anchor[0];
  const anchorY = anchor[1];
  let i = 0;
  for (let j = offset; j < end; j += stride) {
    const deltaX = flatCoordinates[j] - anchorX;
    const deltaY = flatCoordinates[j + 1] - anchorY;
    dest[i++] = anchorX + deltaX * cos - deltaY * sin;
    dest[i++] = anchorY + deltaX * sin + deltaY * cos;
    for (let k = j + 2; k < j + stride; ++k) {
      dest[i++] = flatCoordinates[k];
    }
  }
  if (opt_dest && dest.length != i) {
    dest.length = i;
  }
  return dest;
}


/**
 * Scale the coordinates.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} sx Scale factor in the x-direction.
 * @param {number} sy Scale factor in the y-direction.
 * @param {Array.<number>} anchor Scale anchor point.
 * @param {Array.<number>=} opt_dest Destination.
 * @return {Array.<number>} Transformed coordinates.
 */
function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
  const dest = opt_dest ? opt_dest : [];
  const anchorX = anchor[0];
  const anchorY = anchor[1];
  let i = 0;
  for (let j = offset; j < end; j += stride) {
    const deltaX = flatCoordinates[j] - anchorX;
    const deltaY = flatCoordinates[j + 1] - anchorY;
    dest[i++] = anchorX + sx * deltaX;
    dest[i++] = anchorY + sy * deltaY;
    for (let k = j + 2; k < j + stride; ++k) {
      dest[i++] = flatCoordinates[k];
    }
  }
  if (opt_dest && dest.length != i) {
    dest.length = i;
  }
  return dest;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} deltaX Delta X.
 * @param {number} deltaY Delta Y.
 * @param {Array.<number>=} opt_dest Destination.
 * @return {Array.<number>} Transformed coordinates.
 */
function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
  const dest = opt_dest ? opt_dest : [];
  let i = 0;
  for (let j = offset; j < end; j += stride) {
    dest[i++] = flatCoordinates[j] + deltaX;
    dest[i++] = flatCoordinates[j + 1] + deltaY;
    for (let k = j + 2; k < j + stride; ++k) {
      dest[i++] = flatCoordinates[k];
    }
  }
  if (opt_dest && dest.length != i) {
    dest.length = i;
  }
  return dest;
}


/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/CollectionEventType
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  /**
   * Triggered when an item is added to the collection.
   * @event module:ol/Collection~CollectionEvent#add
   * @api
   */
  ADD: 'add',
  /**
   * Triggered when an item is removed from the collection.
   * @event module:ol/Collection~CollectionEvent#remove
   * @api
   */
  REMOVE: 'remove'
});


/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _tileurlfunction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(84);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _net_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(174);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(50);
/* harmony import */ var _source_TileImage_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(65);
/* harmony import */ var _tilegrid_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(67);
/**
 * @module ol/source/TileJSON
 */
// FIXME check order of async callbacks

/**
 * @see http://mapbox.com/developers/api/
 */











/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=2048] Cache size.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.
 * Useful when the server does not support CORS..
 * @property {boolean} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {tileJSON} [tileJSON] TileJSON configuration for this source.
 * If not provided, `url` must be configured.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * @property {number} [transition] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 */


/**
 * @classdesc
 * Layer source for tile data in TileJSON format.
 *
 * @constructor
 * @extends {module:ol/source/TileImage}
 * @param {module:ol/source/TileJSON~Options=} options TileJSON options.
 * @api
 */
const TileJSON = function(options) {

  /**
   * @type {TileJSON}
   * @private
   */
  this.tileJSON_ = null;

  _source_TileImage_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize,
    crossOrigin: options.crossOrigin,
    projection: Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* get */ "h"])('EPSG:3857'),
    reprojectionErrorThreshold: options.reprojectionErrorThreshold,
    state: _source_State_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].LOADING,
    tileLoadFunction: options.tileLoadFunction,
    wrapX: options.wrapX !== undefined ? options.wrapX : true,
    transition: options.transition
  });

  if (options.url) {
    if (options.jsonp) {
      Object(_net_js__WEBPACK_IMPORTED_MODULE_4__[/* jsonp */ "a"])(options.url, this.handleTileJSONResponse.bind(this),
        this.handleTileJSONError.bind(this));
    } else {
      const client = new XMLHttpRequest();
      client.addEventListener('load', this.onXHRLoad_.bind(this));
      client.addEventListener('error', this.onXHRError_.bind(this));
      client.open('GET', options.url);
      client.send();
    }
  } else if (options.tileJSON) {
    this.handleTileJSONResponse(options.tileJSON);
  } else {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_2__[/* assert */ "a"])(false, 51); // Either `url` or `tileJSON` options must be provided
  }

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(TileJSON, _source_TileImage_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]);


/**
 * @private
 * @param {Event} event The load event.
 */
TileJSON.prototype.onXHRLoad_ = function(event) {
  const client = /** @type {XMLHttpRequest} */ (event.target);
  // status will be 0 for file:// urls
  if (!client.status || client.status >= 200 && client.status < 300) {
    let response;
    try {
      response = /** @type {TileJSON} */(JSON.parse(client.responseText));
    } catch (err) {
      this.handleTileJSONError();
      return;
    }
    this.handleTileJSONResponse(response);
  } else {
    this.handleTileJSONError();
  }
};


/**
 * @private
 * @param {Event} event The error event.
 */
TileJSON.prototype.onXHRError_ = function(event) {
  this.handleTileJSONError();
};


/**
 * @return {TileJSON} The tilejson object.
 * @api
 */
TileJSON.prototype.getTileJSON = function() {
  return this.tileJSON_;
};


/**
 * @protected
 * @param {TileJSON} tileJSON Tile JSON.
 */
TileJSON.prototype.handleTileJSONResponse = function(tileJSON) {

  const epsg4326Projection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* get */ "h"])('EPSG:4326');

  const sourceProjection = this.getProjection();
  let extent;
  if (tileJSON.bounds !== undefined) {
    const transform = Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* getTransformFromProjections */ "k"])(
      epsg4326Projection, sourceProjection);
    extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* applyTransform */ "a"])(tileJSON.bounds, transform);
  }

  const minZoom = tileJSON.minzoom || 0;
  const maxZoom = tileJSON.maxzoom || 22;
  const tileGrid = Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_8__[/* createXYZ */ "b"])({
    extent: Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_8__[/* extentFromProjection */ "c"])(sourceProjection),
    maxZoom: maxZoom,
    minZoom: minZoom
  });
  this.tileGrid = tileGrid;

  this.tileUrlFunction = Object(_tileurlfunction_js__WEBPACK_IMPORTED_MODULE_1__[/* createFromTemplates */ "a"])(tileJSON.tiles, tileGrid);

  if (tileJSON.attribution !== undefined && !this.getAttributions()) {
    const attributionExtent = extent !== undefined ?
      extent : epsg4326Projection.getExtent();

    this.setAttributions(function(frameState) {
      if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* intersects */ "F"])(attributionExtent, frameState.extent)) {
        return [tileJSON.attribution];
      }
      return null;
    });

  }
  this.tileJSON_ = tileJSON;
  this.setState(_source_State_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].READY);

};


/**
 * @protected
 */
TileJSON.prototype.handleTileJSONError = function() {
  this.setState(_source_State_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].ERROR);
};
/* harmony default export */ __webpack_exports__["a"] = (TileJSON);


/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/reproj/common.js
var common = __webpack_require__(85);

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/ImageState.js
var ImageState = __webpack_require__(35);

// EXTERNAL MODULE: ../src/ol/array.js
var array = __webpack_require__(16);

// EXTERNAL MODULE: ../src/ol/events/Event.js
var Event = __webpack_require__(36);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// EXTERNAL MODULE: ../src/ol/ImageBase.js
var ImageBase = __webpack_require__(124);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/events/EventType.js
var EventType = __webpack_require__(14);

// EXTERNAL MODULE: ../src/ol/reproj.js
var reproj = __webpack_require__(140);

// EXTERNAL MODULE: ../src/ol/reproj/Triangulation.js
var Triangulation = __webpack_require__(225);

// CONCATENATED MODULE: ../src/ol/reproj/Image.js
/**
 * @module ol/reproj/Image
 */











/**
 * @typedef {function(module:ol/extent~Extent, number, number) : module:ol/ImageBase} FunctionType
 */


/**
 * @classdesc
 * Class encapsulating single reprojected image.
 * See {@link module:ol/source/Image~ImageSource}.
 *
 * @constructor
 * @extends {module:ol/ImageBase}
 * @param {module:ol/proj/Projection} sourceProj Source projection (of the data).
 * @param {module:ol/proj/Projection} targetProj Target projection.
 * @param {module:ol/extent~Extent} targetExtent Target extent.
 * @param {number} targetResolution Target resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/reproj/Image~FunctionType} getImageFunction
 *     Function returning source images (extent, resolution, pixelRatio).
 */
const ReprojImage = function(sourceProj, targetProj,
  targetExtent, targetResolution, pixelRatio, getImageFunction) {

  /**
   * @private
   * @type {module:ol/proj/Projection}
   */
  this.targetProj_ = targetProj;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.maxSourceExtent_ = sourceProj.getExtent();
  const maxTargetExtent = targetProj.getExtent();

  const limitedTargetExtent = maxTargetExtent ?
    Object(ol_extent["B" /* getIntersection */])(targetExtent, maxTargetExtent) : targetExtent;

  const targetCenter = Object(ol_extent["x" /* getCenter */])(limitedTargetExtent);
  const sourceResolution = Object(reproj["a" /* calculateSourceResolution */])(
    sourceProj, targetProj, targetCenter, targetResolution);

  const errorThresholdInPixels = common["b" /* ERROR_THRESHOLD */];

  /**
   * @private
   * @type {!module:ol/reproj/Triangulation}
   */
  this.triangulation_ = new Triangulation["a" /* default */](
    sourceProj, targetProj, limitedTargetExtent, this.maxSourceExtent_,
    sourceResolution * errorThresholdInPixels);

  /**
   * @private
   * @type {number}
   */
  this.targetResolution_ = targetResolution;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.targetExtent_ = targetExtent;

  const sourceExtent = this.triangulation_.calculateSourceExtent();

  /**
   * @private
   * @type {module:ol/ImageBase}
   */
  this.sourceImage_ =
      getImageFunction(sourceExtent, sourceResolution, pixelRatio);

  /**
   * @private
   * @type {number}
   */
  this.sourcePixelRatio_ =
      this.sourceImage_ ? this.sourceImage_.getPixelRatio() : 1;

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = null;

  /**
   * @private
   * @type {?module:ol/events~EventsKey}
   */
  this.sourceListenerKey_ = null;


  let state = ImageState["a" /* default */].LOADED;

  if (this.sourceImage_) {
    state = ImageState["a" /* default */].IDLE;
  }

  ImageBase["a" /* default */].call(this, targetExtent, targetResolution, this.sourcePixelRatio_, state);
};

Object(util["c" /* inherits */])(ReprojImage, ImageBase["a" /* default */]);


/**
 * @inheritDoc
 */
ReprojImage.prototype.disposeInternal = function() {
  if (this.state == ImageState["a" /* default */].LOADING) {
    this.unlistenSource_();
  }
  ImageBase["a" /* default */].prototype.disposeInternal.call(this);
};


/**
 * @inheritDoc
 */
ReprojImage.prototype.getImage = function() {
  return this.canvas_;
};


/**
 * @return {module:ol/proj/Projection} Projection.
 */
ReprojImage.prototype.getProjection = function() {
  return this.targetProj_;
};


/**
 * @private
 */
ReprojImage.prototype.reproject_ = function() {
  const sourceState = this.sourceImage_.getState();
  if (sourceState == ImageState["a" /* default */].LOADED) {
    const width = Object(ol_extent["E" /* getWidth */])(this.targetExtent_) / this.targetResolution_;
    const height = Object(ol_extent["A" /* getHeight */])(this.targetExtent_) / this.targetResolution_;

    this.canvas_ = Object(reproj["b" /* render */])(width, height, this.sourcePixelRatio_,
      this.sourceImage_.getResolution(), this.maxSourceExtent_,
      this.targetResolution_, this.targetExtent_, this.triangulation_, [{
        extent: this.sourceImage_.getExtent(),
        image: this.sourceImage_.getImage()
      }], 0);
  }
  this.state = sourceState;
  this.changed();
};


/**
 * @inheritDoc
 */
ReprojImage.prototype.load = function() {
  if (this.state == ImageState["a" /* default */].IDLE) {
    this.state = ImageState["a" /* default */].LOADING;
    this.changed();

    const sourceState = this.sourceImage_.getState();
    if (sourceState == ImageState["a" /* default */].LOADED || sourceState == ImageState["a" /* default */].ERROR) {
      this.reproject_();
    } else {
      this.sourceListenerKey_ = Object(events["a" /* listen */])(this.sourceImage_,
        EventType["a" /* default */].CHANGE, function(e) {
          const sourceState = this.sourceImage_.getState();
          if (sourceState == ImageState["a" /* default */].LOADED || sourceState == ImageState["a" /* default */].ERROR) {
            this.unlistenSource_();
            this.reproject_();
          }
        }, this);
      this.sourceImage_.load();
    }
  }
};


/**
 * @private
 */
ReprojImage.prototype.unlistenSource_ = function() {
  Object(events["e" /* unlistenByKey */])(/** @type {!module:ol/events~EventsKey} */ (this.sourceListenerKey_));
  this.sourceListenerKey_ = null;
};
/* harmony default export */ var Image = (ReprojImage);

// EXTERNAL MODULE: ../src/ol/source/Source.js
var Source = __webpack_require__(131);

// CONCATENATED MODULE: ../src/ol/source/Image.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return defaultImageLoadFunction; });
/**
 * @module ol/source/Image
 */











/**
 * @enum {string}
 */
const ImageSourceEventType = {

  /**
   * Triggered when an image starts loading.
   * @event ol/source/Image~ImageSourceEvent#imageloadstart
   * @api
   */
  IMAGELOADSTART: 'imageloadstart',

  /**
   * Triggered when an image finishes loading.
   * @event ol/source/Image~ImageSourceEvent#imageloadend
   * @api
   */
  IMAGELOADEND: 'imageloadend',

  /**
   * Triggered if image loading results in an error.
   * @event ol/source/Image~ImageSourceEvent#imageloaderror
   * @api
   */
  IMAGELOADERROR: 'imageloaderror'

};


/**
 * @classdesc
 * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this
 * type.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {string} type Type.
 * @param {module:ol/Image} image The image.
 */
const ImageSourceEvent = function(type, image) {

  Event["a" /* default */].call(this, type);

  /**
   * The image related to the event.
   * @type {module:ol/Image}
   * @api
   */
  this.image = image;

};
Object(util["c" /* inherits */])(ImageSourceEvent, Event["a" /* default */]);


/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions]
 * @property {module:ol/extent~Extent} [extent]
 * @property {module:ol/proj~ProjectionLike} projection
 * @property {Array.<number>} [resolutions]
 * @property {module:ol/source/State} [state]
 */


/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for sources providing a single image.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/source/Source}
 * @param {module:ol/source/Image~Options} options Single image source options.
 * @api
 */
const ImageSource = function(options) {
  Source["a" /* default */].call(this, {
    attributions: options.attributions,
    extent: options.extent,
    projection: options.projection,
    state: options.state
  });

  /**
   * @private
   * @type {Array.<number>}
   */
  this.resolutions_ = options.resolutions !== undefined ?
    options.resolutions : null;


  /**
   * @private
   * @type {module:ol/reproj/Image}
   */
  this.reprojectedImage_ = null;


  /**
   * @private
   * @type {number}
   */
  this.reprojectedRevision_ = 0;
};

Object(util["c" /* inherits */])(ImageSource, Source["a" /* default */]);


/**
 * @return {Array.<number>} Resolutions.
 * @override
 */
ImageSource.prototype.getResolutions = function() {
  return this.resolutions_;
};


/**
 * @protected
 * @param {number} resolution Resolution.
 * @return {number} Resolution.
 */
ImageSource.prototype.findNearestResolution = function(resolution) {
  if (this.resolutions_) {
    const idx = Object(array["h" /* linearFindNearest */])(this.resolutions_, resolution, 0);
    resolution = this.resolutions_[idx];
  }
  return resolution;
};


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {module:ol/ImageBase} Single image.
 */
ImageSource.prototype.getImage = function(extent, resolution, pixelRatio, projection) {
  const sourceProjection = this.getProjection();
  if (!common["a" /* ENABLE_RASTER_REPROJECTION */] ||
      !sourceProjection ||
      !projection ||
      Object(proj["f" /* equivalent */])(sourceProjection, projection)) {
    if (sourceProjection) {
      projection = sourceProjection;
    }
    return this.getImageInternal(extent, resolution, pixelRatio, projection);
  } else {
    if (this.reprojectedImage_) {
      if (this.reprojectedRevision_ == this.getRevision() &&
          Object(proj["f" /* equivalent */])(
            this.reprojectedImage_.getProjection(), projection) &&
          this.reprojectedImage_.getResolution() == resolution &&
          Object(ol_extent["p" /* equals */])(this.reprojectedImage_.getExtent(), extent)) {
        return this.reprojectedImage_;
      }
      this.reprojectedImage_.dispose();
      this.reprojectedImage_ = null;
    }

    this.reprojectedImage_ = new Image(
      sourceProjection, projection, extent, resolution, pixelRatio,
      function(extent, resolution, pixelRatio) {
        return this.getImageInternal(extent, resolution,
          pixelRatio, sourceProjection);
      }.bind(this));
    this.reprojectedRevision_ = this.getRevision();

    return this.reprojectedImage_;
  }
};


/**
 * @abstract
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {module:ol/ImageBase} Single image.
 * @protected
 */
ImageSource.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {};


/**
 * Handle image change events.
 * @param {module:ol/events/Event} event Event.
 * @protected
 */
ImageSource.prototype.handleImageChange = function(event) {
  const image = /** @type {module:ol/Image} */ (event.target);
  switch (image.getState()) {
    case ImageState["a" /* default */].LOADING:
      this.dispatchEvent(
        new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART,
          image));
      break;
    case ImageState["a" /* default */].LOADED:
      this.dispatchEvent(
        new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND,
          image));
      break;
    case ImageState["a" /* default */].ERROR:
      this.dispatchEvent(
        new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR,
          image));
      break;
    default:
      // pass
  }
};


/**
 * Default image load function for image sources that use module:ol/Image~Image image
 * instances.
 * @param {module:ol/Image} image Image.
 * @param {string} src Source.
 */
function defaultImageLoadFunction(image, src) {
  image.getImage().src = src;
}


/* harmony default export */ var source_Image = __webpack_exports__["a"] = (ImageSource);


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/reproj/common.js
var common = __webpack_require__(85);

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/ImageTile.js
var ImageTile = __webpack_require__(161);

// EXTERNAL MODULE: ../src/ol/TileCache.js
var TileCache = __webpack_require__(185);

// EXTERNAL MODULE: ../src/ol/TileState.js
var TileState = __webpack_require__(19);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/events/EventType.js
var EventType = __webpack_require__(14);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var ol_proj = __webpack_require__(7);

// EXTERNAL MODULE: ../src/ol/Tile.js
var Tile = __webpack_require__(69);

// EXTERNAL MODULE: ../src/ol/extent.js
var extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// EXTERNAL MODULE: ../src/ol/reproj.js
var reproj = __webpack_require__(140);

// EXTERNAL MODULE: ../src/ol/reproj/Triangulation.js
var Triangulation = __webpack_require__(225);

// CONCATENATED MODULE: ../src/ol/reproj/Tile.js
/**
 * @module ol/reproj/Tile
 */












/**
 * @typedef {function(number, number, number, number) : module:ol/Tile} FunctionType
 */


/**
 * @classdesc
 * Class encapsulating single reprojected tile.
 * See {@link module:ol/source/TileImage~TileImage}.
 *
 * @constructor
 * @extends {module:ol/Tile}
 * @param {module:ol/proj/Projection} sourceProj Source projection.
 * @param {module:ol/tilegrid/TileGrid} sourceTileGrid Source tile grid.
 * @param {module:ol/proj/Projection} targetProj Target projection.
 * @param {module:ol/tilegrid/TileGrid} targetTileGrid Target tile grid.
 * @param {module:ol/tilecoord~TileCoord} tileCoord Coordinate of the tile.
 * @param {module:ol/tilecoord~TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
 * @param {number} pixelRatio Pixel ratio.
 * @param {number} gutter Gutter of the source tiles.
 * @param {module:ol/reproj/Tile~FunctionType} getTileFunction
 *     Function returning source tiles (z, x, y, pixelRatio).
 * @param {number=} opt_errorThreshold Acceptable reprojection error (in px).
 * @param {boolean=} opt_renderEdges Render reprojection edges.
 */
const ReprojTile = function(sourceProj, sourceTileGrid,
  targetProj, targetTileGrid, tileCoord, wrappedTileCoord,
  pixelRatio, gutter, getTileFunction,
  opt_errorThreshold, opt_renderEdges) {
  Tile["a" /* default */].call(this, tileCoord, TileState["a" /* default */].IDLE);

  /**
   * @private
   * @type {boolean}
   */
  this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;

  /**
   * @private
   * @type {number}
   */
  this.pixelRatio_ = pixelRatio;

  /**
   * @private
   * @type {number}
   */
  this.gutter_ = gutter;

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = null;

  /**
   * @private
   * @type {module:ol/tilegrid/TileGrid}
   */
  this.sourceTileGrid_ = sourceTileGrid;

  /**
   * @private
   * @type {module:ol/tilegrid/TileGrid}
   */
  this.targetTileGrid_ = targetTileGrid;

  /**
   * @private
   * @type {module:ol/tilecoord~TileCoord}
   */
  this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;

  /**
   * @private
   * @type {!Array.<module:ol/Tile>}
   */
  this.sourceTiles_ = [];

  /**
   * @private
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.sourcesListenerKeys_ = null;

  /**
   * @private
   * @type {number}
   */
  this.sourceZ_ = 0;

  const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);
  const maxTargetExtent = this.targetTileGrid_.getExtent();
  let maxSourceExtent = this.sourceTileGrid_.getExtent();

  const limitedTargetExtent = maxTargetExtent ?
    Object(extent["B" /* getIntersection */])(targetExtent, maxTargetExtent) : targetExtent;

  if (Object(extent["u" /* getArea */])(limitedTargetExtent) === 0) {
    // Tile is completely outside range -> EMPTY
    // TODO: is it actually correct that the source even creates the tile ?
    this.state = TileState["a" /* default */].EMPTY;
    return;
  }

  const sourceProjExtent = sourceProj.getExtent();
  if (sourceProjExtent) {
    if (!maxSourceExtent) {
      maxSourceExtent = sourceProjExtent;
    } else {
      maxSourceExtent = Object(extent["B" /* getIntersection */])(maxSourceExtent, sourceProjExtent);
    }
  }

  const targetResolution = targetTileGrid.getResolution(
    this.wrappedTileCoord_[0]);

  const targetCenter = Object(extent["x" /* getCenter */])(limitedTargetExtent);
  const sourceResolution = Object(reproj["a" /* calculateSourceResolution */])(
    sourceProj, targetProj, targetCenter, targetResolution);

  if (!isFinite(sourceResolution) || sourceResolution <= 0) {
    // invalid sourceResolution -> EMPTY
    // probably edges of the projections when no extent is defined
    this.state = TileState["a" /* default */].EMPTY;
    return;
  }

  const errorThresholdInPixels = opt_errorThreshold !== undefined ?
    opt_errorThreshold : common["b" /* ERROR_THRESHOLD */];

  /**
   * @private
   * @type {!module:ol/reproj/Triangulation}
   */
  this.triangulation_ = new Triangulation["a" /* default */](
    sourceProj, targetProj, limitedTargetExtent, maxSourceExtent,
    sourceResolution * errorThresholdInPixels);

  if (this.triangulation_.getTriangles().length === 0) {
    // no valid triangles -> EMPTY
    this.state = TileState["a" /* default */].EMPTY;
    return;
  }

  this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
  let sourceExtent = this.triangulation_.calculateSourceExtent();

  if (maxSourceExtent) {
    if (sourceProj.canWrapX()) {
      sourceExtent[1] = Object(math["a" /* clamp */])(
        sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
      sourceExtent[3] = Object(math["a" /* clamp */])(
        sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
    } else {
      sourceExtent = Object(extent["B" /* getIntersection */])(sourceExtent, maxSourceExtent);
    }
  }

  if (!Object(extent["u" /* getArea */])(sourceExtent)) {
    this.state = TileState["a" /* default */].EMPTY;
  } else {
    const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(
      sourceExtent, this.sourceZ_);

    for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
      for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
        const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);
        if (tile) {
          this.sourceTiles_.push(tile);
        }
      }
    }

    if (this.sourceTiles_.length === 0) {
      this.state = TileState["a" /* default */].EMPTY;
    }
  }
};

Object(util["c" /* inherits */])(ReprojTile, Tile["a" /* default */]);


/**
 * @inheritDoc
 */
ReprojTile.prototype.disposeInternal = function() {
  if (this.state == TileState["a" /* default */].LOADING) {
    this.unlistenSources_();
  }
  Tile["a" /* default */].prototype.disposeInternal.call(this);
};


/**
 * Get the HTML Canvas element for this tile.
 * @return {HTMLCanvasElement} Canvas.
 */
ReprojTile.prototype.getImage = function() {
  return this.canvas_;
};


/**
 * @private
 */
ReprojTile.prototype.reproject_ = function() {
  const sources = [];
  this.sourceTiles_.forEach(function(tile, i, arr) {
    if (tile && tile.getState() == TileState["a" /* default */].LOADED) {
      sources.push({
        extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
        image: tile.getImage()
      });
    }
  }.bind(this));
  this.sourceTiles_.length = 0;

  if (sources.length === 0) {
    this.state = TileState["a" /* default */].ERROR;
  } else {
    const z = this.wrappedTileCoord_[0];
    const size = this.targetTileGrid_.getTileSize(z);
    const width = typeof size === 'number' ? size : size[0];
    const height = typeof size === 'number' ? size : size[1];
    const targetResolution = this.targetTileGrid_.getResolution(z);
    const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);

    const targetExtent = this.targetTileGrid_.getTileCoordExtent(
      this.wrappedTileCoord_);
    this.canvas_ = Object(reproj["b" /* render */])(width, height, this.pixelRatio_,
      sourceResolution, this.sourceTileGrid_.getExtent(),
      targetResolution, targetExtent, this.triangulation_, sources,
      this.gutter_, this.renderEdges_);

    this.state = TileState["a" /* default */].LOADED;
  }
  this.changed();
};


/**
 * @inheritDoc
 */
ReprojTile.prototype.load = function() {
  if (this.state == TileState["a" /* default */].IDLE) {
    this.state = TileState["a" /* default */].LOADING;
    this.changed();

    let leftToLoad = 0;

    this.sourcesListenerKeys_ = [];
    this.sourceTiles_.forEach(function(tile, i, arr) {
      const state = tile.getState();
      if (state == TileState["a" /* default */].IDLE || state == TileState["a" /* default */].LOADING) {
        leftToLoad++;

        const sourceListenKey = Object(events["a" /* listen */])(tile, EventType["a" /* default */].CHANGE,
          function(e) {
            const state = tile.getState();
            if (state == TileState["a" /* default */].LOADED ||
                  state == TileState["a" /* default */].ERROR ||
                  state == TileState["a" /* default */].EMPTY) {
              Object(events["e" /* unlistenByKey */])(sourceListenKey);
              leftToLoad--;
              if (leftToLoad === 0) {
                this.unlistenSources_();
                this.reproject_();
              }
            }
          }, this);
        this.sourcesListenerKeys_.push(sourceListenKey);
      }
    }.bind(this));

    this.sourceTiles_.forEach(function(tile, i, arr) {
      const state = tile.getState();
      if (state == TileState["a" /* default */].IDLE) {
        tile.load();
      }
    });

    if (leftToLoad === 0) {
      setTimeout(this.reproject_.bind(this), 0);
    }
  }
};


/**
 * @private
 */
ReprojTile.prototype.unlistenSources_ = function() {
  this.sourcesListenerKeys_.forEach(events["e" /* unlistenByKey */]);
  this.sourcesListenerKeys_ = null;
};
/* harmony default export */ var reproj_Tile = (ReprojTile);

// EXTERNAL MODULE: ../src/ol/source/UrlTile.js + 1 modules
var UrlTile = __webpack_require__(116);

// EXTERNAL MODULE: ../src/ol/tilecoord.js
var tilecoord = __webpack_require__(57);

// EXTERNAL MODULE: ../src/ol/tilegrid.js
var ol_tilegrid = __webpack_require__(67);

// CONCATENATED MODULE: ../src/ol/source/TileImage.js
/**
 * @module ol/source/TileImage
 */













/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=2048] Cache size.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {boolean} [opaque=true] Whether the layer is opaque.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {boolean} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {module:ol/source/State} [state] Source state.
 * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.
 * Default is {@link module:ol/ImageTile~ImageTile}.
 * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
 * service advertizes 256px by 256px tiles but actually sends 512px
 * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
 * should be set to `2`.
 * @property {module:ol/Tile~UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
 * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
 * used instead of defining each one separately in the `urls` option.
 * @property {Array.<string>} [urls] An array of URL templates.
 * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
 * request out-of-bounds tiles from the server. When set to `false`, only one
 * world will be rendered. When set to `true`, tiles will be requested for one
 * world only, but they will be wrapped horizontally to render multiple worlds.
 * @property {number} [transition] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 */


/**
 * @classdesc
 * Base class for sources providing images divided into a tile grid.
 *
 * @constructor
 * @fires module:ol/source/Tile~TileSourceEvent
 * @extends {module:ol/source/UrlTile}
 * @param {module:ol/source/TileImage~Options=} options Image tile options.
 * @api
 */
const TileImage = function(options) {

  UrlTile["a" /* default */].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize,
    extent: options.extent,
    opaque: options.opaque,
    projection: options.projection,
    state: options.state,
    tileGrid: options.tileGrid,
    tileLoadFunction: options.tileLoadFunction ?
      options.tileLoadFunction : defaultTileLoadFunction,
    tilePixelRatio: options.tilePixelRatio,
    tileUrlFunction: options.tileUrlFunction,
    url: options.url,
    urls: options.urls,
    wrapX: options.wrapX,
    transition: options.transition
  });

  /**
   * @protected
   * @type {?string}
   */
  this.crossOrigin =
      options.crossOrigin !== undefined ? options.crossOrigin : null;

  /**
   * @protected
   * @type {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord, module:ol/TileState, string,
   *        ?string, module:ol/Tile~LoadFunction, module:ol/Tile~Options=)}
   */
  this.tileClass = options.tileClass !== undefined ?
    options.tileClass : ImageTile["a" /* default */];

  /**
   * @protected
   * @type {!Object.<string, module:ol/TileCache>}
   */
  this.tileCacheForProjection = {};

  /**
   * @protected
   * @type {!Object.<string, module:ol/tilegrid/TileGrid>}
   */
  this.tileGridForProjection = {};

  /**
   * @private
   * @type {number|undefined}
   */
  this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;

  /**
   * @private
   * @type {boolean}
   */
  this.renderReprojectionEdges_ = false;
};

Object(util["c" /* inherits */])(TileImage, UrlTile["a" /* default */]);


/**
 * @inheritDoc
 */
TileImage.prototype.canExpireCache = function() {
  if (!common["a" /* ENABLE_RASTER_REPROJECTION */]) {
    return UrlTile["a" /* default */].prototype.canExpireCache.call(this);
  }
  if (this.tileCache.canExpireCache()) {
    return true;
  } else {
    for (const key in this.tileCacheForProjection) {
      if (this.tileCacheForProjection[key].canExpireCache()) {
        return true;
      }
    }
  }
  return false;
};


/**
 * @inheritDoc
 */
TileImage.prototype.expireCache = function(projection, usedTiles) {
  if (!common["a" /* ENABLE_RASTER_REPROJECTION */]) {
    UrlTile["a" /* default */].prototype.expireCache.call(this, projection, usedTiles);
    return;
  }
  const usedTileCache = this.getTileCacheForProjection(projection);

  this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
  for (const id in this.tileCacheForProjection) {
    const tileCache = this.tileCacheForProjection[id];
    tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
  }
};


/**
 * @inheritDoc
 */
TileImage.prototype.getGutter = function(projection) {
  if (common["a" /* ENABLE_RASTER_REPROJECTION */] &&
      this.getProjection() && projection && !Object(ol_proj["f" /* equivalent */])(this.getProjection(), projection)) {
    return 0;
  } else {
    return this.getGutterInternal();
  }
};


/**
 * @protected
 * @return {number} Gutter.
 */
TileImage.prototype.getGutterInternal = function() {
  return 0;
};


/**
 * @inheritDoc
 */
TileImage.prototype.getOpaque = function(projection) {
  if (common["a" /* ENABLE_RASTER_REPROJECTION */] &&
      this.getProjection() && projection && !Object(ol_proj["f" /* equivalent */])(this.getProjection(), projection)) {
    return false;
  } else {
    return UrlTile["a" /* default */].prototype.getOpaque.call(this, projection);
  }
};


/**
 * @inheritDoc
 */
TileImage.prototype.getTileGridForProjection = function(projection) {
  if (!common["a" /* ENABLE_RASTER_REPROJECTION */]) {
    return UrlTile["a" /* default */].prototype.getTileGridForProjection.call(this, projection);
  }
  const thisProj = this.getProjection();
  if (this.tileGrid && (!thisProj || Object(ol_proj["f" /* equivalent */])(thisProj, projection))) {
    return this.tileGrid;
  } else {
    const projKey = Object(util["b" /* getUid */])(projection).toString();
    if (!(projKey in this.tileGridForProjection)) {
      this.tileGridForProjection[projKey] = Object(ol_tilegrid["d" /* getForProjection */])(projection);
    }
    return (
      /** @type {!module:ol/tilegrid/TileGrid} */ (this.tileGridForProjection[projKey])
    );
  }
};


/**
 * @inheritDoc
 */
TileImage.prototype.getTileCacheForProjection = function(projection) {
  if (!common["a" /* ENABLE_RASTER_REPROJECTION */]) {
    return UrlTile["a" /* default */].prototype.getTileCacheForProjection.call(this, projection);
  }
  const thisProj = this.getProjection(); if (!thisProj || Object(ol_proj["f" /* equivalent */])(thisProj, projection)) {
    return this.tileCache;
  } else {
    const projKey = Object(util["b" /* getUid */])(projection).toString();
    if (!(projKey in this.tileCacheForProjection)) {
      this.tileCacheForProjection[projKey] = new TileCache["a" /* default */](this.tileCache.highWaterMark);
    }
    return this.tileCacheForProjection[projKey];
  }
};


/**
 * @param {number} z Tile coordinate z.
 * @param {number} x Tile coordinate x.
 * @param {number} y Tile coordinate y.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {string} key The key set on the tile.
 * @return {!module:ol/Tile} Tile.
 * @private
 */
TileImage.prototype.createTile_ = function(z, x, y, pixelRatio, projection, key) {
  const tileCoord = [z, x, y];
  const urlTileCoord = this.getTileCoordForTileUrlFunction(
    tileCoord, projection);
  const tileUrl = urlTileCoord ?
    this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;
  const tile = new this.tileClass(
    tileCoord,
    tileUrl !== undefined ? TileState["a" /* default */].IDLE : TileState["a" /* default */].EMPTY,
    tileUrl !== undefined ? tileUrl : '',
    this.crossOrigin,
    this.tileLoadFunction,
    this.tileOptions);
  tile.key = key;
  Object(events["a" /* listen */])(tile, EventType["a" /* default */].CHANGE,
    this.handleTileChange, this);
  return tile;
};


/**
 * @inheritDoc
 */
TileImage.prototype.getTile = function(z, x, y, pixelRatio, projection) {
  const sourceProjection = /** @type {!module:ol/proj/Projection} */ (this.getProjection());
  if (!common["a" /* ENABLE_RASTER_REPROJECTION */] ||
      !sourceProjection || !projection || Object(ol_proj["f" /* equivalent */])(sourceProjection, projection)) {
    return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);
  } else {
    const cache = this.getTileCacheForProjection(projection);
    const tileCoord = [z, x, y];
    let tile;
    const tileCoordKey = Object(tilecoord["c" /* getKey */])(tileCoord);
    if (cache.containsKey(tileCoordKey)) {
      tile = /** @type {!module:ol/Tile} */ (cache.get(tileCoordKey));
    }
    const key = this.getKey();
    if (tile && tile.key == key) {
      return tile;
    } else {
      const sourceTileGrid = this.getTileGridForProjection(sourceProjection);
      const targetTileGrid = this.getTileGridForProjection(projection);
      const wrappedTileCoord =
          this.getTileCoordForTileUrlFunction(tileCoord, projection);
      const newTile = new reproj_Tile(
        sourceProjection, sourceTileGrid,
        projection, targetTileGrid,
        tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),
        this.getGutterInternal(),
        function(z, x, y, pixelRatio) {
          return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);
        }.bind(this), this.reprojectionErrorThreshold_,
        this.renderReprojectionEdges_);
      newTile.key = key;

      if (tile) {
        newTile.interimTile = tile;
        newTile.refreshInterimChain();
        cache.replace(tileCoordKey, newTile);
      } else {
        cache.set(tileCoordKey, newTile);
      }
      return newTile;
    }
  }
};


/**
 * @param {number} z Tile coordinate z.
 * @param {number} x Tile coordinate x.
 * @param {number} y Tile coordinate y.
 * @param {number} pixelRatio Pixel ratio.
 * @param {!module:ol/proj/Projection} projection Projection.
 * @return {!module:ol/Tile} Tile.
 * @protected
 */
TileImage.prototype.getTileInternal = function(z, x, y, pixelRatio, projection) {
  let tile = null;
  const tileCoordKey = Object(tilecoord["d" /* getKeyZXY */])(z, x, y);
  const key = this.getKey();
  if (!this.tileCache.containsKey(tileCoordKey)) {
    tile = this.createTile_(z, x, y, pixelRatio, projection, key);
    this.tileCache.set(tileCoordKey, tile);
  } else {
    tile = this.tileCache.get(tileCoordKey);
    if (tile.key != key) {
      // The source's params changed. If the tile has an interim tile and if we
      // can use it then we use it. Otherwise we create a new tile.  In both
      // cases we attempt to assign an interim tile to the new tile.
      const interimTile = tile;
      tile = this.createTile_(z, x, y, pixelRatio, projection, key);

      //make the new tile the head of the list,
      if (interimTile.getState() == TileState["a" /* default */].IDLE) {
        //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
        tile.interimTile = interimTile.interimTile;
      } else {
        tile.interimTile = interimTile;
      }
      tile.refreshInterimChain();
      this.tileCache.replace(tileCoordKey, tile);
    }
  }
  return tile;
};


/**
 * Sets whether to render reprojection edges or not (usually for debugging).
 * @param {boolean} render Render the edges.
 * @api
 */
TileImage.prototype.setRenderReprojectionEdges = function(render) {
  if (!common["a" /* ENABLE_RASTER_REPROJECTION */] ||
      this.renderReprojectionEdges_ == render) {
    return;
  }
  this.renderReprojectionEdges_ = render;
  for (const id in this.tileCacheForProjection) {
    this.tileCacheForProjection[id].clear();
  }
  this.changed();
};


/**
 * Sets the tile grid to use when reprojecting the tiles to the given
 * projection instead of the default tile grid for the projection.
 *
 * This can be useful when the default tile grid cannot be created
 * (e.g. projection has no extent defined) or
 * for optimization reasons (custom tile size, resolutions, ...).
 *
 * @param {module:ol/proj~ProjectionLike} projection Projection.
 * @param {module:ol/tilegrid/TileGrid} tilegrid Tile grid to use for the projection.
 * @api
 */
TileImage.prototype.setTileGridForProjection = function(projection, tilegrid) {
  if (common["a" /* ENABLE_RASTER_REPROJECTION */]) {
    const proj = Object(ol_proj["h" /* get */])(projection);
    if (proj) {
      const projKey = Object(util["b" /* getUid */])(proj).toString();
      if (!(projKey in this.tileGridForProjection)) {
        this.tileGridForProjection[projKey] = tilegrid;
      }
    }
  }
};


/**
 * @param {module:ol/ImageTile} imageTile Image tile.
 * @param {string} src Source.
 */
function defaultTileLoadFunction(imageTile, src) {
  imageTile.getImage().src = src;
}

/* harmony default export */ var source_TileImage = __webpack_exports__["a"] = (TileImage);


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return visibleAtResolution; });
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(31);
/* harmony import */ var _layer_Base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(195);
/* harmony import */ var _layer_Property_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(76);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(15);
/* harmony import */ var _render_EventType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(78);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(50);
/**
 * @module ol/layer/Layer
 */











/**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {module:ol/source/Source} [source] Source for this layer.  If not provided to the constructor,
 * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after
 * construction.
 */


/**
 * @typedef {Object} State
 * @property {module:ol/layer/Layer} layer
 * @property {number} opacity
 * @property {module:ol/source/Source~State} sourceState
 * @property {boolean} visible
 * @property {boolean} managed
 * @property {module:ol/extent~Extent} [extent]
 * @property {number} zIndex
 * @property {number} maxResolution
 * @property {number} minResolution
 */


/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * A visual representation of raster or vector map data.
 * Layers group together those properties that pertain to how the data is to be
 * displayed, irrespective of the source of that data.
 *
 * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components
 * like {@link module:ol/interaction/Select~Select} use unmanaged layers
 * internally. These unmanaged layers are associated with the map using
 * {@link module:ol/layer/Layer~Layer#setMap} instead.
 *
 * A generic `change` event is fired when the state of the source changes.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/layer/Base}
 * @fires module:ol/render/Event~RenderEvent
 * @param {module:ol/layer/Layer~Options} options Layer options.
 * @api
 */
const Layer = function(options) {

  const baseOptions = Object(_obj_js__WEBPACK_IMPORTED_MODULE_6__[/* assign */ "a"])({}, options);
  delete baseOptions.source;

  _layer_Base_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this, /** @type {module:ol/layer/Base~Options} */ (baseOptions));

  /**
   * @private
   * @type {?module:ol/events~EventsKey}
   */
  this.mapPrecomposeKey_ = null;

  /**
   * @private
   * @type {?module:ol/events~EventsKey}
   */
  this.mapRenderKey_ = null;

  /**
   * @private
   * @type {?module:ol/events~EventsKey}
   */
  this.sourceChangeKey_ = null;

  if (options.map) {
    this.setMap(options.map);
  }

  Object(_events_js__WEBPACK_IMPORTED_MODULE_0__[/* listen */ "a"])(this,
    Object(_Object_js__WEBPACK_IMPORTED_MODULE_3__[/* getChangeEventType */ "b"])(_layer_Property_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].SOURCE),
    this.handleSourcePropertyChange_, this);

  const source = options.source ? options.source : null;
  this.setSource(source);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_2__[/* inherits */ "c"])(Layer, _layer_Base_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * Return `true` if the layer is visible, and if the passed resolution is
 * between the layer's minResolution and maxResolution. The comparison is
 * inclusive for `minResolution` and exclusive for `maxResolution`.
 * @param {module:ol/layer/Layer~State} layerState Layer state.
 * @param {number} resolution Resolution.
 * @return {boolean} The layer is visible at the given resolution.
 */
function visibleAtResolution(layerState, resolution) {
  return layerState.visible && resolution >= layerState.minResolution &&
      resolution < layerState.maxResolution;
}


/**
 * @inheritDoc
 */
Layer.prototype.getLayersArray = function(opt_array) {
  const array = opt_array ? opt_array : [];
  array.push(this);
  return array;
};


/**
 * @inheritDoc
 */
Layer.prototype.getLayerStatesArray = function(opt_states) {
  const states = opt_states ? opt_states : [];
  states.push(this.getLayerState());
  return states;
};


/**
 * Get the layer source.
 * @return {module:ol/source/Source} The layer source (or `null` if not yet set).
 * @observable
 * @api
 */
Layer.prototype.getSource = function() {
  const source = this.get(_layer_Property_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].SOURCE);
  return (
    /** @type {module:ol/source/Source} */ (source) || null
  );
};


/**
  * @inheritDoc
  */
Layer.prototype.getSourceState = function() {
  const source = this.getSource();
  return !source ? _source_State_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].UNDEFINED : source.getState();
};


/**
 * @private
 */
Layer.prototype.handleSourceChange_ = function() {
  this.changed();
};


/**
 * @private
 */
Layer.prototype.handleSourcePropertyChange_ = function() {
  if (this.sourceChangeKey_) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_0__[/* unlistenByKey */ "e"])(this.sourceChangeKey_);
    this.sourceChangeKey_ = null;
  }
  const source = this.getSource();
  if (source) {
    this.sourceChangeKey_ = Object(_events_js__WEBPACK_IMPORTED_MODULE_0__[/* listen */ "a"])(source,
      _events_EventType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].CHANGE, this.handleSourceChange_, this);
  }
  this.changed();
};


/**
 * Sets the layer to be rendered on top of other layers on a map. The map will
 * not manage this layer in its layers collection, and the callback in
 * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This
 * is useful for temporary layers. To remove an unmanaged layer from the map,
 * use `#setMap(null)`.
 *
 * To add the layer to a map and have it managed by the map, use
 * {@link module:ol/Map#addLayer} instead.
 * @param {module:ol/PluggableMap} map Map.
 * @api
 */
Layer.prototype.setMap = function(map) {
  if (this.mapPrecomposeKey_) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_0__[/* unlistenByKey */ "e"])(this.mapPrecomposeKey_);
    this.mapPrecomposeKey_ = null;
  }
  if (!map) {
    this.changed();
  }
  if (this.mapRenderKey_) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_0__[/* unlistenByKey */ "e"])(this.mapRenderKey_);
    this.mapRenderKey_ = null;
  }
  if (map) {
    this.mapPrecomposeKey_ = Object(_events_js__WEBPACK_IMPORTED_MODULE_0__[/* listen */ "a"])(map, _render_EventType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].PRECOMPOSE, function(evt) {
      const layerState = this.getLayerState();
      layerState.managed = false;
      layerState.zIndex = Infinity;
      evt.frameState.layerStatesArray.push(layerState);
      evt.frameState.layerStates[Object(_util_js__WEBPACK_IMPORTED_MODULE_2__[/* getUid */ "b"])(this)] = layerState;
    }, this);
    this.mapRenderKey_ = Object(_events_js__WEBPACK_IMPORTED_MODULE_0__[/* listen */ "a"])(this, _events_EventType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].CHANGE, map.render, map);
    this.changed();
  }
};


/**
 * Set the layer source.
 * @param {module:ol/source/Source} source The layer source.
 * @observable
 * @api
 */
Layer.prototype.setSource = function(source) {
  this.set(_layer_Property_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].SOURCE, source);
};
/* harmony default export */ __webpack_exports__["a"] = (Layer);


/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getForProjection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return wrapX; });
/* unused harmony export createForExtent */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createXYZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createForProjection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return extentFromProjection; });
/* harmony import */ var _tilegrid_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(147);
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _extent_Corner_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(179);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7);
/* harmony import */ var _proj_Units_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(59);
/* harmony import */ var _tilegrid_TileGrid_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(109);
/**
 * @module ol/tilegrid
 */










/**
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {!module:ol/tilegrid/TileGrid} Default tile grid for the
 * passed projection.
 */
function getForProjection(projection) {
  let tileGrid = projection.getDefaultTileGrid();
  if (!tileGrid) {
    tileGrid = createForProjection(projection);
    projection.setDefaultTileGrid(tileGrid);
  }
  return tileGrid;
}


/**
 * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {module:ol/tilecoord~TileCoord} Tile coordinate.
 */
function wrapX(tileGrid, tileCoord, projection) {
  const z = tileCoord[0];
  const center = tileGrid.getTileCoordCenter(tileCoord);
  const projectionExtent = extentFromProjection(projection);
  if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* containsCoordinate */ "f"])(projectionExtent, center)) {
    const worldWidth = Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* getWidth */ "E"])(projectionExtent);
    const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
    center[0] += worldWidth * worldsAway;
    return tileGrid.getTileCoordForCoordAndZ(center, z);
  } else {
    return tileCoord;
  }
}


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number=} opt_maxZoom Maximum zoom level (default is
 *     DEFAULT_MAX_ZOOM).
 * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses
 *     DEFAULT_TILE_SIZE).
 * @param {module:ol/extent/Corner=} opt_corner Extent corner (default is `'top-left'`).
 * @return {!module:ol/tilegrid/TileGrid} TileGrid instance.
 */
function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
  const corner = opt_corner !== undefined ? opt_corner : _extent_Corner_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TOP_LEFT;

  const resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);

  return new _tilegrid_TileGrid_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]({
    extent: extent,
    origin: Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* getCorner */ "y"])(extent, corner),
    resolutions: resolutions,
    tileSize: opt_tileSize
  });
}


/**
 * @typedef {Object} XYZOptions
 * @property {module:ol/extent~Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
 * top-left corner of the extent. The zero level of the grid is defined by the resolution at which one tile fits in the
 * provided extent. If not provided, the extent of the EPSG:3857 projection is used.
 * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
 * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
 * @property {number} [minZoom=0] Minimum zoom.
 * @property {number|module:ol/size~Size} [tileSize=[256, 256]] Tile size in pixels.
 */


/**
 * Creates a tile grid with a standard XYZ tiling scheme.
 * @param {module:ol/tilegrid~XYZOptions=} opt_options Tile grid options.
 * @return {!module:ol/tilegrid/TileGrid} Tile grid instance.
 * @api
 */
function createXYZ(opt_options) {
  const options = /** @type {module:ol/tilegrid/TileGrid~Options} */ ({});
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_4__[/* assign */ "a"])(options, opt_options !== undefined ?
    opt_options : /** @type {module:ol/tilegrid~XYZOptions} */ ({}));
  if (options.extent === undefined) {
    options.extent = Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* get */ "h"])('EPSG:3857').getExtent();
  }
  options.resolutions = resolutionsFromExtent(
    options.extent, options.maxZoom, options.tileSize);
  delete options.maxZoom;

  return new _tilegrid_TileGrid_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"](options);
}


/**
 * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number=} opt_maxZoom Maximum zoom level (default is
 *     DEFAULT_MAX_ZOOM).
 * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses
 *     DEFAULT_TILE_SIZE).
 * @return {!Array.<number>} Resolutions array.
 */
function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize) {
  const maxZoom = opt_maxZoom !== undefined ?
    opt_maxZoom : _tilegrid_common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_MAX_ZOOM */ "a"];

  const height = Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* getHeight */ "A"])(extent);
  const width = Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* getWidth */ "E"])(extent);

  const tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_1__[/* toSize */ "d"])(opt_tileSize !== undefined ?
    opt_tileSize : _tilegrid_common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_TILE_SIZE */ "b"]);
  const maxResolution = Math.max(
    width / tileSize[0], height / tileSize[1]);

  const length = maxZoom + 1;
  const resolutions = new Array(length);
  for (let z = 0; z < length; ++z) {
    resolutions[z] = maxResolution / Math.pow(2, z);
  }
  return resolutions;
}


/**
 * @param {module:ol/proj~ProjectionLike} projection Projection.
 * @param {number=} opt_maxZoom Maximum zoom level (default is
 *     DEFAULT_MAX_ZOOM).
 * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses
 *     DEFAULT_TILE_SIZE).
 * @param {module:ol/extent/Corner=} opt_corner Extent corner (default is `'top-left'`).
 * @return {!module:ol/tilegrid/TileGrid} TileGrid instance.
 */
function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
  const extent = extentFromProjection(projection);
  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
}


/**
 * Generate a tile grid extent from a projection.  If the projection has an
 * extent, it is used.  If not, a global extent is assumed.
 * @param {module:ol/proj~ProjectionLike} projection Projection.
 * @return {module:ol/extent~Extent} Extent.
 */
function extentFromProjection(projection) {
  projection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* get */ "h"])(projection);
  let extent = projection.getExtent();
  if (!extent) {
    const half = 180 * _proj_js__WEBPACK_IMPORTED_MODULE_5__[/* METERS_PER_UNIT */ "a"][_proj_Units_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "b"].DEGREES] / projection.getMetersPerUnit();
    extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* createOrUpdate */ "k"])(-half, -half, half, half);
  }
  return extent;
}


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _proj_Units_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59);
/**
 * @module ol/proj/Projection
 */



/**
 * @typedef {Object} Options
 * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
 * @property {module:ol/proj/Units|string} [units] Units. Required unless a
 * proj4 projection is defined for `code`.
 * @property {module:ol/extent~Extent} [extent] The validity extent for the SRS.
 * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
 * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
 * @property {number} [metersPerUnit] The meters per unit for the SRS.
 * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
 * lookup table.
 * @property {module:ol/extent~Extent} [worldExtent] The world extent for the SRS.
 * @property {function(number, module:ol/coordinate~Coordinate):number} [getPointResolution]
 * Function to determine resolution at a point. The function is called with a
 * `{number}` view resolution and an `{module:ol/coordinate~Coordinate}` as arguments, and returns
 * the `{number}` resolution at the passed coordinate. If this is `undefined`,
 * the default {@link module:ol/proj#getPointResolution} function will be used.
 */


/**
 * @classdesc
 * Projection definition class. One of these is created for each projection
 * supported in the application and stored in the {@link module:ol/proj} namespace.
 * You can use these in applications, but this is not required, as API params
 * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
 * code will suffice.
 *
 * You can use {@link module:ol/proj~get} to retrieve the object for a particular
 * projection.
 *
 * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
 * with the following aliases:
 * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
 *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
 *     http://www.opengis.net/gml/srs/epsg.xml#4326,
 *     urn:x-ogc:def:crs:EPSG:4326
 * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
 *     urn:ogc:def:crs:EPSG:6.18:3:3857,
 *     http://www.opengis.net/gml/srs/epsg.xml#3857
 *
 * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
 * be added using `proj4.defs()`. After all required projection definitions are
 * added, call the {@link module:ol/proj/proj4~register} function.
 *
 * @constructor
 * @param {module:ol/proj/Projection~Options} options Projection options.
 * @struct
 * @api
 */
const Projection = function(options) {
  /**
   * @private
   * @type {string}
   */
  this.code_ = options.code;

  /**
   * Units of projected coordinates. When set to `TILE_PIXELS`, a
   * `this.extent_` and `this.worldExtent_` must be configured properly for each
   * tile.
   * @private
   * @type {module:ol/proj/Units}
   */
  this.units_ = /** @type {module:ol/proj/Units} */ (options.units);

  /**
   * Validity extent of the projection in projected coordinates. For projections
   * with `TILE_PIXELS` units, this is the extent of the tile in
   * tile pixel space.
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.extent_ = options.extent !== undefined ? options.extent : null;

  /**
   * Extent of the world in EPSG:4326. For projections with
   * `TILE_PIXELS` units, this is the extent of the tile in
   * projected coordinate space.
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.worldExtent_ = options.worldExtent !== undefined ?
    options.worldExtent : null;

  /**
   * @private
   * @type {string}
   */
  this.axisOrientation_ = options.axisOrientation !== undefined ?
    options.axisOrientation : 'enu';

  /**
   * @private
   * @type {boolean}
   */
  this.global_ = options.global !== undefined ? options.global : false;

  /**
   * @private
   * @type {boolean}
   */
  this.canWrapX_ = !!(this.global_ && this.extent_);

  /**
   * @private
   * @type {function(number, module:ol/coordinate~Coordinate):number|undefined}
   */
  this.getPointResolutionFunc_ = options.getPointResolution;

  /**
   * @private
   * @type {module:ol/tilegrid/TileGrid}
   */
  this.defaultTileGrid_ = null;

  /**
   * @private
   * @type {number|undefined}
   */
  this.metersPerUnit_ = options.metersPerUnit;
};


/**
 * @return {boolean} The projection is suitable for wrapping the x-axis
 */
Projection.prototype.canWrapX = function() {
  return this.canWrapX_;
};


/**
 * Get the code for this projection, e.g. 'EPSG:4326'.
 * @return {string} Code.
 * @api
 */
Projection.prototype.getCode = function() {
  return this.code_;
};


/**
 * Get the validity extent for this projection.
 * @return {module:ol/extent~Extent} Extent.
 * @api
 */
Projection.prototype.getExtent = function() {
  return this.extent_;
};


/**
 * Get the units of this projection.
 * @return {module:ol/proj/Units} Units.
 * @api
 */
Projection.prototype.getUnits = function() {
  return this.units_;
};


/**
 * Get the amount of meters per unit of this projection.  If the projection is
 * not configured with `metersPerUnit` or a units identifier, the return is
 * `undefined`.
 * @return {number|undefined} Meters.
 * @api
 */
Projection.prototype.getMetersPerUnit = function() {
  return this.metersPerUnit_ || _proj_Units_js__WEBPACK_IMPORTED_MODULE_0__[/* METERS_PER_UNIT */ "a"][this.units_];
};


/**
 * Get the world extent for this projection.
 * @return {module:ol/extent~Extent} Extent.
 * @api
 */
Projection.prototype.getWorldExtent = function() {
  return this.worldExtent_;
};


/**
 * Get the axis orientation of this projection.
 * Example values are:
 * enu - the default easting, northing, elevation.
 * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
 *     or south orientated transverse mercator.
 * wnu - westing, northing, up - some planetary coordinate systems have
 *     "west positive" coordinate systems
 * @return {string} Axis orientation.
 * @api
 */
Projection.prototype.getAxisOrientation = function() {
  return this.axisOrientation_;
};


/**
 * Is this projection a global projection which spans the whole world?
 * @return {boolean} Whether the projection is global.
 * @api
 */
Projection.prototype.isGlobal = function() {
  return this.global_;
};


/**
* Set if the projection is a global projection which spans the whole world
* @param {boolean} global Whether the projection is global.
* @api
*/
Projection.prototype.setGlobal = function(global) {
  this.global_ = global;
  this.canWrapX_ = !!(global && this.extent_);
};


/**
 * @return {module:ol/tilegrid/TileGrid} The default tile grid.
 */
Projection.prototype.getDefaultTileGrid = function() {
  return this.defaultTileGrid_;
};


/**
 * @param {module:ol/tilegrid/TileGrid} tileGrid The default tile grid.
 */
Projection.prototype.setDefaultTileGrid = function(tileGrid) {
  this.defaultTileGrid_ = tileGrid;
};


/**
 * Set the validity extent for this projection.
 * @param {module:ol/extent~Extent} extent Extent.
 * @api
 */
Projection.prototype.setExtent = function(extent) {
  this.extent_ = extent;
  this.canWrapX_ = !!(this.global_ && extent);
};


/**
 * Set the world extent for this projection.
 * @param {module:ol/extent~Extent} worldExtent World extent
 *     [minlon, minlat, maxlon, maxlat].
 * @api
 */
Projection.prototype.setWorldExtent = function(worldExtent) {
  this.worldExtent_ = worldExtent;
};


/**
 * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}
 * for this projection.
 * @param {function(number, module:ol/coordinate~Coordinate):number} func Function
 * @api
 */
Projection.prototype.setGetPointResolution = function(func) {
  this.getPointResolutionFunc_ = func;
};


/**
 * Get the custom point resolution function for this projection (if set).
 * @return {function(number, module:ol/coordinate~Coordinate):number|undefined} The custom point
 * resolution function (if set).
 */
Projection.prototype.getPointResolutionFunc = function() {
  return this.getPointResolutionFunc_;
};
/* harmony default export */ __webpack_exports__["a"] = (Projection);


/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19);
/* harmony import */ var _easing_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56);
/* harmony import */ var _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(72);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);
/**
 * @module ol/Tile
 */







/**
 * A function that takes an {@link module:ol/Tile} for the tile and a
 * `{string}` for the url as arguments.
 *
 * @typedef {function(module:ol/Tile, string)} LoadFunction
 * @api
 */

/**
 * {@link module:ol/source/Tile~Tile} sources use a function of this type to get
 * the url that provides a tile for a given tile coordinate.
 *
 * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
 * coordinate, a `{number}` representing the pixel ratio and a
 * {@link module:ol/proj/Projection} for the projection  as arguments
 * and returns a `{string}` representing the tile URL, or undefined if no tile
 * should be requested for the passed tile coordinate.
 *
 * @typedef {function(module:ol/tilecoord~TileCoord, number,
 *           module:ol/proj/Projection): (string|undefined)} UrlFunction
 * @api
 */


/**
 * @typedef {Object} Options
 * @property {number} [transition=250] A duration for tile opacity
 * transitions in milliseconds. A duration of 0 disables the opacity transition.
 * @api
 */


/**
 * @classdesc
 * Base class for tiles.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/events/EventTarget}
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/TileState} state State.
 * @param {module:ol/Tile~Options=} opt_options Tile options.
 */
const Tile = function(tileCoord, state, opt_options) {
  _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this);

  const options = opt_options ? opt_options : {};

  /**
   * @type {module:ol/tilecoord~TileCoord}
   */
  this.tileCoord = tileCoord;

  /**
   * @protected
   * @type {module:ol/TileState}
   */
  this.state = state;

  /**
   * An "interim" tile for this tile. The interim tile may be used while this
   * one is loading, for "smooth" transitions when changing params/dimensions
   * on the source.
   * @type {module:ol/Tile}
   */
  this.interimTile = null;

  /**
   * A key assigned to the tile. This is used by the tile source to determine
   * if this tile can effectively be used, or if a new tile should be created
   * and this one be used as an interim tile for this new tile.
   * @type {string}
   */
  this.key = '';

  /**
   * The duration for the opacity transition.
   * @type {number}
   */
  this.transition_ = options.transition === undefined ? 250 : options.transition;

  /**
   * Lookup of start times for rendering transitions.  If the start time is
   * equal to -1, the transition is complete.
   * @type {Object.<number, number>}
   */
  this.transitionStarts_ = {};

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Tile, _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @protected
 */
Tile.prototype.changed = function() {
  this.dispatchEvent(_events_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].CHANGE);
};


/**
 * @return {string} Key.
 */
Tile.prototype.getKey = function() {
  return this.key + '/' + this.tileCoord;
};

/**
 * Get the interim tile most suitable for rendering using the chain of interim
 * tiles. This corresponds to the  most recent tile that has been loaded, if no
 * such tile exists, the original tile is returned.
 * @return {!module:ol/Tile} Best tile for rendering.
 */
Tile.prototype.getInterimTile = function() {
  if (!this.interimTile) {
    //empty chain
    return this;
  }
  let tile = this.interimTile;

  // find the first loaded tile and return it. Since the chain is sorted in
  // decreasing order of creation time, there is no need to search the remainder
  // of the list (all those tiles correspond to older requests and will be
  // cleaned up by refreshInterimChain)
  do {
    if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED) {
      return tile;
    }
    tile = tile.interimTile;
  } while (tile);

  // we can not find a better tile
  return this;
};

/**
 * Goes through the chain of interim tiles and discards sections of the chain
 * that are no longer relevant.
 */
Tile.prototype.refreshInterimChain = function() {
  if (!this.interimTile) {
    return;
  }

  let tile = this.interimTile;
  let prev = this;

  do {
    if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED) {
      //we have a loaded tile, we can discard the rest of the list
      //we would could abort any LOADING tile request
      //older than this tile (i.e. any LOADING tile following this entry in the chain)
      tile.interimTile = null;
      break;
    } else if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADING) {
      //keep this LOADING tile any loaded tiles later in the chain are
      //older than this tile, so we're still interested in the request
      prev = tile;
    } else if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].IDLE) {
      //the head of the list is the most current tile, we don't need
      //to start any other requests for this chain
      prev.interimTile = tile.interimTile;
    } else {
      prev = tile;
    }
    tile = prev.interimTile;
  } while (tile);
};

/**
 * Get the tile coordinate for this tile.
 * @return {module:ol/tilecoord~TileCoord} The tile coordinate.
 * @api
 */
Tile.prototype.getTileCoord = function() {
  return this.tileCoord;
};


/**
 * @return {module:ol/TileState} State.
 */
Tile.prototype.getState = function() {
  return this.state;
};

/**
 * @param {module:ol/TileState} state State.
 */
Tile.prototype.setState = function(state) {
  this.state = state;
  this.changed();
};

/**
 * Load the image or retry if loading previously failed.
 * Loading is taken care of by the tile queue, and calling this method is
 * only needed for preloading or for reloading in case of an error.
 * @abstract
 * @api
 */
Tile.prototype.load = function() {};

/**
 * Get the alpha value for rendering.
 * @param {number} id An id for the renderer.
 * @param {number} time The render frame time.
 * @return {number} A number between 0 and 1.
 */
Tile.prototype.getAlpha = function(id, time) {
  if (!this.transition_) {
    return 1;
  }

  let start = this.transitionStarts_[id];
  if (!start) {
    start = time;
    this.transitionStarts_[id] = start;
  } else if (start === -1) {
    return 1;
  }

  const delta = time - start + (1000 / 60); // avoid rendering at 0
  if (delta >= this.transition_) {
    return 1;
  }
  return Object(_easing_js__WEBPACK_IMPORTED_MODULE_2__[/* easeIn */ "a"])(delta / this.transition_);
};

/**
 * Determine if a tile is in an alpha transition.  A tile is considered in
 * transition if tile.getAlpha() has not yet been called or has been called
 * and returned 1.
 * @param {number} id An id for the renderer.
 * @return {boolean} The tile is in transition.
 */
Tile.prototype.inTransition = function(id) {
  if (!this.transition_) {
    return false;
  }
  return this.transitionStarts_[id] !== -1;
};

/**
 * Mark a transition as complete.
 * @param {number} id An id for the renderer.
 */
Tile.prototype.endTransition = function(id) {
  if (this.transition_) {
    this.transitionStarts_[id] = -1;
  }
};
/* harmony default export */ __webpack_exports__["a"] = (Tile);


/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ../node_modules/proj4/lib/global.js
/* harmony default export */ var global = (function(defs) {
  defs('EPSG:4326', "+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");
  defs('EPSG:4269', "+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");
  defs('EPSG:3857', "+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");

  defs.WGS84 = defs['EPSG:4326'];
  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857
  defs.GOOGLE = defs['EPSG:3857'];
  defs['EPSG:900913'] = defs['EPSG:3857'];
  defs['EPSG:102113'] = defs['EPSG:3857'];
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/constants/values.js
var PJD_3PARAM = 1;
var PJD_7PARAM = 2;
var PJD_WGS84 = 4; // WGS84 or equivalent
var PJD_NODATUM = 5; // WGS84 or equivalent
var SEC_TO_RAD = 4.84813681109535993589914102357e-6;
var HALF_PI = Math.PI/2;
// ellipoid pj_set_ell.c
var SIXTH = 0.1666666666666666667;
/* 1/6 */
var RA4 = 0.04722222222222222222;
/* 17/360 */
var RA6 = 0.02215608465608465608;
var EPSLN = 1.0e-10;
// you'd think you could use Number.EPSILON above but that makes
// Mollweide get into an infinate loop.

var D2R = 0.01745329251994329577;
var R2D = 57.29577951308232088;
var FORTPI = Math.PI/4;
var TWO_PI = Math.PI * 2;
// SPI is slightly greater than Math.PI, so values that exceed the -180..180
// degree range by a tiny amount don't get wrapped. This prevents points that
// have drifted from their original location along the 180th meridian (due to
// floating point error) from changing their sign.
var SPI = 3.14159265359;

// CONCATENATED MODULE: ../node_modules/proj4/lib/constants/PrimeMeridian.js
var PrimeMeridian_exports = {};


PrimeMeridian_exports.greenwich = 0.0; //"0dE",
PrimeMeridian_exports.lisbon = -9.131906111111; //"9d07'54.862\"W",
PrimeMeridian_exports.paris = 2.337229166667; //"2d20'14.025\"E",
PrimeMeridian_exports.bogota = -74.080916666667; //"74d04'51.3\"W",
PrimeMeridian_exports.madrid = -3.687938888889; //"3d41'16.58\"W",
PrimeMeridian_exports.rome = 12.452333333333; //"12d27'8.4\"E",
PrimeMeridian_exports.bern = 7.439583333333; //"7d26'22.5\"E",
PrimeMeridian_exports.jakarta = 106.807719444444; //"106d48'27.79\"E",
PrimeMeridian_exports.ferro = -17.666666666667; //"17d40'W",
PrimeMeridian_exports.brussels = 4.367975; //"4d22'4.71\"E",
PrimeMeridian_exports.stockholm = 18.058277777778; //"18d3'29.8\"E",
PrimeMeridian_exports.athens = 23.7163375; //"23d42'58.815\"E",
PrimeMeridian_exports.oslo = 10.722916666667; //"10d43'22.5\"E"

// CONCATENATED MODULE: ../node_modules/proj4/lib/constants/units.js
/* harmony default export */ var units = ({
  ft: {to_meter: 0.3048},
  'us-ft': {to_meter: 1200 / 3937}
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/match.js
var ignoredChar = /[\s_\-\/\(\)]/g;
function match(obj, key) {
  if (obj[key]) {
    return obj[key];
  }
  var keys = Object.keys(obj);
  var lkey = key.toLowerCase().replace(ignoredChar, '');
  var i = -1;
  var testkey, processedKey;
  while (++i < keys.length) {
    testkey = keys[i];
    processedKey = testkey.toLowerCase().replace(ignoredChar, '');
    if (processedKey === lkey) {
      return obj[testkey];
    }
  }
}

// CONCATENATED MODULE: ../node_modules/proj4/lib/projString.js





/* harmony default export */ var projString = (function(defData) {
  var self = {};
  var paramObj = defData.split('+').map(function(v) {
    return v.trim();
  }).filter(function(a) {
    return a;
  }).reduce(function(p, a) {
    var split = a.split('=');
    split.push(true);
    p[split[0].toLowerCase()] = split[1];
    return p;
  }, {});
  var paramName, paramVal, paramOutname;
  var params = {
    proj: 'projName',
    datum: 'datumCode',
    rf: function(v) {
      self.rf = parseFloat(v);
    },
    lat_0: function(v) {
      self.lat0 = v * D2R;
    },
    lat_1: function(v) {
      self.lat1 = v * D2R;
    },
    lat_2: function(v) {
      self.lat2 = v * D2R;
    },
    lat_ts: function(v) {
      self.lat_ts = v * D2R;
    },
    lon_0: function(v) {
      self.long0 = v * D2R;
    },
    lon_1: function(v) {
      self.long1 = v * D2R;
    },
    lon_2: function(v) {
      self.long2 = v * D2R;
    },
    alpha: function(v) {
      self.alpha = parseFloat(v) * D2R;
    },
    lonc: function(v) {
      self.longc = v * D2R;
    },
    x_0: function(v) {
      self.x0 = parseFloat(v);
    },
    y_0: function(v) {
      self.y0 = parseFloat(v);
    },
    k_0: function(v) {
      self.k0 = parseFloat(v);
    },
    k: function(v) {
      self.k0 = parseFloat(v);
    },
    a: function(v) {
      self.a = parseFloat(v);
    },
    b: function(v) {
      self.b = parseFloat(v);
    },
    r_a: function() {
      self.R_A = true;
    },
    zone: function(v) {
      self.zone = parseInt(v, 10);
    },
    south: function() {
      self.utmSouth = true;
    },
    towgs84: function(v) {
      self.datum_params = v.split(",").map(function(a) {
        return parseFloat(a);
      });
    },
    to_meter: function(v) {
      self.to_meter = parseFloat(v);
    },
    units: function(v) {
      self.units = v;
      var unit = match(units, v);
      if (unit) {
        self.to_meter = unit.to_meter;
      }
    },
    from_greenwich: function(v) {
      self.from_greenwich = v * D2R;
    },
    pm: function(v) {
      var pm = match(PrimeMeridian_exports, v);
      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;
    },
    nadgrids: function(v) {
      if (v === '@null') {
        self.datumCode = 'none';
      }
      else {
        self.nadgrids = v;
      }
    },
    axis: function(v) {
      var legalAxis = "ewnsud";
      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {
        self.axis = v;
      }
    }
  };
  for (paramName in paramObj) {
    paramVal = paramObj[paramName];
    if (paramName in params) {
      paramOutname = params[paramName];
      if (typeof paramOutname === 'function') {
        paramOutname(paramVal);
      }
      else {
        self[paramOutname] = paramVal;
      }
    }
    else {
      self[paramName] = paramVal;
    }
  }
  if(typeof self.datumCode === 'string' && self.datumCode !== "WGS84"){
    self.datumCode = self.datumCode.toLowerCase();
  }
  return self;
});

// CONCATENATED MODULE: ../node_modules/wkt-parser/parser.js
/* harmony default export */ var parser = (parseString);

var NEUTRAL = 1;
var KEYWORD = 2;
var NUMBER = 3;
var QUOTED = 4;
var AFTERQUOTE = 5;
var ENDED = -1;
var whitespace = /\s/;
var latin = /[A-Za-z]/;
var keyword = /[A-Za-z84]/;
var endThings = /[,\]]/;
var digets = /[\d\.E\-\+]/;
// const ignoredChar = /[\s_\-\/\(\)]/g;
function Parser(text) {
  if (typeof text !== 'string') {
    throw new Error('not a string');
  }
  this.text = text.trim();
  this.level = 0;
  this.place = 0;
  this.root = null;
  this.stack = [];
  this.currentObject = null;
  this.state = NEUTRAL;
}
Parser.prototype.readCharicter = function() {
  var char = this.text[this.place++];
  if (this.state !== QUOTED) {
    while (whitespace.test(char)) {
      if (this.place >= this.text.length) {
        return;
      }
      char = this.text[this.place++];
    }
  }
  switch (this.state) {
    case NEUTRAL:
      return this.neutral(char);
    case KEYWORD:
      return this.keyword(char)
    case QUOTED:
      return this.quoted(char);
    case AFTERQUOTE:
      return this.afterquote(char);
    case NUMBER:
      return this.number(char);
    case ENDED:
      return;
  }
};
Parser.prototype.afterquote = function(char) {
  if (char === '"') {
    this.word += '"';
    this.state = QUOTED;
    return;
  }
  if (endThings.test(char)) {
    this.word = this.word.trim();
    this.afterItem(char);
    return;
  }
  throw new Error('havn\'t handled "' +char + '" in afterquote yet, index ' + this.place);
};
Parser.prototype.afterItem = function(char) {
  if (char === ',') {
    if (this.word !== null) {
      this.currentObject.push(this.word);
    }
    this.word = null;
    this.state = NEUTRAL;
    return;
  }
  if (char === ']') {
    this.level--;
    if (this.word !== null) {
      this.currentObject.push(this.word);
      this.word = null;
    }
    this.state = NEUTRAL;
    this.currentObject = this.stack.pop();
    if (!this.currentObject) {
      this.state = ENDED;
    }

    return;
  }
};
Parser.prototype.number = function(char) {
  if (digets.test(char)) {
    this.word += char;
    return;
  }
  if (endThings.test(char)) {
    this.word = parseFloat(this.word);
    this.afterItem(char);
    return;
  }
  throw new Error('havn\'t handled "' +char + '" in number yet, index ' + this.place);
};
Parser.prototype.quoted = function(char) {
  if (char === '"') {
    this.state = AFTERQUOTE;
    return;
  }
  this.word += char;
  return;
};
Parser.prototype.keyword = function(char) {
  if (keyword.test(char)) {
    this.word += char;
    return;
  }
  if (char === '[') {
    var newObjects = [];
    newObjects.push(this.word);
    this.level++;
    if (this.root === null) {
      this.root = newObjects;
    } else {
      this.currentObject.push(newObjects);
    }
    this.stack.push(this.currentObject);
    this.currentObject = newObjects;
    this.state = NEUTRAL;
    return;
  }
  if (endThings.test(char)) {
    this.afterItem(char);
    return;
  }
  throw new Error('havn\'t handled "' +char + '" in keyword yet, index ' + this.place);
};
Parser.prototype.neutral = function(char) {
  if (latin.test(char)) {
    this.word = char;
    this.state = KEYWORD;
    return;
  }
  if (char === '"') {
    this.word = '';
    this.state = QUOTED;
    return;
  }
  if (digets.test(char)) {
    this.word = char;
    this.state = NUMBER;
    return;
  }
  if (endThings.test(char)) {
    this.afterItem(char);
    return;
  }
  throw new Error('havn\'t handled "' +char + '" in neutral yet, index ' + this.place);
};
Parser.prototype.output = function() {
  while (this.place < this.text.length) {
    this.readCharicter();
  }
  if (this.state === ENDED) {
    return this.root;
  }
  throw new Error('unable to parse string "' +this.text + '". State is ' + this.state);
};

function parseString(txt) {
  var parser = new Parser(txt);
  return parser.output();
}

// CONCATENATED MODULE: ../node_modules/wkt-parser/process.js


function mapit(obj, key, value) {
  if (Array.isArray(key)) {
    value.unshift(key);
    key = null;
  }
  var thing = key ? {} : obj;

  var out = value.reduce(function(newObj, item) {
    sExpr(item, newObj);
    return newObj
  }, thing);
  if (key) {
    obj[key] = out;
  }
}

function sExpr(v, obj) {
  if (!Array.isArray(v)) {
    obj[v] = true;
    return;
  }
  var key = v.shift();
  if (key === 'PARAMETER') {
    key = v.shift();
  }
  if (v.length === 1) {
    if (Array.isArray(v[0])) {
      obj[key] = {};
      sExpr(v[0], obj[key]);
      return;
    }
    obj[key] = v[0];
    return;
  }
  if (!v.length) {
    obj[key] = true;
    return;
  }
  if (key === 'TOWGS84') {
    obj[key] = v;
    return;
  }
  if (!Array.isArray(key)) {
    obj[key] = {};
  }

  var i;
  switch (key) {
    case 'UNIT':
    case 'PRIMEM':
    case 'VERT_DATUM':
      obj[key] = {
        name: v[0].toLowerCase(),
        convert: v[1]
      };
      if (v.length === 3) {
        sExpr(v[2], obj[key]);
      }
      return;
    case 'SPHEROID':
    case 'ELLIPSOID':
      obj[key] = {
        name: v[0],
        a: v[1],
        rf: v[2]
      };
      if (v.length === 4) {
        sExpr(v[3], obj[key]);
      }
      return;
    case 'PROJECTEDCRS':
    case 'PROJCRS':
    case 'GEOGCS':
    case 'GEOCCS':
    case 'PROJCS':
    case 'LOCAL_CS':
    case 'GEODCRS':
    case 'GEODETICCRS':
    case 'GEODETICDATUM':
    case 'EDATUM':
    case 'ENGINEERINGDATUM':
    case 'VERT_CS':
    case 'VERTCRS':
    case 'VERTICALCRS':
    case 'COMPD_CS':
    case 'COMPOUNDCRS':
    case 'ENGINEERINGCRS':
    case 'ENGCRS':
    case 'FITTED_CS':
    case 'LOCAL_DATUM':
    case 'DATUM':
      v[0] = ['name', v[0]];
      mapit(obj, key, v);
      return;
    default:
      i = -1;
      while (++i < v.length) {
        if (!Array.isArray(v[i])) {
          return sExpr(v, obj[key]);
        }
      }
      return mapit(obj, key, v);
  }
}

// CONCATENATED MODULE: ../node_modules/wkt-parser/index.js
var wkt_parser_D2R = 0.01745329251994329577;





function rename(obj, params) {
  var outName = params[0];
  var inName = params[1];
  if (!(outName in obj) && (inName in obj)) {
    obj[outName] = obj[inName];
    if (params.length === 3) {
      obj[outName] = params[2](obj[outName]);
    }
  }
}

function d2r(input) {
  return input * wkt_parser_D2R;
}

function cleanWKT(wkt) {
  if (wkt.type === 'GEOGCS') {
    wkt.projName = 'longlat';
  } else if (wkt.type === 'LOCAL_CS') {
    wkt.projName = 'identity';
    wkt.local = true;
  } else {
    if (typeof wkt.PROJECTION === 'object') {
      wkt.projName = Object.keys(wkt.PROJECTION)[0];
    } else {
      wkt.projName = wkt.PROJECTION;
    }
  }
  if (wkt.UNIT) {
    wkt.units = wkt.UNIT.name.toLowerCase();
    if (wkt.units === 'metre') {
      wkt.units = 'meter';
    }
    if (wkt.UNIT.convert) {
      if (wkt.type === 'GEOGCS') {
        if (wkt.DATUM && wkt.DATUM.SPHEROID) {
          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;
        }
      } else {
        wkt.to_meter = wkt.UNIT.convert, 10;
      }
    }
  }
  var geogcs = wkt.GEOGCS;
  if (wkt.type === 'GEOGCS') {
    geogcs = wkt;
  }
  if (geogcs) {
    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){
    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;
    //}
    if (geogcs.DATUM) {
      wkt.datumCode = geogcs.DATUM.name.toLowerCase();
    } else {
      wkt.datumCode = geogcs.name.toLowerCase();
    }
    if (wkt.datumCode.slice(0, 2) === 'd_') {
      wkt.datumCode = wkt.datumCode.slice(2);
    }
    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {
      wkt.datumCode = 'nzgd49';
    }
    if (wkt.datumCode === 'wgs_1984') {
      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {
        wkt.sphere = true;
      }
      wkt.datumCode = 'wgs84';
    }
    if (wkt.datumCode.slice(-6) === '_ferro') {
      wkt.datumCode = wkt.datumCode.slice(0, - 6);
    }
    if (wkt.datumCode.slice(-8) === '_jakarta') {
      wkt.datumCode = wkt.datumCode.slice(0, - 8);
    }
    if (~wkt.datumCode.indexOf('belge')) {
      wkt.datumCode = 'rnb72';
    }
    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {
      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\_18/, 'clrk');
      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {
        wkt.ellps = 'intl';
      }

      wkt.a = geogcs.DATUM.SPHEROID.a;
      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);
    }
    if (~wkt.datumCode.indexOf('osgb_1936')) {
      wkt.datumCode = 'osgb36';
    }
    if (~wkt.datumCode.indexOf('osni_1952')) {
      wkt.datumCode = 'osni52';
    }
    if (~wkt.datumCode.indexOf('tm65')
      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {
      wkt.datumCode = 'ire65';
    }
    if (wkt.datumCode === 'ch1903+') {
      wkt.datumCode = 'ch1903';
    }
  }
  if (wkt.b && !isFinite(wkt.b)) {
    wkt.b = wkt.a;
  }

  function toMeter(input) {
    var ratio = wkt.to_meter || 1;
    return input * ratio;
  }
  var renamer = function(a) {
    return rename(wkt, a);
  };
  var list = [
    ['standard_parallel_1', 'Standard_Parallel_1'],
    ['standard_parallel_2', 'Standard_Parallel_2'],
    ['false_easting', 'False_Easting'],
    ['false_northing', 'False_Northing'],
    ['central_meridian', 'Central_Meridian'],
    ['latitude_of_origin', 'Latitude_Of_Origin'],
    ['latitude_of_origin', 'Central_Parallel'],
    ['scale_factor', 'Scale_Factor'],
    ['k0', 'scale_factor'],
    ['latitude_of_center', 'Latitude_Of_Center'],
    ['latitude_of_center', 'Latitude_of_center'],
    ['lat0', 'latitude_of_center', d2r],
    ['longitude_of_center', 'Longitude_Of_Center'],
    ['longitude_of_center', 'Longitude_of_center'],
    ['longc', 'longitude_of_center', d2r],
    ['x0', 'false_easting', toMeter],
    ['y0', 'false_northing', toMeter],
    ['long0', 'central_meridian', d2r],
    ['lat0', 'latitude_of_origin', d2r],
    ['lat0', 'standard_parallel_1', d2r],
    ['lat1', 'standard_parallel_1', d2r],
    ['lat2', 'standard_parallel_2', d2r],
    ['azimuth', 'Azimuth'],
    ['alpha', 'azimuth', d2r],
    ['srsCode', 'name']
  ];
  list.forEach(renamer);
  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {
    wkt.long0 = wkt.longc;
  }
  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {
    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);
    wkt.lat_ts = wkt.lat1;
  }
}
/* harmony default export */ var wkt_parser = (function(wkt) {
  var lisp = parser(wkt);
  var type = lisp.shift();
  var name = lisp.shift();
  lisp.unshift(['name', name]);
  lisp.unshift(['type', type]);
  var obj = {};
  sExpr(lisp, obj);
  cleanWKT(obj);
  return obj;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/defs.js




function defs(name) {
  /*global console*/
  var that = this;
  if (arguments.length === 2) {
    var def = arguments[1];
    if (typeof def === 'string') {
      if (def.charAt(0) === '+') {
        defs[name] = projString(arguments[1]);
      }
      else {
        defs[name] = wkt_parser(arguments[1]);
      }
    } else {
      defs[name] = def;
    }
  }
  else if (arguments.length === 1) {
    if (Array.isArray(name)) {
      return name.map(function(v) {
        if (Array.isArray(v)) {
          defs.apply(that, v);
        }
        else {
          defs(v);
        }
      });
    }
    else if (typeof name === 'string') {
      if (name in defs) {
        return defs[name];
      }
    }
    else if ('EPSG' in name) {
      defs['EPSG:' + name.EPSG] = name;
    }
    else if ('ESRI' in name) {
      defs['ESRI:' + name.ESRI] = name;
    }
    else if ('IAU2000' in name) {
      defs['IAU2000:' + name.IAU2000] = name;
    }
    else {
      console.log(name);
    }
    return;
  }


}
global(defs);
/* harmony default export */ var lib_defs = (defs);

// CONCATENATED MODULE: ../node_modules/proj4/lib/parseCode.js



function testObj(code){
  return typeof code === 'string';
}
function testDef(code){
  return code in lib_defs;
}
 var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS']; 
function testWKT(code){
  return codeWords.some(function (word) {
    return code.indexOf(word) > -1;
  });
}
function testProj(code){
  return code[0] === '+';
}
function parse(code){
  if (testObj(code)) {
    //check to see if this is a WKT string
    if (testDef(code)) {
      return lib_defs[code];
    }
    if (testWKT(code)) {
      return wkt_parser(code);
    }
    if (testProj(code)) {
      return projString(code);
    }
  }else{
    return code;
  }
}

/* harmony default export */ var parseCode = (parse);

// CONCATENATED MODULE: ../node_modules/proj4/lib/extend.js
/* harmony default export */ var extend = (function(destination, source) {
  destination = destination || {};
  var value, property;
  if (!source) {
    return destination;
  }
  for (property in source) {
    value = source[property];
    if (value !== undefined) {
      destination[property] = value;
    }
  }
  return destination;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/msfnz.js
/* harmony default export */ var msfnz = (function(eccent, sinphi, cosphi) {
  var con = eccent * sinphi;
  return cosphi / (Math.sqrt(1 - con * con));
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/sign.js
/* harmony default export */ var sign = (function(x) {
  return x<0 ? -1 : 1;
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/adjust_lon.js




/* harmony default export */ var adjust_lon = (function(x) {
  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/tsfnz.js


/* harmony default export */ var tsfnz = (function(eccent, phi, sinphi) {
  var con = eccent * sinphi;
  var com = 0.5 * eccent;
  con = Math.pow(((1 - con) / (1 + con)), com);
  return (Math.tan(0.5 * (HALF_PI - phi)) / con);
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/phi2z.js


/* harmony default export */ var phi2z = (function(eccent, ts) {
  var eccnth = 0.5 * eccent;
  var con, dphi;
  var phi = HALF_PI - 2 * Math.atan(ts);
  for (var i = 0; i <= 15; i++) {
    con = eccent * Math.sin(phi);
    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;
    phi += dphi;
    if (Math.abs(dphi) <= 0.0000000001) {
      return phi;
    }
  }
  //console.log("phi2z has NoConvergence");
  return -9999;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/merc.js






function init() {
  var con = this.b / this.a;
  this.es = 1 - con * con;
  if(!('x0' in this)){
    this.x0 = 0;
  }
  if(!('y0' in this)){
    this.y0 = 0;
  }
  this.e = Math.sqrt(this.es);
  if (this.lat_ts) {
    if (this.sphere) {
      this.k0 = Math.cos(this.lat_ts);
    }
    else {
      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
    }
  }
  else {
    if (!this.k0) {
      if (this.k) {
        this.k0 = this.k;
      }
      else {
        this.k0 = 1;
      }
    }
  }
}

/* Mercator forward equations--mapping lat,long to x,y
  --------------------------------------------------*/

function forward(p) {
  var lon = p.x;
  var lat = p.y;
  // convert to radians
  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {
    return null;
  }

  var x, y;
  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
    return null;
  }
  else {
    if (this.sphere) {
      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));
    }
    else {
      var sinphi = Math.sin(lat);
      var ts = tsfnz(this.e, lat, sinphi);
      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
      y = this.y0 - this.a * this.k0 * Math.log(ts);
    }
    p.x = x;
    p.y = y;
    return p;
  }
}

/* Mercator inverse equations--mapping x,y to lat/long
  --------------------------------------------------*/
function inverse(p) {

  var x = p.x - this.x0;
  var y = p.y - this.y0;
  var lon, lat;

  if (this.sphere) {
    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));
  }
  else {
    var ts = Math.exp(-y / (this.a * this.k0));
    lat = phi2z(this.e, ts);
    if (lat === -9999) {
      return null;
    }
  }
  lon = adjust_lon(this.long0 + x / (this.a * this.k0));

  p.x = lon;
  p.y = lat;
  return p;
}

var names = ["Mercator", "Popular Visualisation Pseudo Mercator", "Mercator_1SP", "Mercator_Auxiliary_Sphere", "merc"];
/* harmony default export */ var merc = ({
  init: init,
  forward: forward,
  inverse: inverse,
  names: names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/longlat.js
function longlat_init() {
  //no-op for longlat
}

function identity(pt) {
  return pt;
}


var longlat_names = ["longlat", "identity"];
/* harmony default export */ var longlat = ({
  init: longlat_init,
  forward: identity,
  inverse: identity,
  names: longlat_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections.js


var projs = [merc, longlat];
var projections_names = {};
var projStore = [];

function add(proj, i) {
  var len = projStore.length;
  if (!proj.names) {
    console.log(i);
    return true;
  }
  projStore[len] = proj;
  proj.names.forEach(function(n) {
    projections_names[n.toLowerCase()] = len;
  });
  return this;
}



function get(name) {
  if (!name) {
    return false;
  }
  var n = name.toLowerCase();
  if (typeof projections_names[n] !== 'undefined' && projStore[projections_names[n]]) {
    return projStore[projections_names[n]];
  }
}

function start() {
  projs.forEach(add);
}
/* harmony default export */ var projections = ({
  start: start,
  add: add,
  get: get
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/constants/Ellipsoid.js
var Ellipsoid_exports = {};

Ellipsoid_exports.MERIT = {
  a: 6378137.0,
  rf: 298.257,
  ellipseName: "MERIT 1983"
};

Ellipsoid_exports.SGS85 = {
  a: 6378136.0,
  rf: 298.257,
  ellipseName: "Soviet Geodetic System 85"
};

Ellipsoid_exports.GRS80 = {
  a: 6378137.0,
  rf: 298.257222101,
  ellipseName: "GRS 1980(IUGG, 1980)"
};

Ellipsoid_exports.IAU76 = {
  a: 6378140.0,
  rf: 298.257,
  ellipseName: "IAU 1976"
};

Ellipsoid_exports.airy = {
  a: 6377563.396,
  b: 6356256.910,
  ellipseName: "Airy 1830"
};

Ellipsoid_exports.APL4 = {
  a: 6378137,
  rf: 298.25,
  ellipseName: "Appl. Physics. 1965"
};

Ellipsoid_exports.NWL9D = {
  a: 6378145.0,
  rf: 298.25,
  ellipseName: "Naval Weapons Lab., 1965"
};

Ellipsoid_exports.mod_airy = {
  a: 6377340.189,
  b: 6356034.446,
  ellipseName: "Modified Airy"
};

Ellipsoid_exports.andrae = {
  a: 6377104.43,
  rf: 300.0,
  ellipseName: "Andrae 1876 (Den., Iclnd.)"
};

Ellipsoid_exports.aust_SA = {
  a: 6378160.0,
  rf: 298.25,
  ellipseName: "Australian Natl & S. Amer. 1969"
};

Ellipsoid_exports.GRS67 = {
  a: 6378160.0,
  rf: 298.2471674270,
  ellipseName: "GRS 67(IUGG 1967)"
};

Ellipsoid_exports.bessel = {
  a: 6377397.155,
  rf: 299.1528128,
  ellipseName: "Bessel 1841"
};

Ellipsoid_exports.bess_nam = {
  a: 6377483.865,
  rf: 299.1528128,
  ellipseName: "Bessel 1841 (Namibia)"
};

Ellipsoid_exports.clrk66 = {
  a: 6378206.4,
  b: 6356583.8,
  ellipseName: "Clarke 1866"
};

Ellipsoid_exports.clrk80 = {
  a: 6378249.145,
  rf: 293.4663,
  ellipseName: "Clarke 1880 mod."
};

Ellipsoid_exports.clrk58 = {
  a: 6378293.645208759,
  rf: 294.2606763692654,
  ellipseName: "Clarke 1858"
};

Ellipsoid_exports.CPM = {
  a: 6375738.7,
  rf: 334.29,
  ellipseName: "Comm. des Poids et Mesures 1799"
};

Ellipsoid_exports.delmbr = {
  a: 6376428.0,
  rf: 311.5,
  ellipseName: "Delambre 1810 (Belgium)"
};

Ellipsoid_exports.engelis = {
  a: 6378136.05,
  rf: 298.2566,
  ellipseName: "Engelis 1985"
};

Ellipsoid_exports.evrst30 = {
  a: 6377276.345,
  rf: 300.8017,
  ellipseName: "Everest 1830"
};

Ellipsoid_exports.evrst48 = {
  a: 6377304.063,
  rf: 300.8017,
  ellipseName: "Everest 1948"
};

Ellipsoid_exports.evrst56 = {
  a: 6377301.243,
  rf: 300.8017,
  ellipseName: "Everest 1956"
};

Ellipsoid_exports.evrst69 = {
  a: 6377295.664,
  rf: 300.8017,
  ellipseName: "Everest 1969"
};

Ellipsoid_exports.evrstSS = {
  a: 6377298.556,
  rf: 300.8017,
  ellipseName: "Everest (Sabah & Sarawak)"
};

Ellipsoid_exports.fschr60 = {
  a: 6378166.0,
  rf: 298.3,
  ellipseName: "Fischer (Mercury Datum) 1960"
};

Ellipsoid_exports.fschr60m = {
  a: 6378155.0,
  rf: 298.3,
  ellipseName: "Fischer 1960"
};

Ellipsoid_exports.fschr68 = {
  a: 6378150.0,
  rf: 298.3,
  ellipseName: "Fischer 1968"
};

Ellipsoid_exports.helmert = {
  a: 6378200.0,
  rf: 298.3,
  ellipseName: "Helmert 1906"
};

Ellipsoid_exports.hough = {
  a: 6378270.0,
  rf: 297.0,
  ellipseName: "Hough"
};

Ellipsoid_exports.intl = {
  a: 6378388.0,
  rf: 297.0,
  ellipseName: "International 1909 (Hayford)"
};

Ellipsoid_exports.kaula = {
  a: 6378163.0,
  rf: 298.24,
  ellipseName: "Kaula 1961"
};

Ellipsoid_exports.lerch = {
  a: 6378139.0,
  rf: 298.257,
  ellipseName: "Lerch 1979"
};

Ellipsoid_exports.mprts = {
  a: 6397300.0,
  rf: 191.0,
  ellipseName: "Maupertius 1738"
};

Ellipsoid_exports.new_intl = {
  a: 6378157.5,
  b: 6356772.2,
  ellipseName: "New International 1967"
};

Ellipsoid_exports.plessis = {
  a: 6376523.0,
  rf: 6355863.0,
  ellipseName: "Plessis 1817 (France)"
};

Ellipsoid_exports.krass = {
  a: 6378245.0,
  rf: 298.3,
  ellipseName: "Krassovsky, 1942"
};

Ellipsoid_exports.SEasia = {
  a: 6378155.0,
  b: 6356773.3205,
  ellipseName: "Southeast Asia"
};

Ellipsoid_exports.walbeck = {
  a: 6376896.0,
  b: 6355834.8467,
  ellipseName: "Walbeck"
};

Ellipsoid_exports.WGS60 = {
  a: 6378165.0,
  rf: 298.3,
  ellipseName: "WGS 60"
};

Ellipsoid_exports.WGS66 = {
  a: 6378145.0,
  rf: 298.25,
  ellipseName: "WGS 66"
};

Ellipsoid_exports.WGS7 = {
  a: 6378135.0,
  rf: 298.26,
  ellipseName: "WGS 72"
};

var WGS84 = Ellipsoid_exports.WGS84 = {
  a: 6378137.0,
  rf: 298.257223563,
  ellipseName: "WGS 84"
};

Ellipsoid_exports.sphere = {
  a: 6370997.0,
  b: 6370997.0,
  ellipseName: "Normal Sphere (r=6370997)"
};

// CONCATENATED MODULE: ../node_modules/proj4/lib/deriveConstants.js




function eccentricity(a, b, rf, R_A) {
  var a2 = a * a; // used in geocentric
  var b2 = b * b; // used in geocentric
  var es = (a2 - b2) / a2; // e ^ 2
  var e = 0;
  if (R_A) {
    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));
    a2 = a * a;
    es = 0;
  } else {
    e = Math.sqrt(es); // eccentricity
  }
  var ep2 = (a2 - b2) / b2; // used in geocentric
  return {
    es: es,
    e: e,
    ep2: ep2
  };
}
function deriveConstants_sphere(a, b, rf, ellps, sphere) {
  if (!a) { // do we have an ellipsoid?
    var ellipse = match(Ellipsoid_exports, ellps);
    if (!ellipse) {
      ellipse = WGS84;
    }
    a = ellipse.a;
    b = ellipse.b;
    rf = ellipse.rf;
  }

  if (rf && !b) {
    b = (1.0 - 1.0 / rf) * a;
  }
  if (rf === 0 || Math.abs(a - b) < EPSLN) {
    sphere = true;
    b = a;
  }
  return {
    a: a,
    b: b,
    rf: rf,
    sphere: sphere
  };
}

// CONCATENATED MODULE: ../node_modules/proj4/lib/constants/Datum.js
var Datum_exports = {};

Datum_exports.wgs84 = {
  towgs84: "0,0,0",
  ellipse: "WGS84",
  datumName: "WGS84"
};

Datum_exports.ch1903 = {
  towgs84: "674.374,15.056,405.346",
  ellipse: "bessel",
  datumName: "swiss"
};

Datum_exports.ggrs87 = {
  towgs84: "-199.87,74.79,246.62",
  ellipse: "GRS80",
  datumName: "Greek_Geodetic_Reference_System_1987"
};

Datum_exports.nad83 = {
  towgs84: "0,0,0",
  ellipse: "GRS80",
  datumName: "North_American_Datum_1983"
};

Datum_exports.nad27 = {
  nadgrids: "@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",
  ellipse: "clrk66",
  datumName: "North_American_Datum_1927"
};

Datum_exports.potsdam = {
  towgs84: "606.0,23.0,413.0",
  ellipse: "bessel",
  datumName: "Potsdam Rauenberg 1950 DHDN"
};

Datum_exports.carthage = {
  towgs84: "-263.0,6.0,431.0",
  ellipse: "clark80",
  datumName: "Carthage 1934 Tunisia"
};

Datum_exports.hermannskogel = {
  towgs84: "653.0,-212.0,449.0",
  ellipse: "bessel",
  datumName: "Hermannskogel"
};

Datum_exports.osni52 = {
  towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
  ellipse: "airy",
  datumName: "Irish National"
};

Datum_exports.ire65 = {
  towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
  ellipse: "mod_airy",
  datumName: "Ireland 1965"
};

Datum_exports.rassadiran = {
  towgs84: "-133.63,-157.5,-158.62",
  ellipse: "intl",
  datumName: "Rassadiran"
};

Datum_exports.nzgd49 = {
  towgs84: "59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",
  ellipse: "intl",
  datumName: "New Zealand Geodetic Datum 1949"
};

Datum_exports.osgb36 = {
  towgs84: "446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",
  ellipse: "airy",
  datumName: "Airy 1830"
};

Datum_exports.s_jtsk = {
  towgs84: "589,76,480",
  ellipse: 'bessel',
  datumName: 'S-JTSK (Ferro)'
};

Datum_exports.beduaram = {
  towgs84: '-106,-87,188',
  ellipse: 'clrk80',
  datumName: 'Beduaram'
};

Datum_exports.gunung_segara = {
  towgs84: '-403,684,41',
  ellipse: 'bessel',
  datumName: 'Gunung Segara Jakarta'
};

Datum_exports.rnb72 = {
  towgs84: "106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",
  ellipse: "intl",
  datumName: "Reseau National Belge 1972"
};

// CONCATENATED MODULE: ../node_modules/proj4/lib/datum.js


function datum(datumCode, datum_params, a, b, es, ep2) {
  var out = {};

  if (datumCode === undefined || datumCode === 'none') {
    out.datum_type = PJD_NODATUM;
  } else {
    out.datum_type = PJD_WGS84;
  }

  if (datum_params) {
    out.datum_params = datum_params.map(parseFloat);
    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {
      out.datum_type = PJD_3PARAM;
    }
    if (out.datum_params.length > 3) {
      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {
        out.datum_type = PJD_7PARAM;
        out.datum_params[3] *= SEC_TO_RAD;
        out.datum_params[4] *= SEC_TO_RAD;
        out.datum_params[5] *= SEC_TO_RAD;
        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;
      }
    }
  }

  out.a = a; //datum object also uses these values
  out.b = b;
  out.es = es;
  out.ep2 = ep2;
  return out;
}

/* harmony default export */ var lib_datum = (datum);

// CONCATENATED MODULE: ../node_modules/proj4/lib/Proj.js








function Projection(srsCode,callback) {
  if (!(this instanceof Projection)) {
    return new Projection(srsCode);
  }
  callback = callback || function(error){
    if(error){
      throw error;
    }
  };
  var json = parseCode(srsCode);
  if(typeof json !== 'object'){
    callback(srsCode);
    return;
  }
  var ourProj = Projection.projections.get(json.projName);
  if(!ourProj){
    callback(srsCode);
    return;
  }
  if (json.datumCode && json.datumCode !== 'none') {
    var datumDef = match(Datum_exports, json.datumCode);
    if (datumDef) {
      json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;
      json.ellps = datumDef.ellipse;
      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;
    }
  }
  json.k0 = json.k0 || 1.0;
  json.axis = json.axis || 'enu';
  json.ellps = json.ellps || 'wgs84';
  var sphere_ = deriveConstants_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);
  var ecc = eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);
  var datumObj = json.datum || lib_datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);

  extend(this, json); // transfer everything over from the projection because we don't know what we'll need
  extend(this, ourProj); // transfer all the methods from the projection

  // copy the 4 things over we calulated in deriveConstants.sphere
  this.a = sphere_.a;
  this.b = sphere_.b;
  this.rf = sphere_.rf;
  this.sphere = sphere_.sphere;

  // copy the 3 things we calculated in deriveConstants.eccentricity
  this.es = ecc.es;
  this.e = ecc.e;
  this.ep2 = ecc.ep2;

  // add in the datum object
  this.datum = datumObj;

  // init the projection
  this.init();

  // legecy callback from back in the day when it went to spatialreference.org
  callback(null, this);

}
Projection.projections = projections;
Projection.projections.start();
/* harmony default export */ var Proj = (Projection);

// CONCATENATED MODULE: ../node_modules/proj4/lib/datumUtils.js


function compareDatums(source, dest) {
  if (source.datum_type !== dest.datum_type) {
    return false; // false, datums are not equal
  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {
    // the tolerance for es is to ensure that GRS80 and WGS84
    // are considered identical
    return false;
  } else if (source.datum_type === PJD_3PARAM) {
    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);
  } else if (source.datum_type === PJD_7PARAM) {
    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);
  } else {
    return true; // datums are equal
  }
} // cs_compare_datums()

/*
 * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates
 * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),
 * according to the current ellipsoid parameters.
 *
 *    Latitude  : Geodetic latitude in radians                     (input)
 *    Longitude : Geodetic longitude in radians                    (input)
 *    Height    : Geodetic height, in meters                       (input)
 *    X         : Calculated Geocentric X coordinate, in meters    (output)
 *    Y         : Calculated Geocentric Y coordinate, in meters    (output)
 *    Z         : Calculated Geocentric Z coordinate, in meters    (output)
 *
 */
function geodeticToGeocentric(p, es, a) {
  var Longitude = p.x;
  var Latitude = p.y;
  var Height = p.z ? p.z : 0; //Z value not always supplied

  var Rn; /*  Earth radius at location  */
  var Sin_Lat; /*  Math.sin(Latitude)  */
  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */
  var Cos_Lat; /*  Math.cos(Latitude)  */

  /*
   ** Don't blow up if Latitude is just a little out of the value
   ** range as it may just be a rounding issue.  Also removed longitude
   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.
   */
  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {
    Latitude = -HALF_PI;
  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {
    Latitude = HALF_PI;
  } else if ((Latitude < -HALF_PI) || (Latitude > HALF_PI)) {
    /* Latitude out of range */
    //..reportError('geocent:lat out of range:' + Latitude);
    return null;
  }

  if (Longitude > Math.PI) {
    Longitude -= (2 * Math.PI);
  }
  Sin_Lat = Math.sin(Latitude);
  Cos_Lat = Math.cos(Latitude);
  Sin2_Lat = Sin_Lat * Sin_Lat;
  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));
  return {
    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),
    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),
    z: ((Rn * (1 - es)) + Height) * Sin_Lat
  };
} // cs_geodetic_to_geocentric()

function geocentricToGeodetic(p, es, a, b) {
  /* local defintions and variables */
  /* end-criterium of loop, accuracy of sin(Latitude) */
  var genau = 1e-12;
  var genau2 = (genau * genau);
  var maxiter = 30;

  var P; /* distance between semi-minor axis and location */
  var RR; /* distance between center and location */
  var CT; /* sin of geocentric latitude */
  var ST; /* cos of geocentric latitude */
  var RX;
  var RK;
  var RN; /* Earth radius at location */
  var CPHI0; /* cos of start or old geodetic latitude in iterations */
  var SPHI0; /* sin of start or old geodetic latitude in iterations */
  var CPHI; /* cos of searched geodetic latitude */
  var SPHI; /* sin of searched geodetic latitude */
  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */
  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */

  var X = p.x;
  var Y = p.y;
  var Z = p.z ? p.z : 0.0; //Z value not always supplied
  var Longitude;
  var Latitude;
  var Height;

  P = Math.sqrt(X * X + Y * Y);
  RR = Math.sqrt(X * X + Y * Y + Z * Z);

  /*      special cases for latitude and longitude */
  if (P / a < genau) {

    /*  special case, if P=0. (X=0., Y=0.) */
    Longitude = 0.0;

    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis
     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */
    if (RR / a < genau) {
      Latitude = HALF_PI;
      Height = -b;
      return {
        x: p.x,
        y: p.y,
        z: p.z
      };
    }
  } else {
    /*  ellipsoidal (geodetic) longitude
     *  interval: -PI < Longitude <= +PI */
    Longitude = Math.atan2(Y, X);
  }

  /* --------------------------------------------------------------
   * Following iterative algorithm was developped by
   * "Institut for Erdmessung", University of Hannover, July 1988.
   * Internet: www.ife.uni-hannover.de
   * Iterative computation of CPHI,SPHI and Height.
   * Iteration of CPHI and SPHI to 10**-12 radian resp.
   * 2*10**-7 arcsec.
   * --------------------------------------------------------------
   */
  CT = Z / RR;
  ST = P / RR;
  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);
  CPHI0 = ST * (1.0 - es) * RX;
  SPHI0 = CT * RX;
  iter = 0;

  /* loop to find sin(Latitude) resp. Latitude
   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */
  do {
    iter++;
    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);

    /*  ellipsoidal (geodetic) height */
    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);

    RK = es * RN / (RN + Height);
    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);
    CPHI = ST * (1.0 - RK) * RX;
    SPHI = CT * RX;
    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;
    CPHI0 = CPHI;
    SPHI0 = SPHI;
  }
  while (SDPHI * SDPHI > genau2 && iter < maxiter);

  /*      ellipsoidal (geodetic) latitude */
  Latitude = Math.atan(SPHI / Math.abs(CPHI));
  return {
    x: Longitude,
    y: Latitude,
    z: Height
  };
} // cs_geocentric_to_geodetic()

/****************************************************************/
// pj_geocentic_to_wgs84( p )
//  p = point to transform in geocentric coordinates (x,y,z)


/** point object, nothing fancy, just allows values to be
    passed back and forth by reference rather than by value.
    Other point classes may be used as long as they have
    x and y properties, which will get modified in the transform method.
*/
function geocentricToWgs84(p, datum_type, datum_params) {

  if (datum_type === PJD_3PARAM) {
    // if( x[io] === HUGE_VAL )
    //    continue;
    return {
      x: p.x + datum_params[0],
      y: p.y + datum_params[1],
      z: p.z + datum_params[2],
    };
  } else if (datum_type === PJD_7PARAM) {
    var Dx_BF = datum_params[0];
    var Dy_BF = datum_params[1];
    var Dz_BF = datum_params[2];
    var Rx_BF = datum_params[3];
    var Ry_BF = datum_params[4];
    var Rz_BF = datum_params[5];
    var M_BF = datum_params[6];
    // if( x[io] === HUGE_VAL )
    //    continue;
    return {
      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,
      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,
      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF
    };
  }
} // cs_geocentric_to_wgs84

/****************************************************************/
// pj_geocentic_from_wgs84()
//  coordinate system definition,
//  point to transform in geocentric coordinates (x,y,z)
function geocentricFromWgs84(p, datum_type, datum_params) {

  if (datum_type === PJD_3PARAM) {
    //if( x[io] === HUGE_VAL )
    //    continue;
    return {
      x: p.x - datum_params[0],
      y: p.y - datum_params[1],
      z: p.z - datum_params[2],
    };

  } else if (datum_type === PJD_7PARAM) {
    var Dx_BF = datum_params[0];
    var Dy_BF = datum_params[1];
    var Dz_BF = datum_params[2];
    var Rx_BF = datum_params[3];
    var Ry_BF = datum_params[4];
    var Rz_BF = datum_params[5];
    var M_BF = datum_params[6];
    var x_tmp = (p.x - Dx_BF) / M_BF;
    var y_tmp = (p.y - Dy_BF) / M_BF;
    var z_tmp = (p.z - Dz_BF) / M_BF;
    //if( x[io] === HUGE_VAL )
    //    continue;

    return {
      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,
      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,
      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp
    };
  } //cs_geocentric_from_wgs84()
}

// CONCATENATED MODULE: ../node_modules/proj4/lib/datum_transform.js



function checkParams(type) {
  return (type === PJD_3PARAM || type === PJD_7PARAM);
}

/* harmony default export */ var datum_transform = (function(source, dest, point) {
  // Short cut if the datums are identical.
  if (compareDatums(source, dest)) {
    return point; // in this case, zero is sucess,
    // whereas cs_compare_datums returns 1 to indicate TRUE
    // confusing, should fix this
  }

  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest
  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {
    return point;
  }

  // If this datum requires grid shifts, then apply it to geodetic coordinates.

  // Do we need to go through geocentric coordinates?
  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {
    return point;
  }

  // Convert to geocentric coordinates.
  point = geodeticToGeocentric(point, source.es, source.a);
  // Convert between datums
  if (checkParams(source.datum_type)) {
    point = geocentricToWgs84(point, source.datum_type, source.datum_params);
  }
  if (checkParams(dest.datum_type)) {
    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);
  }
  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);

});

// CONCATENATED MODULE: ../node_modules/proj4/lib/adjust_axis.js
/* harmony default export */ var adjust_axis = (function(crs, denorm, point) {
  var xin = point.x,
    yin = point.y,
    zin = point.z || 0.0;
  var v, t, i;
  var out = {};
  for (i = 0; i < 3; i++) {
    if (denorm && i === 2 && point.z === undefined) {
      continue;
    }
    if (i === 0) {
      v = xin;
      t = 'x';
    }
    else if (i === 1) {
      v = yin;
      t = 'y';
    }
    else {
      v = zin;
      t = 'z';
    }
    switch (crs.axis[i]) {
    case 'e':
      out[t] = v;
      break;
    case 'w':
      out[t] = -v;
      break;
    case 'n':
      out[t] = v;
      break;
    case 's':
      out[t] = -v;
      break;
    case 'u':
      if (point[t] !== undefined) {
        out.z = v;
      }
      break;
    case 'd':
      if (point[t] !== undefined) {
        out.z = -v;
      }
      break;
    default:
      //console.log("ERROR: unknow axis ("+crs.axis[i]+") - check definition of "+crs.projName);
      return null;
    }
  }
  return out;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/toPoint.js
/* harmony default export */ var toPoint = (function (array){
  var out = {
    x: array[0],
    y: array[1]
  };
  if (array.length>2) {
    out.z = array[2];
  }
  if (array.length>3) {
    out.m = array[3];
  }
  return out;
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/checkSanity.js
/* harmony default export */ var checkSanity = (function (point) {
  checkCoord(point.x);
  checkCoord(point.y);
});
function checkCoord(num) {
  if (typeof Number.isFinite === 'function') {
    if (Number.isFinite(num)) {
      return;
    }
    throw new TypeError('coordinates must be finite numbers');
  }
  if (typeof num !== 'number' || num !== num || !isFinite(num)) {
    throw new TypeError('coordinates must be finite numbers');
  }
}

// CONCATENATED MODULE: ../node_modules/proj4/lib/transform.js







function checkNotWGS(source, dest) {
  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');
}

function transform(source, dest, point) {
  var wgs84;
  if (Array.isArray(point)) {
    point = toPoint(point);
  }
  checkSanity(point);
  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84
  if (source.datum && dest.datum && checkNotWGS(source, dest)) {
    wgs84 = new Proj('WGS84');
    point = transform(source, wgs84, point);
    source = wgs84;
  }
  // DGR, 2010/11/12
  if (source.axis !== 'enu') {
    point = adjust_axis(source, false, point);
  }
  // Transform source points to long/lat, if they aren't already.
  if (source.projName === 'longlat') {
    point = {
      x: point.x * D2R,
      y: point.y * D2R
    };
  }
  else {
    if (source.to_meter) {
      point = {
        x: point.x * source.to_meter,
        y: point.y * source.to_meter
      };
    }
    point = source.inverse(point); // Convert Cartesian to longlat
  }
  // Adjust for the prime meridian if necessary
  if (source.from_greenwich) {
    point.x += source.from_greenwich;
  }

  // Convert datums if needed, and if possible.
  point = datum_transform(source.datum, dest.datum, point);

  // Adjust for the prime meridian if necessary
  if (dest.from_greenwich) {
    point = {
      x: point.x - dest.from_greenwich,
      y: point.y
    };
  }

  if (dest.projName === 'longlat') {
    // convert radians to decimal degrees
    point = {
      x: point.x * R2D,
      y: point.y * R2D
    };
  } else { // else project
    point = dest.forward(point);
    if (dest.to_meter) {
      point = {
        x: point.x / dest.to_meter,
        y: point.y / dest.to_meter
      };
    }
  }

  // DGR, 2010/11/12
  if (dest.axis !== 'enu') {
    return adjust_axis(dest, true, point);
  }

  return point;
}

// CONCATENATED MODULE: ../node_modules/proj4/lib/core.js


var core_wgs84 = Proj('WGS84');

function transformer(from, to, coords) {
  var transformedArray, out, keys;
  if (Array.isArray(coords)) {
    transformedArray = transform(from, to, coords);
    if (coords.length === 3) {
      return [transformedArray.x, transformedArray.y, transformedArray.z];
    }
    else {
      return [transformedArray.x, transformedArray.y];
    }
  }
  else {
    out = transform(from, to, coords);
    keys = Object.keys(coords);
    if (keys.length === 2) {
      return out;
    }
    keys.forEach(function (key) {
      if (key === 'x' || key === 'y') {
        return;
      }
      out[key] = coords[key];
    });
    return out;
  }
}

function checkProj(item) {
  if (item instanceof Proj) {
    return item;
  }
  if (item.oProj) {
    return item.oProj;
  }
  return Proj(item);
}
function core_proj4(fromProj, toProj, coord) {
  fromProj = checkProj(fromProj);
  var single = false;
  var obj;
  if (typeof toProj === 'undefined') {
    toProj = fromProj;
    fromProj = core_wgs84;
    single = true;
  }
  else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {
    coord = toProj;
    toProj = fromProj;
    fromProj = core_wgs84;
    single = true;
  }
  toProj = checkProj(toProj);
  if (coord) {
    return transformer(fromProj, toProj, coord);
  }
  else {
    obj = {
      forward: function(coords) {
        return transformer(fromProj, toProj, coords);
      },
      inverse: function(coords) {
        return transformer(toProj, fromProj, coords);
      }
    };
    if (single) {
      obj.oProj = toProj;
    }
    return obj;
  }
}
/* harmony default export */ var core = (core_proj4);

// CONCATENATED MODULE: ../node_modules/mgrs/mgrs.js



/**
 * UTM zones are grouped, and assigned to one of a group of 6
 * sets.
 *
 * {int} @private
 */
var NUM_100K_SETS = 6;

/**
 * The column letters (for easting) of the lower left value, per
 * set.
 *
 * {string} @private
 */
var SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';

/**
 * The row letters (for northing) of the lower left value, per
 * set.
 *
 * {string} @private
 */
var SET_ORIGIN_ROW_LETTERS = 'AFAFAF';

var mgrs_A = 65; // A
var I = 73; // I
var O = 79; // O
var mgrs_V = 86; // V
var mgrs_Z = 90; // Z
/* harmony default export */ var mgrs = ({
  forward: mgrs_forward,
  inverse: mgrs_inverse,
  toPoint: mgrs_toPoint
});
/**
 * Conversion of lat/lon to MGRS.
 *
 * @param {object} ll Object literal with lat and lon properties on a
 *     WGS84 ellipsoid.
 * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for
 *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.
 * @return {string} the MGRS string for the given location and accuracy.
 */
function mgrs_forward(ll, accuracy) {
  accuracy = accuracy || 5; // default accuracy 1m
  return encode(LLtoUTM({
    lat: ll[1],
    lon: ll[0]
  }), accuracy);
};

/**
 * Conversion of MGRS to lat/lon.
 *
 * @param {string} mgrs MGRS string.
 * @return {array} An array with left (longitude), bottom (latitude), right
 *     (longitude) and top (latitude) values in WGS84, representing the
 *     bounding box for the provided MGRS reference.
 */
function mgrs_inverse(mgrs) {
  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));
  if (bbox.lat && bbox.lon) {
    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];
  }
  return [bbox.left, bbox.bottom, bbox.right, bbox.top];
};

function mgrs_toPoint(mgrs) {
  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));
  if (bbox.lat && bbox.lon) {
    return [bbox.lon, bbox.lat];
  }
  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];
};
/**
 * Conversion from degrees to radians.
 *
 * @private
 * @param {number} deg the angle in degrees.
 * @return {number} the angle in radians.
 */
function degToRad(deg) {
  return (deg * (Math.PI / 180.0));
}

/**
 * Conversion from radians to degrees.
 *
 * @private
 * @param {number} rad the angle in radians.
 * @return {number} the angle in degrees.
 */
function radToDeg(rad) {
  return (180.0 * (rad / Math.PI));
}

/**
 * Converts a set of Longitude and Latitude co-ordinates to UTM
 * using the WGS84 ellipsoid.
 *
 * @private
 * @param {object} ll Object literal with lat and lon properties
 *     representing the WGS84 coordinate to be converted.
 * @return {object} Object literal containing the UTM value with easting,
 *     northing, zoneNumber and zoneLetter properties, and an optional
 *     accuracy property in digits. Returns null if the conversion failed.
 */
function LLtoUTM(ll) {
  var Lat = ll.lat;
  var Long = ll.lon;
  var a = 6378137.0; //ellip.radius;
  var eccSquared = 0.00669438; //ellip.eccsq;
  var k0 = 0.9996;
  var LongOrigin;
  var eccPrimeSquared;
  var N, T, C, A, M;
  var LatRad = degToRad(Lat);
  var LongRad = degToRad(Long);
  var LongOriginRad;
  var ZoneNumber;
  // (int)
  ZoneNumber = Math.floor((Long + 180) / 6) + 1;

  //Make sure the longitude 180.00 is in Zone 60
  if (Long === 180) {
    ZoneNumber = 60;
  }

  // Special zone for Norway
  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {
    ZoneNumber = 32;
  }

  // Special zones for Svalbard
  if (Lat >= 72.0 && Lat < 84.0) {
    if (Long >= 0.0 && Long < 9.0) {
      ZoneNumber = 31;
    }
    else if (Long >= 9.0 && Long < 21.0) {
      ZoneNumber = 33;
    }
    else if (Long >= 21.0 && Long < 33.0) {
      ZoneNumber = 35;
    }
    else if (Long >= 33.0 && Long < 42.0) {
      ZoneNumber = 37;
    }
  }

  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin
  // in middle of
  // zone
  LongOriginRad = degToRad(LongOrigin);

  eccPrimeSquared = (eccSquared) / (1 - eccSquared);

  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));
  T = Math.tan(LatRad) * Math.tan(LatRad);
  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);
  A = Math.cos(LatRad) * (LongRad - LongOriginRad);

  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));

  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);

  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));
  if (Lat < 0.0) {
    UTMNorthing += 10000000.0; //10000000 meter offset for
    // southern hemisphere
  }

  return {
    northing: Math.round(UTMNorthing),
    easting: Math.round(UTMEasting),
    zoneNumber: ZoneNumber,
    zoneLetter: getLetterDesignator(Lat)
  };
}

/**
 * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience
 * class where the Zone can be specified as a single string eg."60N" which
 * is then broken down into the ZoneNumber and ZoneLetter.
 *
 * @private
 * @param {object} utm An object literal with northing, easting, zoneNumber
 *     and zoneLetter properties. If an optional accuracy property is
 *     provided (in meters), a bounding box will be returned instead of
 *     latitude and longitude.
 * @return {object} An object literal containing either lat and lon values
 *     (if no accuracy was provided), or top, right, bottom and left values
 *     for the bounding box calculated according to the provided accuracy.
 *     Returns null if the conversion failed.
 */
function UTMtoLL(utm) {

  var UTMNorthing = utm.northing;
  var UTMEasting = utm.easting;
  var zoneLetter = utm.zoneLetter;
  var zoneNumber = utm.zoneNumber;
  // check the ZoneNummber is valid
  if (zoneNumber < 0 || zoneNumber > 60) {
    return null;
  }

  var k0 = 0.9996;
  var a = 6378137.0; //ellip.radius;
  var eccSquared = 0.00669438; //ellip.eccsq;
  var eccPrimeSquared;
  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));
  var N1, T1, C1, R1, D, M;
  var LongOrigin;
  var mu, phi1Rad;

  // remove 500,000 meter offset for longitude
  var x = UTMEasting - 500000.0;
  var y = UTMNorthing;

  // We must know somehow if we are in the Northern or Southern
  // hemisphere, this is the only time we use the letter So even
  // if the Zone letter isn't exactly correct it should indicate
  // the hemisphere correctly
  if (zoneLetter < 'N') {
    y -= 10000000.0; // remove 10,000,000 meter offset used
    // for southern hemisphere
  }

  // There are 60 zones with zone 1 being at West -180 to -174
  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin
  // in middle of
  // zone

  eccPrimeSquared = (eccSquared) / (1 - eccSquared);

  M = y / k0;
  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));

  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);
  // double phi1 = ProjMath.radToDeg(phi1Rad);

  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));
  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);
  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);
  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);
  D = x / (N1 * k0);

  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);
  lat = radToDeg(lat);

  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);
  lon = LongOrigin + radToDeg(lon);

  var result;
  if (utm.accuracy) {
    var topRight = UTMtoLL({
      northing: utm.northing + utm.accuracy,
      easting: utm.easting + utm.accuracy,
      zoneLetter: utm.zoneLetter,
      zoneNumber: utm.zoneNumber
    });
    result = {
      top: topRight.lat,
      right: topRight.lon,
      bottom: lat,
      left: lon
    };
  }
  else {
    result = {
      lat: lat,
      lon: lon
    };
  }
  return result;
}

/**
 * Calculates the MGRS letter designator for the given latitude.
 *
 * @private
 * @param {number} lat The latitude in WGS84 to get the letter designator
 *     for.
 * @return {char} The letter designator.
 */
function getLetterDesignator(lat) {
  //This is here as an error flag to show that the Latitude is
  //outside MGRS limits
  var LetterDesignator = 'Z';

  if ((84 >= lat) && (lat >= 72)) {
    LetterDesignator = 'X';
  }
  else if ((72 > lat) && (lat >= 64)) {
    LetterDesignator = 'W';
  }
  else if ((64 > lat) && (lat >= 56)) {
    LetterDesignator = 'V';
  }
  else if ((56 > lat) && (lat >= 48)) {
    LetterDesignator = 'U';
  }
  else if ((48 > lat) && (lat >= 40)) {
    LetterDesignator = 'T';
  }
  else if ((40 > lat) && (lat >= 32)) {
    LetterDesignator = 'S';
  }
  else if ((32 > lat) && (lat >= 24)) {
    LetterDesignator = 'R';
  }
  else if ((24 > lat) && (lat >= 16)) {
    LetterDesignator = 'Q';
  }
  else if ((16 > lat) && (lat >= 8)) {
    LetterDesignator = 'P';
  }
  else if ((8 > lat) && (lat >= 0)) {
    LetterDesignator = 'N';
  }
  else if ((0 > lat) && (lat >= -8)) {
    LetterDesignator = 'M';
  }
  else if ((-8 > lat) && (lat >= -16)) {
    LetterDesignator = 'L';
  }
  else if ((-16 > lat) && (lat >= -24)) {
    LetterDesignator = 'K';
  }
  else if ((-24 > lat) && (lat >= -32)) {
    LetterDesignator = 'J';
  }
  else if ((-32 > lat) && (lat >= -40)) {
    LetterDesignator = 'H';
  }
  else if ((-40 > lat) && (lat >= -48)) {
    LetterDesignator = 'G';
  }
  else if ((-48 > lat) && (lat >= -56)) {
    LetterDesignator = 'F';
  }
  else if ((-56 > lat) && (lat >= -64)) {
    LetterDesignator = 'E';
  }
  else if ((-64 > lat) && (lat >= -72)) {
    LetterDesignator = 'D';
  }
  else if ((-72 > lat) && (lat >= -80)) {
    LetterDesignator = 'C';
  }
  return LetterDesignator;
}

/**
 * Encodes a UTM location as MGRS string.
 *
 * @private
 * @param {object} utm An object literal with easting, northing,
 *     zoneLetter, zoneNumber
 * @param {number} accuracy Accuracy in digits (1-5).
 * @return {string} MGRS string for the given UTM location.
 */
function encode(utm, accuracy) {
  // prepend with leading zeroes
  var seasting = "00000" + utm.easting,
    snorthing = "00000" + utm.northing;

  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);
}

/**
 * Get the two letter 100k designator for a given UTM easting,
 * northing and zone number value.
 *
 * @private
 * @param {number} easting
 * @param {number} northing
 * @param {number} zoneNumber
 * @return the two letter 100k designator for the given UTM location.
 */
function get100kID(easting, northing, zoneNumber) {
  var setParm = get100kSetForZone(zoneNumber);
  var setColumn = Math.floor(easting / 100000);
  var setRow = Math.floor(northing / 100000) % 20;
  return getLetter100kID(setColumn, setRow, setParm);
}

/**
 * Given a UTM zone number, figure out the MGRS 100K set it is in.
 *
 * @private
 * @param {number} i An UTM zone number.
 * @return {number} the 100k set the UTM zone is in.
 */
function get100kSetForZone(i) {
  var setParm = i % NUM_100K_SETS;
  if (setParm === 0) {
    setParm = NUM_100K_SETS;
  }

  return setParm;
}

/**
 * Get the two-letter MGRS 100k designator given information
 * translated from the UTM northing, easting and zone number.
 *
 * @private
 * @param {number} column the column index as it relates to the MGRS
 *        100k set spreadsheet, created from the UTM easting.
 *        Values are 1-8.
 * @param {number} row the row index as it relates to the MGRS 100k set
 *        spreadsheet, created from the UTM northing value. Values
 *        are from 0-19.
 * @param {number} parm the set block, as it relates to the MGRS 100k set
 *        spreadsheet, created from the UTM zone. Values are from
 *        1-60.
 * @return two letter MGRS 100k code.
 */
function getLetter100kID(column, row, parm) {
  // colOrigin and rowOrigin are the letters at the origin of the set
  var index = parm - 1;
  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);
  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);

  // colInt and rowInt are the letters to build to return
  var colInt = colOrigin + column - 1;
  var rowInt = rowOrigin + row;
  var rollover = false;

  if (colInt > mgrs_Z) {
    colInt = colInt - mgrs_Z + mgrs_A - 1;
    rollover = true;
  }

  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {
    colInt++;
  }

  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {
    colInt++;

    if (colInt === I) {
      colInt++;
    }
  }

  if (colInt > mgrs_Z) {
    colInt = colInt - mgrs_Z + mgrs_A - 1;
  }

  if (rowInt > mgrs_V) {
    rowInt = rowInt - mgrs_V + mgrs_A - 1;
    rollover = true;
  }
  else {
    rollover = false;
  }

  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {
    rowInt++;
  }

  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {
    rowInt++;

    if (rowInt === I) {
      rowInt++;
    }
  }

  if (rowInt > mgrs_V) {
    rowInt = rowInt - mgrs_V + mgrs_A - 1;
  }

  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);
  return twoLetter;
}

/**
 * Decode the UTM parameters from a MGRS string.
 *
 * @private
 * @param {string} mgrsString an UPPERCASE coordinate string is expected.
 * @return {object} An object literal with easting, northing, zoneLetter,
 *     zoneNumber and accuracy (in meters) properties.
 */
function decode(mgrsString) {

  if (mgrsString && mgrsString.length === 0) {
    throw ("MGRSPoint coverting from nothing");
  }

  var length = mgrsString.length;

  var hunK = null;
  var sb = "";
  var testChar;
  var i = 0;

  // get Zone number
  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {
    if (i >= 2) {
      throw ("MGRSPoint bad conversion from: " + mgrsString);
    }
    sb += testChar;
    i++;
  }

  var zoneNumber = parseInt(sb, 10);

  if (i === 0 || i + 3 > length) {
    // A good MGRS string has to be 4-5 digits long,
    // ##AAA/#AAA at least.
    throw ("MGRSPoint bad conversion from: " + mgrsString);
  }

  var zoneLetter = mgrsString.charAt(i++);

  // Should we check the zone letter here? Why not.
  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {
    throw ("MGRSPoint zone letter " + zoneLetter + " not handled: " + mgrsString);
  }

  hunK = mgrsString.substring(i, i += 2);

  var set = get100kSetForZone(zoneNumber);

  var east100k = getEastingFromChar(hunK.charAt(0), set);
  var north100k = getNorthingFromChar(hunK.charAt(1), set);

  // We have a bug where the northing may be 2000000 too low.
  // How
  // do we know when to roll over?

  while (north100k < getMinNorthing(zoneLetter)) {
    north100k += 2000000;
  }

  // calculate the char index for easting/northing separator
  var remainder = length - i;

  if (remainder % 2 !== 0) {
    throw ("MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters" + mgrsString);
  }

  var sep = remainder / 2;

  var sepEasting = 0.0;
  var sepNorthing = 0.0;
  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;
  if (sep > 0) {
    accuracyBonus = 100000.0 / Math.pow(10, sep);
    sepEastingString = mgrsString.substring(i, i + sep);
    sepEasting = parseFloat(sepEastingString) * accuracyBonus;
    sepNorthingString = mgrsString.substring(i + sep);
    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;
  }

  easting = sepEasting + east100k;
  northing = sepNorthing + north100k;

  return {
    easting: easting,
    northing: northing,
    zoneLetter: zoneLetter,
    zoneNumber: zoneNumber,
    accuracy: accuracyBonus
  };
}

/**
 * Given the first letter from a two-letter MGRS 100k zone, and given the
 * MGRS table set for the zone number, figure out the easting value that
 * should be added to the other, secondary easting value.
 *
 * @private
 * @param {char} e The first letter from a two-letter MGRS 100´k zone.
 * @param {number} set The MGRS table set for the zone number.
 * @return {number} The easting value for the given letter and set.
 */
function getEastingFromChar(e, set) {
  // colOrigin is the letter at the origin of the set for the
  // column
  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);
  var eastingValue = 100000.0;
  var rewindMarker = false;

  while (curCol !== e.charCodeAt(0)) {
    curCol++;
    if (curCol === I) {
      curCol++;
    }
    if (curCol === O) {
      curCol++;
    }
    if (curCol > mgrs_Z) {
      if (rewindMarker) {
        throw ("Bad character: " + e);
      }
      curCol = mgrs_A;
      rewindMarker = true;
    }
    eastingValue += 100000.0;
  }

  return eastingValue;
}

/**
 * Given the second letter from a two-letter MGRS 100k zone, and given the
 * MGRS table set for the zone number, figure out the northing value that
 * should be added to the other, secondary northing value. You have to
 * remember that Northings are determined from the equator, and the vertical
 * cycle of letters mean a 2000000 additional northing meters. This happens
 * approx. every 18 degrees of latitude. This method does *NOT* count any
 * additional northings. You have to figure out how many 2000000 meters need
 * to be added for the zone letter of the MGRS coordinate.
 *
 * @private
 * @param {char} n Second letter of the MGRS 100k zone
 * @param {number} set The MGRS table set number, which is dependent on the
 *     UTM zone number.
 * @return {number} The northing value for the given letter and set.
 */
function getNorthingFromChar(n, set) {

  if (n > 'V') {
    throw ("MGRSPoint given invalid Northing " + n);
  }

  // rowOrigin is the letter at the origin of the set for the
  // column
  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);
  var northingValue = 0.0;
  var rewindMarker = false;

  while (curRow !== n.charCodeAt(0)) {
    curRow++;
    if (curRow === I) {
      curRow++;
    }
    if (curRow === O) {
      curRow++;
    }
    // fixing a bug making whole application hang in this loop
    // when 'n' is a wrong character
    if (curRow > mgrs_V) {
      if (rewindMarker) { // making sure that this loop ends
        throw ("Bad character: " + n);
      }
      curRow = mgrs_A;
      rewindMarker = true;
    }
    northingValue += 100000.0;
  }

  return northingValue;
}

/**
 * The function getMinNorthing returns the minimum northing value of a MGRS
 * zone.
 *
 * Ported from Geotrans' c Lattitude_Band_Value structure table.
 *
 * @private
 * @param {char} zoneLetter The MGRS zone to get the min northing for.
 * @return {number}
 */
function getMinNorthing(zoneLetter) {
  var northing;
  switch (zoneLetter) {
  case 'C':
    northing = 1100000.0;
    break;
  case 'D':
    northing = 2000000.0;
    break;
  case 'E':
    northing = 2800000.0;
    break;
  case 'F':
    northing = 3700000.0;
    break;
  case 'G':
    northing = 4600000.0;
    break;
  case 'H':
    northing = 5500000.0;
    break;
  case 'J':
    northing = 6400000.0;
    break;
  case 'K':
    northing = 7300000.0;
    break;
  case 'L':
    northing = 8200000.0;
    break;
  case 'M':
    northing = 9100000.0;
    break;
  case 'N':
    northing = 0.0;
    break;
  case 'P':
    northing = 800000.0;
    break;
  case 'Q':
    northing = 1700000.0;
    break;
  case 'R':
    northing = 2600000.0;
    break;
  case 'S':
    northing = 3500000.0;
    break;
  case 'T':
    northing = 4400000.0;
    break;
  case 'U':
    northing = 5300000.0;
    break;
  case 'V':
    northing = 6200000.0;
    break;
  case 'W':
    northing = 7000000.0;
    break;
  case 'X':
    northing = 7900000.0;
    break;
  default:
    northing = -1.0;
  }
  if (northing >= 0.0) {
    return northing;
  }
  else {
    throw ("Invalid zone letter: " + zoneLetter);
  }

}

// CONCATENATED MODULE: ../node_modules/proj4/lib/Point.js


function Point(x, y, z) {
  if (!(this instanceof Point)) {
    return new Point(x, y, z);
  }
  if (Array.isArray(x)) {
    this.x = x[0];
    this.y = x[1];
    this.z = x[2] || 0.0;
  } else if(typeof x === 'object') {
    this.x = x.x;
    this.y = x.y;
    this.z = x.z || 0.0;
  } else if (typeof x === 'string' && typeof y === 'undefined') {
    var coords = x.split(',');
    this.x = parseFloat(coords[0], 10);
    this.y = parseFloat(coords[1], 10);
    this.z = parseFloat(coords[2], 10) || 0.0;
  } else {
    this.x = x;
    this.y = y;
    this.z = z || 0.0;
  }
  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');
}

Point.fromMGRS = function(mgrsStr) {
  return new Point(mgrs_toPoint(mgrsStr));
};
Point.prototype.toMGRS = function(accuracy) {
  return mgrs_forward([this.x, this.y], accuracy);
};
/* harmony default export */ var lib_Point = (Point);

// EXTERNAL MODULE: ../node_modules/proj4/package.json
var proj4_package = __webpack_require__(232);

// CONCATENATED MODULE: ../node_modules/proj4/lib/version.js


// CONCATENATED MODULE: ../node_modules/proj4/lib/common/pj_enfn.js
var C00 = 1;
var C02 = 0.25;
var C04 = 0.046875;
var C06 = 0.01953125;
var C08 = 0.01068115234375;
var C22 = 0.75;
var C44 = 0.46875;
var C46 = 0.01302083333333333333;
var C48 = 0.00712076822916666666;
var C66 = 0.36458333333333333333;
var C68 = 0.00569661458333333333;
var C88 = 0.3076171875;

/* harmony default export */ var pj_enfn = (function(es) {
  var en = [];
  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));
  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));
  var t = es * es;
  en[2] = t * (C44 - es * (C46 + es * C48));
  t *= es;
  en[3] = t * (C66 - es * C68);
  en[4] = t * es * C88;
  return en;
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/pj_mlfn.js
/* harmony default export */ var pj_mlfn = (function(phi, sphi, cphi, en) {
  cphi *= sphi;
  sphi *= sphi;
  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/pj_inv_mlfn.js



var MAX_ITER = 20;

/* harmony default export */ var pj_inv_mlfn = (function(arg, es, en) {
  var k = 1 / (1 - es);
  var phi = arg;
  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */
    var s = Math.sin(phi);
    var t = 1 - es * s * s;
    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;
    //phi -= t * (t * Math.sqrt(t)) * k;
    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;
    phi -= t;
    if (Math.abs(t) < EPSLN) {
      return phi;
    }
  }
  //..reportError("cass:pj_inv_mlfn: Convergence error");
  return phi;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/tmerc.js
// Heavily based on this tmerc projection implementation
// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js









function tmerc_init() {
  this.x0 = this.x0 !== undefined ? this.x0 : 0;
  this.y0 = this.y0 !== undefined ? this.y0 : 0;
  this.long0 = this.long0 !== undefined ? this.long0 : 0;
  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;

  if (this.es) {
    this.en = pj_enfn(this.es);
    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);
  }
}

/**
    Transverse Mercator Forward  - long/lat to x/y
    long/lat in radians
  */
function tmerc_forward(p) {
  var lon = p.x;
  var lat = p.y;

  var delta_lon = adjust_lon(lon - this.long0);
  var con;
  var x, y;
  var sin_phi = Math.sin(lat);
  var cos_phi = Math.cos(lat);

  if (!this.es) {
    var b = cos_phi * Math.sin(delta_lon);

    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {
      return (93);
    }
    else {
      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;
      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));
      b = Math.abs(y);

      if (b >= 1) {
        if ((b - 1) > EPSLN) {
          return (93);
        }
        else {
          y = 0;
        }
      }
      else {
        y = Math.acos(y);
      }

      if (lat < 0) {
        y = -y;
      }

      y = this.a * this.k0 * (y - this.lat0) + this.y0;
    }
  }
  else {
    var al = cos_phi * delta_lon;
    var als = Math.pow(al, 2);
    var c = this.ep2 * Math.pow(cos_phi, 2);
    var cs = Math.pow(c, 2);
    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;
    var t = Math.pow(tq, 2);
    var ts = Math.pow(t, 2);
    con = 1 - this.es * Math.pow(sin_phi, 2);
    al = al / Math.sqrt(con);
    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);

    x = this.a * (this.k0 * al * (1 +
      als / 6 * (1 - t + c +
      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +
      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +
      this.x0;

    y = this.a * (this.k0 * (ml - this.ml0 +
      sin_phi * delta_lon * al / 2 * (1 +
      als / 12 * (5 - t + 9 * c + 4 * cs +
      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +
      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +
      this.y0;
  }

  p.x = x;
  p.y = y;

  return p;
}

/**
    Transverse Mercator Inverse  -  x/y to long/lat
  */
function tmerc_inverse(p) {
  var con, phi;
  var lat, lon;
  var x = (p.x - this.x0) * (1 / this.a);
  var y = (p.y - this.y0) * (1 / this.a);

  if (!this.es) {
    var f = Math.exp(x / this.k0);
    var g = 0.5 * (f - 1 / f);
    var temp = this.lat0 + y / this.k0;
    var h = Math.cos(temp);
    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));
    lat = Math.asin(con);

    if (y < 0) {
      lat = -lat;
    }

    if ((g === 0) && (h === 0)) {
      lon = 0;
    }
    else {
      lon = adjust_lon(Math.atan2(g, h) + this.long0);
    }
  }
  else { // ellipsoidal form
    con = this.ml0 + y / this.k0;
    phi = pj_inv_mlfn(con, this.es, this.en);

    if (Math.abs(phi) < HALF_PI) {
      var sin_phi = Math.sin(phi);
      var cos_phi = Math.cos(phi);
      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;
      var c = this.ep2 * Math.pow(cos_phi, 2);
      var cs = Math.pow(c, 2);
      var t = Math.pow(tan_phi, 2);
      var ts = Math.pow(t, 2);
      con = 1 - this.es * Math.pow(sin_phi, 2);
      var d = x * Math.sqrt(con) / this.k0;
      var ds = Math.pow(d, 2);
      con = con * tan_phi;

      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -
        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -
        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -
        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));

      lon = adjust_lon(this.long0 + (d * (1 -
        ds / 6 * (1 + 2 * t + c -
        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -
        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));
    }
    else {
      lat = HALF_PI * sign(y);
      lon = 0;
    }
  }

  p.x = lon;
  p.y = lat;

  return p;
}

var tmerc_names = ["Transverse_Mercator", "Transverse Mercator", "tmerc"];
/* harmony default export */ var tmerc = ({
  init: tmerc_init,
  forward: tmerc_forward,
  inverse: tmerc_inverse,
  names: tmerc_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/sinh.js
/* harmony default export */ var sinh = (function(x) {
  var r = Math.exp(x);
  r = (r - 1 / r) / 2;
  return r;
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/hypot.js
/* harmony default export */ var hypot = (function(x, y) {
  x = Math.abs(x);
  y = Math.abs(y);
  var a = Math.max(x, y);
  var b = Math.min(x, y) / (a ? a : 1);

  return a * Math.sqrt(1 + Math.pow(b, 2));
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/log1py.js
/* harmony default export */ var log1py = (function(x) {
  var y = 1 + x;
  var z = y - 1;

  return z === 0 ? x : x * Math.log(y) / z;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/asinhy.js



/* harmony default export */ var asinhy = (function(x) {
  var y = Math.abs(x);
  y = log1py(y * (1 + y / (hypot(1, y) + 1)));

  return x < 0 ? -y : y;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/gatg.js
/* harmony default export */ var gatg = (function(pp, B) {
  var cos_2B = 2 * Math.cos(2 * B);
  var i = pp.length - 1;
  var h1 = pp[i];
  var h2 = 0;
  var h;

  while (--i >= 0) {
    h = -h2 + cos_2B * h1 + pp[i];
    h2 = h1;
    h1 = h;
  }

  return (B + h * Math.sin(2 * B));
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/clens.js
/* harmony default export */ var clens = (function(pp, arg_r) {
  var r = 2 * Math.cos(arg_r);
  var i = pp.length - 1;
  var hr1 = pp[i];
  var hr2 = 0;
  var hr;

  while (--i >= 0) {
    hr = -hr2 + r * hr1 + pp[i];
    hr2 = hr1;
    hr1 = hr;
  }

  return Math.sin(arg_r) * hr;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/cosh.js
/* harmony default export */ var cosh = (function(x) {
  var r = Math.exp(x);
  r = (r + 1 / r) / 2;
  return r;
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/clens_cmplx.js



/* harmony default export */ var clens_cmplx = (function(pp, arg_r, arg_i) {
  var sin_arg_r = Math.sin(arg_r);
  var cos_arg_r = Math.cos(arg_r);
  var sinh_arg_i = sinh(arg_i);
  var cosh_arg_i = cosh(arg_i);
  var r = 2 * cos_arg_r * cosh_arg_i;
  var i = -2 * sin_arg_r * sinh_arg_i;
  var j = pp.length - 1;
  var hr = pp[j];
  var hi1 = 0;
  var hr1 = 0;
  var hi = 0;
  var hr2;
  var hi2;

  while (--j >= 0) {
    hr2 = hr1;
    hi2 = hi1;
    hr1 = hr;
    hi1 = hi;
    hr = -hr2 + r * hr1 - i * hi1 + pp[j];
    hi = -hi2 + i * hr1 + r * hi1;
  }

  r = sin_arg_r * cosh_arg_i;
  i = cos_arg_r * sinh_arg_i;

  return [r * hr - i * hi, r * hi + i * hr];
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/etmerc.js
// Heavily based on this etmerc projection implementation
// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js









function etmerc_init() {
  if (this.es === undefined || this.es <= 0) {
    throw new Error('incorrect elliptical usage');
  }

  this.x0 = this.x0 !== undefined ? this.x0 : 0;
  this.y0 = this.y0 !== undefined ? this.y0 : 0;
  this.long0 = this.long0 !== undefined ? this.long0 : 0;
  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;

  this.cgb = [];
  this.cbg = [];
  this.utg = [];
  this.gtu = [];

  var f = this.es / (1 + Math.sqrt(1 - this.es));
  var n = f / (2 - f);
  var np = n;

  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));
  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));

  np = np * n;
  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));
  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));

  np = np * n;
  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));
  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));

  np = np * n;
  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));
  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));

  np = np * n;
  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));
  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));

  np = np * n;
  this.cgb[5] = np * (601676 / 22275);
  this.cbg[5] = np * (444337 / 155925);

  np = Math.pow(n, 2);
  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));

  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));
  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));

  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));
  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));

  np = np * n;
  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));
  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));

  np = np * n;
  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));
  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));

  np = np * n;
  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));
  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));

  np = np * n;
  this.utg[5] = np * (-20648693 / 638668800);
  this.gtu[5] = np * (212378941 / 319334400);

  var Z = gatg(this.cbg, this.lat0);
  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));
}

function etmerc_forward(p) {
  var Ce = adjust_lon(p.x - this.long0);
  var Cn = p.y;

  Cn = gatg(this.cbg, Cn);
  var sin_Cn = Math.sin(Cn);
  var cos_Cn = Math.cos(Cn);
  var sin_Ce = Math.sin(Ce);
  var cos_Ce = Math.cos(Ce);

  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);
  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));
  Ce = asinhy(Math.tan(Ce));

  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);

  Cn = Cn + tmp[0];
  Ce = Ce + tmp[1];

  var x;
  var y;

  if (Math.abs(Ce) <= 2.623395162778) {
    x = this.a * (this.Qn * Ce) + this.x0;
    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;
  }
  else {
    x = Infinity;
    y = Infinity;
  }

  p.x = x;
  p.y = y;

  return p;
}

function etmerc_inverse(p) {
  var Ce = (p.x - this.x0) * (1 / this.a);
  var Cn = (p.y - this.y0) * (1 / this.a);

  Cn = (Cn - this.Zb) / this.Qn;
  Ce = Ce / this.Qn;

  var lon;
  var lat;

  if (Math.abs(Ce) <= 2.623395162778) {
    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);

    Cn = Cn + tmp[0];
    Ce = Ce + tmp[1];
    Ce = Math.atan(sinh(Ce));

    var sin_Cn = Math.sin(Cn);
    var cos_Cn = Math.cos(Cn);
    var sin_Ce = Math.sin(Ce);
    var cos_Ce = Math.cos(Ce);

    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));
    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);

    lon = adjust_lon(Ce + this.long0);
    lat = gatg(this.cgb, Cn);
  }
  else {
    lon = Infinity;
    lat = Infinity;
  }

  p.x = lon;
  p.y = lat;

  return p;
}

var etmerc_names = ["Extended_Transverse_Mercator", "Extended Transverse Mercator", "etmerc"];
/* harmony default export */ var etmerc = ({
  init: etmerc_init,
  forward: etmerc_forward,
  inverse: etmerc_inverse,
  names: etmerc_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/adjust_zone.js


/* harmony default export */ var adjust_zone = (function(zone, lon) {
  if (zone === undefined) {
    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;

    if (zone < 0) {
      return 0;
    } else if (zone > 60) {
      return 60;
    }
  }
  return zone;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/utm.js


var dependsOn = 'etmerc';



function utm_init() {
  var zone = adjust_zone(this.zone, this.long0);
  if (zone === undefined) {
    throw new Error('unknown utm zone');
  }
  this.lat0 = 0;
  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;
  this.x0 = 500000;
  this.y0 = this.utmSouth ? 10000000 : 0;
  this.k0 = 0.9996;

  etmerc.init.apply(this);
  this.forward = etmerc.forward;
  this.inverse = etmerc.inverse;
}

var utm_names = ["Universal Transverse Mercator System", "utm"];
/* harmony default export */ var utm = ({
  init: utm_init,
  names: utm_names,
  dependsOn: dependsOn
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/srat.js
/* harmony default export */ var srat = (function(esinp, exp) {
  return (Math.pow((1 - esinp) / (1 + esinp), exp));
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/gauss.js

var gauss_MAX_ITER = 20;


function gauss_init() {
  var sphi = Math.sin(this.lat0);
  var cphi = Math.cos(this.lat0);
  cphi *= cphi;
  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);
  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));
  this.phic0 = Math.asin(sphi / this.C);
  this.ratexp = 0.5 * this.C * this.e;
  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));
}

function gauss_forward(p) {
  var lon = p.x;
  var lat = p.y;

  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;
  p.x = this.C * lon;
  return p;
}

function gauss_inverse(p) {
  var DEL_TOL = 1e-14;
  var lon = p.x / this.C;
  var lat = p.y;
  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);
  for (var i = gauss_MAX_ITER; i > 0; --i) {
    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;
    if (Math.abs(lat - p.y) < DEL_TOL) {
      break;
    }
    p.y = lat;
  }
  /* convergence failed */
  if (!i) {
    return null;
  }
  p.x = lon;
  p.y = lat;
  return p;
}

var gauss_names = ["gauss"];
/* harmony default export */ var gauss = ({
  init: gauss_init,
  forward: gauss_forward,
  inverse: gauss_inverse,
  names: gauss_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/sterea.js



function sterea_init() {
  gauss.init.apply(this);
  if (!this.rc) {
    return;
  }
  this.sinc0 = Math.sin(this.phic0);
  this.cosc0 = Math.cos(this.phic0);
  this.R2 = 2 * this.rc;
  if (!this.title) {
    this.title = "Oblique Stereographic Alternative";
  }
}

function sterea_forward(p) {
  var sinc, cosc, cosl, k;
  p.x = adjust_lon(p.x - this.long0);
  gauss.forward.apply(this, [p]);
  sinc = Math.sin(p.y);
  cosc = Math.cos(p.y);
  cosl = Math.cos(p.x);
  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);
  p.x = k * cosc * Math.sin(p.x);
  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);
  p.x = this.a * p.x + this.x0;
  p.y = this.a * p.y + this.y0;
  return p;
}

function sterea_inverse(p) {
  var sinc, cosc, lon, lat, rho;
  p.x = (p.x - this.x0) / this.a;
  p.y = (p.y - this.y0) / this.a;

  p.x /= this.k0;
  p.y /= this.k0;
  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {
    var c = 2 * Math.atan2(rho, this.R2);
    sinc = Math.sin(c);
    cosc = Math.cos(c);
    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);
    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);
  }
  else {
    lat = this.phic0;
    lon = 0;
  }

  p.x = lon;
  p.y = lat;
  gauss.inverse.apply(this, [p]);
  p.x = adjust_lon(p.x + this.long0);
  return p;
}

var sterea_names = ["Stereographic_North_Pole", "Oblique_Stereographic", "Polar_Stereographic", "sterea","Oblique Stereographic Alternative"];
/* harmony default export */ var sterea = ({
  init: sterea_init,
  forward: sterea_forward,
  inverse: sterea_inverse,
  names: sterea_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/stere.js








function ssfn_(phit, sinphi, eccen) {
  sinphi *= eccen;
  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));
}

function stere_init() {
  this.coslat0 = Math.cos(this.lat0);
  this.sinlat0 = Math.sin(this.lat0);
  if (this.sphere) {
    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {
      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));
    }
  }
  else {
    if (Math.abs(this.coslat0) <= EPSLN) {
      if (this.lat0 > 0) {
        //North pole
        //trace('stere:north pole');
        this.con = 1;
      }
      else {
        //South pole
        //trace('stere:south pole');
        this.con = -1;
      }
    }
    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));
    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {
      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));
    }
    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);
    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;
    this.cosX0 = Math.cos(this.X0);
    this.sinX0 = Math.sin(this.X0);
  }
}

// Stereographic forward equations--mapping lat,long to x,y
function stere_forward(p) {
  var lon = p.x;
  var lat = p.y;
  var sinlat = Math.sin(lat);
  var coslat = Math.cos(lat);
  var A, X, sinX, cosX, ts, rh;
  var dlon = adjust_lon(lon - this.long0);

  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {
    //case of the origine point
    //trace('stere:this is the origin point');
    p.x = NaN;
    p.y = NaN;
    return p;
  }
  if (this.sphere) {
    //trace('stere:sphere case');
    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));
    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;
    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;
    return p;
  }
  else {
    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;
    cosX = Math.cos(X);
    sinX = Math.sin(X);
    if (Math.abs(this.coslat0) <= EPSLN) {
      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);
      rh = 2 * this.a * this.k0 * ts / this.cons;
      p.x = this.x0 + rh * Math.sin(lon - this.long0);
      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);
      //trace(p.toString());
      return p;
    }
    else if (Math.abs(this.sinlat0) < EPSLN) {
      //Eq
      //trace('stere:equateur');
      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));
      p.y = A * sinX;
    }
    else {
      //other case
      //trace('stere:normal case');
      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));
      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;
    }
    p.x = A * cosX * Math.sin(dlon) + this.x0;
  }
  //trace(p.toString());
  return p;
}

//* Stereographic inverse equations--mapping x,y to lat/long
function stere_inverse(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var lon, lat, ts, ce, Chi;
  var rh = Math.sqrt(p.x * p.x + p.y * p.y);
  if (this.sphere) {
    var c = 2 * Math.atan(rh / (0.5 * this.a * this.k0));
    lon = this.long0;
    lat = this.lat0;
    if (rh <= EPSLN) {
      p.x = lon;
      p.y = lat;
      return p;
    }
    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);
    if (Math.abs(this.coslat0) < EPSLN) {
      if (this.lat0 > 0) {
        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));
      }
      else {
        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
      }
    }
    else {
      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));
    }
    p.x = lon;
    p.y = lat;
    return p;
  }
  else {
    if (Math.abs(this.coslat0) <= EPSLN) {
      if (rh <= EPSLN) {
        lat = this.lat0;
        lon = this.long0;
        p.x = lon;
        p.y = lat;
        //trace(p.toString());
        return p;
      }
      p.x *= this.con;
      p.y *= this.con;
      ts = rh * this.cons / (2 * this.a * this.k0);
      lat = this.con * phi2z(this.e, ts);
      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));
    }
    else {
      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));
      lon = this.long0;
      if (rh <= EPSLN) {
        Chi = this.X0;
      }
      else {
        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);
        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));
      }
      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));
    }
  }
  p.x = lon;
  p.y = lat;

  //trace(p.toString());
  return p;

}

var stere_names = ["stere", "Stereographic_South_Pole", "Polar Stereographic (variant B)"];
/* harmony default export */ var stere = ({
  init: stere_init,
  forward: stere_forward,
  inverse: stere_inverse,
  names: stere_names,
  ssfn_: ssfn_
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/somerc.js
/*
  references:
    Formules et constantes pour le Calcul pour la
    projection cylindrique conforme à axe oblique et pour la transformation entre
    des systèmes de référence.
    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf
  */

function somerc_init() {
  var phy0 = this.lat0;
  this.lambda0 = this.long0;
  var sinPhy0 = Math.sin(phy0);
  var semiMajorAxis = this.a;
  var invF = this.rf;
  var flattening = 1 / invF;
  var e2 = 2 * flattening - Math.pow(flattening, 2);
  var e = this.e = Math.sqrt(e2);
  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));
  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));
  this.b0 = Math.asin(sinPhy0 / this.alpha);
  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));
  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));
  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));
  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;
}

function somerc_forward(p) {
  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));
  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));
  var S = -this.alpha * (Sa1 + Sa2) + this.K;

  // spheric latitude
  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);

  // spheric longitude
  var I = this.alpha * (p.x - this.lambda0);

  // psoeudo equatorial rotation
  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));

  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));

  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;
  p.x = this.R * rotI + this.x0;
  return p;
}

function somerc_inverse(p) {
  var Y = p.x - this.x0;
  var X = p.y - this.y0;

  var rotI = Y / this.R;
  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);

  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));
  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));

  var lambda = this.lambda0 + I / this.alpha;

  var S = 0;
  var phy = b;
  var prevPhy = -1000;
  var iteration = 0;
  while (Math.abs(phy - prevPhy) > 0.0000001) {
    if (++iteration > 20) {
      //...reportError("omercFwdInfinity");
      return;
    }
    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));
    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));
    prevPhy = phy;
    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;
  }

  p.x = lambda;
  p.y = phy;
  return p;
}

var somerc_names = ["somerc"];
/* harmony default export */ var somerc = ({
  init: somerc_init,
  forward: somerc_forward,
  inverse: somerc_inverse,
  names: somerc_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/omerc.js





/* Initialize the Oblique Mercator  projection
    ------------------------------------------*/
function omerc_init() {
  this.no_off = this.no_off || false;
  this.no_rot = this.no_rot || false;

  if (isNaN(this.k0)) {
    this.k0 = 1;
  }
  var sinlat = Math.sin(this.lat0);
  var coslat = Math.cos(this.lat0);
  var con = this.e * sinlat;

  this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));
  this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);
  var t0 = tsfnz(this.e, this.lat0, sinlat);
  var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));
  if (dl * dl < 1) {
    dl = 1;
  }
  var fl;
  var gl;
  if (!isNaN(this.longc)) {
    //Central point and azimuth method

    if (this.lat0 >= 0) {
      fl = dl + Math.sqrt(dl * dl - 1);
    }
    else {
      fl = dl - Math.sqrt(dl * dl - 1);
    }
    this.el = fl * Math.pow(t0, this.bl);
    gl = 0.5 * (fl - 1 / fl);
    this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);
    this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;

  }
  else {
    //2 points method
    var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));
    var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));
    if (this.lat0 >= 0) {
      this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);
    }
    else {
      this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);
    }
    var hl = Math.pow(t1, this.bl);
    var ll = Math.pow(t2, this.bl);
    fl = this.el / hl;
    gl = 0.5 * (fl - 1 / fl);
    var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);
    var pl = (ll - hl) / (ll + hl);
    var dlon12 = adjust_lon(this.long1 - this.long2);
    this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * (dlon12)) / pl) / this.bl;
    this.long0 = adjust_lon(this.long0);
    var dlon10 = adjust_lon(this.long1 - this.long0);
    this.gamma0 = Math.atan(Math.sin(this.bl * (dlon10)) / gl);
    this.alpha = Math.asin(dl * Math.sin(this.gamma0));
  }

  if (this.no_off) {
    this.uc = 0;
  }
  else {
    if (this.lat0 >= 0) {
      this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));
    }
    else {
      this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));
    }
  }

}

/* Oblique Mercator forward equations--mapping lat,long to x,y
    ----------------------------------------------------------*/
function omerc_forward(p) {
  var lon = p.x;
  var lat = p.y;
  var dlon = adjust_lon(lon - this.long0);
  var us, vs;
  var con;
  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
    if (lat > 0) {
      con = -1;
    }
    else {
      con = 1;
    }
    vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));
    us = -1 * con * HALF_PI * this.al / this.bl;
  }
  else {
    var t = tsfnz(this.e, lat, Math.sin(lat));
    var ql = this.el / Math.pow(t, this.bl);
    var sl = 0.5 * (ql - 1 / ql);
    var tl = 0.5 * (ql + 1 / ql);
    var vl = Math.sin(this.bl * (dlon));
    var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;
    if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {
      vs = Number.POSITIVE_INFINITY;
    }
    else {
      vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;
    }
    if (Math.abs(Math.cos(this.bl * (dlon))) <= EPSLN) {
      us = this.al * this.bl * (dlon);
    }
    else {
      us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;
    }
  }

  if (this.no_rot) {
    p.x = this.x0 + us;
    p.y = this.y0 + vs;
  }
  else {

    us -= this.uc;
    p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);
    p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);
  }
  return p;
}

function omerc_inverse(p) {
  var us, vs;
  if (this.no_rot) {
    vs = p.y - this.y0;
    us = p.x - this.x0;
  }
  else {
    vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);
    us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);
    us += this.uc;
  }
  var qp = Math.exp(-1 * this.bl * vs / this.al);
  var sp = 0.5 * (qp - 1 / qp);
  var tp = 0.5 * (qp + 1 / qp);
  var vp = Math.sin(this.bl * us / this.al);
  var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;
  var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);
  if (Math.abs(up - 1) < EPSLN) {
    p.x = this.long0;
    p.y = HALF_PI;
  }
  else if (Math.abs(up + 1) < EPSLN) {
    p.x = this.long0;
    p.y = -1 * HALF_PI;
  }
  else {
    p.y = phi2z(this.e, ts);
    p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);
  }
  return p;
}

var omerc_names = ["Hotine_Oblique_Mercator", "Hotine Oblique Mercator", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin", "Hotine_Oblique_Mercator_Azimuth_Center", "omerc"];
/* harmony default export */ var omerc = ({
  init: omerc_init,
  forward: omerc_forward,
  inverse: omerc_inverse,
  names: omerc_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/lcc.js






function lcc_init() {

  // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north
  //double c_lat;                   /* center latitude                      */
  //double c_lon;                   /* center longitude                     */
  //double lat1;                    /* first standard parallel              */
  //double lat2;                    /* second standard parallel             */
  //double r_maj;                   /* major axis                           */
  //double r_min;                   /* minor axis                           */
  //double false_east;              /* x offset in meters                   */
  //double false_north;             /* y offset in meters                   */

  if (!this.lat2) {
    this.lat2 = this.lat1;
  } //if lat2 is not defined
  if (!this.k0) {
    this.k0 = 1;
  }
  this.x0 = this.x0 || 0;
  this.y0 = this.y0 || 0;
  // Standard Parallels cannot be equal and on opposite sides of the equator
  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
    return;
  }

  var temp = this.b / this.a;
  this.e = Math.sqrt(1 - temp * temp);

  var sin1 = Math.sin(this.lat1);
  var cos1 = Math.cos(this.lat1);
  var ms1 = msfnz(this.e, sin1, cos1);
  var ts1 = tsfnz(this.e, this.lat1, sin1);

  var sin2 = Math.sin(this.lat2);
  var cos2 = Math.cos(this.lat2);
  var ms2 = msfnz(this.e, sin2, cos2);
  var ts2 = tsfnz(this.e, this.lat2, sin2);

  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));

  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);
  }
  else {
    this.ns = sin1;
  }
  if (isNaN(this.ns)) {
    this.ns = sin1;
  }
  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));
  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);
  if (!this.title) {
    this.title = "Lambert Conformal Conic";
  }
}

// Lambert Conformal conic forward equations--mapping lat,long to x,y
// -----------------------------------------------------------------
function lcc_forward(p) {

  var lon = p.x;
  var lat = p.y;

  // singular cases :
  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {
    lat = sign(lat) * (HALF_PI - 2 * EPSLN);
  }

  var con = Math.abs(Math.abs(lat) - HALF_PI);
  var ts, rh1;
  if (con > EPSLN) {
    ts = tsfnz(this.e, lat, Math.sin(lat));
    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);
  }
  else {
    con = lat * this.ns;
    if (con <= 0) {
      return null;
    }
    rh1 = 0;
  }
  var theta = this.ns * adjust_lon(lon - this.long0);
  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;
  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;

  return p;
}

// Lambert Conformal Conic inverse equations--mapping x,y to lat/long
// -----------------------------------------------------------------
function lcc_inverse(p) {

  var rh1, con, ts;
  var lat, lon;
  var x = (p.x - this.x0) / this.k0;
  var y = (this.rh - (p.y - this.y0) / this.k0);
  if (this.ns > 0) {
    rh1 = Math.sqrt(x * x + y * y);
    con = 1;
  }
  else {
    rh1 = -Math.sqrt(x * x + y * y);
    con = -1;
  }
  var theta = 0;
  if (rh1 !== 0) {
    theta = Math.atan2((con * x), (con * y));
  }
  if ((rh1 !== 0) || (this.ns > 0)) {
    con = 1 / this.ns;
    ts = Math.pow((rh1 / (this.a * this.f0)), con);
    lat = phi2z(this.e, ts);
    if (lat === -9999) {
      return null;
    }
  }
  else {
    lat = -HALF_PI;
  }
  lon = adjust_lon(theta / this.ns + this.long0);

  p.x = lon;
  p.y = lat;
  return p;
}

var lcc_names = ["Lambert Tangential Conformal Conic Projection", "Lambert_Conformal_Conic", "Lambert_Conformal_Conic_2SP", "lcc"];
/* harmony default export */ var lcc = ({
  init: lcc_init,
  forward: lcc_forward,
  inverse: lcc_inverse,
  names: lcc_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/krovak.js


function krovak_init() {
  this.a = 6377397.155;
  this.es = 0.006674372230614;
  this.e = Math.sqrt(this.es);
  if (!this.lat0) {
    this.lat0 = 0.863937979737193;
  }
  if (!this.long0) {
    this.long0 = 0.7417649320975901 - 0.308341501185665;
  }
  /* if scale not set default to 0.9999 */
  if (!this.k0) {
    this.k0 = 0.9999;
  }
  this.s45 = 0.785398163397448; /* 45 */
  this.s90 = 2 * this.s45;
  this.fi0 = this.lat0;
  this.e2 = this.es;
  this.e = Math.sqrt(this.e2);
  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));
  this.uq = 1.04216856380474;
  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);
  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);
  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;
  this.k1 = this.k0;
  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));
  this.s0 = 1.37008346281555;
  this.n = Math.sin(this.s0);
  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);
  this.ad = this.s90 - this.uq;
}

/* ellipsoid */
/* calculate xy from lat/lon */
/* Constants, identical to inverse transform function */
function krovak_forward(p) {
  var gfi, u, deltav, s, d, eps, ro;
  var lon = p.x;
  var lat = p.y;
  var delta_lon = adjust_lon(lon - this.long0);
  /* Transformation */
  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));
  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);
  deltav = -delta_lon * this.alfa;
  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));
  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));
  eps = this.n * d;
  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);
  p.y = ro * Math.cos(eps) / 1;
  p.x = ro * Math.sin(eps) / 1;

  if (!this.czech) {
    p.y *= -1;
    p.x *= -1;
  }
  return (p);
}

/* calculate lat/lon from xy */
function krovak_inverse(p) {
  var u, deltav, s, d, eps, ro, fi1;
  var ok;

  /* Transformation */
  /* revert y, x*/
  var tmp = p.x;
  p.x = p.y;
  p.y = tmp;
  if (!this.czech) {
    p.y *= -1;
    p.x *= -1;
  }
  ro = Math.sqrt(p.x * p.x + p.y * p.y);
  eps = Math.atan2(p.y, p.x);
  d = eps / Math.sin(this.s0);
  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);
  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));
  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));
  p.x = this.long0 - deltav / this.alfa;
  fi1 = u;
  ok = 0;
  var iter = 0;
  do {
    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);
    if (Math.abs(fi1 - p.y) < 0.0000000001) {
      ok = 1;
    }
    fi1 = p.y;
    iter += 1;
  } while (ok === 0 && iter < 15);
  if (iter >= 15) {
    return null;
  }

  return (p);
}

var krovak_names = ["Krovak", "krovak"];
/* harmony default export */ var krovak = ({
  init: krovak_init,
  forward: krovak_forward,
  inverse: krovak_inverse,
  names: krovak_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/mlfn.js
/* harmony default export */ var mlfn = (function(e0, e1, e2, e3, phi) {
  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/e0fn.js
/* harmony default export */ var e0fn = (function(x) {
  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/e1fn.js
/* harmony default export */ var e1fn = (function(x) {
  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/e2fn.js
/* harmony default export */ var e2fn = (function(x) {
  return (0.05859375 * x * x * (1 + 0.75 * x));
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/e3fn.js
/* harmony default export */ var e3fn = (function(x) {
  return (x * x * x * (35 / 3072));
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/gN.js
/* harmony default export */ var gN = (function(a, e, sinphi) {
  var temp = e * sinphi;
  return a / Math.sqrt(1 - temp * temp);
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/common/adjust_lat.js



/* harmony default export */ var adjust_lat = (function(x) {
  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/imlfn.js
/* harmony default export */ var imlfn = (function(ml, e0, e1, e2, e3) {
  var phi;
  var dphi;

  phi = ml / e0;
  for (var i = 0; i < 15; i++) {
    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));
    phi += dphi;
    if (Math.abs(dphi) <= 0.0000000001) {
      return phi;
    }
  }

  //..reportError("IMLFN-CONV:Latitude failed to converge after 15 iterations");
  return NaN;
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/cass.js











function cass_init() {
  if (!this.sphere) {
    this.e0 = e0fn(this.es);
    this.e1 = e1fn(this.es);
    this.e2 = e2fn(this.es);
    this.e3 = e3fn(this.es);
    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
  }
}

/* Cassini forward equations--mapping lat,long to x,y
  -----------------------------------------------------------------------*/
function cass_forward(p) {

  /* Forward equations
      -----------------*/
  var x, y;
  var lam = p.x;
  var phi = p.y;
  lam = adjust_lon(lam - this.long0);

  if (this.sphere) {
    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));
    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);
  }
  else {
    //ellipsoid
    var sinphi = Math.sin(phi);
    var cosphi = Math.cos(phi);
    var nl = gN(this.a, this.e, sinphi);
    var tl = Math.tan(phi) * Math.tan(phi);
    var al = lam * Math.cos(phi);
    var asq = al * al;
    var cl = this.es * cosphi * cosphi / (1 - this.es);
    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);

    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));
    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);


  }

  p.x = x + this.x0;
  p.y = y + this.y0;
  return p;
}

/* Inverse equations
  -----------------*/
function cass_inverse(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var x = p.x / this.a;
  var y = p.y / this.a;
  var phi, lam;

  if (this.sphere) {
    var dd = y + this.lat0;
    phi = Math.asin(Math.sin(dd) * Math.cos(x));
    lam = Math.atan2(Math.tan(x), Math.cos(dd));
  }
  else {
    /* ellipsoid */
    var ml1 = this.ml0 / this.a + y;
    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);
    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {
      p.x = this.long0;
      p.y = HALF_PI;
      if (y < 0) {
        p.y *= -1;
      }
      return p;
    }
    var nl1 = gN(this.a, this.e, Math.sin(phi1));

    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);
    var tl1 = Math.pow(Math.tan(phi1), 2);
    var dl = x * this.a / nl1;
    var dsq = dl * dl;
    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);
    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);

  }

  p.x = adjust_lon(lam + this.long0);
  p.y = adjust_lat(phi);
  return p;

}

var cass_names = ["Cassini", "Cassini_Soldner", "cass"];
/* harmony default export */ var cass = ({
  init: cass_init,
  forward: cass_forward,
  inverse: cass_inverse,
  names: cass_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/qsfnz.js
/* harmony default export */ var qsfnz = (function(eccent, sinphi) {
  var con;
  if (eccent > 1.0e-7) {
    con = eccent * sinphi;
    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));
  }
  else {
    return (2 * sinphi);
  }
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/laea.js






/*
  reference
    "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
  */

var S_POLE = 1;

var N_POLE = 2;
var EQUIT = 3;
var OBLIQ = 4;

/* Initialize the Lambert Azimuthal Equal Area projection
  ------------------------------------------------------*/
function laea_init() {
  var t = Math.abs(this.lat0);
  if (Math.abs(t - HALF_PI) < EPSLN) {
    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;
  }
  else if (Math.abs(t) < EPSLN) {
    this.mode = this.EQUIT;
  }
  else {
    this.mode = this.OBLIQ;
  }
  if (this.es > 0) {
    var sinphi;

    this.qp = qsfnz(this.e, 1);
    this.mmf = 0.5 / (1 - this.es);
    this.apa = authset(this.es);
    switch (this.mode) {
    case this.N_POLE:
      this.dd = 1;
      break;
    case this.S_POLE:
      this.dd = 1;
      break;
    case this.EQUIT:
      this.rq = Math.sqrt(0.5 * this.qp);
      this.dd = 1 / this.rq;
      this.xmf = 1;
      this.ymf = 0.5 * this.qp;
      break;
    case this.OBLIQ:
      this.rq = Math.sqrt(0.5 * this.qp);
      sinphi = Math.sin(this.lat0);
      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;
      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);
      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);
      this.ymf = (this.xmf = this.rq) / this.dd;
      this.xmf *= this.dd;
      break;
    }
  }
  else {
    if (this.mode === this.OBLIQ) {
      this.sinph0 = Math.sin(this.lat0);
      this.cosph0 = Math.cos(this.lat0);
    }
  }
}

/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y
  -----------------------------------------------------------------------*/
function laea_forward(p) {

  /* Forward equations
      -----------------*/
  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;
  var lam = p.x;
  var phi = p.y;

  lam = adjust_lon(lam - this.long0);
  if (this.sphere) {
    sinphi = Math.sin(phi);
    cosphi = Math.cos(phi);
    coslam = Math.cos(lam);
    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
      if (y <= EPSLN) {
        return null;
      }
      y = Math.sqrt(2 / y);
      x = y * cosphi * Math.sin(lam);
      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
    }
    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
      if (this.mode === this.N_POLE) {
        coslam = -coslam;
      }
      if (Math.abs(phi + this.phi0) < EPSLN) {
        return null;
      }
      y = FORTPI - phi * 0.5;
      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));
      x = y * Math.sin(lam);
      y *= coslam;
    }
  }
  else {
    sinb = 0;
    cosb = 0;
    b = 0;
    coslam = Math.cos(lam);
    sinlam = Math.sin(lam);
    sinphi = Math.sin(phi);
    q = qsfnz(this.e, sinphi);
    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
      sinb = q / this.qp;
      cosb = Math.sqrt(1 - sinb * sinb);
    }
    switch (this.mode) {
    case this.OBLIQ:
      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;
      break;
    case this.EQUIT:
      b = 1 + cosb * coslam;
      break;
    case this.N_POLE:
      b = HALF_PI + phi;
      q = this.qp - q;
      break;
    case this.S_POLE:
      b = phi - HALF_PI;
      q = this.qp + q;
      break;
    }
    if (Math.abs(b) < EPSLN) {
      return null;
    }
    switch (this.mode) {
    case this.OBLIQ:
    case this.EQUIT:
      b = Math.sqrt(2 / b);
      if (this.mode === this.OBLIQ) {
        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);
      }
      else {
        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;
      }
      x = this.xmf * b * cosb * sinlam;
      break;
    case this.N_POLE:
    case this.S_POLE:
      if (q >= 0) {
        x = (b = Math.sqrt(q)) * sinlam;
        y = coslam * ((this.mode === this.S_POLE) ? b : -b);
      }
      else {
        x = y = 0;
      }
      break;
    }
  }

  p.x = this.a * x + this.x0;
  p.y = this.a * y + this.y0;
  return p;
}

/* Inverse equations
  -----------------*/
function laea_inverse(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var x = p.x / this.a;
  var y = p.y / this.a;
  var lam, phi, cCe, sCe, q, rho, ab;
  if (this.sphere) {
    var cosz = 0,
      rh, sinz = 0;

    rh = Math.sqrt(x * x + y * y);
    phi = rh * 0.5;
    if (phi > 1) {
      return null;
    }
    phi = 2 * Math.asin(phi);
    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
      sinz = Math.sin(phi);
      cosz = Math.cos(phi);
    }
    switch (this.mode) {
    case this.EQUIT:
      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);
      x *= sinz;
      y = cosz * rh;
      break;
    case this.OBLIQ:
      phi = (Math.abs(rh) <= EPSLN) ? this.phi0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);
      x *= sinz * this.cosph0;
      y = (cosz - Math.sin(phi) * this.sinph0) * rh;
      break;
    case this.N_POLE:
      y = -y;
      phi = HALF_PI - phi;
      break;
    case this.S_POLE:
      phi -= HALF_PI;
      break;
    }
    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);
  }
  else {
    ab = 0;
    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
      x /= this.dd;
      y *= this.dd;
      rho = Math.sqrt(x * x + y * y);
      if (rho < EPSLN) {
        p.x = 0;
        p.y = this.phi0;
        return p;
      }
      sCe = 2 * Math.asin(0.5 * rho / this.rq);
      cCe = Math.cos(sCe);
      x *= (sCe = Math.sin(sCe));
      if (this.mode === this.OBLIQ) {
        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;
        q = this.qp * ab;
        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;
      }
      else {
        ab = y * sCe / rho;
        q = this.qp * ab;
        y = rho * cCe;
      }
    }
    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
      if (this.mode === this.N_POLE) {
        y = -y;
      }
      q = (x * x + y * y);
      if (!q) {
        p.x = 0;
        p.y = this.phi0;
        return p;
      }
      ab = 1 - q / this.qp;
      if (this.mode === this.S_POLE) {
        ab = -ab;
      }
    }
    lam = Math.atan2(x, y);
    phi = authlat(Math.asin(ab), this.apa);
  }

  p.x = adjust_lon(this.long0 + lam);
  p.y = phi;
  return p;
}

/* determine latitude from authalic latitude */
var P00 = 0.33333333333333333333;

var P01 = 0.17222222222222222222;
var P02 = 0.10257936507936507936;
var P10 = 0.06388888888888888888;
var P11 = 0.06640211640211640211;
var P20 = 0.01641501294219154443;

function authset(es) {
  var t;
  var APA = [];
  APA[0] = es * P00;
  t = es * es;
  APA[0] += t * P01;
  APA[1] = t * P10;
  t *= es;
  APA[0] += t * P02;
  APA[1] += t * P11;
  APA[2] = t * P20;
  return APA;
}

function authlat(beta, APA) {
  var t = beta + beta;
  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));
}

var laea_names = ["Lambert Azimuthal Equal Area", "Lambert_Azimuthal_Equal_Area", "laea"];
/* harmony default export */ var laea = ({
  init: laea_init,
  forward: laea_forward,
  inverse: laea_inverse,
  names: laea_names,
  S_POLE: S_POLE,
  N_POLE: N_POLE,
  EQUIT: EQUIT,
  OBLIQ: OBLIQ
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/asinz.js
/* harmony default export */ var asinz = (function(x) {
  if (Math.abs(x) > 1) {
    x = (x > 1) ? 1 : -1;
  }
  return Math.asin(x);
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/aea.js






function aea_init() {

  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
    return;
  }
  this.temp = this.b / this.a;
  this.es = 1 - Math.pow(this.temp, 2);
  this.e3 = Math.sqrt(this.es);

  this.sin_po = Math.sin(this.lat1);
  this.cos_po = Math.cos(this.lat1);
  this.t1 = this.sin_po;
  this.con = this.sin_po;
  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);
  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);

  this.sin_po = Math.sin(this.lat2);
  this.cos_po = Math.cos(this.lat2);
  this.t2 = this.sin_po;
  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);
  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);

  this.sin_po = Math.sin(this.lat0);
  this.cos_po = Math.cos(this.lat0);
  this.t3 = this.sin_po;
  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);

  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);
  }
  else {
    this.ns0 = this.con;
  }
  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;
  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;
}

/* Albers Conical Equal Area forward equations--mapping lat,long to x,y
  -------------------------------------------------------------------*/
function aea_forward(p) {

  var lon = p.x;
  var lat = p.y;

  this.sin_phi = Math.sin(lat);
  this.cos_phi = Math.cos(lat);

  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);
  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;
  var theta = this.ns0 * adjust_lon(lon - this.long0);
  var x = rh1 * Math.sin(theta) + this.x0;
  var y = this.rh - rh1 * Math.cos(theta) + this.y0;

  p.x = x;
  p.y = y;
  return p;
}

function aea_inverse(p) {
  var rh1, qs, con, theta, lon, lat;

  p.x -= this.x0;
  p.y = this.rh - p.y + this.y0;
  if (this.ns0 >= 0) {
    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
    con = 1;
  }
  else {
    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
    con = -1;
  }
  theta = 0;
  if (rh1 !== 0) {
    theta = Math.atan2(con * p.x, con * p.y);
  }
  con = rh1 * this.ns0 / this.a;
  if (this.sphere) {
    lat = Math.asin((this.c - con * con) / (2 * this.ns0));
  }
  else {
    qs = (this.c - con * con) / this.ns0;
    lat = this.phi1z(this.e3, qs);
  }

  lon = adjust_lon(theta / this.ns0 + this.long0);
  p.x = lon;
  p.y = lat;
  return p;
}

/* Function to compute phi1, the latitude for the inverse of the
   Albers Conical Equal-Area projection.
-------------------------------------------*/
function phi1z(eccent, qs) {
  var sinphi, cosphi, con, com, dphi;
  var phi = asinz(0.5 * qs);
  if (eccent < EPSLN) {
    return phi;
  }

  var eccnts = eccent * eccent;
  for (var i = 1; i <= 25; i++) {
    sinphi = Math.sin(phi);
    cosphi = Math.cos(phi);
    con = eccent * sinphi;
    com = 1 - con * con;
    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
    phi = phi + dphi;
    if (Math.abs(dphi) <= 1e-7) {
      return phi;
    }
  }
  return null;
}

var aea_names = ["Albers_Conic_Equal_Area", "Albers", "aea"];
/* harmony default export */ var aea = ({
  init: aea_init,
  forward: aea_forward,
  inverse: aea_inverse,
  names: aea_names,
  phi1z: phi1z
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/gnom.js




/*
  reference:
    Wolfram Mathworld "Gnomonic Projection"
    http://mathworld.wolfram.com/GnomonicProjection.html
    Accessed: 12th November 2009
  */
function gnom_init() {

  /* Place parameters in static storage for common use
      -------------------------------------------------*/
  this.sin_p14 = Math.sin(this.lat0);
  this.cos_p14 = Math.cos(this.lat0);
  // Approximation for projecting points to the horizon (infinity)
  this.infinity_dist = 1000 * this.a;
  this.rc = 1;
}

/* Gnomonic forward equations--mapping lat,long to x,y
    ---------------------------------------------------*/
function gnom_forward(p) {
  var sinphi, cosphi; /* sin and cos value        */
  var dlon; /* delta longitude value      */
  var coslon; /* cos of longitude        */
  var ksp; /* scale factor          */
  var g;
  var x, y;
  var lon = p.x;
  var lat = p.y;
  /* Forward equations
      -----------------*/
  dlon = adjust_lon(lon - this.long0);

  sinphi = Math.sin(lat);
  cosphi = Math.cos(lat);

  coslon = Math.cos(dlon);
  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
  ksp = 1;
  if ((g > 0) || (Math.abs(g) <= EPSLN)) {
    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;
    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;
  }
  else {

    // Point is in the opposing hemisphere and is unprojectable
    // We still need to return a reasonable point, so we project
    // to infinity, on a bearing
    // equivalent to the northern hemisphere equivalent
    // This is a reasonable approximation for short shapes and lines that
    // straddle the horizon.

    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);
    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);

  }
  p.x = x;
  p.y = y;
  return p;
}

function gnom_inverse(p) {
  var rh; /* Rho */
  var sinc, cosc;
  var c;
  var lon, lat;

  /* Inverse equations
      -----------------*/
  p.x = (p.x - this.x0) / this.a;
  p.y = (p.y - this.y0) / this.a;

  p.x /= this.k0;
  p.y /= this.k0;

  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {
    c = Math.atan2(rh, this.rc);
    sinc = Math.sin(c);
    cosc = Math.cos(c);

    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);
    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);
    lon = adjust_lon(this.long0 + lon);
  }
  else {
    lat = this.phic0;
    lon = 0;
  }

  p.x = lon;
  p.y = lat;
  return p;
}

var gnom_names = ["gnom"];
/* harmony default export */ var gnom = ({
  init: gnom_init,
  forward: gnom_forward,
  inverse: gnom_inverse,
  names: gnom_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/common/iqsfnz.js


/* harmony default export */ var iqsfnz = (function(eccent, q) {
  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));
  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {
    if (q < 0) {
      return (-1 * HALF_PI);
    }
    else {
      return HALF_PI;
    }
  }
  //var phi = 0.5* q/(1-eccent*eccent);
  var phi = Math.asin(0.5 * q);
  var dphi;
  var sin_phi;
  var cos_phi;
  var con;
  for (var i = 0; i < 30; i++) {
    sin_phi = Math.sin(phi);
    cos_phi = Math.cos(phi);
    con = eccent * sin_phi;
    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
    phi += dphi;
    if (Math.abs(dphi) <= 0.0000000001) {
      return phi;
    }
  }

  //console.log("IQSFN-CONV:Latitude failed to converge after 30 iterations");
  return NaN;
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/cea.js





/*
  reference:
    "Cartographic Projection Procedures for the UNIX Environment-
    A User's Manual" by Gerald I. Evenden,
    USGS Open File Report 90-284and Release 4 Interim Reports (2003)
*/
function cea_init() {
  //no-op
  if (!this.sphere) {
    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
  }
}

/* Cylindrical Equal Area forward equations--mapping lat,long to x,y
    ------------------------------------------------------------*/
function cea_forward(p) {
  var lon = p.x;
  var lat = p.y;
  var x, y;
  /* Forward equations
      -----------------*/
  var dlon = adjust_lon(lon - this.long0);
  if (this.sphere) {
    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);
    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);
  }
  else {
    var qs = qsfnz(this.e, Math.sin(lat));
    x = this.x0 + this.a * this.k0 * dlon;
    y = this.y0 + this.a * qs * 0.5 / this.k0;
  }

  p.x = x;
  p.y = y;
  return p;
}

/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long
    ------------------------------------------------------------*/
function cea_inverse(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var lon, lat;

  if (this.sphere) {
    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));
    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));
  }
  else {
    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);
    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));
  }

  p.x = lon;
  p.y = lat;
  return p;
}

var cea_names = ["cea"];
/* harmony default export */ var cea = ({
  init: cea_init,
  forward: cea_forward,
  inverse: cea_inverse,
  names: cea_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/eqc.js



function eqc_init() {

  this.x0 = this.x0 || 0;
  this.y0 = this.y0 || 0;
  this.lat0 = this.lat0 || 0;
  this.long0 = this.long0 || 0;
  this.lat_ts = this.lat_ts || 0;
  this.title = this.title || "Equidistant Cylindrical (Plate Carre)";

  this.rc = Math.cos(this.lat_ts);
}

// forward equations--mapping lat,long to x,y
// -----------------------------------------------------------------
function eqc_forward(p) {

  var lon = p.x;
  var lat = p.y;

  var dlon = adjust_lon(lon - this.long0);
  var dlat = adjust_lat(lat - this.lat0);
  p.x = this.x0 + (this.a * dlon * this.rc);
  p.y = this.y0 + (this.a * dlat);
  return p;
}

// inverse equations--mapping x,y to lat/long
// -----------------------------------------------------------------
function eqc_inverse(p) {

  var x = p.x;
  var y = p.y;

  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));
  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));
  return p;
}

var eqc_names = ["Equirectangular", "Equidistant_Cylindrical", "eqc"];
/* harmony default export */ var eqc = ({
  init: eqc_init,
  forward: eqc_forward,
  inverse: eqc_inverse,
  names: eqc_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/poly.js










var poly_MAX_ITER = 20;

function poly_init() {
  /* Place parameters in static storage for common use
      -------------------------------------------------*/
  this.temp = this.b / this.a;
  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles
  this.e = Math.sqrt(this.es);
  this.e0 = e0fn(this.es);
  this.e1 = e1fn(this.es);
  this.e2 = e2fn(this.es);
  this.e3 = e3fn(this.es);
  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas
}

/* Polyconic forward equations--mapping lat,long to x,y
    ---------------------------------------------------*/
function poly_forward(p) {
  var lon = p.x;
  var lat = p.y;
  var x, y, el;
  var dlon = adjust_lon(lon - this.long0);
  el = dlon * Math.sin(lat);
  if (this.sphere) {
    if (Math.abs(lat) <= EPSLN) {
      x = this.a * dlon;
      y = -1 * this.a * this.lat0;
    }
    else {
      x = this.a * Math.sin(el) / Math.tan(lat);
      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));
    }
  }
  else {
    if (Math.abs(lat) <= EPSLN) {
      x = this.a * dlon;
      y = -1 * this.ml0;
    }
    else {
      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);
      x = nl * Math.sin(el);
      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));
    }

  }
  p.x = x + this.x0;
  p.y = y + this.y0;
  return p;
}

/* Inverse equations
  -----------------*/
function poly_inverse(p) {
  var lon, lat, x, y, i;
  var al, bl;
  var phi, dphi;
  x = p.x - this.x0;
  y = p.y - this.y0;

  if (this.sphere) {
    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {
      lon = adjust_lon(x / this.a + this.long0);
      lat = 0;
    }
    else {
      al = this.lat0 + y / this.a;
      bl = x * x / this.a / this.a + al * al;
      phi = al;
      var tanphi;
      for (i = poly_MAX_ITER; i; --i) {
        tanphi = Math.tan(phi);
        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);
        phi += dphi;
        if (Math.abs(dphi) <= EPSLN) {
          lat = phi;
          break;
        }
      }
      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));
    }
  }
  else {
    if (Math.abs(y + this.ml0) <= EPSLN) {
      lat = 0;
      lon = adjust_lon(this.long0 + x / this.a);
    }
    else {

      al = (this.ml0 + y) / this.a;
      bl = x * x / this.a / this.a + al * al;
      phi = al;
      var cl, mln, mlnp, ma;
      var con;
      for (i = poly_MAX_ITER; i; --i) {
        con = this.e * Math.sin(phi);
        cl = Math.sqrt(1 - con * con) * Math.tan(phi);
        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);
        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);
        ma = mln / this.a;
        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);
        phi -= dphi;
        if (Math.abs(dphi) <= EPSLN) {
          lat = phi;
          break;
        }
      }

      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);
      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);
      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));
    }
  }

  p.x = lon;
  p.y = lat;
  return p;
}

var poly_names = ["Polyconic", "poly"];
/* harmony default export */ var poly = ({
  init: poly_init,
  forward: poly_forward,
  inverse: poly_inverse,
  names: poly_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/nzmg.js


/*
  reference
    Department of Land and Survey Technical Circular 1973/32
      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf
    OSG Technical Report 4.1
      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf
  */

/**
 * iterations: Number of iterations to refine inverse transform.
 *     0 -> km accuracy
 *     1 -> m accuracy -- suitable for most mapping applications
 *     2 -> mm accuracy
 */
var iterations = 1;

function nzmg_init() {
  this.A = [];
  this.A[1] = 0.6399175073;
  this.A[2] = -0.1358797613;
  this.A[3] = 0.063294409;
  this.A[4] = -0.02526853;
  this.A[5] = 0.0117879;
  this.A[6] = -0.0055161;
  this.A[7] = 0.0026906;
  this.A[8] = -0.001333;
  this.A[9] = 0.00067;
  this.A[10] = -0.00034;

  this.B_re = [];
  this.B_im = [];
  this.B_re[1] = 0.7557853228;
  this.B_im[1] = 0;
  this.B_re[2] = 0.249204646;
  this.B_im[2] = 0.003371507;
  this.B_re[3] = -0.001541739;
  this.B_im[3] = 0.041058560;
  this.B_re[4] = -0.10162907;
  this.B_im[4] = 0.01727609;
  this.B_re[5] = -0.26623489;
  this.B_im[5] = -0.36249218;
  this.B_re[6] = -0.6870983;
  this.B_im[6] = -1.1651967;

  this.C_re = [];
  this.C_im = [];
  this.C_re[1] = 1.3231270439;
  this.C_im[1] = 0;
  this.C_re[2] = -0.577245789;
  this.C_im[2] = -0.007809598;
  this.C_re[3] = 0.508307513;
  this.C_im[3] = -0.112208952;
  this.C_re[4] = -0.15094762;
  this.C_im[4] = 0.18200602;
  this.C_re[5] = 1.01418179;
  this.C_im[5] = 1.64497696;
  this.C_re[6] = 1.9660549;
  this.C_im[6] = 2.5127645;

  this.D = [];
  this.D[1] = 1.5627014243;
  this.D[2] = 0.5185406398;
  this.D[3] = -0.03333098;
  this.D[4] = -0.1052906;
  this.D[5] = -0.0368594;
  this.D[6] = 0.007317;
  this.D[7] = 0.01220;
  this.D[8] = 0.00394;
  this.D[9] = -0.0013;
}

/**
    New Zealand Map Grid Forward  - long/lat to x/y
    long/lat in radians
  */
function nzmg_forward(p) {
  var n;
  var lon = p.x;
  var lat = p.y;

  var delta_lat = lat - this.lat0;
  var delta_lon = lon - this.long0;

  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda
  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.
  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;
  var d_lambda = delta_lon;
  var d_phi_n = 1; // d_phi^0

  var d_psi = 0;
  for (n = 1; n <= 10; n++) {
    d_phi_n = d_phi_n * d_phi;
    d_psi = d_psi + this.A[n] * d_phi_n;
  }

  // 2. Calculate theta
  var th_re = d_psi;
  var th_im = d_lambda;

  // 3. Calculate z
  var th_n_re = 1;
  var th_n_im = 0; // theta^0
  var th_n_re1;
  var th_n_im1;

  var z_re = 0;
  var z_im = 0;
  for (n = 1; n <= 6; n++) {
    th_n_re1 = th_n_re * th_re - th_n_im * th_im;
    th_n_im1 = th_n_im * th_re + th_n_re * th_im;
    th_n_re = th_n_re1;
    th_n_im = th_n_im1;
    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;
    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;
  }

  // 4. Calculate easting and northing
  p.x = (z_im * this.a) + this.x0;
  p.y = (z_re * this.a) + this.y0;

  return p;
}

/**
    New Zealand Map Grid Inverse  -  x/y to long/lat
  */
function nzmg_inverse(p) {
  var n;
  var x = p.x;
  var y = p.y;

  var delta_x = x - this.x0;
  var delta_y = y - this.y0;

  // 1. Calculate z
  var z_re = delta_y / this.a;
  var z_im = delta_x / this.a;

  // 2a. Calculate theta - first approximation gives km accuracy
  var z_n_re = 1;
  var z_n_im = 0; // z^0
  var z_n_re1;
  var z_n_im1;

  var th_re = 0;
  var th_im = 0;
  for (n = 1; n <= 6; n++) {
    z_n_re1 = z_n_re * z_re - z_n_im * z_im;
    z_n_im1 = z_n_im * z_re + z_n_re * z_im;
    z_n_re = z_n_re1;
    z_n_im = z_n_im1;
    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;
    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;
  }

  // 2b. Iterate to refine the accuracy of the calculation
  //        0 iterations gives km accuracy
  //        1 iteration gives m accuracy -- good enough for most mapping applications
  //        2 iterations bives mm accuracy
  for (var i = 0; i < this.iterations; i++) {
    var th_n_re = th_re;
    var th_n_im = th_im;
    var th_n_re1;
    var th_n_im1;

    var num_re = z_re;
    var num_im = z_im;
    for (n = 2; n <= 6; n++) {
      th_n_re1 = th_n_re * th_re - th_n_im * th_im;
      th_n_im1 = th_n_im * th_re + th_n_re * th_im;
      th_n_re = th_n_re1;
      th_n_im = th_n_im1;
      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
    }

    th_n_re = 1;
    th_n_im = 0;
    var den_re = this.B_re[1];
    var den_im = this.B_im[1];
    for (n = 2; n <= 6; n++) {
      th_n_re1 = th_n_re * th_re - th_n_im * th_im;
      th_n_im1 = th_n_im * th_re + th_n_re * th_im;
      th_n_re = th_n_re1;
      th_n_im = th_n_im1;
      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
    }

    // Complex division
    var den2 = den_re * den_re + den_im * den_im;
    th_re = (num_re * den_re + num_im * den_im) / den2;
    th_im = (num_im * den_re - num_re * den_im) / den2;
  }

  // 3. Calculate d_phi              ...                                    // and d_lambda
  var d_psi = th_re;
  var d_lambda = th_im;
  var d_psi_n = 1; // d_psi^0

  var d_phi = 0;
  for (n = 1; n <= 9; n++) {
    d_psi_n = d_psi_n * d_psi;
    d_phi = d_phi + this.D[n] * d_psi_n;
  }

  // 4. Calculate latitude and longitude
  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.
  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);
  var lon = this.long0 + d_lambda;

  p.x = lon;
  p.y = lat;

  return p;
}

var nzmg_names = ["New_Zealand_Map_Grid", "nzmg"];
/* harmony default export */ var nzmg = ({
  init: nzmg_init,
  forward: nzmg_forward,
  inverse: nzmg_inverse,
  names: nzmg_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/mill.js


/*
  reference
    "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
  */


/* Initialize the Miller Cylindrical projection
  -------------------------------------------*/
function mill_init() {
  //no-op
}

/* Miller Cylindrical forward equations--mapping lat,long to x,y
    ------------------------------------------------------------*/
function mill_forward(p) {
  var lon = p.x;
  var lat = p.y;
  /* Forward equations
      -----------------*/
  var dlon = adjust_lon(lon - this.long0);
  var x = this.x0 + this.a * dlon;
  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;

  p.x = x;
  p.y = y;
  return p;
}

/* Miller Cylindrical inverse equations--mapping x,y to lat/long
    ------------------------------------------------------------*/
function mill_inverse(p) {
  p.x -= this.x0;
  p.y -= this.y0;

  var lon = adjust_lon(this.long0 + p.x / this.a);
  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);

  p.x = lon;
  p.y = lat;
  return p;
}

var mill_names = ["Miller_Cylindrical", "mill"];
/* harmony default export */ var mill = ({
  init: mill_init,
  forward: mill_forward,
  inverse: mill_inverse,
  names: mill_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/sinu.js



var sinu_MAX_ITER = 20;







function sinu_init() {
  /* Place parameters in static storage for common use
    -------------------------------------------------*/


  if (!this.sphere) {
    this.en = pj_enfn(this.es);
  }
  else {
    this.n = 1;
    this.m = 0;
    this.es = 0;
    this.C_y = Math.sqrt((this.m + 1) / this.n);
    this.C_x = this.C_y / (this.m + 1);
  }

}

/* Sinusoidal forward equations--mapping lat,long to x,y
  -----------------------------------------------------*/
function sinu_forward(p) {
  var x, y;
  var lon = p.x;
  var lat = p.y;
  /* Forward equations
    -----------------*/
  lon = adjust_lon(lon - this.long0);

  if (this.sphere) {
    if (!this.m) {
      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;
    }
    else {
      var k = this.n * Math.sin(lat);
      for (var i = sinu_MAX_ITER; i; --i) {
        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));
        lat -= V;
        if (Math.abs(V) < EPSLN) {
          break;
        }
      }
    }
    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));
    y = this.a * this.C_y * lat;

  }
  else {

    var s = Math.sin(lat);
    var c = Math.cos(lat);
    y = this.a * pj_mlfn(lat, s, c, this.en);
    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);
  }

  p.x = x;
  p.y = y;
  return p;
}

function sinu_inverse(p) {
  var lat, temp, lon, s;

  p.x -= this.x0;
  lon = p.x / this.a;
  p.y -= this.y0;
  lat = p.y / this.a;

  if (this.sphere) {
    lat /= this.C_y;
    lon = lon / (this.C_x * (this.m + Math.cos(lat)));
    if (this.m) {
      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);
    }
    else if (this.n !== 1) {
      lat = asinz(Math.sin(lat) / this.n);
    }
    lon = adjust_lon(lon + this.long0);
    lat = adjust_lat(lat);
  }
  else {
    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);
    s = Math.abs(lat);
    if (s < HALF_PI) {
      s = Math.sin(lat);
      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));
      //temp = this.long0 + p.x / (this.a * Math.cos(lat));
      lon = adjust_lon(temp);
    }
    else if ((s - EPSLN) < HALF_PI) {
      lon = this.long0;
    }
  }
  p.x = lon;
  p.y = lat;
  return p;
}

var sinu_names = ["Sinusoidal", "sinu"];
/* harmony default export */ var sinu = ({
  init: sinu_init,
  forward: sinu_forward,
  inverse: sinu_inverse,
  names: sinu_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/moll.js

function moll_init() {}

/* Mollweide forward equations--mapping lat,long to x,y
    ----------------------------------------------------*/
function moll_forward(p) {

  /* Forward equations
      -----------------*/
  var lon = p.x;
  var lat = p.y;

  var delta_lon = adjust_lon(lon - this.long0);
  var theta = lat;
  var con = Math.PI * Math.sin(lat);

  /* Iterate using the Newton-Raphson method to find theta
      -----------------------------------------------------*/
  while (true) {
    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));
    theta += delta_theta;
    if (Math.abs(delta_theta) < EPSLN) {
      break;
    }
  }
  theta /= 2;

  /* If the latitude is 90 deg, force the x coordinate to be "0 + false easting"
       this is done here because of precision problems with "cos(theta)"
       --------------------------------------------------------------------------*/
  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {
    delta_lon = 0;
  }
  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;
  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;

  p.x = x;
  p.y = y;
  return p;
}

function moll_inverse(p) {
  var theta;
  var arg;

  /* Inverse equations
      -----------------*/
  p.x -= this.x0;
  p.y -= this.y0;
  arg = p.y / (1.4142135623731 * this.a);

  /* Because of division by zero problems, 'arg' can not be 1.  Therefore
       a number very close to one is used instead.
       -------------------------------------------------------------------*/
  if (Math.abs(arg) > 0.999999999999) {
    arg = 0.999999999999;
  }
  theta = Math.asin(arg);
  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));
  if (lon < (-Math.PI)) {
    lon = -Math.PI;
  }
  if (lon > Math.PI) {
    lon = Math.PI;
  }
  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;
  if (Math.abs(arg) > 1) {
    arg = 1;
  }
  var lat = Math.asin(arg);

  p.x = lon;
  p.y = lat;
  return p;
}

var moll_names = ["Mollweide", "moll"];
/* harmony default export */ var moll = ({
  init: moll_init,
  forward: moll_forward,
  inverse: moll_inverse,
  names: moll_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/eqdc.js











function eqdc_init() {

  /* Place parameters in static storage for common use
      -------------------------------------------------*/
  // Standard Parallels cannot be equal and on opposite sides of the equator
  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
    return;
  }
  this.lat2 = this.lat2 || this.lat1;
  this.temp = this.b / this.a;
  this.es = 1 - Math.pow(this.temp, 2);
  this.e = Math.sqrt(this.es);
  this.e0 = e0fn(this.es);
  this.e1 = e1fn(this.es);
  this.e2 = e2fn(this.es);
  this.e3 = e3fn(this.es);

  this.sinphi = Math.sin(this.lat1);
  this.cosphi = Math.cos(this.lat1);

  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);
  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);

  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {
    this.ns = this.sinphi;
  }
  else {
    this.sinphi = Math.sin(this.lat2);
    this.cosphi = Math.cos(this.lat2);
    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);
    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);
    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);
  }
  this.g = this.ml1 + this.ms1 / this.ns;
  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
  this.rh = this.a * (this.g - this.ml0);
}

/* Equidistant Conic forward equations--mapping lat,long to x,y
  -----------------------------------------------------------*/
function eqdc_forward(p) {
  var lon = p.x;
  var lat = p.y;
  var rh1;

  /* Forward equations
      -----------------*/
  if (this.sphere) {
    rh1 = this.a * (this.g - lat);
  }
  else {
    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);
    rh1 = this.a * (this.g - ml);
  }
  var theta = this.ns * adjust_lon(lon - this.long0);
  var x = this.x0 + rh1 * Math.sin(theta);
  var y = this.y0 + this.rh - rh1 * Math.cos(theta);
  p.x = x;
  p.y = y;
  return p;
}

/* Inverse equations
  -----------------*/
function eqdc_inverse(p) {
  p.x -= this.x0;
  p.y = this.rh - p.y + this.y0;
  var con, rh1, lat, lon;
  if (this.ns >= 0) {
    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
    con = 1;
  }
  else {
    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
    con = -1;
  }
  var theta = 0;
  if (rh1 !== 0) {
    theta = Math.atan2(con * p.x, con * p.y);
  }

  if (this.sphere) {
    lon = adjust_lon(this.long0 + theta / this.ns);
    lat = adjust_lat(this.g - rh1 / this.a);
    p.x = lon;
    p.y = lat;
    return p;
  }
  else {
    var ml = this.g - rh1 / this.a;
    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);
    lon = adjust_lon(this.long0 + theta / this.ns);
    p.x = lon;
    p.y = lat;
    return p;
  }

}

var eqdc_names = ["Equidistant_Conic", "eqdc"];
/* harmony default export */ var eqdc = ({
  init: eqdc_init,
  forward: eqdc_forward,
  inverse: eqdc_inverse,
  names: eqdc_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/vandg.js






/* Initialize the Van Der Grinten projection
  ----------------------------------------*/
function vandg_init() {
  //this.R = 6370997; //Radius of earth
  this.R = this.a;
}

function vandg_forward(p) {

  var lon = p.x;
  var lat = p.y;

  /* Forward equations
    -----------------*/
  var dlon = adjust_lon(lon - this.long0);
  var x, y;

  if (Math.abs(lat) <= EPSLN) {
    x = this.x0 + this.R * dlon;
    y = this.y0;
  }
  var theta = asinz(2 * Math.abs(lat / Math.PI));
  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {
    x = this.x0;
    if (lat >= 0) {
      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);
    }
    else {
      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);
    }
    //  return(OK);
  }
  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));
  var asq = al * al;
  var sinth = Math.sin(theta);
  var costh = Math.cos(theta);

  var g = costh / (sinth + costh - 1);
  var gsq = g * g;
  var m = g * (2 / sinth - 1);
  var msq = m * m;
  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);
  if (dlon < 0) {
    con = -con;
  }
  x = this.x0 + con;
  //con = Math.abs(con / (Math.PI * this.R));
  var q = asq + g;
  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);
  if (lat >= 0) {
    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
    y = this.y0 + con;
  }
  else {
    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
    y = this.y0 - con;
  }
  p.x = x;
  p.y = y;
  return p;
}

/* Van Der Grinten inverse equations--mapping x,y to lat/long
  ---------------------------------------------------------*/
function vandg_inverse(p) {
  var lon, lat;
  var xx, yy, xys, c1, c2, c3;
  var a1;
  var m1;
  var con;
  var th1;
  var d;

  /* inverse equations
    -----------------*/
  p.x -= this.x0;
  p.y -= this.y0;
  con = Math.PI * this.R;
  xx = p.x / con;
  yy = p.y / con;
  xys = xx * xx + yy * yy;
  c1 = -Math.abs(yy) * (1 + xys);
  c2 = c1 - 2 * yy * yy + xx * xx;
  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;
  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;
  a1 = (c1 - c2 * c2 / 3 / c3) / c3;
  m1 = 2 * Math.sqrt(-a1 / 3);
  con = ((3 * d) / a1) / m1;
  if (Math.abs(con) > 1) {
    if (con >= 0) {
      con = 1;
    }
    else {
      con = -1;
    }
  }
  th1 = Math.acos(con) / 3;
  if (p.y >= 0) {
    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
  }
  else {
    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
  }

  if (Math.abs(xx) < EPSLN) {
    lon = this.long0;
  }
  else {
    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);
  }

  p.x = lon;
  p.y = lat;
  return p;
}

var vandg_names = ["Van_der_Grinten_I", "VanDerGrinten", "vandg"];
/* harmony default export */ var vandg = ({
  init: vandg_init,
  forward: vandg_forward,
  inverse: vandg_inverse,
  names: vandg_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/aeqd.js














function aeqd_init() {
  this.sin_p12 = Math.sin(this.lat0);
  this.cos_p12 = Math.cos(this.lat0);
}

function aeqd_forward(p) {
  var lon = p.x;
  var lat = p.y;
  var sinphi = Math.sin(p.y);
  var cosphi = Math.cos(p.y);
  var dlon = adjust_lon(lon - this.long0);
  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;
  if (this.sphere) {
    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
      //North Pole case
      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);
      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);
      return p;
    }
    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
      //South Pole case
      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);
      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);
      return p;
    }
    else {
      //default case
      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);
      c = Math.acos(cos_c);
      kp = c / Math.sin(c);
      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);
      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));
      return p;
    }
  }
  else {
    e0 = e0fn(this.es);
    e1 = e1fn(this.es);
    e2 = e2fn(this.es);
    e3 = e3fn(this.es);
    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
      //North Pole case
      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
      Ml = this.a * mlfn(e0, e1, e2, e3, lat);
      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);
      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);
      return p;
    }
    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
      //South Pole case
      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
      Ml = this.a * mlfn(e0, e1, e2, e3, lat);
      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);
      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);
      return p;
    }
    else {
      //Default case
      tanphi = sinphi / cosphi;
      Nl1 = gN(this.a, this.e, this.sin_p12);
      Nl = gN(this.a, this.e, sinphi);
      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));
      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));
      if (Az === 0) {
        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
      }
      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {
        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
      }
      else {
        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));
      }
      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);
      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);
      GH = G * H;
      Hs = H * H;
      s2 = s * s;
      s3 = s2 * s;
      s4 = s3 * s;
      s5 = s4 * s;
      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);
      p.x = this.x0 + c * Math.sin(Az);
      p.y = this.y0 + c * Math.cos(Az);
      return p;
    }
  }


}

function aeqd_inverse(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F;
  if (this.sphere) {
    rh = Math.sqrt(p.x * p.x + p.y * p.y);
    if (rh > (2 * HALF_PI * this.a)) {
      return;
    }
    z = rh / this.a;

    sinz = Math.sin(z);
    cosz = Math.cos(z);

    lon = this.long0;
    if (Math.abs(rh) <= EPSLN) {
      lat = this.lat0;
    }
    else {
      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);
      con = Math.abs(this.lat0) - HALF_PI;
      if (Math.abs(con) <= EPSLN) {
        if (this.lat0 >= 0) {
          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));
        }
        else {
          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
        }
      }
      else {
        /*con = cosz - this.sin_p12 * Math.sin(lat);
        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {
          //no-op, just keep the lon value as is
        } else {
          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));
          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));
        }*/
        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));
      }
    }

    p.x = lon;
    p.y = lat;
    return p;
  }
  else {
    e0 = e0fn(this.es);
    e1 = e1fn(this.es);
    e2 = e2fn(this.es);
    e3 = e3fn(this.es);
    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
      //North pole case
      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
      rh = Math.sqrt(p.x * p.x + p.y * p.y);
      M = Mlp - rh;
      lat = imlfn(M / this.a, e0, e1, e2, e3);
      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));
      p.x = lon;
      p.y = lat;
      return p;
    }
    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
      //South pole case
      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
      rh = Math.sqrt(p.x * p.x + p.y * p.y);
      M = rh - Mlp;

      lat = imlfn(M / this.a, e0, e1, e2, e3);
      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
      p.x = lon;
      p.y = lat;
      return p;
    }
    else {
      //default case
      rh = Math.sqrt(p.x * p.x + p.y * p.y);
      Az = Math.atan2(p.x, p.y);
      N1 = gN(this.a, this.e, this.sin_p12);
      cosAz = Math.cos(Az);
      tmp = this.e * this.cos_p12 * cosAz;
      A = -tmp * tmp / (1 - this.es);
      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);
      D = rh / N1;
      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;
      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;
      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);
      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));
      lat = Math.atan((1 - this.es * F * this.sin_p12 / Math.sin(psi)) * Math.tan(psi) / (1 - this.es));
      p.x = lon;
      p.y = lat;
      return p;
    }
  }

}

var aeqd_names = ["Azimuthal_Equidistant", "aeqd"];
/* harmony default export */ var aeqd = ({
  init: aeqd_init,
  forward: aeqd_forward,
  inverse: aeqd_inverse,
  names: aeqd_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/ortho.js




function ortho_init() {
  //double temp;      /* temporary variable    */

  /* Place parameters in static storage for common use
      -------------------------------------------------*/
  this.sin_p14 = Math.sin(this.lat0);
  this.cos_p14 = Math.cos(this.lat0);
}

/* Orthographic forward equations--mapping lat,long to x,y
    ---------------------------------------------------*/
function ortho_forward(p) {
  var sinphi, cosphi; /* sin and cos value        */
  var dlon; /* delta longitude value      */
  var coslon; /* cos of longitude        */
  var ksp; /* scale factor          */
  var g, x, y;
  var lon = p.x;
  var lat = p.y;
  /* Forward equations
      -----------------*/
  dlon = adjust_lon(lon - this.long0);

  sinphi = Math.sin(lat);
  cosphi = Math.cos(lat);

  coslon = Math.cos(dlon);
  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
  ksp = 1;
  if ((g > 0) || (Math.abs(g) <= EPSLN)) {
    x = this.a * ksp * cosphi * Math.sin(dlon);
    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
  }
  p.x = x;
  p.y = y;
  return p;
}

function ortho_inverse(p) {
  var rh; /* height above ellipsoid      */
  var z; /* angle          */
  var sinz, cosz; /* sin of z and cos of z      */
  var con;
  var lon, lat;
  /* Inverse equations
      -----------------*/
  p.x -= this.x0;
  p.y -= this.y0;
  rh = Math.sqrt(p.x * p.x + p.y * p.y);
  z = asinz(rh / this.a);

  sinz = Math.sin(z);
  cosz = Math.cos(z);

  lon = this.long0;
  if (Math.abs(rh) <= EPSLN) {
    lat = this.lat0;
    p.x = lon;
    p.y = lat;
    return p;
  }
  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);
  con = Math.abs(this.lat0) - HALF_PI;
  if (Math.abs(con) <= EPSLN) {
    if (this.lat0 >= 0) {
      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));
    }
    else {
      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
    }
    p.x = lon;
    p.y = lat;
    return p;
  }
  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));
  p.x = lon;
  p.y = lat;
  return p;
}

var ortho_names = ["ortho"];
/* harmony default export */ var ortho = ({
  init: ortho_init,
  forward: ortho_forward,
  inverse: ortho_inverse,
  names: ortho_names
});

// CONCATENATED MODULE: ../node_modules/proj4/lib/projections/qsc.js
// QSC projection rewritten from the original PROJ4
// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c



/* constants */
var FACE_ENUM = {
    FRONT: 1,
    RIGHT: 2,
    BACK: 3,
    LEFT: 4,
    TOP: 5,
    BOTTOM: 6
};

var AREA_ENUM = {
    AREA_0: 1,
    AREA_1: 2,
    AREA_2: 3,
    AREA_3: 4
};

function qsc_init() {

  this.x0 = this.x0 || 0;
  this.y0 = this.y0 || 0;
  this.lat0 = this.lat0 || 0;
  this.long0 = this.long0 || 0;
  this.lat_ts = this.lat_ts || 0;
  this.title = this.title || "Quadrilateralized Spherical Cube";

  /* Determine the cube face from the center of projection. */
  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {
    this.face = FACE_ENUM.TOP;
  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {
    this.face = FACE_ENUM.BOTTOM;
  } else if (Math.abs(this.long0) <= FORTPI) {
    this.face = FACE_ENUM.FRONT;
  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {
    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;
  } else {
    this.face = FACE_ENUM.BACK;
  }

  /* Fill in useful values for the ellipsoid <-> sphere shift
   * described in [LK12]. */
  if (this.es !== 0) {
    this.one_minus_f = 1 - (this.a - this.b) / this.a;
    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;
  }
}

// QSC forward equations--mapping lat,long to x,y
// -----------------------------------------------------------------
function qsc_forward(p) {
  var xy = {x: 0, y: 0};
  var lat, lon;
  var theta, phi;
  var t, mu;
  /* nu; */
  var area = {value: 0};

  // move lon according to projection's lon
  p.x -= this.long0;

  /* Convert the geodetic latitude to a geocentric latitude.
   * This corresponds to the shift from the ellipsoid to the sphere
   * described in [LK12]. */
  if (this.es !== 0) {//if (P->es != 0) {
    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));
  } else {
    lat = p.y;
  }

  /* Convert the input lat, lon into theta, phi as used by QSC.
   * This depends on the cube face and the area on it.
   * For the top and bottom face, we can compute theta and phi
   * directly from phi, lam. For the other faces, we must use
   * unit sphere cartesian coordinates as an intermediate step. */
  lon = p.x; //lon = lp.lam;
  if (this.face === FACE_ENUM.TOP) {
    phi = HALF_PI - lat;
    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
      area.value = AREA_ENUM.AREA_0;
      theta = lon - HALF_PI;
    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {
      area.value = AREA_ENUM.AREA_1;
      theta = (lon > 0.0 ? lon - SPI : lon + SPI);
    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {
      area.value = AREA_ENUM.AREA_2;
      theta = lon + HALF_PI;
    } else {
      area.value = AREA_ENUM.AREA_3;
      theta = lon;
    }
  } else if (this.face === FACE_ENUM.BOTTOM) {
    phi = HALF_PI + lat;
    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
      area.value = AREA_ENUM.AREA_0;
      theta = -lon + HALF_PI;
    } else if (lon < FORTPI && lon >= -FORTPI) {
      area.value = AREA_ENUM.AREA_1;
      theta = -lon;
    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {
      area.value = AREA_ENUM.AREA_2;
      theta = -lon - HALF_PI;
    } else {
      area.value = AREA_ENUM.AREA_3;
      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);
    }
  } else {
    var q, r, s;
    var sinlat, coslat;
    var sinlon, coslon;

    if (this.face === FACE_ENUM.RIGHT) {
      lon = qsc_shift_lon_origin(lon, +HALF_PI);
    } else if (this.face === FACE_ENUM.BACK) {
      lon = qsc_shift_lon_origin(lon, +SPI);
    } else if (this.face === FACE_ENUM.LEFT) {
      lon = qsc_shift_lon_origin(lon, -HALF_PI);
    }
    sinlat = Math.sin(lat);
    coslat = Math.cos(lat);
    sinlon = Math.sin(lon);
    coslon = Math.cos(lon);
    q = coslat * coslon;
    r = coslat * sinlon;
    s = sinlat;

    if (this.face === FACE_ENUM.FRONT) {
      phi = Math.acos(q);
      theta = qsc_fwd_equat_face_theta(phi, s, r, area);
    } else if (this.face === FACE_ENUM.RIGHT) {
      phi = Math.acos(r);
      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);
    } else if (this.face === FACE_ENUM.BACK) {
      phi = Math.acos(-q);
      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);
    } else if (this.face === FACE_ENUM.LEFT) {
      phi = Math.acos(-r);
      theta = qsc_fwd_equat_face_theta(phi, s, q, area);
    } else {
      /* Impossible */
      phi = theta = 0;
      area.value = AREA_ENUM.AREA_0;
    }
  }

  /* Compute mu and nu for the area of definition.
   * For mu, see Eq. (3-21) in [OL76], but note the typos:
   * compare with Eq. (3-14). For nu, see Eq. (3-38). */
  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));
  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));

  /* Apply the result to the real area. */
  if (area.value === AREA_ENUM.AREA_1) {
    mu += HALF_PI;
  } else if (area.value === AREA_ENUM.AREA_2) {
    mu += SPI;
  } else if (area.value === AREA_ENUM.AREA_3) {
    mu += 1.5 * SPI;
  }

  /* Now compute x, y from mu and nu */
  xy.x = t * Math.cos(mu);
  xy.y = t * Math.sin(mu);
  xy.x = xy.x * this.a + this.x0;
  xy.y = xy.y * this.a + this.y0;

  p.x = xy.x;
  p.y = xy.y;
  return p;
}

// QSC inverse equations--mapping x,y to lat/long
// -----------------------------------------------------------------
function qsc_inverse(p) {
  var lp = {lam: 0, phi: 0};
  var mu, nu, cosmu, tannu;
  var tantheta, theta, cosphi, phi;
  var t;
  var area = {value: 0};

  /* de-offset */
  p.x = (p.x - this.x0) / this.a;
  p.y = (p.y - this.y0) / this.a;

  /* Convert the input x, y to the mu and nu angles as used by QSC.
   * This depends on the area of the cube face. */
  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));
  mu = Math.atan2(p.y, p.x);
  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {
    area.value = AREA_ENUM.AREA_0;
  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {
    area.value = AREA_ENUM.AREA_1;
    mu -= HALF_PI;
  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {
    area.value = AREA_ENUM.AREA_2;
    mu = (mu < 0.0 ? mu + SPI : mu - SPI);
  } else {
    area.value = AREA_ENUM.AREA_3;
    mu += HALF_PI;
  }

  /* Compute phi and theta for the area of definition.
   * The inverse projection is not described in the original paper, but some
   * good hints can be found here (as of 2011-12-14):
   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302
   * (search for "Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>") */
  t = (SPI / 12) * Math.tan(mu);
  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));
  theta = Math.atan(tantheta);
  cosmu = Math.cos(mu);
  tannu = Math.tan(nu);
  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));
  if (cosphi < -1) {
    cosphi = -1;
  } else if (cosphi > +1) {
    cosphi = +1;
  }

  /* Apply the result to the real area on the cube face.
   * For the top and bottom face, we can compute phi and lam directly.
   * For the other faces, we must use unit sphere cartesian coordinates
   * as an intermediate step. */
  if (this.face === FACE_ENUM.TOP) {
    phi = Math.acos(cosphi);
    lp.phi = HALF_PI - phi;
    if (area.value === AREA_ENUM.AREA_0) {
      lp.lam = theta + HALF_PI;
    } else if (area.value === AREA_ENUM.AREA_1) {
      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);
    } else if (area.value === AREA_ENUM.AREA_2) {
      lp.lam = theta - HALF_PI;
    } else /* area.value == AREA_ENUM.AREA_3 */ {
      lp.lam = theta;
    }
  } else if (this.face === FACE_ENUM.BOTTOM) {
    phi = Math.acos(cosphi);
    lp.phi = phi - HALF_PI;
    if (area.value === AREA_ENUM.AREA_0) {
      lp.lam = -theta + HALF_PI;
    } else if (area.value === AREA_ENUM.AREA_1) {
      lp.lam = -theta;
    } else if (area.value === AREA_ENUM.AREA_2) {
      lp.lam = -theta - HALF_PI;
    } else /* area.value == AREA_ENUM.AREA_3 */ {
      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);
    }
  } else {
    /* Compute phi and lam via cartesian unit sphere coordinates. */
    var q, r, s;
    q = cosphi;
    t = q * q;
    if (t >= 1) {
      s = 0;
    } else {
      s = Math.sqrt(1 - t) * Math.sin(theta);
    }
    t += s * s;
    if (t >= 1) {
      r = 0;
    } else {
      r = Math.sqrt(1 - t);
    }
    /* Rotate q,r,s into the correct area. */
    if (area.value === AREA_ENUM.AREA_1) {
      t = r;
      r = -s;
      s = t;
    } else if (area.value === AREA_ENUM.AREA_2) {
      r = -r;
      s = -s;
    } else if (area.value === AREA_ENUM.AREA_3) {
      t = r;
      r = s;
      s = -t;
    }
    /* Rotate q,r,s into the correct cube face. */
    if (this.face === FACE_ENUM.RIGHT) {
      t = q;
      q = -r;
      r = t;
    } else if (this.face === FACE_ENUM.BACK) {
      q = -q;
      r = -r;
    } else if (this.face === FACE_ENUM.LEFT) {
      t = q;
      q = r;
      r = -t;
    }
    /* Now compute phi and lam from the unit sphere coordinates. */
    lp.phi = Math.acos(-s) - HALF_PI;
    lp.lam = Math.atan2(r, q);
    if (this.face === FACE_ENUM.RIGHT) {
      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);
    } else if (this.face === FACE_ENUM.BACK) {
      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);
    } else if (this.face === FACE_ENUM.LEFT) {
      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);
    }
  }

  /* Apply the shift from the sphere to the ellipsoid as described
   * in [LK12]. */
  if (this.es !== 0) {
    var invert_sign;
    var tanphi, xa;
    invert_sign = (lp.phi < 0 ? 1 : 0);
    tanphi = Math.tan(lp.phi);
    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);
    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));
    if (invert_sign) {
      lp.phi = -lp.phi;
    }
  }

  lp.lam += this.long0;
  p.x = lp.lam;
  p.y = lp.phi;
  return p;
}

/* Helper function for forward projection: compute the theta angle
 * and determine the area number. */
function qsc_fwd_equat_face_theta(phi, y, x, area) {
  var theta;
  if (phi < EPSLN) {
    area.value = AREA_ENUM.AREA_0;
    theta = 0.0;
  } else {
    theta = Math.atan2(y, x);
    if (Math.abs(theta) <= FORTPI) {
      area.value = AREA_ENUM.AREA_0;
    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {
      area.value = AREA_ENUM.AREA_1;
      theta -= HALF_PI;
    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {
      area.value = AREA_ENUM.AREA_2;
      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);
    } else {
      area.value = AREA_ENUM.AREA_3;
      theta += HALF_PI;
    }
  }
  return theta;
}

/* Helper function: shift the longitude. */
function qsc_shift_lon_origin(lon, offset) {
  var slon = lon + offset;
  if (slon < -SPI) {
    slon += TWO_PI;
  } else if (slon > +SPI) {
    slon -= TWO_PI;
  }
  return slon;
}

var qsc_names = ["Quadrilateralized Spherical Cube", "Quadrilateralized_Spherical_Cube", "qsc"];
/* harmony default export */ var qsc = ({
  init: qsc_init,
  forward: qsc_forward,
  inverse: qsc_inverse,
  names: qsc_names
});


// CONCATENATED MODULE: ../node_modules/proj4/projs.js

























/* harmony default export */ var proj4_projs = (function(proj4){
  proj4.Proj.projections.add(tmerc);
  proj4.Proj.projections.add(etmerc);
  proj4.Proj.projections.add(utm);
  proj4.Proj.projections.add(sterea);
  proj4.Proj.projections.add(stere);
  proj4.Proj.projections.add(somerc);
  proj4.Proj.projections.add(omerc);
  proj4.Proj.projections.add(lcc);
  proj4.Proj.projections.add(krovak);
  proj4.Proj.projections.add(cass);
  proj4.Proj.projections.add(laea);
  proj4.Proj.projections.add(aea);
  proj4.Proj.projections.add(gnom);
  proj4.Proj.projections.add(cea);
  proj4.Proj.projections.add(eqc);
  proj4.Proj.projections.add(poly);
  proj4.Proj.projections.add(nzmg);
  proj4.Proj.projections.add(mill);
  proj4.Proj.projections.add(sinu);
  proj4.Proj.projections.add(moll);
  proj4.Proj.projections.add(eqdc);
  proj4.Proj.projections.add(vandg);
  proj4.Proj.projections.add(aeqd);
  proj4.Proj.projections.add(ortho);
  proj4.Proj.projections.add(qsc);
});
// CONCATENATED MODULE: ../node_modules/proj4/lib/index.js










core.defaultDatum = 'WGS84'; //default datum
core.Proj = Proj;
core.WGS84 = new core.Proj('WGS84');
core.Point = lib_Point;
core.toPoint = toPoint;
core.defs = lib_defs;
core.transform = transform;
core.mgrs = mgrs;
core.version = proj4_package["a" /* version */];
proj4_projs(core);
/* harmony default export */ var lib = __webpack_exports__["a"] = (core);


/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(41);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(55);
/* harmony import */ var _geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(105);
/* harmony import */ var _geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(90);
/* harmony import */ var _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(91);
/* harmony import */ var _geom_flat_interpolate_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(153);
/* harmony import */ var _geom_flat_intersectsextent_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(164);
/* harmony import */ var _geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(122);
/**
 * @module ol/geom/MultiLineString
 */














/**
 * @classdesc
 * Multi-linestring geometry.
 *
 * @constructor
 * @extends {module:ol/geom/SimpleGeometry}
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @api
 */
const MultiLineString = function(coordinates, opt_layout) {

  _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].call(this);

  /**
   * @type {Array.<number>}
   * @private
   */
  this.ends_ = [];

  /**
   * @private
   * @type {number}
   */
  this.maxDelta_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.maxDeltaRevision_ = -1;

  this.setCoordinates(coordinates, opt_layout);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MultiLineString, _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"]);


/**
 * Append the passed linestring to the multilinestring.
 * @param {module:ol/geom/LineString} lineString LineString.
 * @api
 */
MultiLineString.prototype.appendLineString = function(lineString) {
  if (!this.flatCoordinates) {
    this.flatCoordinates = lineString.getFlatCoordinates().slice();
  } else {
    Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(this.flatCoordinates, lineString.getFlatCoordinates().slice());
  }
  this.ends_.push(this.flatCoordinates.length);
  this.changed();
};


/**
 * Make a complete copy of the geometry.
 * @return {!module:ol/geom/MultiLineString} Clone.
 * @override
 * @api
 */
MultiLineString.prototype.clone = function() {
  const multiLineString = new MultiLineString(null);
  multiLineString.setFlatCoordinates(
    this.layout, this.flatCoordinates.slice(), this.ends_.slice());
  return multiLineString;
};


/**
 * @inheritDoc
 */
MultiLineString.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
  if (minSquaredDistance < Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* closestSquaredDistanceXY */ "e"])(this.getExtent(), x, y)) {
    return minSquaredDistance;
  }
  if (this.maxDeltaRevision_ != this.getRevision()) {
    this.maxDelta_ = Math.sqrt(Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_7__[/* arrayMaxSquaredDelta */ "a"])(
      this.flatCoordinates, 0, this.ends_, this.stride, 0));
    this.maxDeltaRevision_ = this.getRevision();
  }
  return Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_7__[/* assignClosestArrayPoint */ "b"])(
    this.flatCoordinates, 0, this.ends_, this.stride,
    this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
};


/**
 * Returns the coordinate at `m` using linear interpolation, or `null` if no
 * such coordinate exists.
 *
 * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
 * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
 * M will return the first coordinate and Ms greater than the last M will
 * return the last coordinate.
 *
 * `opt_interpolate` controls interpolation between consecutive LineStrings
 * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
 * will be linearly interpolated between the last coordinate of one LineString
 * and the first coordinate of the next LineString.  If `opt_interpolate` is
 * `false` then the function will return `null` for Ms falling between
 * LineStrings.
 *
 * @param {number} m M.
 * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
 * @param {boolean=} opt_interpolate Interpolate. Default is `false`.
 * @return {module:ol/coordinate~Coordinate} Coordinate.
 * @api
 */
MultiLineString.prototype.getCoordinateAtM = function(m, opt_extrapolate, opt_interpolate) {
  if ((this.layout != _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XYM &&
       this.layout != _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XYZM) ||
      this.flatCoordinates.length === 0) {
    return null;
  }
  const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
  const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;
  return Object(_geom_flat_interpolate_js__WEBPACK_IMPORTED_MODULE_10__[/* lineStringsCoordinateAtM */ "c"])(this.flatCoordinates, 0,
    this.ends_, this.stride, m, extrapolate, interpolate);
};


/**
 * Return the coordinates of the multilinestring.
 * @return {Array.<Array.<module:ol/coordinate~Coordinate>>} Coordinates.
 * @override
 * @api
 */
MultiLineString.prototype.getCoordinates = function() {
  return Object(_geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_9__[/* inflateCoordinatesArray */ "b"])(
    this.flatCoordinates, 0, this.ends_, this.stride);
};


/**
 * @return {Array.<number>} Ends.
 */
MultiLineString.prototype.getEnds = function() {
  return this.ends_;
};


/**
 * Return the linestring at the specified index.
 * @param {number} index Index.
 * @return {module:ol/geom/LineString} LineString.
 * @api
 */
MultiLineString.prototype.getLineString = function(index) {
  if (index < 0 || this.ends_.length <= index) {
    return null;
  }
  const lineString = new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](null);
  lineString.setFlatCoordinates(this.layout, this.flatCoordinates.slice(
    index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]));
  return lineString;
};


/**
 * Return the linestrings of this multilinestring.
 * @return {Array.<module:ol/geom/LineString>} LineStrings.
 * @api
 */
MultiLineString.prototype.getLineStrings = function() {
  const flatCoordinates = this.flatCoordinates;
  const ends = this.ends_;
  const layout = this.layout;
  /** @type {Array.<module:ol/geom/LineString>} */
  const lineStrings = [];
  let offset = 0;
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    const lineString = new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](null);
    lineString.setFlatCoordinates(layout, flatCoordinates.slice(offset, end));
    lineStrings.push(lineString);
    offset = end;
  }
  return lineStrings;
};


/**
 * @return {Array.<number>} Flat midpoints.
 */
MultiLineString.prototype.getFlatMidpoints = function() {
  const midpoints = [];
  const flatCoordinates = this.flatCoordinates;
  let offset = 0;
  const ends = this.ends_;
  const stride = this.stride;
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    const midpoint = Object(_geom_flat_interpolate_js__WEBPACK_IMPORTED_MODULE_10__[/* interpolatePoint */ "a"])(
      flatCoordinates, offset, end, stride, 0.5);
    Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(midpoints, midpoint);
    offset = end;
  }
  return midpoints;
};


/**
 * @inheritDoc
 */
MultiLineString.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
  const simplifiedFlatCoordinates = [];
  const simplifiedEnds = [];
  simplifiedFlatCoordinates.length = Object(_geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_12__[/* douglasPeuckerArray */ "b"])(
    this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,
    simplifiedFlatCoordinates, 0, simplifiedEnds);
  const simplifiedMultiLineString = new MultiLineString(null);
  simplifiedMultiLineString.setFlatCoordinates(
    _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, simplifiedFlatCoordinates, simplifiedEnds);
  return simplifiedMultiLineString;
};


/**
 * @inheritDoc
 * @api
 */
MultiLineString.prototype.getType = function() {
  return _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].MULTI_LINE_STRING;
};


/**
 * @inheritDoc
 * @api
 */
MultiLineString.prototype.intersectsExtent = function(extent) {
  return Object(_geom_flat_intersectsextent_js__WEBPACK_IMPORTED_MODULE_11__[/* intersectsLineStringArray */ "b"])(
    this.flatCoordinates, 0, this.ends_, this.stride, extent);
};


/**
 * Set the coordinates of the multilinestring.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @override
 * @api
 */
MultiLineString.prototype.setCoordinates = function(coordinates, opt_layout) {
  if (!coordinates) {
    this.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, null, this.ends_);
  } else {
    this.setLayout(opt_layout, coordinates, 2);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    const ends = Object(_geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_8__[/* deflateCoordinatesArray */ "c"])(
      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
    this.changed();
  }
};


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {Array.<number>} ends Ends.
 */
MultiLineString.prototype.setFlatCoordinates = function(layout, flatCoordinates, ends) {
  this.setFlatCoordinatesInternal(layout, flatCoordinates);
  this.ends_ = ends;
  this.changed();
};


/**
 * @param {Array.<module:ol/geom/LineString>} lineStrings LineStrings.
 */
MultiLineString.prototype.setLineStrings = function(lineStrings) {
  let layout = this.getLayout();
  const flatCoordinates = [];
  const ends = [];
  for (let i = 0, ii = lineStrings.length; i < ii; ++i) {
    const lineString = lineStrings[i];
    if (i === 0) {
      layout = lineString.getLayout();
    }
    Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(flatCoordinates, lineString.getFlatCoordinates());
    ends.push(flatCoordinates.length);
  }
  this.setFlatCoordinates(layout, flatCoordinates, ends);
};
/* harmony default export */ __webpack_exports__["a"] = (MultiLineString);


/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Disposable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(123);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(29);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(36);
/**
 * @module ol/events/EventTarget
 */







/**
 * @typedef {EventTarget|module:ol/events/EventTarget} EventTargetLike
 */


/**
 * @classdesc
 * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
 * @see {@link https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget}
 *
 * There are two important simplifications compared to the specification:
 *
 * 1. The handling of `useCapture` in `addEventListener` and
 *    `removeEventListener`. There is no real capture model.
 * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
 *    There is no event target hierarchy. When a listener calls
 *    `stopPropagation` or `preventDefault` on an event object, it means that no
 *    more listeners after this one will be called. Same as when the listener
 *    returns false.
 *
 * @constructor
 * @extends {module:ol/Disposable}
 */
const EventTarget = function() {

  _Disposable_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {!Object.<string, number>}
   */
  this.pendingRemovals_ = {};

  /**
   * @private
   * @type {!Object.<string, number>}
   */
  this.dispatching_ = {};

  /**
   * @private
   * @type {!Object.<string, Array.<module:ol/events~ListenerFunction>>}
   */
  this.listeners_ = {};

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(EventTarget, _Disposable_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @param {string} type Type.
 * @param {module:ol/events~ListenerFunction} listener Listener.
 */
EventTarget.prototype.addEventListener = function(type, listener) {
  let listeners = this.listeners_[type];
  if (!listeners) {
    listeners = this.listeners_[type] = [];
  }
  if (listeners.indexOf(listener) === -1) {
    listeners.push(listener);
  }
};


/**
 * @param {{type: string,
 *     target: (EventTarget|module:ol/events/EventTarget|undefined)}|module:ol/events/Event|
 *     string} event Event or event type.
 * @return {boolean|undefined} `false` if anyone called preventDefault on the
 *     event object or if any of the listeners returned false.
 */
EventTarget.prototype.dispatchEvent = function(event) {
  const evt = typeof event === 'string' ? new _events_Event_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](event) : event;
  const type = evt.type;
  evt.target = this;
  const listeners = this.listeners_[type];
  let propagate;
  if (listeners) {
    if (!(type in this.dispatching_)) {
      this.dispatching_[type] = 0;
      this.pendingRemovals_[type] = 0;
    }
    ++this.dispatching_[type];
    for (let i = 0, ii = listeners.length; i < ii; ++i) {
      if (listeners[i].call(this, evt) === false || evt.propagationStopped) {
        propagate = false;
        break;
      }
    }
    --this.dispatching_[type];
    if (this.dispatching_[type] === 0) {
      let pendingRemovals = this.pendingRemovals_[type];
      delete this.pendingRemovals_[type];
      while (pendingRemovals--) {
        this.removeEventListener(type, _functions_js__WEBPACK_IMPORTED_MODULE_3__[/* UNDEFINED */ "c"]);
      }
      delete this.dispatching_[type];
    }
    return propagate;
  }
};


/**
 * @inheritDoc
 */
EventTarget.prototype.disposeInternal = function() {
  Object(_events_js__WEBPACK_IMPORTED_MODULE_2__[/* unlistenAll */ "d"])(this);
};


/**
 * Get the listeners for a specified event type. Listeners are returned in the
 * order that they will be called in.
 *
 * @param {string} type Type.
 * @return {Array.<module:ol/events~ListenerFunction>} Listeners.
 */
EventTarget.prototype.getListeners = function(type) {
  return this.listeners_[type];
};


/**
 * @param {string=} opt_type Type. If not provided,
 *     `true` will be returned if this EventTarget has any listeners.
 * @return {boolean} Has listeners.
 */
EventTarget.prototype.hasListener = function(opt_type) {
  return opt_type ?
    opt_type in this.listeners_ :
    Object.keys(this.listeners_).length > 0;
};


/**
 * @param {string} type Type.
 * @param {module:ol/events~ListenerFunction} listener Listener.
 */
EventTarget.prototype.removeEventListener = function(type, listener) {
  const listeners = this.listeners_[type];
  if (listeners) {
    const index = listeners.indexOf(listener);
    if (type in this.pendingRemovals_) {
      // make listener a no-op, and remove later in #dispatchEvent()
      listeners[index] = _functions_js__WEBPACK_IMPORTED_MODULE_3__[/* UNDEFINED */ "c"];
      ++this.pendingRemovals_[type];
    } else {
      listeners.splice(index, 1);
      if (listeners.length === 0) {
        delete this.listeners_[type];
      }
    }
  }
};
/* harmony default export */ __webpack_exports__["a"] = (EventTarget);


/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(30);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(55);
/* harmony import */ var _geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(90);
/* harmony import */ var _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(91);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(21);
/**
 * @module ol/geom/MultiPoint
 */











/**
 * @classdesc
 * Multi-point geometry.
 *
 * @constructor
 * @extends {module:ol/geom/SimpleGeometry}
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @api
 */
const MultiPoint = function(coordinates, opt_layout) {
  _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].call(this);
  this.setCoordinates(coordinates, opt_layout);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MultiPoint, _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"]);


/**
 * Append the passed point to this multipoint.
 * @param {module:ol/geom/Point} point Point.
 * @api
 */
MultiPoint.prototype.appendPoint = function(point) {
  if (!this.flatCoordinates) {
    this.flatCoordinates = point.getFlatCoordinates().slice();
  } else {
    Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(this.flatCoordinates, point.getFlatCoordinates());
  }
  this.changed();
};


/**
 * Make a complete copy of the geometry.
 * @return {!module:ol/geom/MultiPoint} Clone.
 * @override
 * @api
 */
MultiPoint.prototype.clone = function() {
  const multiPoint = new MultiPoint(null);
  multiPoint.setFlatCoordinates(this.layout, this.flatCoordinates.slice());
  return multiPoint;
};


/**
 * @inheritDoc
 */
MultiPoint.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
  if (minSquaredDistance < Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* closestSquaredDistanceXY */ "e"])(this.getExtent(), x, y)) {
    return minSquaredDistance;
  }
  const flatCoordinates = this.flatCoordinates;
  const stride = this.stride;
  for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
    const squaredDistance = Object(_math_js__WEBPACK_IMPORTED_MODULE_9__[/* squaredDistance */ "g"])(
      x, y, flatCoordinates[i], flatCoordinates[i + 1]);
    if (squaredDistance < minSquaredDistance) {
      minSquaredDistance = squaredDistance;
      for (let j = 0; j < stride; ++j) {
        closestPoint[j] = flatCoordinates[i + j];
      }
      closestPoint.length = stride;
    }
  }
  return minSquaredDistance;
};


/**
 * Return the coordinates of the multipoint.
 * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.
 * @override
 * @api
 */
MultiPoint.prototype.getCoordinates = function() {
  return Object(_geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_8__[/* inflateCoordinates */ "a"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
};


/**
 * Return the point at the specified index.
 * @param {number} index Index.
 * @return {module:ol/geom/Point} Point.
 * @api
 */
MultiPoint.prototype.getPoint = function(index) {
  const n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;
  if (index < 0 || n <= index) {
    return null;
  }
  const point = new _geom_Point_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](null);
  point.setFlatCoordinates(this.layout, this.flatCoordinates.slice(
    index * this.stride, (index + 1) * this.stride));
  return point;
};


/**
 * Return the points of this multipoint.
 * @return {Array.<module:ol/geom/Point>} Points.
 * @api
 */
MultiPoint.prototype.getPoints = function() {
  const flatCoordinates = this.flatCoordinates;
  const layout = this.layout;
  const stride = this.stride;
  /** @type {Array.<module:ol/geom/Point>} */
  const points = [];
  for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
    const point = new _geom_Point_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](null);
    point.setFlatCoordinates(layout, flatCoordinates.slice(i, i + stride));
    points.push(point);
  }
  return points;
};


/**
 * @inheritDoc
 * @api
 */
MultiPoint.prototype.getType = function() {
  return _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].MULTI_POINT;
};


/**
 * @inheritDoc
 * @api
 */
MultiPoint.prototype.intersectsExtent = function(extent) {
  const flatCoordinates = this.flatCoordinates;
  const stride = this.stride;
  for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
    const x = flatCoordinates[i];
    const y = flatCoordinates[i + 1];
    if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* containsXY */ "h"])(extent, x, y)) {
      return true;
    }
  }
  return false;
};


/**
 * Set the coordinates of the multipoint.
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @override
 * @api
 */
MultiPoint.prototype.setCoordinates = function(coordinates, opt_layout) {
  if (!coordinates) {
    this.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, null);
  } else {
    this.setLayout(opt_layout, coordinates, 1);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    this.flatCoordinates.length = Object(_geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_7__[/* deflateCoordinates */ "b"])(
      this.flatCoordinates, 0, coordinates, this.stride);
    this.changed();
  }
};


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 */
MultiPoint.prototype.setFlatCoordinates = function(layout, flatCoordinates) {
  this.setFlatCoordinatesInternal(layout, flatCoordinates);
  this.changed();
};
/* harmony default export */ __webpack_exports__["a"] = (MultiPoint);


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(169);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(21);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7);
/* harmony import */ var _reproj_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(140);
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(58);
/* harmony import */ var _source_TileImage_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(65);
/* harmony import */ var _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(143);
/* harmony import */ var _tilecoord_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(57);
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(117);
/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(115);
/**
 * @module ol/source/TileWMS
 */
















/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=2048] Cache size.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {Object.<string,*>} params WMS request parameters.
 * At least a `LAYERS` param is required. `STYLES` is
 * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
 * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
 * @property {number} [gutter=0]
 * The size in pixels of the gutter around image tiles to ignore. By setting
 * this property to a non-zero value, images will be requested that are wider
 * and taller than the tile size by a value of `2 x gutter`.
 * Using a non-zero value allows artifacts of rendering at tile edges to be
 * ignored. If you control the WMS service it is recommended to address
 * "artifacts at tile edges" issues by properly configuring the WMS service. For
 * example, MapServer has a `tile_map_edge_buffer` configuration parameter for
 * this. See http://mapserver.org/output/tile_mode.html.
 * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
 * the image from the remote server.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {boolean} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.
 * Default is {@link module:ol/ImageTile~TileClass}.
 * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid. Base this on the resolutions,
 * tilesize and extent supported by the server.
 * If this is not defined, a default grid will be used: if there is a projection
 * extent, the grid will be based on that; if not, a grid based on a global
 * extent with origin at 0,0 will be used..
 * @property {module:ol/source/WMSServerType|string} [serverType]
 * The type of the remote WMS server. Currently only used when `hidpi` is
 * `true`.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {string} [url] WMS service URL.
 * @property {Array.<string>} [urls] WMS service urls.
 * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * When set to `false`, only one world
 * will be rendered. When `true`, tiles will be requested for one world only,
 * but they will be wrapped horizontally to render multiple worlds.
 * @property {number} [transition] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 */


/**
 * @classdesc
 * Layer source for tile data from WMS servers.
 *
 * @constructor
 * @extends {module:ol/source/TileImage}
 * @param {module:ol/source/TileWMS~Options=} [opt_options] Tile WMS options.
 * @api
 */
const TileWMS = function(opt_options) {

  const options = opt_options || {};

  const params = options.params || {};

  const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;

  _source_TileImage_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize,
    crossOrigin: options.crossOrigin,
    opaque: !transparent,
    projection: options.projection,
    reprojectionErrorThreshold: options.reprojectionErrorThreshold,
    tileClass: options.tileClass,
    tileGrid: options.tileGrid,
    tileLoadFunction: options.tileLoadFunction,
    url: options.url,
    urls: options.urls,
    wrapX: options.wrapX !== undefined ? options.wrapX : true,
    transition: options.transition
  });

  /**
   * @private
   * @type {number}
   */
  this.gutter_ = options.gutter !== undefined ? options.gutter : 0;

  /**
   * @private
   * @type {!Object}
   */
  this.params_ = params;

  /**
   * @private
   * @type {boolean}
   */
  this.v13_ = true;

  /**
   * @private
   * @type {module:ol/source/WMSServerType|undefined}
   */
  this.serverType_ = /** @type {module:ol/source/WMSServerType|undefined} */ (options.serverType);

  /**
   * @private
   * @type {boolean}
   */
  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.tmpExtent_ = Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* createEmpty */ "j"])();

  this.updateV13_();
  this.setKey(this.getKeyForParams_());

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_1__[/* inherits */ "c"])(TileWMS, _source_TileImage_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]);


/**
 * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
 * projection. Return `undefined` if the GetFeatureInfo URL cannot be
 * constructed.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} resolution Resolution.
 * @param {module:ol/proj~ProjectionLike} projection Projection.
 * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should
 *     be provided. If `QUERY_LAYERS` is not provided then the layers specified
 *     in the `LAYERS` parameter will be used. `VERSION` should not be
 *     specified here.
 * @return {string|undefined} GetFeatureInfo URL.
 * @api
 */
TileWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {
  const projectionObj = Object(_proj_js__WEBPACK_IMPORTED_MODULE_6__[/* get */ "h"])(projection);
  const sourceProjectionObj = this.getProjection();

  let tileGrid = this.getTileGrid();
  if (!tileGrid) {
    tileGrid = this.getTileGridForProjection(projectionObj);
  }

  const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);

  if (tileGrid.getResolutions().length <= tileCoord[0]) {
    return undefined;
  }

  let tileResolution = tileGrid.getResolution(tileCoord[0]);
  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
  let tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_8__[/* toSize */ "d"])(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);


  const gutter = this.gutter_;
  if (gutter !== 0) {
    tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_8__[/* buffer */ "a"])(tileSize, gutter, this.tmpSize);
    tileExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* buffer */ "c"])(tileExtent, tileResolution * gutter, tileExtent);
  }

  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
    tileResolution = Object(_reproj_js__WEBPACK_IMPORTED_MODULE_7__[/* calculateSourceResolution */ "a"])(sourceProjectionObj, projectionObj, coordinate, tileResolution);
    tileExtent = Object(_proj_js__WEBPACK_IMPORTED_MODULE_6__[/* transformExtent */ "o"])(tileExtent, projectionObj, sourceProjectionObj);
    coordinate = Object(_proj_js__WEBPACK_IMPORTED_MODULE_6__[/* transform */ "n"])(coordinate, projectionObj, sourceProjectionObj);
  }

  const baseParams = {
    'SERVICE': 'WMS',
    'VERSION': _common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_WMS_VERSION */ "a"],
    'REQUEST': 'GetFeatureInfo',
    'FORMAT': 'image/png',
    'TRANSPARENT': true,
    'QUERY_LAYERS': this.params_['LAYERS']
  };
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_4__[/* assign */ "a"])(baseParams, this.params_, params);

  const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);
  const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);

  baseParams[this.v13_ ? 'I' : 'X'] = x;
  baseParams[this.v13_ ? 'J' : 'Y'] = y;

  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,
    1, sourceProjectionObj || projectionObj, baseParams);
};


/**
 * @inheritDoc
 */
TileWMS.prototype.getGutterInternal = function() {
  return this.gutter_;
};


/**
 * Get the user-provided params, i.e. those passed to the constructor through
 * the "params" option, and possibly updated using the updateParams method.
 * @return {Object} Params.
 * @api
 */
TileWMS.prototype.getParams = function() {
  return this.params_;
};


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/size~Size} tileSize Tile size.
 * @param {module:ol/extent~Extent} tileExtent Tile extent.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {Object} params Params.
 * @return {string|undefined} Request URL.
 * @private
 */
TileWMS.prototype.getRequestUrl_ = function(tileCoord, tileSize, tileExtent,
  pixelRatio, projection, params) {

  const urls = this.urls;
  if (!urls) {
    return undefined;
  }

  params['WIDTH'] = tileSize[0];
  params['HEIGHT'] = tileSize[1];

  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();

  if (!('STYLES' in this.params_)) {
    params['STYLES'] = '';
  }

  if (pixelRatio != 1) {
    switch (this.serverType_) {
      case _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].GEOSERVER:
        const dpi = (90 * pixelRatio + 0.5) | 0;
        if ('FORMAT_OPTIONS' in params) {
          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;
        } else {
          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;
        }
        break;
      case _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].MAPSERVER:
        params['MAP_RESOLUTION'] = 90 * pixelRatio;
        break;
      case _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].CARMENTA_SERVER:
      case _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].QGIS:
        params['DPI'] = 90 * pixelRatio;
        break;
      default:
        Object(_asserts_js__WEBPACK_IMPORTED_MODULE_2__[/* assert */ "a"])(false, 52); // Unknown `serverType` configured
        break;
    }
  }

  const axisOrientation = projection.getAxisOrientation();
  const bbox = tileExtent;
  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {
    let tmp;
    tmp = tileExtent[0];
    bbox[0] = tileExtent[1];
    bbox[1] = tmp;
    tmp = tileExtent[2];
    bbox[2] = tileExtent[3];
    bbox[3] = tmp;
  }
  params['BBOX'] = bbox.join(',');

  let url;
  if (urls.length == 1) {
    url = urls[0];
  } else {
    const index = Object(_math_js__WEBPACK_IMPORTED_MODULE_5__[/* modulo */ "d"])(Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_11__[/* hash */ "e"])(tileCoord), urls.length);
    url = urls[index];
  }
  return Object(_uri_js__WEBPACK_IMPORTED_MODULE_13__[/* appendParams */ "a"])(url, params);
};


/**
 * @inheritDoc
 */
TileWMS.prototype.getTilePixelRatio = function(pixelRatio) {
  return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :
  /** @type {number} */ (pixelRatio);
};


/**
 * @private
 * @return {string} The key for the current params.
 */
TileWMS.prototype.getKeyForParams_ = function() {
  let i = 0;
  const res = [];
  for (const key in this.params_) {
    res[i++] = key + '-' + this.params_[key];
  }
  return res.join('/');
};


/**
 * @inheritDoc
 */
TileWMS.prototype.fixedTileUrlFunction = function(tileCoord, pixelRatio, projection) {

  let tileGrid = this.getTileGrid();
  if (!tileGrid) {
    tileGrid = this.getTileGridForProjection(projection);
  }

  if (tileGrid.getResolutions().length <= tileCoord[0]) {
    return undefined;
  }

  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {
    pixelRatio = 1;
  }

  const tileResolution = tileGrid.getResolution(tileCoord[0]);
  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
  let tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_8__[/* toSize */ "d"])(
    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);

  const gutter = this.gutter_;
  if (gutter !== 0) {
    tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_8__[/* buffer */ "a"])(tileSize, gutter, this.tmpSize);
    tileExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* buffer */ "c"])(tileExtent, tileResolution * gutter, tileExtent);
  }

  if (pixelRatio != 1) {
    tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_8__[/* scale */ "c"])(tileSize, pixelRatio, this.tmpSize);
  }

  const baseParams = {
    'SERVICE': 'WMS',
    'VERSION': _common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_WMS_VERSION */ "a"],
    'REQUEST': 'GetMap',
    'FORMAT': 'image/png',
    'TRANSPARENT': true
  };
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_4__[/* assign */ "a"])(baseParams, this.params_);

  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,
    pixelRatio, projection, baseParams);
};

/**
 * Update the user-provided params.
 * @param {Object} params Params.
 * @api
 */
TileWMS.prototype.updateParams = function(params) {
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_4__[/* assign */ "a"])(this.params_, params);
  this.updateV13_();
  this.setKey(this.getKeyForParams_());
};


/**
 * @private
 */
TileWMS.prototype.updateV13_ = function() {
  const version = this.params_['VERSION'] || _common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_WMS_VERSION */ "a"];
  this.v13_ = Object(_string_js__WEBPACK_IMPORTED_MODULE_12__[/* compareVersions */ "a"])(version, '1.3') >= 0;
};
/* harmony default export */ __webpack_exports__["a"] = (TileWMS);


/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return toFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createDefaultStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createEditingStyle; });
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var _style_Circle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(198);
/* harmony import */ var _style_Fill_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);
/* harmony import */ var _style_Stroke_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(89);
/**
 * @module ol/style/Style
 */

/**
 * Feature styles.
 *
 * If no style is defined, the following default style is used:
 * ```js
 *  import {Fill, Stroke, Circle, Style} from 'ol/style';
 *
 *  var fill = new Fill({
 *    color: 'rgba(255,255,255,0.4)'
 *  });
 *  var stroke = new Stroke({
 *    color: '#3399CC',
 *    width: 1.25
 *  });
 *  var styles = [
 *    new Style({
 *      image: new Circle({
 *        fill: fill,
 *        stroke: stroke,
 *        radius: 5
 *      }),
 *      fill: fill,
 *      stroke: stroke
 *    })
 *  ];
 * ```
 *
 * A separate editing style has the following defaults:
 * ```js
 *  import {Fill, Stroke, Circle, Style} from 'ol/style';
 *  import GeometryType from 'ol/geom/GeometryType';
 *
 *  var white = [255, 255, 255, 1];
 *  var blue = [0, 153, 255, 1];
 *  var width = 3;
 *  styles[GeometryType.POLYGON] = [
 *    new Style({
 *      fill: new Fill({
 *        color: [255, 255, 255, 0.5]
 *      })
 *    })
 *  ];
 *  styles[GeometryType.MULTI_POLYGON] =
 *      styles[GeometryType.POLYGON];
 *  styles[GeometryType.LINE_STRING] = [
 *    new Style({
 *      stroke: new Stroke({
 *        color: white,
 *        width: width + 2
 *      })
 *    }),
 *    new Style({
 *      stroke: new Stroke({
 *        color: blue,
 *        width: width
 *      })
 *    })
 *  ];
 *  styles[GeometryType.MULTI_LINE_STRING] =
 *      styles[GeometryType.LINE_STRING];
 *  styles[GeometryType.POINT] = [
 *    new Style({
 *      image: new Circle({
 *        radius: width * 2,
 *        fill: new Fill({
 *          color: blue
 *        }),
 *        stroke: new Stroke({
 *          color: white,
 *          width: width / 2
 *        })
 *      }),
 *      zIndex: Infinity
 *    })
 *  ];
 *  styles[GeometryType.MULTI_POINT] =
 *      styles[GeometryType.POINT];
 *  styles[GeometryType.GEOMETRY_COLLECTION] =
 *      styles[GeometryType.POLYGON].concat(
 *          styles[GeometryType.LINE_STRING],
 *          styles[GeometryType.POINT]
 *      );
 * ```
 */







/**
 * A function that takes an {@link module:ol/Feature} and a `{number}`
 * representing the view's resolution. The function should return a
 * {@link module:ol/style/Style} or an array of them. This way e.g. a
 * vector layer can be styled.
 *
 * @typedef {function((module:ol/Feature|module:ol/render/Feature), number):
 *     (module:ol/style/Style|Array.<module:ol/style/Style>)} StyleFunction
 */


/**
 * A function that takes an {@link module:ol/Feature} as argument and returns an
 * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.
 *
 * @typedef {function((module:ol/Feature|module:ol/render/Feature)):
 *     (module:ol/geom/Geometry|module:ol/render/Feature|undefined)} GeometryFunction
 */


/**
 * Custom renderer function. Takes two arguments:
 *
 * 1. The pixel coordinates of the geometry in GeoJSON notation.
 * 2. The {@link module:ol/render~State} of the layer renderer.
 *
 * @typedef {function((module:ol/coordinate~Coordinate|Array<module:ol/coordinate~Coordinate>|Array.<Array.<module:ol/coordinate~Coordinate>>),module:ol/render~State)}
 * RenderFunction
 */


/**
 * @typedef {Object} Options
 * @property {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction} [geometry] Feature property or geometry
 * or function returning a geometry to render for this style.
 * @property {module:ol/style/Fill} [fill] Fill style.
 * @property {module:ol/style/Image} [image] Image style.
 * @property {module:ol/style/Style~RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
 * ignored, and the provided function will be called with each render frame for each geometry.
 * @property {module:ol/style/Stroke} [stroke] Stroke style.
 * @property {module:ol/style/Text} [text] Text style.
 * @property {number} [zIndex] Z index.
 */


/**
 * @classdesc
 * Container for vector feature rendering styles. Any changes made to the style
 * or its children through `set*()` methods will not take effect until the
 * feature or layer that uses the style is re-rendered.
 *
 * @constructor
 * @struct
 * @param {module:ol/style/Style~Options=} opt_options Style options.
 * @api
 */
const Style = function(opt_options) {

  const options = opt_options || {};

  /**
   * @private
   * @type {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction}
   */
  this.geometry_ = null;

  /**
   * @private
   * @type {!module:ol/style/Style~GeometryFunction}
   */
  this.geometryFunction_ = defaultGeometryFunction;

  if (options.geometry !== undefined) {
    this.setGeometry(options.geometry);
  }

  /**
   * @private
   * @type {module:ol/style/Fill}
   */
  this.fill_ = options.fill !== undefined ? options.fill : null;

  /**
     * @private
     * @type {module:ol/style/Image}
     */
  this.image_ = options.image !== undefined ? options.image : null;

  /**
   * @private
   * @type {module:ol/style/Style~RenderFunction|null}
   */
  this.renderer_ = options.renderer !== undefined ? options.renderer : null;

  /**
   * @private
   * @type {module:ol/style/Stroke}
   */
  this.stroke_ = options.stroke !== undefined ? options.stroke : null;

  /**
   * @private
   * @type {module:ol/style/Text}
   */
  this.text_ = options.text !== undefined ? options.text : null;

  /**
   * @private
   * @type {number|undefined}
   */
  this.zIndex_ = options.zIndex;

};


/**
 * Clones the style.
 * @return {module:ol/style/Style} The cloned style.
 * @api
 */
Style.prototype.clone = function() {
  let geometry = this.getGeometry();
  if (geometry && geometry.clone) {
    geometry = geometry.clone();
  }
  return new Style({
    geometry: geometry,
    fill: this.getFill() ? this.getFill().clone() : undefined,
    image: this.getImage() ? this.getImage().clone() : undefined,
    stroke: this.getStroke() ? this.getStroke().clone() : undefined,
    text: this.getText() ? this.getText().clone() : undefined,
    zIndex: this.getZIndex()
  });
};


/**
 * Get the custom renderer function that was configured with
 * {@link #setRenderer} or the `renderer` constructor option.
 * @return {module:ol/style/Style~RenderFunction|null} Custom renderer function.
 * @api
 */
Style.prototype.getRenderer = function() {
  return this.renderer_;
};


/**
 * Sets a custom renderer function for this style. When set, `fill`, `stroke`
 * and `image` options of the style will be ignored.
 * @param {module:ol/style/Style~RenderFunction|null} renderer Custom renderer function.
 * @api
 */
Style.prototype.setRenderer = function(renderer) {
  this.renderer_ = renderer;
};


/**
 * Get the geometry to be rendered.
 * @return {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction}
 * Feature property or geometry or function that returns the geometry that will
 * be rendered with this style.
 * @api
 */
Style.prototype.getGeometry = function() {
  return this.geometry_;
};


/**
 * Get the function used to generate a geometry for rendering.
 * @return {!module:ol/style/Style~GeometryFunction} Function that is called with a feature
 * and returns the geometry to render instead of the feature's geometry.
 * @api
 */
Style.prototype.getGeometryFunction = function() {
  return this.geometryFunction_;
};


/**
 * Get the fill style.
 * @return {module:ol/style/Fill} Fill style.
 * @api
 */
Style.prototype.getFill = function() {
  return this.fill_;
};


/**
 * Set the fill style.
 * @param {module:ol/style/Fill} fill Fill style.
 * @api
 */
Style.prototype.setFill = function(fill) {
  this.fill_ = fill;
};


/**
 * Get the image style.
 * @return {module:ol/style/Image} Image style.
 * @api
 */
Style.prototype.getImage = function() {
  return this.image_;
};


/**
 * Set the image style.
 * @param {module:ol/style/Image} image Image style.
 * @api
 */
Style.prototype.setImage = function(image) {
  this.image_ = image;
};


/**
 * Get the stroke style.
 * @return {module:ol/style/Stroke} Stroke style.
 * @api
 */
Style.prototype.getStroke = function() {
  return this.stroke_;
};


/**
 * Set the stroke style.
 * @param {module:ol/style/Stroke} stroke Stroke style.
 * @api
 */
Style.prototype.setStroke = function(stroke) {
  this.stroke_ = stroke;
};


/**
 * Get the text style.
 * @return {module:ol/style/Text} Text style.
 * @api
 */
Style.prototype.getText = function() {
  return this.text_;
};


/**
 * Set the text style.
 * @param {module:ol/style/Text} text Text style.
 * @api
 */
Style.prototype.setText = function(text) {
  this.text_ = text;
};


/**
 * Get the z-index for the style.
 * @return {number|undefined} ZIndex.
 * @api
 */
Style.prototype.getZIndex = function() {
  return this.zIndex_;
};


/**
 * Set a geometry that is rendered instead of the feature's geometry.
 *
 * @param {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction} geometry
 *     Feature property or geometry or function returning a geometry to render
 *     for this style.
 * @api
 */
Style.prototype.setGeometry = function(geometry) {
  if (typeof geometry === 'function') {
    this.geometryFunction_ = geometry;
  } else if (typeof geometry === 'string') {
    this.geometryFunction_ = function(feature) {
      return (
        /** @type {module:ol/geom/Geometry} */ (feature.get(geometry))
      );
    };
  } else if (!geometry) {
    this.geometryFunction_ = defaultGeometryFunction;
  } else if (geometry !== undefined) {
    this.geometryFunction_ = function() {
      return (
        /** @type {module:ol/geom/Geometry} */ (geometry)
      );
    };
  }
  this.geometry_ = geometry;
};


/**
 * Set the z-index.
 *
 * @param {number|undefined} zIndex ZIndex.
 * @api
 */
Style.prototype.setZIndex = function(zIndex) {
  this.zIndex_ = zIndex;
};


/**
 * Convert the provided object into a style function.  Functions passed through
 * unchanged.  Arrays of module:ol/style/Style or single style objects wrapped in a
 * new style function.
 * @param {module:ol/style/Style~StyleFunction|Array.<module:ol/style/Style>|module:ol/style/Style} obj
 *     A style function, a single style, or an array of styles.
 * @return {module:ol/style/Style~StyleFunction} A style function.
 */
function toFunction(obj) {
  let styleFunction;

  if (typeof obj === 'function') {
    styleFunction = obj;
  } else {
    /**
     * @type {Array.<module:ol/style/Style>}
     */
    let styles;
    if (Array.isArray(obj)) {
      styles = obj;
    } else {
      Object(_asserts_js__WEBPACK_IMPORTED_MODULE_0__[/* assert */ "a"])(obj instanceof Style,
        41); // Expected an `module:ol/style/Style~Style` or an array of `module:ol/style/Style~Style`
      styles = [obj];
    }
    styleFunction = function() {
      return styles;
    };
  }
  return styleFunction;
}


/**
 * @type {Array.<module:ol/style/Style>}
 */
let defaultStyles = null;


/**
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 * @param {number} resolution Resolution.
 * @return {Array.<module:ol/style/Style>} Style.
 */
function createDefaultStyle(feature, resolution) {
  // We don't use an immediately-invoked function
  // and a closure so we don't get an error at script evaluation time in
  // browsers that do not support Canvas. (module:ol/style/Circle~CircleStyle does
  // canvas.getContext('2d') at construction time, which will cause an.error
  // in such browsers.)
  if (!defaultStyles) {
    const fill = new _style_Fill_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]({
      color: 'rgba(255,255,255,0.4)'
    });
    const stroke = new _style_Stroke_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]({
      color: '#3399CC',
      width: 1.25
    });
    defaultStyles = [
      new Style({
        image: new _style_Circle_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]({
          fill: fill,
          stroke: stroke,
          radius: 5
        }),
        fill: fill,
        stroke: stroke
      })
    ];
  }
  return defaultStyles;
}


/**
 * Default styles for editing features.
 * @return {Object.<module:ol/geom/GeometryType, Array.<module:ol/style/Style>>} Styles
 */
function createEditingStyle() {
  /** @type {Object.<module:ol/geom/GeometryType, Array.<module:ol/style/Style>>} */
  const styles = {};
  const white = [255, 255, 255, 1];
  const blue = [0, 153, 255, 1];
  const width = 3;
  styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POLYGON] = [
    new Style({
      fill: new _style_Fill_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]({
        color: [255, 255, 255, 0.5]
      })
    })
  ];
  styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MULTI_POLYGON] =
      styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POLYGON];

  styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LINE_STRING] = [
    new Style({
      stroke: new _style_Stroke_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]({
        color: white,
        width: width + 2
      })
    }),
    new Style({
      stroke: new _style_Stroke_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]({
        color: blue,
        width: width
      })
    })
  ];
  styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MULTI_LINE_STRING] =
      styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LINE_STRING];

  styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].CIRCLE] =
      styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POLYGON].concat(
        styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LINE_STRING]
      );


  styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POINT] = [
    new Style({
      image: new _style_Circle_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]({
        radius: width * 2,
        fill: new _style_Fill_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]({
          color: blue
        }),
        stroke: new _style_Stroke_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]({
          color: white,
          width: width / 2
        })
      }),
      zIndex: Infinity
    })
  ];
  styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MULTI_POINT] =
      styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POINT];

  styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].GEOMETRY_COLLECTION] =
      styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POLYGON].concat(
        styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LINE_STRING],
        styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POINT]
      );

  return styles;
}


/**
 * Function that is called with a feature and returns its default geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature to get the geometry for.
 * @return {module:ol/geom/Geometry|module:ol/render/Feature|undefined} Geometry to render.
 */
function defaultGeometryFunction(feature) {
  return feature.getGeometry();
}

/* harmony default export */ __webpack_exports__["c"] = (Style);


/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/layer/Property
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  OPACITY: 'opacity',
  VISIBLE: 'visible',
  EXTENT: 'extent',
  Z_INDEX: 'zIndex',
  MAX_RESOLUTION: 'maxResolution',
  MIN_RESOLUTION: 'minResolution',
  SOURCE: 'source'
});


/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return asString; });
/* unused harmony export fromString */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return asArray; });
/* unused harmony export normalize */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return toString; });
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21);
/**
 * @module ol/color
 */




/**
 * A color represented as a short array [red, green, blue, alpha].
 * red, green, and blue should be integers in the range 0..255 inclusive.
 * alpha should be a float in the range 0..1 inclusive. If no alpha value is
 * given then `1` will be used.
 * @typedef {Array.<number>} Color
 * @api
 */


/**
 * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
 * @const
 * @type {RegExp}
 * @private
 */
const HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;


/**
 * Regular expression for matching potential named color style strings.
 * @const
 * @type {RegExp}
 * @private
 */
const NAMED_COLOR_RE_ = /^([a-z]*)$/i;


/**
 * Return the color as an rgba string.
 * @param {module:ol/color~Color|string} color Color.
 * @return {string} Rgba string.
 * @api
 */
function asString(color) {
  if (typeof color === 'string') {
    return color;
  } else {
    return toString(color);
  }
}

/**
 * Return named color as an rgba string.
 * @param {string} color Named color.
 * @return {string} Rgb string.
 */
function fromNamed(color) {
  const el = document.createElement('div');
  el.style.color = color;
  if (el.style.color !== '') {
    document.body.appendChild(el);
    const rgb = getComputedStyle(el).color;
    document.body.removeChild(el);
    return rgb;
  } else {
    return '';
  }
}


/**
 * @param {string} s String.
 * @return {module:ol/color~Color} Color.
 */
const fromString = (
  function() {

    // We maintain a small cache of parsed strings.  To provide cheap LRU-like
    // semantics, whenever the cache grows too large we simply delete an
    // arbitrary 25% of the entries.

    /**
     * @const
     * @type {number}
     */
    const MAX_CACHE_SIZE = 1024;

    /**
     * @type {Object.<string, module:ol/color~Color>}
     */
    const cache = {};

    /**
     * @type {number}
     */
    let cacheSize = 0;

    return (
      /**
       * @param {string} s String.
       * @return {module:ol/color~Color} Color.
       */
      function(s) {
        let color;
        if (cache.hasOwnProperty(s)) {
          color = cache[s];
        } else {
          if (cacheSize >= MAX_CACHE_SIZE) {
            let i = 0;
            for (const key in cache) {
              if ((i++ & 3) === 0) {
                delete cache[key];
                --cacheSize;
              }
            }
          }
          color = fromStringInternal_(s);
          cache[s] = color;
          ++cacheSize;
        }
        return color;
      }
    );

  })();

/**
 * Return the color as an array. This function maintains a cache of calculated
 * arrays which means the result should not be modified.
 * @param {module:ol/color~Color|string} color Color.
 * @return {module:ol/color~Color} Color.
 * @api
 */
function asArray(color) {
  if (Array.isArray(color)) {
    return color;
  } else {
    return fromString(/** @type {string} */ (color));
  }
}

/**
 * @param {string} s String.
 * @private
 * @return {module:ol/color~Color} Color.
 */
function fromStringInternal_(s) {
  let r, g, b, a, color;

  if (NAMED_COLOR_RE_.exec(s)) {
    s = fromNamed(s);
  }

  if (HEX_COLOR_RE_.exec(s)) { // hex
    const n = s.length - 1; // number of hex digits
    let d; // number of digits per channel
    if (n <= 4) {
      d = 1;
    } else {
      d = 2;
    }
    const hasAlpha = n === 4 || n === 8;
    r = parseInt(s.substr(1 + 0 * d, d), 16);
    g = parseInt(s.substr(1 + 1 * d, d), 16);
    b = parseInt(s.substr(1 + 2 * d, d), 16);
    if (hasAlpha) {
      a = parseInt(s.substr(1 + 3 * d, d), 16);
    } else {
      a = 255;
    }
    if (d == 1) {
      r = (r << 4) + r;
      g = (g << 4) + g;
      b = (b << 4) + b;
      if (hasAlpha) {
        a = (a << 4) + a;
      }
    }
    color = [r, g, b, a / 255];
  } else if (s.indexOf('rgba(') == 0) { // rgba()
    color = s.slice(5, -1).split(',').map(Number);
    normalize(color);
  } else if (s.indexOf('rgb(') == 0) { // rgb()
    color = s.slice(4, -1).split(',').map(Number);
    color.push(1);
    normalize(color);
  } else {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_0__[/* assert */ "a"])(false, 14); // Invalid color
  }
  return (
    /** @type {module:ol/color~Color} */ (color)
  );
}


/**
 * TODO this function is only used in the test, we probably shouldn't export it
 * @param {module:ol/color~Color} color Color.
 * @return {module:ol/color~Color} Clamped color.
 */
function normalize(color) {
  color[0] = Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* clamp */ "a"])((color[0] + 0.5) | 0, 0, 255);
  color[1] = Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* clamp */ "a"])((color[1] + 0.5) | 0, 0, 255);
  color[2] = Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* clamp */ "a"])((color[2] + 0.5) | 0, 0, 255);
  color[3] = Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* clamp */ "a"])(color[3], 0, 1);
  return color;
}


/**
 * @param {module:ol/color~Color} color Color.
 * @return {string} String.
 */
function toString(color) {
  let r = color[0];
  if (r != (r | 0)) {
    r = (r + 0.5) | 0;
  }
  let g = color[1];
  if (g != (g | 0)) {
    g = (g + 0.5) | 0;
  }
  let b = color[2];
  if (b != (b | 0)) {
    b = (b + 0.5) | 0;
  }
  const a = color[3] === undefined ? 1 : color[3];
  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
}


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/render/EventType
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  /**
   * @event module:ol/render/Event~RenderEvent#postcompose
   * @api
   */
  POSTCOMPOSE: 'postcompose',
  /**
   * @event module:ol/render/Event~RenderEvent#precompose
   * @api
   */
  PRECOMPOSE: 'precompose',
  /**
   * @event module:ol/render/Event~RenderEvent#render
   * @api
   */
  RENDER: 'render'
});


/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ORDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TEXT_ALIGN; });
/* harmony import */ var _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38);
/**
 * @module ol/render/replay
 */



/**
 * @const
 * @type {Array.<module:ol/render/ReplayType>}
 */
const ORDER = [
  _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].POLYGON,
  _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].CIRCLE,
  _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].LINE_STRING,
  _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].IMAGE,
  _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].TEXT,
  _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DEFAULT
];

/**
 * @const
 * @enum {number}
 */
const TEXT_ALIGN = {};
TEXT_ALIGN['left'] = 0;
TEXT_ALIGN['end'] = 0;
TEXT_ALIGN['center'] = 0.5;
TEXT_ALIGN['right'] = 1;
TEXT_ALIGN['start'] = 1;
TEXT_ALIGN['top'] = 0;
TEXT_ALIGN['middle'] = 0.5;
TEXT_ALIGN['hanging'] = 0.2;
TEXT_ALIGN['alphabetic'] = 0.8;
TEXT_ALIGN['ideographic'] = 0.8;
TEXT_ALIGN['bottom'] = 1;


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/style/IconOrigin
 */

/**
 * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  BOTTOM_LEFT: 'bottom-left',
  BOTTOM_RIGHT: 'bottom-right',
  TOP_LEFT: 'top-left',
  TOP_RIGHT: 'top-right'
});


/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/ViewProperty
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  CENTER: 'center',
  RESOLUTION: 'resolution',
  ROTATION: 'rotation'
});


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(73);
/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(39);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(55);
/* harmony import */ var _geom_flat_area_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(165);
/* harmony import */ var _geom_flat_center_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(229);
/* harmony import */ var _geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(105);
/* harmony import */ var _geom_flat_contains_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(112);
/* harmony import */ var _geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(90);
/* harmony import */ var _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(91);
/* harmony import */ var _geom_flat_interiorpoint_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(177);
/* harmony import */ var _geom_flat_intersectsextent_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(164);
/* harmony import */ var _geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(93);
/* harmony import */ var _geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(122);
/**
 * @module ol/geom/MultiPolygon
 */



















/**
 * @classdesc
 * Multi-polygon geometry.
 *
 * @constructor
 * @extends {module:ol/geom/SimpleGeometry}
 * @param {Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @api
 */
const MultiPolygon = function(coordinates, opt_layout) {

  _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].call(this);

  /**
   * @type {Array.<Array.<number>>}
   * @private
   */
  this.endss_ = [];

  /**
   * @private
   * @type {number}
   */
  this.flatInteriorPointsRevision_ = -1;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.flatInteriorPoints_ = null;

  /**
   * @private
   * @type {number}
   */
  this.maxDelta_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.maxDeltaRevision_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.orientedRevision_ = -1;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.orientedFlatCoordinates_ = null;

  this.setCoordinates(coordinates, opt_layout);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MultiPolygon, _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]);


/**
 * Append the passed polygon to this multipolygon.
 * @param {module:ol/geom/Polygon} polygon Polygon.
 * @api
 */
MultiPolygon.prototype.appendPolygon = function(polygon) {
  /** @type {Array.<number>} */
  let ends;
  if (!this.flatCoordinates) {
    this.flatCoordinates = polygon.getFlatCoordinates().slice();
    ends = polygon.getEnds().slice();
    this.endss_.push();
  } else {
    const offset = this.flatCoordinates.length;
    Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(this.flatCoordinates, polygon.getFlatCoordinates());
    ends = polygon.getEnds().slice();
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      ends[i] += offset;
    }
  }
  this.endss_.push(ends);
  this.changed();
};


/**
 * Make a complete copy of the geometry.
 * @return {!module:ol/geom/MultiPolygon} Clone.
 * @override
 * @api
 */
MultiPolygon.prototype.clone = function() {
  const multiPolygon = new MultiPolygon(null);

  const len = this.endss_.length;
  const newEndss = new Array(len);
  for (let i = 0; i < len; ++i) {
    newEndss[i] = this.endss_[i].slice();
  }

  multiPolygon.setFlatCoordinates(
    this.layout, this.flatCoordinates.slice(), newEndss);
  return multiPolygon;
};


/**
 * @inheritDoc
 */
MultiPolygon.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
  if (minSquaredDistance < Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* closestSquaredDistanceXY */ "e"])(this.getExtent(), x, y)) {
    return minSquaredDistance;
  }
  if (this.maxDeltaRevision_ != this.getRevision()) {
    this.maxDelta_ = Math.sqrt(Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_10__[/* multiArrayMaxSquaredDelta */ "f"])(
      this.flatCoordinates, 0, this.endss_, this.stride, 0));
    this.maxDeltaRevision_ = this.getRevision();
  }
  return Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_10__[/* assignClosestMultiArrayPoint */ "c"])(
    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,
    this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
};


/**
 * @inheritDoc
 */
MultiPolygon.prototype.containsXY = function(x, y) {
  return Object(_geom_flat_contains_js__WEBPACK_IMPORTED_MODULE_11__[/* linearRingssContainsXY */ "d"])(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);
};


/**
 * Return the area of the multipolygon on projected plane.
 * @return {number} Area (on projected plane).
 * @api
 */
MultiPolygon.prototype.getArea = function() {
  return Object(_geom_flat_area_js__WEBPACK_IMPORTED_MODULE_8__[/* linearRingss */ "c"])(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);
};


/**
 * Get the coordinate array for this geometry.  This array has the structure
 * of a GeoJSON coordinate array for multi-polygons.
 *
 * @param {boolean=} opt_right Orient coordinates according to the right-hand
 *     rule (counter-clockwise for exterior and clockwise for interior rings).
 *     If `false`, coordinates will be oriented according to the left-hand rule
 *     (clockwise for exterior and counter-clockwise for interior rings).
 *     By default, coordinate orientation will depend on how the geometry was
 *     constructed.
 * @return {Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>} Coordinates.
 * @override
 * @api
 */
MultiPolygon.prototype.getCoordinates = function(opt_right) {
  let flatCoordinates;
  if (opt_right !== undefined) {
    flatCoordinates = this.getOrientedFlatCoordinates().slice();
    Object(_geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__[/* orientLinearRingsArray */ "e"])(
      flatCoordinates, 0, this.endss_, this.stride, opt_right);
  } else {
    flatCoordinates = this.flatCoordinates;
  }

  return Object(_geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_13__[/* inflateMultiCoordinatesArray */ "c"])(
    flatCoordinates, 0, this.endss_, this.stride);
};


/**
 * @return {Array.<Array.<number>>} Endss.
 */
MultiPolygon.prototype.getEndss = function() {
  return this.endss_;
};


/**
 * @return {Array.<number>} Flat interior points.
 */
MultiPolygon.prototype.getFlatInteriorPoints = function() {
  if (this.flatInteriorPointsRevision_ != this.getRevision()) {
    const flatCenters = Object(_geom_flat_center_js__WEBPACK_IMPORTED_MODULE_9__[/* linearRingss */ "a"])(
      this.flatCoordinates, 0, this.endss_, this.stride);
    this.flatInteriorPoints_ = Object(_geom_flat_interiorpoint_js__WEBPACK_IMPORTED_MODULE_14__[/* getInteriorPointsOfMultiArray */ "b"])(
      this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,
      flatCenters);
    this.flatInteriorPointsRevision_ = this.getRevision();
  }
  return this.flatInteriorPoints_;
};


/**
 * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.
 * @return {module:ol/geom/MultiPoint} Interior points as XYM coordinates, where M is
 * the length of the horizontal intersection that the point belongs to.
 * @api
 */
MultiPolygon.prototype.getInteriorPoints = function() {
  const interiorPoints = new _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](null);
  interiorPoints.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XYM,
    this.getFlatInteriorPoints().slice());
  return interiorPoints;
};


/**
 * @return {Array.<number>} Oriented flat coordinates.
 */
MultiPolygon.prototype.getOrientedFlatCoordinates = function() {
  if (this.orientedRevision_ != this.getRevision()) {
    const flatCoordinates = this.flatCoordinates;
    if (Object(_geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__[/* linearRingsAreOriented */ "c"])(
      flatCoordinates, 0, this.endss_, this.stride)) {
      this.orientedFlatCoordinates_ = flatCoordinates;
    } else {
      this.orientedFlatCoordinates_ = flatCoordinates.slice();
      this.orientedFlatCoordinates_.length =
          Object(_geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__[/* orientLinearRingsArray */ "e"])(
            this.orientedFlatCoordinates_, 0, this.endss_, this.stride);
    }
    this.orientedRevision_ = this.getRevision();
  }
  return this.orientedFlatCoordinates_;
};


/**
 * @inheritDoc
 */
MultiPolygon.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
  const simplifiedFlatCoordinates = [];
  const simplifiedEndss = [];
  simplifiedFlatCoordinates.length = Object(_geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_17__[/* quantizeMultiArray */ "d"])(
    this.flatCoordinates, 0, this.endss_, this.stride,
    Math.sqrt(squaredTolerance),
    simplifiedFlatCoordinates, 0, simplifiedEndss);
  const simplifiedMultiPolygon = new MultiPolygon(null);
  simplifiedMultiPolygon.setFlatCoordinates(
    _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, simplifiedFlatCoordinates, simplifiedEndss);
  return simplifiedMultiPolygon;
};


/**
 * Return the polygon at the specified index.
 * @param {number} index Index.
 * @return {module:ol/geom/Polygon} Polygon.
 * @api
 */
MultiPolygon.prototype.getPolygon = function(index) {
  if (index < 0 || this.endss_.length <= index) {
    return null;
  }
  let offset;
  if (index === 0) {
    offset = 0;
  } else {
    const prevEnds = this.endss_[index - 1];
    offset = prevEnds[prevEnds.length - 1];
  }
  const ends = this.endss_[index].slice();
  const end = ends[ends.length - 1];
  if (offset !== 0) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      ends[i] -= offset;
    }
  }
  const polygon = new _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "b"](null);
  polygon.setFlatCoordinates(
    this.layout, this.flatCoordinates.slice(offset, end), ends);
  return polygon;
};


/**
 * Return the polygons of this multipolygon.
 * @return {Array.<module:ol/geom/Polygon>} Polygons.
 * @api
 */
MultiPolygon.prototype.getPolygons = function() {
  const layout = this.layout;
  const flatCoordinates = this.flatCoordinates;
  const endss = this.endss_;
  const polygons = [];
  let offset = 0;
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i].slice();
    const end = ends[ends.length - 1];
    if (offset !== 0) {
      for (let j = 0, jj = ends.length; j < jj; ++j) {
        ends[j] -= offset;
      }
    }
    const polygon = new _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "b"](null);
    polygon.setFlatCoordinates(
      layout, flatCoordinates.slice(offset, end), ends);
    polygons.push(polygon);
    offset = end;
  }
  return polygons;
};


/**
 * @inheritDoc
 * @api
 */
MultiPolygon.prototype.getType = function() {
  return _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].MULTI_POLYGON;
};


/**
 * @inheritDoc
 * @api
 */
MultiPolygon.prototype.intersectsExtent = function(extent) {
  return Object(_geom_flat_intersectsextent_js__WEBPACK_IMPORTED_MODULE_15__[/* intersectsLinearRingMultiArray */ "d"])(
    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);
};


/**
 * Set the coordinates of the multipolygon.
 * @param {Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @override
 * @api
 */
MultiPolygon.prototype.setCoordinates = function(coordinates, opt_layout) {
  if (!coordinates) {
    this.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XY, null, this.endss_);
  } else {
    this.setLayout(opt_layout, coordinates, 3);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    const endss = Object(_geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_12__[/* deflateMultiCoordinatesArray */ "d"])(
      this.flatCoordinates, 0, coordinates, this.stride, this.endss_);
    if (endss.length === 0) {
      this.flatCoordinates.length = 0;
    } else {
      const lastEnds = endss[endss.length - 1];
      this.flatCoordinates.length = lastEnds.length === 0 ?
        0 : lastEnds[lastEnds.length - 1];
    }
    this.changed();
  }
};


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {Array.<Array.<number>>} endss Endss.
 */
MultiPolygon.prototype.setFlatCoordinates = function(layout, flatCoordinates, endss) {
  this.setFlatCoordinatesInternal(layout, flatCoordinates);
  this.endss_ = endss;
  this.changed();
};


/**
 * @param {Array.<module:ol/geom/Polygon>} polygons Polygons.
 */
MultiPolygon.prototype.setPolygons = function(polygons) {
  let layout = this.getLayout();
  const flatCoordinates = [];
  const endss = [];
  for (let i = 0, ii = polygons.length; i < ii; ++i) {
    const polygon = polygons[i];
    if (i === 0) {
      layout = polygon.getLayout();
    }
    const offset = flatCoordinates.length;
    const ends = polygon.getEnds();
    for (let j = 0, jj = ends.length; j < jj; ++j) {
      ends[j] += offset;
    }
    Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(flatCoordinates, polygon.getFlatCoordinates());
    endss.push(ends);
  }
  this.setFlatCoordinates(layout, flatCoordinates, endss);
};

/* harmony default export */ __webpack_exports__["a"] = (MultiPolygon);


/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(29);
/* harmony import */ var _geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(61);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7);
/* harmony import */ var _proj_Units_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(59);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(18);
/**
 * @module ol/geom/Geometry
 */










/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for vector geometries.
 *
 * To get notified of changes to the geometry, register a listener for the
 * generic `change` event on your geometry instance.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/Object}
 * @api
 */
const Geometry = function() {

  _Object_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.extent_ = Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* createEmpty */ "j"])();

  /**
   * @private
   * @type {number}
   */
  this.extentRevision_ = -1;

  /**
   * @protected
   * @type {Object.<string, module:ol/geom/Geometry>}
   */
  this.simplifiedGeometryCache = {};

  /**
   * @protected
   * @type {number}
   */
  this.simplifiedGeometryMaxMinSquaredTolerance = 0;

  /**
   * @protected
   * @type {number}
   */
  this.simplifiedGeometryRevision = 0;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Geometry, _Object_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @type {module:ol/transform~Transform}
 */
const tmpTransform = Object(_transform_js__WEBPACK_IMPORTED_MODULE_7__[/* create */ "c"])();


/**
 * Make a complete copy of the geometry.
 * @abstract
 * @return {!module:ol/geom/Geometry} Clone.
 */
Geometry.prototype.clone = function() {};


/**
 * @abstract
 * @param {number} x X.
 * @param {number} y Y.
 * @param {module:ol/coordinate~Coordinate} closestPoint Closest point.
 * @param {number} minSquaredDistance Minimum squared distance.
 * @return {number} Minimum squared distance.
 */
Geometry.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {};


/**
 * Return the closest point of the geometry to the passed point as
 * {@link module:ol/coordinate~Coordinate coordinate}.
 * @param {module:ol/coordinate~Coordinate} point Point.
 * @param {module:ol/coordinate~Coordinate=} opt_closestPoint Closest point.
 * @return {module:ol/coordinate~Coordinate} Closest point.
 * @api
 */
Geometry.prototype.getClosestPoint = function(point, opt_closestPoint) {
  const closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];
  this.closestPointXY(point[0], point[1], closestPoint, Infinity);
  return closestPoint;
};


/**
 * Returns true if this geometry includes the specified coordinate. If the
 * coordinate is on the boundary of the geometry, returns false.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @return {boolean} Contains coordinate.
 * @api
 */
Geometry.prototype.intersectsCoordinate = function(coordinate) {
  return this.containsXY(coordinate[0], coordinate[1]);
};


/**
 * @abstract
 * @param {module:ol/extent~Extent} extent Extent.
 * @protected
 * @return {module:ol/extent~Extent} extent Extent.
 */
Geometry.prototype.computeExtent = function(extent) {};


/**
 * @param {number} x X.
 * @param {number} y Y.
 * @return {boolean} Contains (x, y).
 */
Geometry.prototype.containsXY = _functions_js__WEBPACK_IMPORTED_MODULE_3__[/* FALSE */ "a"];


/**
 * Get the extent of the geometry.
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} extent Extent.
 * @api
 */
Geometry.prototype.getExtent = function(opt_extent) {
  if (this.extentRevision_ != this.getRevision()) {
    this.extent_ = this.computeExtent(this.extent_);
    this.extentRevision_ = this.getRevision();
  }
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* returnOrUpdate */ "I"])(this.extent_, opt_extent);
};


/**
 * Rotate the geometry around a given coordinate. This modifies the geometry
 * coordinates in place.
 * @abstract
 * @param {number} angle Rotation angle in radians.
 * @param {module:ol/coordinate~Coordinate} anchor The rotation center.
 * @api
 */
Geometry.prototype.rotate = function(angle, anchor) {};


/**
 * Scale the geometry (with an optional origin).  This modifies the geometry
 * coordinates in place.
 * @abstract
 * @param {number} sx The scaling factor in the x-direction.
 * @param {number=} opt_sy The scaling factor in the y-direction (defaults to
 *     sx).
 * @param {module:ol/coordinate~Coordinate=} opt_anchor The scale origin (defaults to the center
 *     of the geometry extent).
 * @api
 */
Geometry.prototype.scale = function(sx, opt_sy, opt_anchor) {};


/**
 * Create a simplified version of this geometry.  For linestrings, this uses
 * the the {@link
 * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
 * Douglas Peucker} algorithm.  For polygons, a quantization-based
 * simplification is used to preserve topology.
 * @function
 * @param {number} tolerance The tolerance distance for simplification.
 * @return {module:ol/geom/Geometry} A new, simplified version of the original
 *     geometry.
 * @api
 */
Geometry.prototype.simplify = function(tolerance) {
  return this.getSimplifiedGeometry(tolerance * tolerance);
};


/**
 * Create a simplified version of this geometry using the Douglas Peucker
 * algorithm.
 * @see https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
 * @abstract
 * @param {number} squaredTolerance Squared tolerance.
 * @return {module:ol/geom/Geometry} Simplified geometry.
 */
Geometry.prototype.getSimplifiedGeometry = function(squaredTolerance) {};


/**
 * Get the type of this geometry.
 * @abstract
 * @return {module:ol/geom/GeometryType} Geometry type.
 */
Geometry.prototype.getType = function() {};


/**
 * Apply a transform function to each coordinate of the geometry.
 * The geometry is modified in place.
 * If you do not want the geometry modified in place, first `clone()` it and
 * then use this function on the clone.
 * @abstract
 * @param {module:ol/proj~TransformFunction} transformFn Transform.
 */
Geometry.prototype.applyTransform = function(transformFn) {};


/**
 * Test if the geometry and the passed extent intersect.
 * @abstract
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {boolean} `true` if the geometry and the extent intersect.
 */
Geometry.prototype.intersectsExtent = function(extent) {};


/**
 * Translate the geometry.  This modifies the geometry coordinates in place.  If
 * instead you want a new geometry, first `clone()` this geometry.
 * @abstract
 * @param {number} deltaX Delta X.
 * @param {number} deltaY Delta Y.
 */
Geometry.prototype.translate = function(deltaX, deltaY) {};


/**
 * Transform each coordinate of the geometry from one coordinate reference
 * system to another. The geometry is modified in place.
 * For example, a line will be transformed to a line and a circle to a circle.
 * If you do not want the geometry modified in place, first `clone()` it and
 * then use this function on the clone.
 *
 * @param {module:ol/proj~ProjectionLike} source The current projection.  Can be a
 *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
 * @param {module:ol/proj~ProjectionLike} destination The desired projection.  Can be a
 *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
 * @return {module:ol/geom/Geometry} This geometry.  Note that original geometry is
 *     modified in place.
 * @api
 */
Geometry.prototype.transform = function(source, destination) {
  source = Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* get */ "h"])(source);
  const transformFn = source.getUnits() == _proj_Units_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "b"].TILE_PIXELS ?
    function(inCoordinates, outCoordinates, stride) {
      const pixelExtent = source.getExtent();
      const projectedExtent = source.getWorldExtent();
      const scale = Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* getHeight */ "A"])(projectedExtent) / Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* getHeight */ "A"])(pixelExtent);
      Object(_transform_js__WEBPACK_IMPORTED_MODULE_7__[/* compose */ "b"])(tmpTransform,
        projectedExtent[0], projectedExtent[3],
        scale, -scale, 0,
        0, 0);
      Object(_geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_4__[/* transform2D */ "c"])(inCoordinates, 0, inCoordinates.length, stride,
        tmpTransform, outCoordinates);
      return Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* getTransform */ "j"])(source, destination)(inCoordinates, outCoordinates, stride);
    } :
    Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* getTransform */ "j"])(source, destination);
  this.applyTransform(transformFn);
  return this;
};
/* harmony default export */ __webpack_exports__["a"] = (Geometry);


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export createFromTemplate */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createFromTemplates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createFromTileUrlFunctions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return nullTileUrlFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return expandUrl; });
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21);
/* harmony import */ var _tilecoord_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(57);
/**
 * @module ol/tileurlfunction
 */





/**
 * @param {string} template Template.
 * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.
 * @return {module:ol/Tile~UrlFunction} Tile URL function.
 */
function createFromTemplate(template, tileGrid) {
  const zRegEx = /\{z\}/g;
  const xRegEx = /\{x\}/g;
  const yRegEx = /\{y\}/g;
  const dashYRegEx = /\{-y\}/g;
  return (
    /**
     * @param {module:ol/tilecoord~TileCoord} tileCoord Tile Coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {module:ol/proj/Projection} projection Projection.
     * @return {string|undefined} Tile URL.
     */
    function(tileCoord, pixelRatio, projection) {
      if (!tileCoord) {
        return undefined;
      } else {
        return template.replace(zRegEx, tileCoord[0].toString())
          .replace(xRegEx, tileCoord[1].toString())
          .replace(yRegEx, function() {
            const y = -tileCoord[2] - 1;
            return y.toString();
          })
          .replace(dashYRegEx, function() {
            const z = tileCoord[0];
            const range = tileGrid.getFullTileRange(z);
            Object(_asserts_js__WEBPACK_IMPORTED_MODULE_0__[/* assert */ "a"])(range, 55); // The {-y} placeholder requires a tile grid with extent
            const y = range.getHeight() + tileCoord[2];
            return y.toString();
          });
      }
    }
  );
}


/**
 * @param {Array.<string>} templates Templates.
 * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.
 * @return {module:ol/Tile~UrlFunction} Tile URL function.
 */
function createFromTemplates(templates, tileGrid) {
  const len = templates.length;
  const tileUrlFunctions = new Array(len);
  for (let i = 0; i < len; ++i) {
    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
  }
  return createFromTileUrlFunctions(tileUrlFunctions);
}


/**
 * @param {Array.<module:ol/Tile~UrlFunction>} tileUrlFunctions Tile URL Functions.
 * @return {module:ol/Tile~UrlFunction} Tile URL function.
 */
function createFromTileUrlFunctions(tileUrlFunctions) {
  if (tileUrlFunctions.length === 1) {
    return tileUrlFunctions[0];
  }
  return (
    /**
     * @param {module:ol/tilecoord~TileCoord} tileCoord Tile Coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {module:ol/proj/Projection} projection Projection.
     * @return {string|undefined} Tile URL.
     */
    function(tileCoord, pixelRatio, projection) {
      if (!tileCoord) {
        return undefined;
      } else {
        const h = Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_2__[/* hash */ "e"])(tileCoord);
        const index = Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* modulo */ "d"])(h, tileUrlFunctions.length);
        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
      }
    }
  );
}


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {string|undefined} Tile URL.
 */
function nullTileUrlFunction(tileCoord, pixelRatio, projection) {
  return undefined;
}


/**
 * @param {string} url URL.
 * @return {Array.<string>} Array of urls.
 */
function expandUrl(url) {
  const urls = [];
  let match = /\{([a-z])-([a-z])\}/.exec(url);
  if (match) {
    // char range
    const startCharCode = match[1].charCodeAt(0);
    const stopCharCode = match[2].charCodeAt(0);
    let charCode;
    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
      urls.push(url.replace(match[0], String.fromCharCode(charCode)));
    }
    return urls;
  }
  match = match = /\{(\d+)-(\d+)\}/.exec(url);
  if (match) {
    // number range
    const stop = parseInt(match[2], 10);
    for (let i = parseInt(match[1], 10); i <= stop; i++) {
      urls.push(url.replace(match[0], i.toString()));
    }
    return urls;
  }
  urls.push(url);
  return urls;
}


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ERROR_THRESHOLD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ENABLE_RASTER_REPROJECTION; });
/**
 * Default maximum allowed threshold  (in pixels) for reprojection
 * triangulation.
 * @type {number}
 */
const ERROR_THRESHOLD = 0.5;

/**
 * Enable automatic reprojection of raster sources. Default is `true`.
 * TODO: decide if we want to expose this as a build flag or remove it
 * @type {boolean}
 */
const ENABLE_RASTER_REPROJECTION = true;


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/extent/Relationship
 */

/**
 * Relationship to an extent.
 * @enum {number}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  UNKNOWN: 0,
  INTERSECTING: 1,
  ABOVE: 2,
  RIGHT: 4,
  BELOW: 8,
  LEFT: 16
});


/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _source_OSM_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20);
/* harmony import */ var _source_XYZ_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(54);
/**
 * @module ol/source/Stamen
 */





/**
 * @const
 * @type {Array.<string>}
 */
const ATTRIBUTIONS = [
  'Map tiles by <a href="https://stamen.com/">Stamen Design</a>, ' +
        'under <a href="https://creativecommons.org/licenses/by/3.0/">CC BY' +
        ' 3.0</a>.',
  _source_OSM_js__WEBPACK_IMPORTED_MODULE_1__[/* ATTRIBUTION */ "a"]
];


/**
 * @type {Object.<string, {extension: string, opaque: boolean}>}
 */
const LayerConfig = {
  'terrain': {
    extension: 'jpg',
    opaque: true
  },
  'terrain-background': {
    extension: 'jpg',
    opaque: true
  },
  'terrain-labels': {
    extension: 'png',
    opaque: false
  },
  'terrain-lines': {
    extension: 'png',
    opaque: false
  },
  'toner-background': {
    extension: 'png',
    opaque: true
  },
  'toner': {
    extension: 'png',
    opaque: true
  },
  'toner-hybrid': {
    extension: 'png',
    opaque: false
  },
  'toner-labels': {
    extension: 'png',
    opaque: false
  },
  'toner-lines': {
    extension: 'png',
    opaque: false
  },
  'toner-lite': {
    extension: 'png',
    opaque: true
  },
  'watercolor': {
    extension: 'jpg',
    opaque: true
  }
};


/**
 * @type {Object.<string, {minZoom: number, maxZoom: number}>}
 */
const ProviderConfig = {
  'terrain': {
    minZoom: 4,
    maxZoom: 18
  },
  'toner': {
    minZoom: 0,
    maxZoom: 20
  },
  'watercolor': {
    minZoom: 1,
    maxZoom: 16
  }
};


/**
 * @typedef {Object} Options
 * @property {number} [cacheSize=2048] Cache size.
 * @property {string} [layer] Layer.
 * @property {number} [minZoom] Minimum zoom.
 * @property {number} [maxZoom] Maximum zoom.
 * @property {boolean} [opaque] Whether the layer is opaque.
 * @property {boolean} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction]
 * Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 */


/**
 * @classdesc
 * Layer source for the Stamen tile server.
 *
 * @constructor
 * @extends {module:ol/source/XYZ}
 * @param {module:ol/source/Stamen~Options=} options Stamen options.
 * @api
 */
const Stamen = function(options) {
  const i = options.layer.indexOf('-');
  const provider = i == -1 ? options.layer : options.layer.slice(0, i);
  const providerConfig = ProviderConfig[provider];

  const layerConfig = LayerConfig[options.layer];

  const url = options.url !== undefined ? options.url :
    'https://stamen-tiles-{a-d}.a.ssl.fastly.net/' + options.layer +
      '/{z}/{x}/{y}.' + layerConfig.extension;

  _source_XYZ_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this, {
    attributions: ATTRIBUTIONS,
    cacheSize: options.cacheSize,
    crossOrigin: 'anonymous',
    maxZoom: options.maxZoom != undefined ? options.maxZoom : providerConfig.maxZoom,
    minZoom: options.minZoom != undefined ? options.minZoom : providerConfig.minZoom,
    opaque: layerConfig.opaque,
    reprojectionErrorThreshold: options.reprojectionErrorThreshold,
    tileLoadFunction: options.tileLoadFunction,
    url: url,
    wrapX: options.wrapX
  });
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Stamen, _source_XYZ_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);

/* harmony default export */ __webpack_exports__["a"] = (Stamen);


/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _MapEventType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(142);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(31);
/* harmony import */ var _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(103);
/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(47);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(32);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/**
 * @module ol/Overlay
 */










/**
 * @typedef {Object} Options
 * @property {number|string} [id] Set the overlay id. The overlay id can be used
 * with the {@link module:ol/Map~Map#getOverlayById} method.
 * @property {HTMLElement} [element] The overlay element.
 * @property {Array.<number>} [offset=[0, 0]] Offsets in pixels used when positioning
 * the overlay. The first element in the
 * array is the horizontal offset. A positive value shifts the overlay right.
 * The second element in the array is the vertical offset. A positive value
 * shifts the overlay down.
 * @property {module:ol/coordinate~Coordinate} [position] The overlay position
 * in map projection.
 * @property {module:ol/OverlayPositioning} [positioning='top-left'] Defines how
 * the overlay is actually positioned with respect to its `position` property.
 * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,
 * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
 * `'top-center'`, and `'top-right'`.
 * @property {boolean} [stopEvent=true] Whether event propagation to the map
 * viewport should be stopped. If `true` the overlay is placed in the same
 * container as that of the controls (CSS class name
 * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container
 * with CSS class name specified by the `className` property.
 * @property {boolean} [insertFirst=true] Whether the overlay is inserted first
 * in the overlay container, or appended. If the overlay is placed in the same
 * container as that of the controls (see the `stopEvent` option) you will
 * probably set `insertFirst` to `true` so the overlay is displayed below the
 * controls.
 * @property {boolean} [autoPan=false] If set to `true` the map is panned when
 * calling `setPosition`, so that the overlay is entirely visible in the current
 * viewport.
 * @property {module:ol/Overlay~PanOptions} [autoPanAnimation] The
 * animation options used to pan the overlay into view. This animation is only
 * used when `autoPan` is enabled. A `duration` and `easing` may be provided to
 * customize the animation.
 * @property {number} [autoPanMargin=20] The margin (in pixels) between the
 * overlay and the borders of the map when autopanning.
 * @property {string} [className='ol-overlay-container ol-selectable'] CSS class
 * name.
 */


/**
 * @typedef {Object} PanOptions
 * @property {number} [duration=1000] The duration of the animation in
 * milliseconds.
 * @property {function(number):number} [easing] The easing function to use. Can
 * be one from {@link module:ol/easing} or a custom function.
 * Default is {@link module:ol/easing~inAndOut}.
 */


/**
 * @enum {string}
 * @protected
 */
const Property = {
  ELEMENT: 'element',
  MAP: 'map',
  OFFSET: 'offset',
  POSITION: 'position',
  POSITIONING: 'positioning'
};


/**
 * @classdesc
 * An element to be displayed over the map and attached to a single map
 * location.  Like {@link module:ol/control/Control~Control}, Overlays are
 * visible widgets. Unlike Controls, they are not in a fixed position on the
 * screen, but are tied to a geographical coordinate, so panning the map will
 * move an Overlay but not a Control.
 *
 * Example:
 *
 *     import Overlay from 'ol/Overlay';
 *
 *     var popup = new Overlay({
 *       element: document.getElementById('popup')
 *     });
 *     popup.setPosition(coordinate);
 *     map.addOverlay(popup);
 *
 * @constructor
 * @extends {module:ol/Object}
 * @param {module:ol/Overlay~Options} options Overlay options.
 * @api
 */
const Overlay = function(options) {

  _Object_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this);

  /**
   * @protected
   * @type {module:ol/Overlay~Options}
   */
  this.options = options;

  /**
   * @protected
   * @type {number|string|undefined}
   */
  this.id = options.id;

  /**
   * @protected
   * @type {boolean}
   */
  this.insertFirst = options.insertFirst !== undefined ?
    options.insertFirst : true;

  /**
   * @protected
   * @type {boolean}
   */
  this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;

  /**
   * @protected
   * @type {HTMLElement}
   */
  this.element = document.createElement('DIV');
  this.element.className = options.className !== undefined ?
    options.className : 'ol-overlay-container ' + _css_js__WEBPACK_IMPORTED_MODULE_4__[/* CLASS_SELECTABLE */ "d"];
  this.element.style.position = 'absolute';

  /**
   * @protected
   * @type {boolean}
   */
  this.autoPan = options.autoPan !== undefined ? options.autoPan : false;

  /**
   * @protected
   * @type {module:ol/Overlay~PanOptions}
   */
  this.autoPanAnimation = options.autoPanAnimation || /** @type {module:ol/Overlay~PanOptions} */ ({});

  /**
   * @protected
   * @type {number}
   */
  this.autoPanMargin = options.autoPanMargin !== undefined ?
    options.autoPanMargin : 20;

  /**
   * @protected
   * @type {{bottom_: string,
   *         left_: string,
   *         right_: string,
   *         top_: string,
   *         visible: boolean}}
   */
  this.rendered = {
    bottom_: '',
    left_: '',
    right_: '',
    top_: '',
    visible: true
  };

  /**
   * @protected
   * @type {?module:ol/events~EventsKey}
   */
  this.mapPostrenderListenerKey = null;

  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(
    this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_2__[/* getChangeEventType */ "b"])(Property.ELEMENT),
    this.handleElementChanged, this);

  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(
    this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_2__[/* getChangeEventType */ "b"])(Property.MAP),
    this.handleMapChanged, this);

  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(
    this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_2__[/* getChangeEventType */ "b"])(Property.OFFSET),
    this.handleOffsetChanged, this);

  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(
    this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_2__[/* getChangeEventType */ "b"])(Property.POSITION),
    this.handlePositionChanged, this);

  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(
    this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_2__[/* getChangeEventType */ "b"])(Property.POSITIONING),
    this.handlePositioningChanged, this);

  if (options.element !== undefined) {
    this.setElement(options.element);
  }

  this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);

  this.setPositioning(options.positioning !== undefined ?
    /** @type {module:ol/OverlayPositioning} */ (options.positioning) :
    _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TOP_LEFT);

  if (options.position !== undefined) {
    this.setPosition(options.position);
  }

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Overlay, _Object_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * Get the DOM element of this overlay.
 * @return {HTMLElement|undefined} The Element containing the overlay.
 * @observable
 * @api
 */
Overlay.prototype.getElement = function() {
  return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));
};


/**
 * Get the overlay identifier which is set on constructor.
 * @return {number|string|undefined} Id.
 * @api
 */
Overlay.prototype.getId = function() {
  return this.id;
};


/**
 * Get the map associated with this overlay.
 * @return {module:ol/PluggableMap|undefined} The map that the
 * overlay is part of.
 * @observable
 * @api
 */
Overlay.prototype.getMap = function() {
  return (
    /** @type {module:ol/PluggableMap|undefined} */ (this.get(Property.MAP))
  );
};


/**
 * Get the offset of this overlay.
 * @return {Array.<number>} The offset.
 * @observable
 * @api
 */
Overlay.prototype.getOffset = function() {
  return /** @type {Array.<number>} */ (this.get(Property.OFFSET));
};


/**
 * Get the current position of this overlay.
 * @return {module:ol/coordinate~Coordinate|undefined} The spatial point that the overlay is
 *     anchored at.
 * @observable
 * @api
 */
Overlay.prototype.getPosition = function() {
  return (
    /** @type {module:ol/coordinate~Coordinate|undefined} */ (this.get(Property.POSITION))
  );
};


/**
 * Get the current positioning of this overlay.
 * @return {module:ol/OverlayPositioning} How the overlay is positioned
 *     relative to its point on the map.
 * @observable
 * @api
 */
Overlay.prototype.getPositioning = function() {
  return (
    /** @type {module:ol/OverlayPositioning} */ (this.get(Property.POSITIONING))
  );
};


/**
 * @protected
 */
Overlay.prototype.handleElementChanged = function() {
  Object(_dom_js__WEBPACK_IMPORTED_MODULE_5__[/* removeChildren */ "d"])(this.element);
  const element = this.getElement();
  if (element) {
    this.element.appendChild(element);
  }
};


/**
 * @protected
 */
Overlay.prototype.handleMapChanged = function() {
  if (this.mapPostrenderListenerKey) {
    Object(_dom_js__WEBPACK_IMPORTED_MODULE_5__[/* removeNode */ "e"])(this.element);
    Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* unlistenByKey */ "e"])(this.mapPostrenderListenerKey);
    this.mapPostrenderListenerKey = null;
  }
  const map = this.getMap();
  if (map) {
    this.mapPostrenderListenerKey = Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(map,
      _MapEventType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POSTRENDER, this.render, this);
    this.updatePixelPosition();
    const container = this.stopEvent ?
      map.getOverlayContainerStopEvent() : map.getOverlayContainer();
    if (this.insertFirst) {
      container.insertBefore(this.element, container.childNodes[0] || null);
    } else {
      container.appendChild(this.element);
    }
  }
};


/**
 * @protected
 */
Overlay.prototype.render = function() {
  this.updatePixelPosition();
};


/**
 * @protected
 */
Overlay.prototype.handleOffsetChanged = function() {
  this.updatePixelPosition();
};


/**
 * @protected
 */
Overlay.prototype.handlePositionChanged = function() {
  this.updatePixelPosition();
  if (this.get(Property.POSITION) && this.autoPan) {
    this.panIntoView();
  }
};


/**
 * @protected
 */
Overlay.prototype.handlePositioningChanged = function() {
  this.updatePixelPosition();
};


/**
 * Set the DOM element to be associated with this overlay.
 * @param {HTMLElement|undefined} element The Element containing the overlay.
 * @observable
 * @api
 */
Overlay.prototype.setElement = function(element) {
  this.set(Property.ELEMENT, element);
};


/**
 * Set the map to be associated with this overlay.
 * @param {module:ol/PluggableMap|undefined} map The map that the
 * overlay is part of.
 * @observable
 * @api
 */
Overlay.prototype.setMap = function(map) {
  this.set(Property.MAP, map);
};


/**
 * Set the offset for this overlay.
 * @param {Array.<number>} offset Offset.
 * @observable
 * @api
 */
Overlay.prototype.setOffset = function(offset) {
  this.set(Property.OFFSET, offset);
};


/**
 * Set the position for this overlay. If the position is `undefined` the
 * overlay is hidden.
 * @param {module:ol/coordinate~Coordinate|undefined} position The spatial point that the overlay
 *     is anchored at.
 * @observable
 * @api
 */
Overlay.prototype.setPosition = function(position) {
  this.set(Property.POSITION, position);
};


/**
 * Pan the map so that the overlay is entirely visible in the current viewport
 * (if necessary).
 * @protected
 */
Overlay.prototype.panIntoView = function() {
  const map = this.getMap();

  if (!map || !map.getTargetElement()) {
    return;
  }

  const mapRect = this.getRect(map.getTargetElement(), map.getSize());
  const element = this.getElement();
  const overlayRect = this.getRect(element, [Object(_dom_js__WEBPACK_IMPORTED_MODULE_5__[/* outerWidth */ "c"])(element), Object(_dom_js__WEBPACK_IMPORTED_MODULE_5__[/* outerHeight */ "b"])(element)]);

  const margin = this.autoPanMargin;
  if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_7__[/* containsExtent */ "g"])(mapRect, overlayRect)) {
    // the overlay is not completely inside the viewport, so pan the map
    const offsetLeft = overlayRect[0] - mapRect[0];
    const offsetRight = mapRect[2] - overlayRect[2];
    const offsetTop = overlayRect[1] - mapRect[1];
    const offsetBottom = mapRect[3] - overlayRect[3];

    const delta = [0, 0];
    if (offsetLeft < 0) {
      // move map to the left
      delta[0] = offsetLeft - margin;
    } else if (offsetRight < 0) {
      // move map to the right
      delta[0] = Math.abs(offsetRight) + margin;
    }
    if (offsetTop < 0) {
      // move map up
      delta[1] = offsetTop - margin;
    } else if (offsetBottom < 0) {
      // move map down
      delta[1] = Math.abs(offsetBottom) + margin;
    }

    if (delta[0] !== 0 || delta[1] !== 0) {
      const center = /** @type {module:ol/coordinate~Coordinate} */ (map.getView().getCenter());
      const centerPx = map.getPixelFromCoordinate(center);
      const newCenterPx = [
        centerPx[0] + delta[0],
        centerPx[1] + delta[1]
      ];

      map.getView().animate({
        center: map.getCoordinateFromPixel(newCenterPx),
        duration: this.autoPanAnimation.duration,
        easing: this.autoPanAnimation.easing
      });
    }
  }
};


/**
 * Get the extent of an element relative to the document
 * @param {HTMLElement|undefined} element The element.
 * @param {module:ol/size~Size|undefined} size The size of the element.
 * @return {module:ol/extent~Extent} The extent.
 * @protected
 */
Overlay.prototype.getRect = function(element, size) {
  const box = element.getBoundingClientRect();
  const offsetX = box.left + window.pageXOffset;
  const offsetY = box.top + window.pageYOffset;
  return [
    offsetX,
    offsetY,
    offsetX + size[0],
    offsetY + size[1]
  ];
};


/**
 * Set the positioning for this overlay.
 * @param {module:ol/OverlayPositioning} positioning how the overlay is
 *     positioned relative to its point on the map.
 * @observable
 * @api
 */
Overlay.prototype.setPositioning = function(positioning) {
  this.set(Property.POSITIONING, positioning);
};


/**
 * Modify the visibility of the element.
 * @param {boolean} visible Element visibility.
 * @protected
 */
Overlay.prototype.setVisible = function(visible) {
  if (this.rendered.visible !== visible) {
    this.element.style.display = visible ? '' : 'none';
    this.rendered.visible = visible;
  }
};


/**
 * Update pixel position.
 * @protected
 */
Overlay.prototype.updatePixelPosition = function() {
  const map = this.getMap();
  const position = this.getPosition();
  if (!map || !map.isRendered() || !position) {
    this.setVisible(false);
    return;
  }

  const pixel = map.getPixelFromCoordinate(position);
  const mapSize = map.getSize();
  this.updateRenderedPosition(pixel, mapSize);
};


/**
 * @param {module:ol~Pixel} pixel The pixel location.
 * @param {module:ol/size~Size|undefined} mapSize The map size.
 * @protected
 */
Overlay.prototype.updateRenderedPosition = function(pixel, mapSize) {
  const style = this.element.style;
  const offset = this.getOffset();

  const positioning = this.getPositioning();

  this.setVisible(true);

  let offsetX = offset[0];
  let offsetY = offset[1];
  if (positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].BOTTOM_RIGHT ||
      positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CENTER_RIGHT ||
      positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TOP_RIGHT) {
    if (this.rendered.left_ !== '') {
      this.rendered.left_ = style.left = '';
    }
    const right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';
    if (this.rendered.right_ != right) {
      this.rendered.right_ = style.right = right;
    }
  } else {
    if (this.rendered.right_ !== '') {
      this.rendered.right_ = style.right = '';
    }
    if (positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].BOTTOM_CENTER ||
        positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CENTER_CENTER ||
        positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TOP_CENTER) {
      offsetX -= this.element.offsetWidth / 2;
    }
    const left = Math.round(pixel[0] + offsetX) + 'px';
    if (this.rendered.left_ != left) {
      this.rendered.left_ = style.left = left;
    }
  }
  if (positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].BOTTOM_LEFT ||
      positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].BOTTOM_CENTER ||
      positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].BOTTOM_RIGHT) {
    if (this.rendered.top_ !== '') {
      this.rendered.top_ = style.top = '';
    }
    const bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';
    if (this.rendered.bottom_ != bottom) {
      this.rendered.bottom_ = style.bottom = bottom;
    }
  } else {
    if (this.rendered.bottom_ !== '') {
      this.rendered.bottom_ = style.bottom = '';
    }
    if (positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CENTER_LEFT ||
        positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CENTER_CENTER ||
        positioning == _OverlayPositioning_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CENTER_RIGHT) {
      offsetY -= this.element.offsetHeight / 2;
    }
    const top = Math.round(pixel[1] + offsetY) + 'px';
    if (this.rendered.top_ != top) {
      this.rendered.top_ = style.top = top;
    }
  }
};


/**
 * returns the options this Overlay has been created with
 * @return {module:ol/Overlay~Options} overlay options
 */
Overlay.prototype.getOptions = function() {
  return this.options;
};

/* harmony default export */ __webpack_exports__["a"] = (Overlay);


/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/**
 * @module ol/style/Stroke
 */



/**
 * @typedef {Object} Options
 * @property {module:ol/color~Color|module:ol/colorlike~ColorLike} [color] A color, gradient or pattern.
 * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
 * Default null; if null, the Canvas/renderer default black will be used.
 * @property {string} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
 * @property {string} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
 * @property {Array.<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).
 * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on
 * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.
 * @property {number} [lineDashOffset=0] Line dash offset.
 * @property {number} [miterLimit=10] Miter limit.
 * @property {number} [width] Width.
 */


/**
 * @classdesc
 * Set stroke style for vector features.
 * Note that the defaults given are the Canvas defaults, which will be used if
 * option is not defined. The `get` functions return whatever was entered in
 * the options; they will not return the default.
 *
 * @constructor
 * @param {module:ol/style/Stroke~Options=} opt_options Options.
 * @api
 */
const Stroke = function(opt_options) {

  const options = opt_options || {};

  /**
   * @private
   * @type {module:ol/color~Color|module:ol/colorlike~ColorLike}
   */
  this.color_ = options.color !== undefined ? options.color : null;

  /**
   * @private
   * @type {string|undefined}
   */
  this.lineCap_ = options.lineCap;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;

  /**
   * @private
   * @type {number|undefined}
   */
  this.lineDashOffset_ = options.lineDashOffset;

  /**
   * @private
   * @type {string|undefined}
   */
  this.lineJoin_ = options.lineJoin;

  /**
   * @private
   * @type {number|undefined}
   */
  this.miterLimit_ = options.miterLimit;

  /**
   * @private
   * @type {number|undefined}
   */
  this.width_ = options.width;

  /**
   * @private
   * @type {string|undefined}
   */
  this.checksum_ = undefined;
};


/**
 * Clones the style.
 * @return {module:ol/style/Stroke} The cloned style.
 * @api
 */
Stroke.prototype.clone = function() {
  const color = this.getColor();
  return new Stroke({
    color: (color && color.slice) ? color.slice() : color || undefined,
    lineCap: this.getLineCap(),
    lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
    lineDashOffset: this.getLineDashOffset(),
    lineJoin: this.getLineJoin(),
    miterLimit: this.getMiterLimit(),
    width: this.getWidth()
  });
};


/**
 * Get the stroke color.
 * @return {module:ol/color~Color|module:ol/colorlike~ColorLike} Color.
 * @api
 */
Stroke.prototype.getColor = function() {
  return this.color_;
};


/**
 * Get the line cap type for the stroke.
 * @return {string|undefined} Line cap.
 * @api
 */
Stroke.prototype.getLineCap = function() {
  return this.lineCap_;
};


/**
 * Get the line dash style for the stroke.
 * @return {Array.<number>} Line dash.
 * @api
 */
Stroke.prototype.getLineDash = function() {
  return this.lineDash_;
};


/**
 * Get the line dash offset for the stroke.
 * @return {number|undefined} Line dash offset.
 * @api
 */
Stroke.prototype.getLineDashOffset = function() {
  return this.lineDashOffset_;
};


/**
 * Get the line join type for the stroke.
 * @return {string|undefined} Line join.
 * @api
 */
Stroke.prototype.getLineJoin = function() {
  return this.lineJoin_;
};


/**
 * Get the miter limit for the stroke.
 * @return {number|undefined} Miter limit.
 * @api
 */
Stroke.prototype.getMiterLimit = function() {
  return this.miterLimit_;
};


/**
 * Get the stroke width.
 * @return {number|undefined} Width.
 * @api
 */
Stroke.prototype.getWidth = function() {
  return this.width_;
};


/**
 * Set the color.
 *
 * @param {module:ol/color~Color|module:ol/colorlike~ColorLike} color Color.
 * @api
 */
Stroke.prototype.setColor = function(color) {
  this.color_ = color;
  this.checksum_ = undefined;
};


/**
 * Set the line cap.
 *
 * @param {string|undefined} lineCap Line cap.
 * @api
 */
Stroke.prototype.setLineCap = function(lineCap) {
  this.lineCap_ = lineCap;
  this.checksum_ = undefined;
};


/**
 * Set the line dash.
 *
 * Please note that Internet Explorer 10 and lower [do not support][mdn] the
 * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this
 * property will have no visual effect in these browsers.
 *
 * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility
 *
 * @param {Array.<number>} lineDash Line dash.
 * @api
 */
Stroke.prototype.setLineDash = function(lineDash) {
  this.lineDash_ = lineDash;
  this.checksum_ = undefined;
};


/**
 * Set the line dash offset.
 *
 * @param {number|undefined} lineDashOffset Line dash offset.
 * @api
 */
Stroke.prototype.setLineDashOffset = function(lineDashOffset) {
  this.lineDashOffset_ = lineDashOffset;
  this.checksum_ = undefined;
};


/**
 * Set the line join.
 *
 * @param {string|undefined} lineJoin Line join.
 * @api
 */
Stroke.prototype.setLineJoin = function(lineJoin) {
  this.lineJoin_ = lineJoin;
  this.checksum_ = undefined;
};


/**
 * Set the miter limit.
 *
 * @param {number|undefined} miterLimit Miter limit.
 * @api
 */
Stroke.prototype.setMiterLimit = function(miterLimit) {
  this.miterLimit_ = miterLimit;
  this.checksum_ = undefined;
};


/**
 * Set the width.
 *
 * @param {number|undefined} width Width.
 * @api
 */
Stroke.prototype.setWidth = function(width) {
  this.width_ = width;
  this.checksum_ = undefined;
};


/**
 * @return {string} The checksum.
 */
Stroke.prototype.getChecksum = function() {
  if (this.checksum_ === undefined) {
    this.checksum_ = 's';
    if (this.color_) {
      if (typeof this.color_ === 'string') {
        this.checksum_ += this.color_;
      } else {
        this.checksum_ += Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(this.color_).toString();
      }
    } else {
      this.checksum_ += '-';
    }
    this.checksum_ += ',' +
        (this.lineCap_ !== undefined ?
          this.lineCap_.toString() : '-') + ',' +
        (this.lineDash_ ?
          this.lineDash_.toString() : '-') + ',' +
        (this.lineDashOffset_ !== undefined ?
          this.lineDashOffset_ : '-') + ',' +
        (this.lineJoin_ !== undefined ?
          this.lineJoin_ : '-') + ',' +
        (this.miterLimit_ !== undefined ?
          this.miterLimit_.toString() : '-') + ',' +
        (this.width_ !== undefined ?
          this.width_.toString() : '-');
  }

  return this.checksum_;
};
/* harmony default export */ __webpack_exports__["a"] = (Stroke);


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return deflateCoordinate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return deflateCoordinates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return deflateCoordinatesArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return deflateMultiCoordinatesArray; });
/**
 * @module ol/geom/flat/deflate
 */


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} stride Stride.
 * @return {number} offset Offset.
 */
function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
  for (let i = 0, ii = coordinate.length; i < ii; ++i) {
    flatCoordinates[offset++] = coordinate[i];
  }
  return offset;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @param {number} stride Stride.
 * @return {number} offset Offset.
 */
function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
  for (let i = 0, ii = coordinates.length; i < ii; ++i) {
    const coordinate = coordinates[i];
    for (let j = 0; j < stride; ++j) {
      flatCoordinates[offset++] = coordinate[j];
    }
  }
  return offset;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} coordinatess Coordinatess.
 * @param {number} stride Stride.
 * @param {Array.<number>=} opt_ends Ends.
 * @return {Array.<number>} Ends.
 */
function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
  const ends = opt_ends ? opt_ends : [];
  let i = 0;
  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {
    const end = deflateCoordinates(
      flatCoordinates, offset, coordinatess[j], stride);
    ends[i++] = end;
    offset = end;
  }
  ends.length = i;
  return ends;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>} coordinatesss Coordinatesss.
 * @param {number} stride Stride.
 * @param {Array.<Array.<number>>=} opt_endss Endss.
 * @return {Array.<Array.<number>>} Endss.
 */
function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {
  const endss = opt_endss ? opt_endss : [];
  let i = 0;
  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {
    const ends = deflateCoordinatesArray(
      flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
    endss[i++] = ends;
    offset = ends[ends.length - 1];
  }
  endss.length = i;
  return endss;
}


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return inflateCoordinates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return inflateCoordinatesArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return inflateMultiCoordinatesArray; });
/**
 * @module ol/geom/flat/inflate
 */


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {Array.<module:ol/coordinate~Coordinate>=} opt_coordinates Coordinates.
 * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.
 */
function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
  const coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
  let i = 0;
  for (let j = offset; j < end; j += stride) {
    coordinates[i++] = flatCoordinates.slice(j, j + stride);
  }
  coordinates.length = i;
  return coordinates;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>=} opt_coordinatess Coordinatess.
 * @return {Array.<Array.<module:ol/coordinate~Coordinate>>} Coordinatess.
 */
function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
  const coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
  let i = 0;
  for (let j = 0, jj = ends.length; j < jj; ++j) {
    const end = ends[j];
    coordinatess[i++] = inflateCoordinates(
      flatCoordinates, offset, end, stride, coordinatess[i]);
    offset = end;
  }
  coordinatess.length = i;
  return coordinatess;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>=} opt_coordinatesss
 *     Coordinatesss.
 * @return {Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>} Coordinatesss.
 */
function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {
  const coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];
  let i = 0;
  for (let j = 0, jj = endss.length; j < jj; ++j) {
    const ends = endss[j];
    coordinatesss[i++] = inflateCoordinatesArray(
      flatCoordinates, offset, ends, stride, coordinatesss[i]);
    offset = ends[ends.length - 1];
  }
  coordinatesss.length = i;
  return coordinatesss;
}


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _MapBrowserEvent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(173);
/**
 * @module ol/MapBrowserPointerEvent
 */



/**
 * @constructor
 * @extends {module:ol/MapBrowserEvent}
 * @param {string} type Event type.
 * @param {module:ol/PluggableMap} map Map.
 * @param {module:ol/pointer/PointerEvent} pointerEvent Pointer
 * event.
 * @param {boolean=} opt_dragging Is the map currently being dragged?
 * @param {?module:ol/PluggableMap~FrameState=} opt_frameState Frame state.
 */
const MapBrowserPointerEvent = function(type, map, pointerEvent, opt_dragging,
  opt_frameState) {

  _MapBrowserEvent_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, type, map, pointerEvent.originalEvent, opt_dragging,
    opt_frameState);

  /**
   * @const
   * @type {module:ol/pointer/PointerEvent}
   */
  this.pointerEvent = pointerEvent;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MapBrowserPointerEvent, _MapBrowserEvent_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);
/* harmony default export */ __webpack_exports__["a"] = (MapBrowserPointerEvent);


/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ../src/ol/geom/flat/reverse.js
/**
 * @module ol/geom/flat/reverse
 */


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 */
function coordinates(flatCoordinates, offset, end, stride) {
  while (offset < end - stride) {
    for (let i = 0; i < stride; ++i) {
      const tmp = flatCoordinates[offset + i];
      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
      flatCoordinates[end - stride + i] = tmp;
    }
    offset += stride;
    end -= stride;
  }
}

// CONCATENATED MODULE: ../src/ol/geom/flat/orient.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return linearRingIsClockwise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return linearRingIsOriented; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return linearRingsAreOriented; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return orientLinearRings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return orientLinearRingsArray; });
/**
 * @module ol/geom/flat/orient
 */



/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {boolean} Is clockwise.
 */
function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
  // http://tinyurl.com/clockwise-method
  // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp
  let edge = 0;
  let x1 = flatCoordinates[end - stride];
  let y1 = flatCoordinates[end - stride + 1];
  for (; offset < end; offset += stride) {
    const x2 = flatCoordinates[offset];
    const y2 = flatCoordinates[offset + 1];
    edge += (x2 - x1) * (y2 + y1);
    x1 = x2;
    y1 = y2;
  }
  return edge > 0;
}


/**
 * Determines if linear rings are oriented.  By default, left-hand orientation
 * is tested (first ring must be clockwise, remaining rings counter-clockwise).
 * To test for right-hand orientation, use the `opt_right` argument.
 *
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Array of end indexes.
 * @param {number} stride Stride.
 * @param {boolean=} opt_right Test for right-hand orientation
 *     (counter-clockwise exterior ring and clockwise interior rings).
 * @return {boolean} Rings are correctly oriented.
 */
function linearRingIsOriented(flatCoordinates, offset, ends, stride, opt_right) {
  const right = opt_right !== undefined ? opt_right : false;
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    const isClockwise = linearRingIsClockwise(
      flatCoordinates, offset, end, stride);
    if (i === 0) {
      if ((right && isClockwise) || (!right && !isClockwise)) {
        return false;
      }
    } else {
      if ((right && !isClockwise) || (!right && isClockwise)) {
        return false;
      }
    }
    offset = end;
  }
  return true;
}


/**
 * Determines if linear rings are oriented.  By default, left-hand orientation
 * is tested (first ring must be clockwise, remaining rings counter-clockwise).
 * To test for right-hand orientation, use the `opt_right` argument.
 *
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Array of array of end indexes.
 * @param {number} stride Stride.
 * @param {boolean=} opt_right Test for right-hand orientation
 *     (counter-clockwise exterior ring and clockwise interior rings).
 * @return {boolean} Rings are correctly oriented.
 */
function linearRingsAreOriented(flatCoordinates, offset, endss, stride, opt_right) {
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    if (!linearRingIsOriented(
      flatCoordinates, offset, endss[i], stride, opt_right)) {
      return false;
    }
  }
  return true;
}


/**
 * Orient coordinates in a flat array of linear rings.  By default, rings
 * are oriented following the left-hand rule (clockwise for exterior and
 * counter-clockwise for interior rings).  To orient according to the
 * right-hand rule, use the `opt_right` argument.
 *
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {boolean=} opt_right Follow the right-hand rule for orientation.
 * @return {number} End.
 */
function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
  const right = opt_right !== undefined ? opt_right : false;
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    const isClockwise = linearRingIsClockwise(
      flatCoordinates, offset, end, stride);
    const reverse = i === 0 ?
      (right && isClockwise) || (!right && !isClockwise) :
      (right && !isClockwise) || (!right && isClockwise);
    if (reverse) {
      coordinates(flatCoordinates, offset, end, stride);
    }
    offset = end;
  }
  return offset;
}


/**
 * Orient coordinates in a flat array of linear rings.  By default, rings
 * are oriented following the left-hand rule (clockwise for exterior and
 * counter-clockwise for interior rings).  To orient according to the
 * right-hand rule, use the `opt_right` argument.
 *
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Array of array of end indexes.
 * @param {number} stride Stride.
 * @param {boolean=} opt_right Follow the right-hand rule for orientation.
 * @return {number} End.
 */
function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    offset = orientLinearRings(
      flatCoordinates, offset, endss[i], stride, opt_right);
  }
  return offset;
}


/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42);
/* harmony import */ var _format_FormatType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(111);
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/**
 * @module ol/format/XMLFeature
 */






/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for XML feature formats.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/format/Feature}
 */
const XMLFeature = function() {

  /**
   * @type {XMLSerializer}
   * @private
   */
  this.xmlSerializer_ = new XMLSerializer();

  _format_Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(XMLFeature, _format_Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * @inheritDoc
 */
XMLFeature.prototype.getType = function() {
  return _format_FormatType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].XML;
};


/**
 * @inheritDoc
 */
XMLFeature.prototype.readFeature = function(source, opt_options) {
  if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* isDocument */ "g"])(source)) {
    return this.readFeatureFromDocument(/** @type {Document} */ (source), opt_options);
  } else if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* isNode */ "h"])(source)) {
    return this.readFeatureFromNode(/** @type {Node} */ (source), opt_options);
  } else if (typeof source === 'string') {
    const doc = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* parse */ "s"])(source);
    return this.readFeatureFromDocument(doc, opt_options);
  } else {
    return null;
  }
};


/**
 * @param {Document} doc Document.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.
 * @return {module:ol/Feature} Feature.
 */
XMLFeature.prototype.readFeatureFromDocument = function(doc, opt_options) {
  const features = this.readFeaturesFromDocument(doc, opt_options);
  if (features.length > 0) {
    return features[0];
  } else {
    return null;
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.
 * @return {module:ol/Feature} Feature.
 */
XMLFeature.prototype.readFeatureFromNode = function(node, opt_options) {
  return null; // not implemented
};


/**
 * @inheritDoc
 */
XMLFeature.prototype.readFeatures = function(source, opt_options) {
  if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* isDocument */ "g"])(source)) {
    return this.readFeaturesFromDocument(
      /** @type {Document} */ (source), opt_options);
  } else if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* isNode */ "h"])(source)) {
    return this.readFeaturesFromNode(/** @type {Node} */ (source), opt_options);
  } else if (typeof source === 'string') {
    const doc = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* parse */ "s"])(source);
    return this.readFeaturesFromDocument(doc, opt_options);
  } else {
    return [];
  }
};


/**
 * @param {Document} doc Document.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.
 * @protected
 * @return {Array.<module:ol/Feature>} Features.
 */
XMLFeature.prototype.readFeaturesFromDocument = function(doc, opt_options) {
  /** @type {Array.<module:ol/Feature>} */
  const features = [];
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(features, this.readFeaturesFromNode(n, opt_options));
    }
  }
  return features;
};


/**
 * @abstract
 * @param {Node} node Node.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.
 * @protected
 * @return {Array.<module:ol/Feature>} Features.
 */
XMLFeature.prototype.readFeaturesFromNode = function(node, opt_options) {};


/**
 * @inheritDoc
 */
XMLFeature.prototype.readGeometry = function(source, opt_options) {
  if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* isDocument */ "g"])(source)) {
    return this.readGeometryFromDocument(
      /** @type {Document} */ (source), opt_options);
  } else if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* isNode */ "h"])(source)) {
    return this.readGeometryFromNode(/** @type {Node} */ (source), opt_options);
  } else if (typeof source === 'string') {
    const doc = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* parse */ "s"])(source);
    return this.readGeometryFromDocument(doc, opt_options);
  } else {
    return null;
  }
};


/**
 * @param {Document} doc Document.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.
 * @protected
 * @return {module:ol/geom/Geometry} Geometry.
 */
XMLFeature.prototype.readGeometryFromDocument = function(doc, opt_options) {
  return null; // not implemented
};


/**
 * @param {Node} node Node.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.
 * @protected
 * @return {module:ol/geom/Geometry} Geometry.
 */
XMLFeature.prototype.readGeometryFromNode = function(node, opt_options) {
  return null; // not implemented
};


/**
 * @inheritDoc
 */
XMLFeature.prototype.readProjection = function(source) {
  if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* isDocument */ "g"])(source)) {
    return this.readProjectionFromDocument(/** @type {Document} */ (source));
  } else if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* isNode */ "h"])(source)) {
    return this.readProjectionFromNode(/** @type {Node} */ (source));
  } else if (typeof source === 'string') {
    const doc = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* parse */ "s"])(source);
    return this.readProjectionFromDocument(doc);
  } else {
    return null;
  }
};


/**
 * @param {Document} doc Document.
 * @protected
 * @return {module:ol/proj/Projection} Projection.
 */
XMLFeature.prototype.readProjectionFromDocument = function(doc) {
  return this.dataProjection;
};


/**
 * @param {Node} node Node.
 * @protected
 * @return {module:ol/proj/Projection} Projection.
 */
XMLFeature.prototype.readProjectionFromNode = function(node) {
  return this.dataProjection;
};


/**
 * @inheritDoc
 */
XMLFeature.prototype.writeFeature = function(feature, opt_options) {
  const node = this.writeFeatureNode(feature, opt_options);
  return this.xmlSerializer_.serializeToString(node);
};


/**
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @protected
 * @return {Node} Node.
 */
XMLFeature.prototype.writeFeatureNode = function(feature, opt_options) {
  return null; // not implemented
};


/**
 * @inheritDoc
 */
XMLFeature.prototype.writeFeatures = function(features, opt_options) {
  const node = this.writeFeaturesNode(features, opt_options);
  return this.xmlSerializer_.serializeToString(node);
};


/**
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {Node} Node.
 */
XMLFeature.prototype.writeFeaturesNode = function(features, opt_options) {
  return null; // not implemented
};


/**
 * @inheritDoc
 */
XMLFeature.prototype.writeGeometry = function(geometry, opt_options) {
  const node = this.writeGeometryNode(geometry, opt_options);
  return this.xmlSerializer_.serializeToString(node);
};


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {Node} Node.
 */
XMLFeature.prototype.writeGeometryNode = function(geometry, opt_options) {
  return null; // not implemented
};
/* harmony default export */ __webpack_exports__["a"] = (XMLFeature);


/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return defaultOrder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getSquaredTolerance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getTolerance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return renderFeature; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _ImageState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(35);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38);
/**
 * @module ol/renderer/vector
 */






/**
 * Tolerance for geometry simplification in device pixels.
 * @type {number}
 */
const SIMPLIFY_TOLERANCE = 0.5;


/**
 * @const
 * @type {Object.<module:ol/geom/GeometryType,
 *                function(module:ol/render/ReplayGroup, module:ol/geom/Geometry,
 *                         module:ol/style/Style, Object)>}
 */
const GEOMETRY_RENDERERS = {
  'Point': renderPointGeometry,
  'LineString': renderLineStringGeometry,
  'Polygon': renderPolygonGeometry,
  'MultiPoint': renderMultiPointGeometry,
  'MultiLineString': renderMultiLineStringGeometry,
  'MultiPolygon': renderMultiPolygonGeometry,
  'GeometryCollection': renderGeometryCollectionGeometry,
  'Circle': renderCircleGeometry
};


/**
 * @param {module:ol/Feature|module:ol/render/Feature} feature1 Feature 1.
 * @param {module:ol/Feature|module:ol/render/Feature} feature2 Feature 2.
 * @return {number} Order.
 */
function defaultOrder(feature1, feature2) {
  return Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature1) - Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature2);
}


/**
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @return {number} Squared pixel tolerance.
 */
function getSquaredTolerance(resolution, pixelRatio) {
  const tolerance = getTolerance(resolution, pixelRatio);
  return tolerance * tolerance;
}


/**
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @return {number} Pixel tolerance.
 */
function getTolerance(resolution, pixelRatio) {
  return SIMPLIFY_TOLERANCE * resolution / pixelRatio;
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/Circle} geometry Geometry.
 * @param {module:ol/style/Style} style Style.
 * @param {module:ol/Feature} feature Feature.
 */
function renderCircleGeometry(replayGroup, geometry, style, feature) {
  const fillStyle = style.getFill();
  const strokeStyle = style.getStroke();
  if (fillStyle || strokeStyle) {
    const circleReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CIRCLE);
    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
    circleReplay.drawCircle(geometry, feature);
  }
  const textStyle = style.getText();
  if (textStyle) {
    const textReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TEXT);
    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
    textReplay.drawText(geometry, feature);
  }
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 * @param {module:ol/style/Style} style Style.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {function(this: T, module:ol/events/Event)} listener Listener function.
 * @param {T} thisArg Value to use as `this` when executing `listener`.
 * @return {boolean} `true` if style is loading.
 * @template T
 */
function renderFeature(replayGroup, feature, style, squaredTolerance, listener, thisArg) {
  let loading = false;
  const imageStyle = style.getImage();
  if (imageStyle) {
    let imageState = imageStyle.getImageState();
    if (imageState == _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED || imageState == _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].ERROR) {
      imageStyle.unlistenImageChange(listener, thisArg);
    } else {
      if (imageState == _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].IDLE) {
        imageStyle.load();
      }
      imageState = imageStyle.getImageState();
      imageStyle.listenImageChange(listener, thisArg);
      loading = true;
    }
  }
  renderFeatureInternal(replayGroup, feature, style, squaredTolerance);

  return loading;
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 * @param {module:ol/style/Style} style Style.
 * @param {number} squaredTolerance Squared tolerance.
 */
function renderFeatureInternal(replayGroup, feature, style, squaredTolerance) {
  const geometry = style.getGeometryFunction()(feature);
  if (!geometry) {
    return;
  }
  const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
  const renderer = style.getRenderer();
  if (renderer) {
    renderGeometry(replayGroup, simplifiedGeometry, style, feature);
  } else {
    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
    geometryRenderer(replayGroup, simplifiedGeometry, style, feature);
  }
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/style/Style} style Style.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
function renderGeometry(replayGroup, geometry, style, feature) {
  if (geometry.getType() == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].GEOMETRY_COLLECTION) {
    const geometries = /** @type {module:ol/geom/GeometryCollection} */ (geometry).getGeometries();
    for (let i = 0, ii = geometries.length; i < ii; ++i) {
      renderGeometry(replayGroup, geometries[i], style, feature);
    }
    return;
  }
  const replay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].DEFAULT);
  replay.drawCustom(/** @type {module:ol/geom/SimpleGeometry} */ (geometry), feature, style.getRenderer());
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/GeometryCollection} geometry Geometry.
 * @param {module:ol/style/Style} style Style.
 * @param {module:ol/Feature} feature Feature.
 */
function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature) {
  const geometries = geometry.getGeometriesArray();
  let i, ii;
  for (i = 0, ii = geometries.length; i < ii; ++i) {
    const geometryRenderer =
        GEOMETRY_RENDERERS[geometries[i].getType()];
    geometryRenderer(replayGroup, geometries[i], style, feature);
  }
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/LineString|module:ol/render/Feature} geometry Geometry.
 * @param {module:ol/style/Style} style Style.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
function renderLineStringGeometry(replayGroup, geometry, style, feature) {
  const strokeStyle = style.getStroke();
  if (strokeStyle) {
    const lineStringReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].LINE_STRING);
    lineStringReplay.setFillStrokeStyle(null, strokeStyle);
    lineStringReplay.drawLineString(geometry, feature);
  }
  const textStyle = style.getText();
  if (textStyle) {
    const textReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TEXT);
    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
    textReplay.drawText(geometry, feature);
  }
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/MultiLineString|module:ol/render/Feature} geometry Geometry.
 * @param {module:ol/style/Style} style Style.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
function renderMultiLineStringGeometry(replayGroup, geometry, style, feature) {
  const strokeStyle = style.getStroke();
  if (strokeStyle) {
    const lineStringReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].LINE_STRING);
    lineStringReplay.setFillStrokeStyle(null, strokeStyle);
    lineStringReplay.drawMultiLineString(geometry, feature);
  }
  const textStyle = style.getText();
  if (textStyle) {
    const textReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TEXT);
    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
    textReplay.drawText(geometry, feature);
  }
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/MultiPolygon} geometry Geometry.
 * @param {module:ol/style/Style} style Style.
 * @param {module:ol/Feature} feature Feature.
 */
function renderMultiPolygonGeometry(replayGroup, geometry, style, feature) {
  const fillStyle = style.getFill();
  const strokeStyle = style.getStroke();
  if (strokeStyle || fillStyle) {
    const polygonReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POLYGON);
    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
    polygonReplay.drawMultiPolygon(geometry, feature);
  }
  const textStyle = style.getText();
  if (textStyle) {
    const textReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TEXT);
    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
    textReplay.drawText(geometry, feature);
  }
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/Point|module:ol/render/Feature} geometry Geometry.
 * @param {module:ol/style/Style} style Style.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
function renderPointGeometry(replayGroup, geometry, style, feature) {
  const imageStyle = style.getImage();
  if (imageStyle) {
    if (imageStyle.getImageState() != _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED) {
      return;
    }
    const imageReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].IMAGE);
    imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));
    imageReplay.drawPoint(geometry, feature);
  }
  const textStyle = style.getText();
  if (textStyle) {
    const textReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TEXT);
    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));
    textReplay.drawText(geometry, feature);
  }
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/MultiPoint|module:ol/render/Feature} geometry Geometry.
 * @param {module:ol/style/Style} style Style.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
function renderMultiPointGeometry(replayGroup, geometry, style, feature) {
  const imageStyle = style.getImage();
  if (imageStyle) {
    if (imageStyle.getImageState() != _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED) {
      return;
    }
    const imageReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].IMAGE);
    imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));
    imageReplay.drawMultiPoint(geometry, feature);
  }
  const textStyle = style.getText();
  if (textStyle) {
    const textReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TEXT);
    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));
    textReplay.drawText(geometry, feature);
  }
}


/**
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/Polygon|module:ol/render/Feature} geometry Geometry.
 * @param {module:ol/style/Style} style Style.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
function renderPolygonGeometry(replayGroup, geometry, style, feature) {
  const fillStyle = style.getFill();
  const strokeStyle = style.getStroke();
  if (fillStyle || strokeStyle) {
    const polygonReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POLYGON);
    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
    polygonReplay.drawPolygon(geometry, feature);
  }
  const textStyle = style.getText();
  if (textStyle) {
    const textReplay = replayGroup.getReplay(style.getZIndex(), _render_ReplayType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].TEXT);
    textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
    textReplay.drawText(geometry, feature);
  }
}


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/MapProperty
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  LAYERGROUP: 'layergroup',
  SIZE: 'size',
  TARGET: 'target',
  VIEW: 'view'
});


/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _LayerType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60);
/* harmony import */ var _layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66);
/**
 * @module ol/layer/Image
 */





/**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage
 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
 * use {@link module:ol/Map#addLayer}.
 * @property {module:ol/source/Image} [source] Source for this layer.
 */


/**
 * @classdesc
 * Server-rendered images that are available for arbitrary extents and
 * resolutions.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @constructor
 * @extends {module:ol/layer/Layer}
 * @fires module:ol/render/Event~RenderEvent
 * @param {module:ol/layer/Image~Options=} opt_options Layer options.
 * @api
 */
const ImageLayer = function(opt_options) {
  const options = opt_options ? opt_options : {};
  _layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this,  /** @type {module:ol/layer/Layer~Options} */ (options));

  /**
   * The layer type.
   * @protected
   * @type {module:ol/LayerType}
   */
  this.type = _LayerType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].IMAGE;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(ImageLayer, _layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * Return the associated {@link module:ol/source/Image source} of the image layer.
 * @function
 * @return {module:ol/source/Image} Source.
 * @api
 */
ImageLayer.prototype.getSource;
/* harmony default export */ __webpack_exports__["a"] = (ImageLayer);


/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/tileurlfunction.js
var tileurlfunction = __webpack_require__(84);

// EXTERNAL MODULE: ../src/ol/array.js
var ol_array = __webpack_require__(16);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/obj.js
var obj = __webpack_require__(15);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// EXTERNAL MODULE: ../src/ol/source/TileImage.js + 1 modules
var TileImage = __webpack_require__(65);

// CONCATENATED MODULE: ../src/ol/source/WMTSRequestEncoding.js
/**
 * @module ol/source/WMTSRequestEncoding
 */

/**
 * Request encoding. One of 'KVP', 'REST'.
 * @enum {string}
 */
/* harmony default export */ var WMTSRequestEncoding = ({
  KVP: 'KVP',  // see spec §8
  REST: 'REST' // see spec §10
});

// EXTERNAL MODULE: ../src/ol/tilegrid/WMTS.js
var WMTS = __webpack_require__(159);

// EXTERNAL MODULE: ../src/ol/uri.js
var uri = __webpack_require__(115);

// CONCATENATED MODULE: ../src/ol/source/WMTS.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return optionsFromCapabilities; });
/**
 * @module ol/source/WMTS
 */











/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=2048] Cache size.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {module:ol/tilegrid/WMTS} tileGrid Tile grid.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {boolean} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {module:ol/source/WMTSRequestEncoding|string} [requestEncoding='KVP'] Request encoding.
 * @property {string} layer Layer name as advertised in the WMTS capabilities.
 * @property {string} style Style name as advertised in the WMTS capabilities.
 * @property {module:ol/ImageTile~TileClass} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.
 * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
 * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
 * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
 * should be set to `2`.
 * @property {string} [version='image/jpeg'] Image format.
 * @property {string} [format='1.0.0'] WMTS version.
 * @property {string} matrixSet Matrix set.
 * @property {!Object} [dimensions] Additional "dimensions" for tile requests.
 * This is an object with properties named like the advertised WMTS dimensions.
 * @property {string} [url]  A URL for the service.
 * For the RESTful request encoding, this is a URL
 * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,
 * for example `subdomain{a-f}.domain.com`, may be used instead of defining
 * each one separately in the `urls` option.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {Array.<string>} [urls] An array of URLs.
 * Requests will be distributed among the URLs in this array.
 * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.
 * @property {number} [transition] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 */


/**
 * @classdesc
 * Layer source for tile data from WMTS servers.
 *
 * @constructor
 * @extends {module:ol/source/TileImage}
 * @param {module:ol/source/WMTS~Options=} options WMTS options.
 * @api
 */
const WMTS_WMTS = function(options) {

  // TODO: add support for TileMatrixLimits

  /**
   * @private
   * @type {string}
   */
  this.version_ = options.version !== undefined ? options.version : '1.0.0';

  /**
   * @private
   * @type {string}
   */
  this.format_ = options.format !== undefined ? options.format : 'image/jpeg';

  /**
   * @private
   * @type {!Object}
   */
  this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};

  /**
   * @private
   * @type {string}
   */
  this.layer_ = options.layer;

  /**
   * @private
   * @type {string}
   */
  this.matrixSet_ = options.matrixSet;

  /**
   * @private
   * @type {string}
   */
  this.style_ = options.style;

  let urls = options.urls;
  if (urls === undefined && options.url !== undefined) {
    urls = Object(tileurlfunction["c" /* expandUrl */])(options.url);
  }

  // FIXME: should we guess this requestEncoding from options.url(s)
  //        structure? that would mean KVP only if a template is not provided.

  /**
   * @private
   * @type {module:ol/source/WMTSRequestEncoding}
   */
  this.requestEncoding_ = options.requestEncoding !== undefined ?
    /** @type {module:ol/source/WMTSRequestEncoding} */ (options.requestEncoding) :
    WMTSRequestEncoding.KVP;

  const requestEncoding = this.requestEncoding_;

  // FIXME: should we create a default tileGrid?
  // we could issue a getCapabilities xhr to retrieve missing configuration
  const tileGrid = options.tileGrid;

  // context property names are lower case to allow for a case insensitive
  // replacement as some services use different naming conventions
  const context = {
    'layer': this.layer_,
    'style': this.style_,
    'tilematrixset': this.matrixSet_
  };

  if (requestEncoding == WMTSRequestEncoding.KVP) {
    Object(obj["a" /* assign */])(context, {
      'Service': 'WMTS',
      'Request': 'GetTile',
      'Version': this.version_,
      'Format': this.format_
    });
  }

  const dimensions = this.dimensions_;

  /**
   * @param {string} template Template.
   * @return {module:ol/Tile~UrlFunction} Tile URL function.
   * @private
   */
  this.createFromWMTSTemplate_ = function(template) {

    // TODO: we may want to create our own appendParams function so that params
    // order conforms to wmts spec guidance, and so that we can avoid to escape
    // special template params

    template = (requestEncoding == WMTSRequestEncoding.KVP) ?
      Object(uri["a" /* appendParams */])(template, context) :
      template.replace(/\{(\w+?)\}/g, function(m, p) {
        return (p.toLowerCase() in context) ? context[p.toLowerCase()] : m;
      });

    return (
      /**
       * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {module:ol/proj/Projection} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        } else {
          const localContext = {
            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),
            'TileCol': tileCoord[1],
            'TileRow': -tileCoord[2] - 1
          };
          Object(obj["a" /* assign */])(localContext, dimensions);
          let url = template;
          if (requestEncoding == WMTSRequestEncoding.KVP) {
            url = Object(uri["a" /* appendParams */])(url, localContext);
          } else {
            url = url.replace(/\{(\w+?)\}/g, function(m, p) {
              return localContext[p];
            });
          }
          return url;
        }
      }
    );
  };

  const tileUrlFunction = (urls && urls.length > 0) ?
    Object(tileurlfunction["b" /* createFromTileUrlFunctions */])(urls.map(this.createFromWMTSTemplate_)) : tileurlfunction["d" /* nullTileUrlFunction */];

  TileImage["a" /* default */].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize,
    crossOrigin: options.crossOrigin,
    projection: options.projection,
    reprojectionErrorThreshold: options.reprojectionErrorThreshold,
    tileClass: options.tileClass,
    tileGrid: tileGrid,
    tileLoadFunction: options.tileLoadFunction,
    tilePixelRatio: options.tilePixelRatio,
    tileUrlFunction: tileUrlFunction,
    urls: urls,
    wrapX: options.wrapX !== undefined ? options.wrapX : false,
    transition: options.transition
  });

  this.setKey(this.getKeyForDimensions_());

};

Object(util["c" /* inherits */])(WMTS_WMTS, TileImage["a" /* default */]);

/**
 * Set the URLs to use for requests.
 * URLs may contain OCG conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.
 * @override
 */
WMTS_WMTS.prototype.setUrls = function(urls) {
  this.urls = urls;
  const key = urls.join('\n');
  this.setTileUrlFunction(this.fixedTileUrlFunction ?
    this.fixedTileUrlFunction.bind(this) :
    Object(tileurlfunction["b" /* createFromTileUrlFunctions */])(urls.map(this.createFromWMTSTemplate_.bind(this))), key);
};

/**
 * Get the dimensions, i.e. those passed to the constructor through the
 * "dimensions" option, and possibly updated using the updateDimensions
 * method.
 * @return {!Object} Dimensions.
 * @api
 */
WMTS_WMTS.prototype.getDimensions = function() {
  return this.dimensions_;
};


/**
 * Return the image format of the WMTS source.
 * @return {string} Format.
 * @api
 */
WMTS_WMTS.prototype.getFormat = function() {
  return this.format_;
};


/**
 * Return the layer of the WMTS source.
 * @return {string} Layer.
 * @api
 */
WMTS_WMTS.prototype.getLayer = function() {
  return this.layer_;
};


/**
 * Return the matrix set of the WMTS source.
 * @return {string} MatrixSet.
 * @api
 */
WMTS_WMTS.prototype.getMatrixSet = function() {
  return this.matrixSet_;
};


/**
 * Return the request encoding, either "KVP" or "REST".
 * @return {module:ol/source/WMTSRequestEncoding} Request encoding.
 * @api
 */
WMTS_WMTS.prototype.getRequestEncoding = function() {
  return this.requestEncoding_;
};


/**
 * Return the style of the WMTS source.
 * @return {string} Style.
 * @api
 */
WMTS_WMTS.prototype.getStyle = function() {
  return this.style_;
};


/**
 * Return the version of the WMTS source.
 * @return {string} Version.
 * @api
 */
WMTS_WMTS.prototype.getVersion = function() {
  return this.version_;
};


/**
 * @private
 * @return {string} The key for the current dimensions.
 */
WMTS_WMTS.prototype.getKeyForDimensions_ = function() {
  let i = 0;
  const res = [];
  for (const key in this.dimensions_) {
    res[i++] = key + '-' + this.dimensions_[key];
  }
  return res.join('/');
};


/**
 * Update the dimensions.
 * @param {Object} dimensions Dimensions.
 * @api
 */
WMTS_WMTS.prototype.updateDimensions = function(dimensions) {
  Object(obj["a" /* assign */])(this.dimensions_, dimensions);
  this.setKey(this.getKeyForDimensions_());
};


/**
 * Generate source options from a capabilities object.
 * @param {Object} wmtsCap An object representing the capabilities document.
 * @param {!Object} config Configuration properties for the layer.  Defaults for
 *                  the layer will apply if not provided.
 *
 * Required config properties:
 *  - layer - {string} The layer identifier.
 *
 * Optional config properties:
 *  - matrixSet - {string} The matrix set identifier, required if there is
 *       more than one matrix set in the layer capabilities.
 *  - projection - {string} The desired CRS when no matrixSet is specified.
 *       eg: "EPSG:3857". If the desired projection is not available,
 *       an error is thrown.
 *  - requestEncoding - {string} url encoding format for the layer. Default is
 *       the first tile url format found in the GetCapabilities response.
 *  - style - {string} The name of the style
 *  - format - {string} Image format for the layer. Default is the first
 *       format returned in the GetCapabilities response.
 *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.
 * @return {?module:ol/source/WMTS~Options} WMTS source options object or `null` if the layer was not found.
 * @api
 */
function optionsFromCapabilities(wmtsCap, config) {
  const layers = wmtsCap['Contents']['Layer'];
  const l = Object(ol_array["d" /* find */])(layers, function(elt, index, array) {
    return elt['Identifier'] == config['layer'];
  });
  if (l === null) {
    return null;
  }
  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];
  let idx;
  if (l['TileMatrixSetLink'].length > 1) {
    if ('projection' in config) {
      idx = Object(ol_array["e" /* findIndex */])(l['TileMatrixSetLink'],
        function(elt, index, array) {
          const tileMatrixSet = Object(ol_array["d" /* find */])(tileMatrixSets, function(el) {
            return el['Identifier'] == elt['TileMatrixSet'];
          });
          const supportedCRS = tileMatrixSet['SupportedCRS'];
          const proj1 = Object(proj["h" /* get */])(supportedCRS.replace(/urn:ogc:def:crs:(\w+):(.*:)?(\w+)$/, '$1:$3')) ||
                Object(proj["h" /* get */])(supportedCRS);
          const proj2 = Object(proj["h" /* get */])(config['projection']);
          if (proj1 && proj2) {
            return Object(proj["f" /* equivalent */])(proj1, proj2);
          } else {
            return supportedCRS == config['projection'];
          }
        });
    } else {
      idx = Object(ol_array["e" /* findIndex */])(l['TileMatrixSetLink'],
        function(elt, index, array) {
          return elt['TileMatrixSet'] == config['matrixSet'];
        });
    }
  } else {
    idx = 0;
  }
  if (idx < 0) {
    idx = 0;
  }
  const matrixSet = /** @type {string} */
    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);
  const matrixLimits = /** @type {Array.<Object>} */
    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);

  let format = /** @type {string} */ (l['Format'][0]);
  if ('format' in config) {
    format = config['format'];
  }
  idx = Object(ol_array["e" /* findIndex */])(l['Style'], function(elt, index, array) {
    if ('style' in config) {
      return elt['Title'] == config['style'];
    } else {
      return elt['isDefault'];
    }
  });
  if (idx < 0) {
    idx = 0;
  }
  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);

  const dimensions = {};
  if ('Dimension' in l) {
    l['Dimension'].forEach(function(elt, index, array) {
      const key = elt['Identifier'];
      let value = elt['Default'];
      if (value === undefined) {
        value = elt['Value'][0];
      }
      dimensions[key] = value;
    });
  }

  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];
  const matrixSetObj = Object(ol_array["d" /* find */])(matrixSets, function(elt, index, array) {
    return elt['Identifier'] == matrixSet;
  });

  let projection;
  const code = matrixSetObj['SupportedCRS'];
  if (code) {
    projection = Object(proj["h" /* get */])(code.replace(/urn:ogc:def:crs:(\w+):(.*:)?(\w+)$/, '$1:$3')) ||
        Object(proj["h" /* get */])(code);
  }
  if ('projection' in config) {
    const projConfig = Object(proj["h" /* get */])(config['projection']);
    if (projConfig) {
      if (!projection || Object(proj["f" /* equivalent */])(projConfig, projection)) {
        projection = projConfig;
      }
    }
  }

  const wgs84BoundingBox = l['WGS84BoundingBox'];
  let extent, wrapX;
  if (wgs84BoundingBox !== undefined) {
    const wgs84ProjectionExtent = Object(proj["h" /* get */])('EPSG:4326').getExtent();
    wrapX = (wgs84BoundingBox[0] == wgs84ProjectionExtent[0] &&
        wgs84BoundingBox[2] == wgs84ProjectionExtent[2]);
    extent = Object(proj["o" /* transformExtent */])(
      wgs84BoundingBox, 'EPSG:4326', projection);
    const projectionExtent = projection.getExtent();
    if (projectionExtent) {
      // If possible, do a sanity check on the extent - it should never be
      // bigger than the validity extent of the projection of a matrix set.
      if (!Object(ol_extent["g" /* containsExtent */])(projectionExtent, extent)) {
        extent = undefined;
      }
    }
  }

  const tileGrid = Object(WMTS["a" /* createFromCapabilitiesMatrixSet */])(matrixSetObj, extent, matrixLimits);

  /** @type {!Array.<string>} */
  const urls = [];
  let requestEncoding = config['requestEncoding'];
  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';

  if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {
    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];

    for (let i = 0, ii = gets.length; i < ii; ++i) {
      if (gets[i]['Constraint']) {
        const constraint = Object(ol_array["d" /* find */])(gets[i]['Constraint'], function(element) {
          return element['name'] == 'GetEncoding';
        });
        const encodings = constraint['AllowedValues']['Value'];

        if (requestEncoding === '') {
          // requestEncoding not provided, use the first encoding from the list
          requestEncoding = encodings[0];
        }
        if (requestEncoding === WMTSRequestEncoding.KVP) {
          if (Object(ol_array["f" /* includes */])(encodings, WMTSRequestEncoding.KVP)) {
            urls.push(/** @type {string} */ (gets[i]['href']));
          }
        } else {
          break;
        }
      } else if (gets[i]['href']) {
        requestEncoding = WMTSRequestEncoding.KVP;
        urls.push(/** @type {string} */ (gets[i]['href']));
      }
    }
  }
  if (urls.length === 0) {
    requestEncoding = WMTSRequestEncoding.REST;
    l['ResourceURL'].forEach(function(element) {
      if (element['resourceType'] === 'tile') {
        format = element['format'];
        urls.push(/** @type {string} */ (element['template']));
      }
    });
  }

  return {
    urls: urls,
    layer: config['layer'],
    matrixSet: matrixSet,
    format: format,
    projection: projection,
    requestEncoding: requestEncoding,
    tileGrid: tileGrid,
    style: style,
    dimensions: dimensions,
    wrapX: wrapX,
    crossOrigin: config['crossOrigin']
  };
}

/* harmony default export */ var source_WMTS = __webpack_exports__["a"] = (WMTS_WMTS);


/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return asColorLike; });
/* unused harmony export isColorLike */
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(77);
/**
 * @module ol/colorlike
 */



/**
 * A type accepted by CanvasRenderingContext2D.fillStyle
 * or CanvasRenderingContext2D.strokeStyle.
 * Represents a color, pattern, or gradient. The origin for patterns and
 * gradients as fill style is an increment of 512 css pixels from map coordinate
 * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
 * must be a factor of two (2, 4, 8, ..., 512).
 *
 * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
 * @api
 */


/**
 * @param {module:ol/color~Color|module:ol/colorlike~ColorLike} color Color.
 * @return {module:ol/colorlike~ColorLike} The color as an {@link ol/colorlike~ColorLike}.
 * @api
 */
function asColorLike(color) {
  if (isColorLike(color)) {
    return /** @type {string|CanvasPattern|CanvasGradient} */ (color);
  } else {
    return Object(_color_js__WEBPACK_IMPORTED_MODULE_0__[/* toString */ "c"])(/** @type {module:ol/color~Color} */ (color));
  }
}


/**
 * @param {?} color The value that is potentially an {@link ol/colorlike~ColorLike}.
 * @return {boolean} The color is an {@link ol/colorlike~ColorLike}.
 */
function isColorLike(color) {
  return (
    typeof color === 'string' ||
    color instanceof CanvasPattern ||
    color instanceof CanvasGradient
  );
}


/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/style/IconAnchorUnits
 */

/**
 * Icon anchor units. One of 'fraction', 'pixels'.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  FRACTION: 'fraction',
  PIXELS: 'pixels'
});


/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export handleEvent */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createRegularPolygon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createBox; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(40);
/* harmony import */ var _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(92);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(31);
/* harmony import */ var _coordinate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(34);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(36);
/* harmony import */ var _events_condition_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(37);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(3);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(29);
/* harmony import */ var _geom_Circle_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(172);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(9);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(41);
/* harmony import */ var _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(71);
/* harmony import */ var _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(73);
/* harmony import */ var _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(82);
/* harmony import */ var _pointer_MouseSource_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(168);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(30);
/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(39);
/* harmony import */ var _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(44);
/* harmony import */ var _interaction_Property_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(176);
/* harmony import */ var _layer_Vector_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(24);
/* harmony import */ var _source_Vector_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(13);
/* harmony import */ var _style_Style_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(75);
/**
 * @module ol/interaction/Draw
 */




























/**
 * @typedef {Object} Options
 * @property {module:ol/geom/GeometryType} type Geometry type of
 * the geometries being drawn with this instance.
 * @property {number} [clickTolerance=6] The maximum distance in pixels between
 * "down" and "up" for a "up" event to be considered a "click" event and
 * actually add a point/vertex to the geometry being drawn.  The default of `6`
 * was chosen for the draw interaction to behave correctly on mouse as well as
 * on touch devices.
 * @property {module:ol/Collection.<module:ol/Feature>} [features]
 * Destination collection for the drawn features.
 * @property {module:ol/source/Vector} [source] Destination source for
 * the drawn features.
 * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown
 * before the current vertex can be dragged to its exact position.
 * @property {number} [snapTolerance=12] Pixel distance for snapping to the
 * drawing finish.
 * @property {boolean} [stopClick=false] Stop click, singleclick, and
 * doubleclick events from firing during drawing.
 * @property {number} [maxPoints] The number of points that can be drawn before
 * a polygon ring or line string is finished. By default there is no
 * restriction.
 * @property {number} [minPoints] The number of points that must be drawn
 * before a polygon ring or line string can be finished. Default is `3` for
 * polygon rings and `2` for line strings.
 * @property {module:ol/events/condition~Condition} [finishCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether the drawing can be finished.
 * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style]
 * Style for sketch features.
 * @property {module:ol/interaction/Draw~GeometryFunction} [geometryFunction]
 * Function that is called when a geometry's coordinates are updated.
 * @property {string} [geometryName] Geometry name to use for features created
 * by the draw interaction.
 * @property {module:ol/events/condition~Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,
 * adds a vertex or deactivates freehand drawing.
 * @property {boolean} [freehand=false] Operate in freehand mode for lines,
 * polygons, and circles.  This makes the interaction always operate in freehand
 * mode and takes precedence over any `freehandCondition` option.
 * @property {module:ol/events/condition~Condition} [freehandCondition]
 * Condition that activates freehand drawing for lines and polygons. This
 * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
 * returns a boolean to indicate whether that event should be handled. The
 * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the
 * Shift key activates freehand drawing.
 * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
 * overlay.
 */


/**
 * Function that takes an array of coordinates and an optional existing geometry as
 * arguments, and returns a geometry. The optional existing geometry is the
 * geometry that is returned when the function is called without a second
 * argument.
 * @typedef {function(!Array.<module:ol/coordinate~Coordinate>, module:ol/geom/SimpleGeometry=):
 *     module:ol/geom/SimpleGeometry} GeometryFunction
 */


/**
 * Draw mode.  This collapses multi-part geometry types with their single-part
 * cousins.
 * @enum {string}
 */
const Mode = {
  POINT: 'Point',
  LINE_STRING: 'LineString',
  POLYGON: 'Polygon',
  CIRCLE: 'Circle'
};


/**
 * @enum {string}
 */
const DrawEventType = {
  /**
   * Triggered upon feature draw start
   * @event module:ol/interaction/Draw~DrawEvent#drawstart
   * @api
   */
  DRAWSTART: 'drawstart',
  /**
   * Triggered upon feature draw end
   * @event module:ol/interaction/Draw~DrawEvent#drawend
   * @api
   */
  DRAWEND: 'drawend'
};


/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are
 * instances of this type.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {module:ol/interaction/Draw~DrawEventType} type Type.
 * @param {module:ol/Feature} feature The feature drawn.
 */
const DrawEvent = function(type, feature) {

  _events_Event_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].call(this, type);

  /**
   * The feature being drawn.
   * @type {module:ol/Feature}
   * @api
   */
  this.feature = feature;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(DrawEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"]);


/**
 * @classdesc
 * Interaction for drawing feature geometries.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @fires module:ol/interaction/Draw~DrawEvent
 * @param {module:ol/interaction/Draw~Options} options Options.
 * @api
 */
const Draw = function(options) {

  _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "b"].call(this, {
    handleDownEvent: handleDownEvent,
    handleEvent: handleEvent,
    handleUpEvent: handleUpEvent
  });

  /**
   * @type {boolean}
   * @private
   */
  this.shouldHandle_ = false;

  /**
   * @type {module:ol~Pixel}
   * @private
   */
  this.downPx_ = null;

  /**
   * @type {number|undefined}
   * @private
   */
  this.downTimeout_;

  /**
   * @type {number|undefined}
   * @private
   */
  this.lastDragTime_;

  /**
   * @type {boolean}
   * @private
   */
  this.freehand_ = false;

  /**
   * Target source for drawn features.
   * @type {module:ol/source/Vector}
   * @private
   */
  this.source_ = options.source ? options.source : null;

  /**
   * Target collection for drawn features.
   * @type {module:ol/Collection.<module:ol/Feature>}
   * @private
   */
  this.features_ = options.features ? options.features : null;

  /**
   * Pixel distance for snapping.
   * @type {number}
   * @private
   */
  this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;

  /**
   * Geometry type.
   * @type {module:ol/geom/GeometryType}
   * @private
   */
  this.type_ = /** @type {module:ol/geom/GeometryType} */ (options.type);

  /**
   * Drawing mode (derived from geometry type.
   * @type {module:ol/interaction/Draw~Mode}
   * @private
   */
  this.mode_ = getMode(this.type_);

  /**
   * Stop click, singleclick, and doubleclick events from firing during drawing.
   * Default is `false`.
   * @type {boolean}
   * @private
   */
  this.stopClick_ = !!options.stopClick;

  /**
   * The number of points that must be drawn before a polygon ring or line
   * string can be finished.  The default is 3 for polygon rings and 2 for
   * line strings.
   * @type {number}
   * @private
   */
  this.minPoints_ = options.minPoints ?
    options.minPoints :
    (this.mode_ === Mode.POLYGON ? 3 : 2);

  /**
   * The number of points that can be drawn before a polygon ring or line string
   * is finished. The default is no restriction.
   * @type {number}
   * @private
   */
  this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;

  /**
   * A function to decide if a potential finish coordinate is permissible
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.finishCondition_ = options.finishCondition ? options.finishCondition : _functions_js__WEBPACK_IMPORTED_MODULE_11__[/* TRUE */ "b"];

  let geometryFunction = options.geometryFunction;
  if (!geometryFunction) {
    if (this.type_ === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].CIRCLE) {
      /**
       * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates
       *     The coordinates.
       * @param {module:ol/geom/SimpleGeometry=} opt_geometry Optional geometry.
       * @return {module:ol/geom/SimpleGeometry} A geometry.
       */
      geometryFunction = function(coordinates, opt_geometry) {
        const circle = opt_geometry ? /** @type {module:ol/geom/Circle} */ (opt_geometry) :
          new _geom_Circle_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"]([NaN, NaN]);
        const squaredLength = Object(_coordinate_js__WEBPACK_IMPORTED_MODULE_6__[/* squaredDistance */ "j"])(
          coordinates[0], coordinates[1]);
        circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));
        return circle;
      };
    } else {
      let Constructor;
      const mode = this.mode_;
      if (mode === Mode.POINT) {
        Constructor = _geom_Point_js__WEBPACK_IMPORTED_MODULE_19__[/* default */ "a"];
      } else if (mode === Mode.LINE_STRING) {
        Constructor = _geom_LineString_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"];
      } else if (mode === Mode.POLYGON) {
        Constructor = _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_20__[/* default */ "b"];
      }
      /**
       * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates
       *     The coordinates.
       * @param {module:ol/geom/SimpleGeometry=} opt_geometry Optional geometry.
       * @return {module:ol/geom/SimpleGeometry} A geometry.
       */
      geometryFunction = function(coordinates, opt_geometry) {
        let geometry = opt_geometry;
        if (geometry) {
          if (mode === Mode.POLYGON) {
            if (coordinates[0].length) {
              // Add a closing coordinate to match the first
              geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);
            } else {
              geometry.setCoordinates([]);
            }
          } else {
            geometry.setCoordinates(coordinates);
          }
        } else {
          geometry = new Constructor(coordinates);
        }
        return geometry;
      };
    }
  }

  /**
   * @type {module:ol/interaction/Draw~GeometryFunction}
   * @private
   */
  this.geometryFunction_ = geometryFunction;

  /**
   * @type {number}
   * @private
   */
  this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;

  /**
   * Finish coordinate for the feature (first point for polygons, last point for
   * linestrings).
   * @type {module:ol/coordinate~Coordinate}
   * @private
   */
  this.finishCoordinate_ = null;

  /**
   * Sketch feature.
   * @type {module:ol/Feature}
   * @private
   */
  this.sketchFeature_ = null;

  /**
   * Sketch point.
   * @type {module:ol/Feature}
   * @private
   */
  this.sketchPoint_ = null;

  /**
   * Sketch coordinates. Used when drawing a line or polygon.
   * @type {module:ol/coordinate~Coordinate|Array.<module:ol/coordinate~Coordinate>|Array.<Array.<module:ol/coordinate~Coordinate>>}
   * @private
   */
  this.sketchCoords_ = null;

  /**
   * Sketch line. Used when drawing polygon.
   * @type {module:ol/Feature}
   * @private
   */
  this.sketchLine_ = null;

  /**
   * Sketch line coordinates. Used when drawing a polygon or circle.
   * @type {Array.<module:ol/coordinate~Coordinate>}
   * @private
   */
  this.sketchLineCoords_ = null;

  /**
   * Squared tolerance for handling up events.  If the squared distance
   * between a down and up event is greater than this tolerance, up events
   * will not be handled.
   * @type {number}
   * @private
   */
  this.squaredClickTolerance_ = options.clickTolerance ?
    options.clickTolerance * options.clickTolerance : 36;

  /**
   * Draw overlay where our sketch features are drawn.
   * @type {module:ol/layer/Vector}
   * @private
   */
  this.overlay_ = new _layer_Vector_js__WEBPACK_IMPORTED_MODULE_23__[/* default */ "a"]({
    source: new _source_Vector_js__WEBPACK_IMPORTED_MODULE_24__[/* default */ "b"]({
      useSpatialIndex: false,
      wrapX: options.wrapX ? options.wrapX : false
    }),
    style: options.style ? options.style :
      getDefaultStyleFunction(),
    updateWhileInteracting: true
  });

  /**
   * Name of the geometry attribute for newly created features.
   * @type {string|undefined}
   * @private
   */
  this.geometryName_ = options.geometryName;

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition ? options.condition : _events_condition_js__WEBPACK_IMPORTED_MODULE_9__[/* noModifierKeys */ "i"];

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.freehandCondition_;
  if (options.freehand) {
    this.freehandCondition_ = _events_condition_js__WEBPACK_IMPORTED_MODULE_9__[/* always */ "c"];
  } else {
    this.freehandCondition_ = options.freehandCondition ?
      options.freehandCondition : _events_condition_js__WEBPACK_IMPORTED_MODULE_9__[/* shiftKeyOnly */ "m"];
  }

  Object(_events_js__WEBPACK_IMPORTED_MODULE_7__[/* listen */ "a"])(this,
    Object(_Object_js__WEBPACK_IMPORTED_MODULE_5__[/* getChangeEventType */ "b"])(_interaction_Property_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"].ACTIVE),
    this.updateState_, this);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Draw, _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "b"]);


/**
 * @return {module:ol/style/Style~StyleFunction} Styles.
 */
function getDefaultStyleFunction() {
  const styles = Object(_style_Style_js__WEBPACK_IMPORTED_MODULE_25__[/* createEditingStyle */ "b"])();
  return function(feature, resolution) {
    return styles[feature.getGeometry().getType()];
  };
}


/**
 * @inheritDoc
 */
Draw.prototype.setMap = function(map) {
  _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "b"].prototype.setMap.call(this, map);
  this.updateState_();
};


/**
 * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually
 * draw or finish the drawing.
 * @param {module:ol/MapBrowserEvent} event Map browser event.
 * @return {boolean} `false` to stop event propagation.
 * @this {module:ol/interaction/Draw}
 * @api
 */
function handleEvent(event) {
  if (event.originalEvent.type === _events_EventType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].CONTEXTMENU) {
    // Avoid context menu for long taps when drawing on mobile
    event.preventDefault();
  }
  this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);
  let move = event.type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POINTERMOVE;
  let pass = true;
  if (this.lastDragTime_ && event.type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POINTERDRAG) {
    const now = Date.now();
    if (now - this.lastDragTime_ >= this.dragVertexDelay_) {
      this.downPx_ = event.pixel;
      this.shouldHandle_ = !this.freehand_;
      move = true;
    } else {
      this.lastDragTime_ = undefined;
    }
    if (this.shouldHandle_ && this.downTimeout_) {
      clearTimeout(this.downTimeout_);
      this.downTimeout_ = undefined;
    }
  }
  if (this.freehand_ &&
      event.type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POINTERDRAG &&
      this.sketchFeature_ !== null) {
    this.addToDrawing_(event);
    pass = false;
  } else if (this.freehand_ &&
      event.type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POINTERDOWN) {
    pass = false;
  } else if (move) {
    pass = event.type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POINTERMOVE;
    if (pass && this.freehand_) {
      pass = this.handlePointerMove_(event);
    } else if (event.pointerEvent.pointerType == _pointer_MouseSource_js__WEBPACK_IMPORTED_MODULE_18__[/* POINTER_TYPE */ "b"] ||
        (event.type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POINTERDRAG && !this.downTimeout_)) {
      this.handlePointerMove_(event);
    }
  } else if (event.type === _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].DBLCLICK) {
    pass = false;
  }

  return _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_21__[/* handleEvent */ "c"].call(this, event) && pass;
}


/**
 * @param {module:ol/MapBrowserPointerEvent} event Event.
 * @return {boolean} Start drag sequence?
 * @this {module:ol/interaction/Draw}
 */
function handleDownEvent(event) {
  this.shouldHandle_ = !this.freehand_;

  if (this.freehand_) {
    this.downPx_ = event.pixel;
    if (!this.finishCoordinate_) {
      this.startDrawing_(event);
    }
    return true;
  } else if (this.condition_(event)) {
    this.lastDragTime_ = Date.now();
    this.downTimeout_ = setTimeout(function() {
      this.handlePointerMove_(new _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](
        _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].POINTERMOVE, event.map, event.pointerEvent, event.frameState));
    }.bind(this), this.dragVertexDelay_);
    this.downPx_ = event.pixel;
    return true;
  } else {
    return false;
  }
}


/**
 * @param {module:ol/MapBrowserPointerEvent} event Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/Draw}
 */
function handleUpEvent(event) {
  let pass = true;

  if (this.downTimeout_) {
    clearTimeout(this.downTimeout_);
    this.downTimeout_ = undefined;
  }

  this.handlePointerMove_(event);

  const circleMode = this.mode_ === Mode.CIRCLE;

  if (this.shouldHandle_) {
    if (!this.finishCoordinate_) {
      this.startDrawing_(event);
      if (this.mode_ === Mode.POINT) {
        this.finishDrawing();
      }
    } else if (this.freehand_ || circleMode) {
      this.finishDrawing();
    } else if (this.atFinish_(event)) {
      if (this.finishCondition_(event)) {
        this.finishDrawing();
      }
    } else {
      this.addToDrawing_(event);
    }
    pass = false;
  } else if (this.freehand_) {
    this.finishCoordinate_ = null;
    this.abortDrawing_();
  }
  if (!pass && this.stopClick_) {
    event.stopPropagation();
  }
  return pass;
}


/**
 * Handle move events.
 * @param {module:ol/MapBrowserEvent} event A move event.
 * @return {boolean} Pass the event to other interactions.
 * @private
 */
Draw.prototype.handlePointerMove_ = function(event) {
  if (this.downPx_ &&
      ((!this.freehand_ && this.shouldHandle_) ||
      (this.freehand_ && !this.shouldHandle_))) {
    const downPx = this.downPx_;
    const clickPx = event.pixel;
    const dx = downPx[0] - clickPx[0];
    const dy = downPx[1] - clickPx[1];
    const squaredDistance = dx * dx + dy * dy;
    this.shouldHandle_ = this.freehand_ ?
      squaredDistance > this.squaredClickTolerance_ :
      squaredDistance <= this.squaredClickTolerance_;
    if (!this.shouldHandle_) {
      return true;
    }
  }

  if (this.finishCoordinate_) {
    this.modifyDrawing_(event);
  } else {
    this.createOrUpdateSketchPoint_(event);
  }
  return true;
};


/**
 * Determine if an event is within the snapping tolerance of the start coord.
 * @param {module:ol/MapBrowserEvent} event Event.
 * @return {boolean} The event is within the snapping tolerance of the start.
 * @private
 */
Draw.prototype.atFinish_ = function(event) {
  let at = false;
  if (this.sketchFeature_) {
    let potentiallyDone = false;
    let potentiallyFinishCoordinates = [this.finishCoordinate_];
    if (this.mode_ === Mode.LINE_STRING) {
      potentiallyDone = this.sketchCoords_.length > this.minPoints_;
    } else if (this.mode_ === Mode.POLYGON) {
      potentiallyDone = this.sketchCoords_[0].length >
          this.minPoints_;
      potentiallyFinishCoordinates = [this.sketchCoords_[0][0],
        this.sketchCoords_[0][this.sketchCoords_[0].length - 2]];
    }
    if (potentiallyDone) {
      const map = event.map;
      for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {
        const finishCoordinate = potentiallyFinishCoordinates[i];
        const finishPixel = map.getPixelFromCoordinate(finishCoordinate);
        const pixel = event.pixel;
        const dx = pixel[0] - finishPixel[0];
        const dy = pixel[1] - finishPixel[1];
        const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;
        at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;
        if (at) {
          this.finishCoordinate_ = finishCoordinate;
          break;
        }
      }
    }
  }
  return at;
};


/**
 * @param {module:ol/MapBrowserEvent} event Event.
 * @private
 */
Draw.prototype.createOrUpdateSketchPoint_ = function(event) {
  const coordinates = event.coordinate.slice();
  if (!this.sketchPoint_) {
    this.sketchPoint_ = new _Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](new _geom_Point_js__WEBPACK_IMPORTED_MODULE_19__[/* default */ "a"](coordinates));
    this.updateSketchFeatures_();
  } else {
    const sketchPointGeom = /** @type {module:ol/geom/Point} */ (this.sketchPoint_.getGeometry());
    sketchPointGeom.setCoordinates(coordinates);
  }
};


/**
 * Start the drawing.
 * @param {module:ol/MapBrowserEvent} event Event.
 * @private
 */
Draw.prototype.startDrawing_ = function(event) {
  const start = event.coordinate;
  this.finishCoordinate_ = start;
  if (this.mode_ === Mode.POINT) {
    this.sketchCoords_ = start.slice();
  } else if (this.mode_ === Mode.POLYGON) {
    this.sketchCoords_ = [[start.slice(), start.slice()]];
    this.sketchLineCoords_ = this.sketchCoords_[0];
  } else {
    this.sketchCoords_ = [start.slice(), start.slice()];
  }
  if (this.sketchLineCoords_) {
    this.sketchLine_ = new _Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](
      new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"](this.sketchLineCoords_));
  }
  const geometry = this.geometryFunction_(this.sketchCoords_);
  this.sketchFeature_ = new _Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]();
  if (this.geometryName_) {
    this.sketchFeature_.setGeometryName(this.geometryName_);
  }
  this.sketchFeature_.setGeometry(geometry);
  this.updateSketchFeatures_();
  this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
};


/**
 * Modify the drawing.
 * @param {module:ol/MapBrowserEvent} event Event.
 * @private
 */
Draw.prototype.modifyDrawing_ = function(event) {
  let coordinate = event.coordinate;
  const geometry = /** @type {module:ol/geom/SimpleGeometry} */ (this.sketchFeature_.getGeometry());
  let coordinates, last;
  if (this.mode_ === Mode.POINT) {
    last = this.sketchCoords_;
  } else if (this.mode_ === Mode.POLYGON) {
    coordinates = this.sketchCoords_[0];
    last = coordinates[coordinates.length - 1];
    if (this.atFinish_(event)) {
      // snap to finish
      coordinate = this.finishCoordinate_.slice();
    }
  } else {
    coordinates = this.sketchCoords_;
    last = coordinates[coordinates.length - 1];
  }
  last[0] = coordinate[0];
  last[1] = coordinate[1];
  this.geometryFunction_(/** @type {!Array.<module:ol/coordinate~Coordinate>} */ (this.sketchCoords_), geometry);
  if (this.sketchPoint_) {
    const sketchPointGeom = /** @type {module:ol/geom/Point} */ (this.sketchPoint_.getGeometry());
    sketchPointGeom.setCoordinates(coordinate);
  }
  let sketchLineGeom;
  if (geometry instanceof _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_20__[/* default */ "b"] &&
      this.mode_ !== Mode.POLYGON) {
    if (!this.sketchLine_) {
      this.sketchLine_ = new _Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"](null));
    }
    const ring = geometry.getLinearRing(0);
    sketchLineGeom = /** @type {module:ol/geom/LineString} */ (this.sketchLine_.getGeometry());
    sketchLineGeom.setFlatCoordinates(
      ring.getLayout(), ring.getFlatCoordinates());
  } else if (this.sketchLineCoords_) {
    sketchLineGeom = /** @type {module:ol/geom/LineString} */ (this.sketchLine_.getGeometry());
    sketchLineGeom.setCoordinates(this.sketchLineCoords_);
  }
  this.updateSketchFeatures_();
};


/**
 * Add a new coordinate to the drawing.
 * @param {module:ol/MapBrowserEvent} event Event.
 * @private
 */
Draw.prototype.addToDrawing_ = function(event) {
  const coordinate = event.coordinate;
  const geometry = /** @type {module:ol/geom/SimpleGeometry} */ (this.sketchFeature_.getGeometry());
  let done;
  let coordinates;
  if (this.mode_ === Mode.LINE_STRING) {
    this.finishCoordinate_ = coordinate.slice();
    coordinates = this.sketchCoords_;
    if (coordinates.length >= this.maxPoints_) {
      if (this.freehand_) {
        coordinates.pop();
      } else {
        done = true;
      }
    }
    coordinates.push(coordinate.slice());
    this.geometryFunction_(coordinates, geometry);
  } else if (this.mode_ === Mode.POLYGON) {
    coordinates = this.sketchCoords_[0];
    if (coordinates.length >= this.maxPoints_) {
      if (this.freehand_) {
        coordinates.pop();
      } else {
        done = true;
      }
    }
    coordinates.push(coordinate.slice());
    if (done) {
      this.finishCoordinate_ = coordinates[0];
    }
    this.geometryFunction_(this.sketchCoords_, geometry);
  }
  this.updateSketchFeatures_();
  if (done) {
    this.finishDrawing();
  }
};


/**
 * Remove last point of the feature currently being drawn.
 * @api
 */
Draw.prototype.removeLastPoint = function() {
  if (!this.sketchFeature_) {
    return;
  }
  const geometry = /** @type {module:ol/geom/SimpleGeometry} */ (this.sketchFeature_.getGeometry());
  let coordinates, sketchLineGeom;
  if (this.mode_ === Mode.LINE_STRING) {
    coordinates = this.sketchCoords_;
    coordinates.splice(-2, 1);
    this.geometryFunction_(coordinates, geometry);
    if (coordinates.length >= 2) {
      this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();
    }
  } else if (this.mode_ === Mode.POLYGON) {
    coordinates = this.sketchCoords_[0];
    coordinates.splice(-2, 1);
    sketchLineGeom = /** @type {module:ol/geom/LineString} */ (this.sketchLine_.getGeometry());
    sketchLineGeom.setCoordinates(coordinates);
    this.geometryFunction_(this.sketchCoords_, geometry);
  }

  if (coordinates.length === 0) {
    this.finishCoordinate_ = null;
  }

  this.updateSketchFeatures_();
};


/**
 * Stop drawing and add the sketch feature to the target layer.
 * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is
 * dispatched before inserting the feature.
 * @api
 */
Draw.prototype.finishDrawing = function() {
  const sketchFeature = this.abortDrawing_();
  if (!sketchFeature) {
    return;
  }
  let coordinates = this.sketchCoords_;
  const geometry = /** @type {module:ol/geom/SimpleGeometry} */ (sketchFeature.getGeometry());
  if (this.mode_ === Mode.LINE_STRING) {
    // remove the redundant last point
    coordinates.pop();
    this.geometryFunction_(coordinates, geometry);
  } else if (this.mode_ === Mode.POLYGON) {
    // remove the redundant last point in ring
    coordinates[0].pop();
    this.geometryFunction_(coordinates, geometry);
    coordinates = geometry.getCoordinates();
  }

  // cast multi-part geometries
  if (this.type_ === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].MULTI_POINT) {
    sketchFeature.setGeometry(new _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"]([coordinates]));
  } else if (this.type_ === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].MULTI_LINE_STRING) {
    sketchFeature.setGeometry(new _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_15__[/* default */ "a"]([coordinates]));
  } else if (this.type_ === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].MULTI_POLYGON) {
    sketchFeature.setGeometry(new _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_17__[/* default */ "a"]([coordinates]));
  }

  // First dispatch event to allow full set up of feature
  this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));

  // Then insert feature
  if (this.features_) {
    this.features_.push(sketchFeature);
  }
  if (this.source_) {
    this.source_.addFeature(sketchFeature);
  }
};


/**
 * Stop drawing without adding the sketch feature to the target layer.
 * @return {module:ol/Feature} The sketch feature (or null if none).
 * @private
 */
Draw.prototype.abortDrawing_ = function() {
  this.finishCoordinate_ = null;
  const sketchFeature = this.sketchFeature_;
  if (sketchFeature) {
    this.sketchFeature_ = null;
    this.sketchPoint_ = null;
    this.sketchLine_ = null;
    this.overlay_.getSource().clear(true);
  }
  return sketchFeature;
};


/**
 * Extend an existing geometry by adding additional points. This only works
 * on features with `LineString` geometries, where the interaction will
 * extend lines by adding points to the end of the coordinates array.
 * @param {!module:ol/Feature} feature Feature to be extended.
 * @api
 */
Draw.prototype.extend = function(feature) {
  const geometry = feature.getGeometry();
  const lineString = /** @type {module:ol/geom/LineString} */ (geometry);
  this.sketchFeature_ = feature;
  this.sketchCoords_ = lineString.getCoordinates();
  const last = this.sketchCoords_[this.sketchCoords_.length - 1];
  this.finishCoordinate_ = last.slice();
  this.sketchCoords_.push(last.slice());
  this.updateSketchFeatures_();
  this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
};


/**
 * @inheritDoc
 */
Draw.prototype.shouldStopEvent = _functions_js__WEBPACK_IMPORTED_MODULE_11__[/* FALSE */ "a"];


/**
 * Redraw the sketch features.
 * @private
 */
Draw.prototype.updateSketchFeatures_ = function() {
  const sketchFeatures = [];
  if (this.sketchFeature_) {
    sketchFeatures.push(this.sketchFeature_);
  }
  if (this.sketchLine_) {
    sketchFeatures.push(this.sketchLine_);
  }
  if (this.sketchPoint_) {
    sketchFeatures.push(this.sketchPoint_);
  }
  const overlaySource = this.overlay_.getSource();
  overlaySource.clear(true);
  overlaySource.addFeatures(sketchFeatures);
};


/**
 * @private
 */
Draw.prototype.updateState_ = function() {
  const map = this.getMap();
  const active = this.getActive();
  if (!map || !active) {
    this.abortDrawing_();
  }
  this.overlay_.setMap(active ? map : null);
};


/**
 * Create a `geometryFunction` for `type: 'Circle'` that will create a regular
 * polygon with a user specified number of sides and start angle instead of an
 * `module:ol/geom/Circle~Circle` geometry.
 * @param {number=} opt_sides Number of sides of the regular polygon. Default is
 *     32.
 * @param {number=} opt_angle Angle of the first point in radians. 0 means East.
 *     Default is the angle defined by the heading from the center of the
 *     regular polygon to the current pointer position.
 * @return {module:ol/interaction/Draw~GeometryFunction} Function that draws a
 *     polygon.
 * @api
 */
function createRegularPolygon(opt_sides, opt_angle) {
  return function(coordinates, opt_geometry) {
    const center = coordinates[0];
    const end = coordinates[1];
    const radius = Math.sqrt(
      Object(_coordinate_js__WEBPACK_IMPORTED_MODULE_6__[/* squaredDistance */ "j"])(center, end));
    const geometry = opt_geometry ? /** @type {module:ol/geom/Polygon} */ (opt_geometry) :
      Object(_geom_Polygon_js__WEBPACK_IMPORTED_MODULE_20__[/* fromCircle */ "c"])(new _geom_Circle_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](center), opt_sides);
    const angle = opt_angle ? opt_angle :
      Math.atan((end[1] - center[1]) / (end[0] - center[0]));
    Object(_geom_Polygon_js__WEBPACK_IMPORTED_MODULE_20__[/* makeRegular */ "e"])(geometry, center, radius, angle);
    return geometry;
  };
}


/**
 * Create a `geometryFunction` that will create a box-shaped polygon (aligned
 * with the coordinate system axes).  Use this with the draw interaction and
 * `type: 'Circle'` to return a box instead of a circle geometry.
 * @return {module:ol/interaction/Draw~GeometryFunction} Function that draws a box-shaped polygon.
 * @api
 */
function createBox() {
  return (
    function(coordinates, opt_geometry) {
      const extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_10__[/* boundingExtent */ "b"])(coordinates);
      const geometry = opt_geometry || new _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_20__[/* default */ "b"](null);
      geometry.setCoordinates([[
        Object(_extent_js__WEBPACK_IMPORTED_MODULE_10__[/* getBottomLeft */ "v"])(extent),
        Object(_extent_js__WEBPACK_IMPORTED_MODULE_10__[/* getBottomRight */ "w"])(extent),
        Object(_extent_js__WEBPACK_IMPORTED_MODULE_10__[/* getTopRight */ "D"])(extent),
        Object(_extent_js__WEBPACK_IMPORTED_MODULE_10__[/* getTopLeft */ "C"])(extent),
        Object(_extent_js__WEBPACK_IMPORTED_MODULE_10__[/* getBottomLeft */ "v"])(extent)
      ]]);
      return geometry;
    }
  );
}


/**
 * Get the drawing mode.  The mode for mult-part geometries is the same as for
 * their single-part cousins.
 * @param {module:ol/geom/GeometryType} type Geometry type.
 * @return {module:ol/interaction/Draw~Mode} Drawing mode.
 */
function getMode(type) {
  let mode;
  if (type === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].POINT ||
      type === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].MULTI_POINT) {
    mode = Mode.POINT;
  } else if (type === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].LINE_STRING ||
      type === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].MULTI_LINE_STRING) {
    mode = Mode.LINE_STRING;
  } else if (type === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].POLYGON ||
      type === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].MULTI_POLYGON) {
    mode = Mode.POLYGON;
  } else if (type === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].CIRCLE) {
    mode = Mode.CIRCLE;
  }
  return (
    /** @type {!module:ol/interaction/Draw~Mode} */ (mode)
  );
}


/* harmony default export */ __webpack_exports__["c"] = (Draw);


/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/pointer/EventType
 */

/**
 * Constants for event names.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  POINTERMOVE: 'pointermove',
  POINTERDOWN: 'pointerdown',
  POINTERUP: 'pointerup',
  POINTEROVER: 'pointerover',
  POINTEROUT: 'pointerout',
  POINTERENTER: 'pointerenter',
  POINTERLEAVE: 'pointerleave',
  POINTERCANCEL: 'pointercancel'
});


/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/OverlayPositioning
 */

/**
 * Overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
 * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
 * `'top-center'`, `'top-right'`
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  BOTTOM_LEFT: 'bottom-left',
  BOTTOM_CENTER: 'bottom-center',
  BOTTOM_RIGHT: 'bottom-right',
  CENTER_LEFT: 'center-left',
  CENTER_CENTER: 'center-center',
  CENTER_RIGHT: 'center-right',
  TOP_LEFT: 'top-left',
  TOP_CENTER: 'top-center',
  TOP_RIGHT: 'top-right'
});


/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77);
/**
 * @module ol/style/Fill
 */




/**
 * @typedef {Object} Options
 * @property {module:ol/color~Color|module:ol/colorlike~ColorLike} [color] A color, gradient or pattern.
 * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
 * Default null; if null, the Canvas/renderer default black will be used.
 */


/**
 * @classdesc
 * Set fill style for vector features.
 *
 * @constructor
 * @param {module:ol/style/Fill~Options=} opt_options Options.
 * @api
 */
const Fill = function(opt_options) {

  const options = opt_options || {};

  /**
   * @private
   * @type {module:ol/color~Color|module:ol/colorlike~ColorLike}
   */
  this.color_ = options.color !== undefined ? options.color : null;

  /**
   * @private
   * @type {string|undefined}
   */
  this.checksum_ = undefined;
};


/**
 * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
 * @return {module:ol/style/Fill} The cloned style.
 * @api
 */
Fill.prototype.clone = function() {
  const color = this.getColor();
  return new Fill({
    color: (color && color.slice) ? color.slice() : color || undefined
  });
};


/**
 * Get the fill color.
 * @return {module:ol/color~Color|module:ol/colorlike~ColorLike} Color.
 * @api
 */
Fill.prototype.getColor = function() {
  return this.color_;
};


/**
 * Set the color.
 *
 * @param {module:ol/color~Color|module:ol/colorlike~ColorLike} color Color.
 * @api
 */
Fill.prototype.setColor = function(color) {
  this.color_ = color;
  this.checksum_ = undefined;
};


/**
 * @return {string} The checksum.
 */
Fill.prototype.getChecksum = function() {
  if (this.checksum_ === undefined) {
    if (
      this.color_ instanceof CanvasPattern ||
        this.color_ instanceof CanvasGradient
    ) {
      this.checksum_ = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(this.color_).toString();
    } else {
      this.checksum_ = 'f' + (this.color_ ? Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[/* asString */ "b"])(this.color_) : '-');
    }
  }

  return this.checksum_;
};
/* harmony default export */ __webpack_exports__["a"] = (Fill);


/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return maxSquaredDelta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayMaxSquaredDelta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return multiArrayMaxSquaredDelta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assignClosestPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assignClosestArrayPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assignClosestMultiArrayPoint; });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/**
 * @module ol/geom/flat/closest
 */



/**
 * Returns the point on the 2D line segment flatCoordinates[offset1] to
 * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
 * dimensions are linearly interpolated.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset1 Offset 1.
 * @param {number} offset2 Offset 2.
 * @param {number} stride Stride.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {Array.<number>} closestPoint Closest point.
 */
function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
  const x1 = flatCoordinates[offset1];
  const y1 = flatCoordinates[offset1 + 1];
  const dx = flatCoordinates[offset2] - x1;
  const dy = flatCoordinates[offset2 + 1] - y1;
  let offset;
  if (dx === 0 && dy === 0) {
    offset = offset1;
  } else {
    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
    if (t > 1) {
      offset = offset2;
    } else if (t > 0) {
      for (let i = 0; i < stride; ++i) {
        closestPoint[i] = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* lerp */ "c"])(flatCoordinates[offset1 + i],
          flatCoordinates[offset2 + i], t);
      }
      closestPoint.length = stride;
      return;
    } else {
      offset = offset1;
    }
  }
  for (let i = 0; i < stride; ++i) {
    closestPoint[i] = flatCoordinates[offset + i];
  }
  closestPoint.length = stride;
}


/**
 * Return the squared of the largest distance between any pair of consecutive
 * coordinates.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} max Max squared delta.
 * @return {number} Max squared delta.
 */
function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
  let x1 = flatCoordinates[offset];
  let y1 = flatCoordinates[offset + 1];
  for (offset += stride; offset < end; offset += stride) {
    const x2 = flatCoordinates[offset];
    const y2 = flatCoordinates[offset + 1];
    const squaredDelta = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* squaredDistance */ "g"])(x1, y1, x2, y2);
    if (squaredDelta > max) {
      max = squaredDelta;
    }
    x1 = x2;
    y1 = y2;
  }
  return max;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} max Max squared delta.
 * @return {number} Max squared delta.
 */
function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    max = maxSquaredDelta(
      flatCoordinates, offset, end, stride, max);
    offset = end;
  }
  return max;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} max Max squared delta.
 * @return {number} Max squared delta.
 */
function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    max = arrayMaxSquaredDelta(
      flatCoordinates, offset, ends, stride, max);
    offset = ends[ends.length - 1];
  }
  return max;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} maxDelta Max delta.
 * @param {boolean} isRing Is ring.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {Array.<number>} closestPoint Closest point.
 * @param {number} minSquaredDistance Minimum squared distance.
 * @param {Array.<number>=} opt_tmpPoint Temporary point object.
 * @return {number} Minimum squared distance.
 */
function assignClosestPoint(flatCoordinates, offset, end,
  stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
  opt_tmpPoint) {
  if (offset == end) {
    return minSquaredDistance;
  }
  let i, squaredDistance;
  if (maxDelta === 0) {
    // All points are identical, so just test the first point.
    squaredDistance = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* squaredDistance */ "g"])(
      x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
    if (squaredDistance < minSquaredDistance) {
      for (i = 0; i < stride; ++i) {
        closestPoint[i] = flatCoordinates[offset + i];
      }
      closestPoint.length = stride;
      return squaredDistance;
    } else {
      return minSquaredDistance;
    }
  }
  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
  let index = offset + stride;
  while (index < end) {
    assignClosest(
      flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
    squaredDistance = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* squaredDistance */ "g"])(x, y, tmpPoint[0], tmpPoint[1]);
    if (squaredDistance < minSquaredDistance) {
      minSquaredDistance = squaredDistance;
      for (i = 0; i < stride; ++i) {
        closestPoint[i] = tmpPoint[i];
      }
      closestPoint.length = stride;
      index += stride;
    } else {
      // Skip ahead multiple points, because we know that all the skipped
      // points cannot be any closer than the closest point we have found so
      // far.  We know this because we know how close the current point is, how
      // close the closest point we have found so far is, and the maximum
      // distance between consecutive points.  For example, if we're currently
      // at distance 10, the best we've found so far is 3, and that the maximum
      // distance between consecutive points is 2, then we'll need to skip at
      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
      // finding a closer point.  We use Math.max(..., 1) to ensure that we
      // always advance at least one point, to avoid an infinite loop.
      index += stride * Math.max(
        ((Math.sqrt(squaredDistance) -
            Math.sqrt(minSquaredDistance)) / maxDelta) | 0, 1);
    }
  }
  if (isRing) {
    // Check the closing segment.
    assignClosest(
      flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
    squaredDistance = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* squaredDistance */ "g"])(x, y, tmpPoint[0], tmpPoint[1]);
    if (squaredDistance < minSquaredDistance) {
      minSquaredDistance = squaredDistance;
      for (i = 0; i < stride; ++i) {
        closestPoint[i] = tmpPoint[i];
      }
      closestPoint.length = stride;
    }
  }
  return minSquaredDistance;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} maxDelta Max delta.
 * @param {boolean} isRing Is ring.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {Array.<number>} closestPoint Closest point.
 * @param {number} minSquaredDistance Minimum squared distance.
 * @param {Array.<number>=} opt_tmpPoint Temporary point object.
 * @return {number} Minimum squared distance.
 */
function assignClosestArrayPoint(flatCoordinates, offset, ends,
  stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
  opt_tmpPoint) {
  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    minSquaredDistance = assignClosestPoint(
      flatCoordinates, offset, end, stride,
      maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
    offset = end;
  }
  return minSquaredDistance;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} maxDelta Max delta.
 * @param {boolean} isRing Is ring.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {Array.<number>} closestPoint Closest point.
 * @param {number} minSquaredDistance Minimum squared distance.
 * @param {Array.<number>=} opt_tmpPoint Temporary point object.
 * @return {number} Minimum squared distance.
 */
function assignClosestMultiArrayPoint(flatCoordinates, offset,
  endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
  opt_tmpPoint) {
  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    minSquaredDistance = assignClosestArrayPoint(
      flatCoordinates, offset, ends, stride,
      maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
    offset = ends[ends.length - 1];
  }
  return minSquaredDistance;
}


/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/format/EsriJSON.js
var EsriJSON = __webpack_require__(183);

// EXTERNAL MODULE: ../src/ol/format/GeoJSON.js
var GeoJSON = __webpack_require__(28);

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/array.js
var array = __webpack_require__(16);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/format/Feature.js
var Feature = __webpack_require__(42);

// EXTERNAL MODULE: ../src/ol/format/GMLBase.js
var GMLBase = __webpack_require__(52);

// EXTERNAL MODULE: ../src/ol/format/xsd.js
var xsd = __webpack_require__(6);

// EXTERNAL MODULE: ../src/ol/geom/Geometry.js
var Geometry = __webpack_require__(83);

// EXTERNAL MODULE: ../src/ol/geom/GeometryLayout.js
var GeometryLayout = __webpack_require__(22);

// EXTERNAL MODULE: ../src/ol/geom/LineString.js
var LineString = __webpack_require__(41);

// EXTERNAL MODULE: ../src/ol/geom/MultiLineString.js
var MultiLineString = __webpack_require__(71);

// EXTERNAL MODULE: ../src/ol/geom/MultiPolygon.js
var MultiPolygon = __webpack_require__(82);

// EXTERNAL MODULE: ../src/ol/geom/Polygon.js
var Polygon = __webpack_require__(39);

// EXTERNAL MODULE: ../src/ol/obj.js
var ol_obj = __webpack_require__(15);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var ol_proj = __webpack_require__(7);

// EXTERNAL MODULE: ../src/ol/xml.js
var xml = __webpack_require__(0);

// CONCATENATED MODULE: ../src/ol/format/GML3.js
/**
 * @module ol/format/GML3
 */

















/**
 * @const
 * @type {string}
 * @private
 */
const GML3_schemaLocation = GMLBase["a" /* GMLNS */] +
    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +
    '1.0.0/gmlsf.xsd';


/**
 * @classdesc
 * Feature format for reading and writing data in the GML format
 * version 3.1.1.
 * Currently only supports GML 3.1.1 Simple Features profile.
 *
 * @constructor
 * @param {module:ol/format/GMLBase~Options=} opt_options
 *     Optional configuration object.
 * @extends {module:ol/format/GMLBase}
 * @api
 */
const GML3 = function(opt_options) {
  const options = /** @type {module:ol/format/GMLBase~Options} */
      (opt_options ? opt_options : {});

  GMLBase["b" /* default */].call(this, options);

  /**
   * @private
   * @type {boolean}
   */
  this.surface_ = options.surface !== undefined ? options.surface : false;

  /**
   * @private
   * @type {boolean}
   */
  this.curve_ = options.curve !== undefined ? options.curve : false;

  /**
   * @private
   * @type {boolean}
   */
  this.multiCurve_ = options.multiCurve !== undefined ?
    options.multiCurve : true;

  /**
   * @private
   * @type {boolean}
   */
  this.multiSurface_ = options.multiSurface !== undefined ?
    options.multiSurface : true;

  /**
   * @inheritDoc
   */
  this.schemaLocation = options.schemaLocation ?
    options.schemaLocation : GML3_schemaLocation;

  /**
   * @private
   * @type {boolean}
   */
  this.hasZ = options.hasZ !== undefined ?
    options.hasZ : false;

};

Object(util["c" /* inherits */])(GML3, GMLBase["b" /* default */]);


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {module:ol/geom/MultiLineString|undefined} MultiLineString.
 */
GML3.prototype.readMultiCurve_ = function(node, objectStack) {
  /** @type {Array.<module:ol/geom/LineString>} */
  const lineStrings = Object(xml["u" /* pushParseAndPop */])([],
    this.MULTICURVE_PARSERS_, node, objectStack, this);
  if (lineStrings) {
    const multiLineString = new MultiLineString["a" /* default */](null);
    multiLineString.setLineStrings(lineStrings);
    return multiLineString;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {module:ol/geom/MultiPolygon|undefined} MultiPolygon.
 */
GML3.prototype.readMultiSurface_ = function(node, objectStack) {
  /** @type {Array.<module:ol/geom/Polygon>} */
  const polygons = Object(xml["u" /* pushParseAndPop */])([],
    this.MULTISURFACE_PARSERS_, node, objectStack, this);
  if (polygons) {
    const multiPolygon = new MultiPolygon["a" /* default */](null);
    multiPolygon.setPolygons(polygons);
    return multiPolygon;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
GML3.prototype.curveMemberParser_ = function(node, objectStack) {
  Object(xml["t" /* parseNode */])(this.CURVEMEMBER_PARSERS_, node, objectStack, this);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
GML3.prototype.surfaceMemberParser_ = function(node, objectStack) {
  Object(xml["t" /* parseNode */])(this.SURFACEMEMBER_PARSERS_,
    node, objectStack, this);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<(Array.<number>)>|undefined} flat coordinates.
 */
GML3.prototype.readPatch_ = function(node, objectStack) {
  return Object(xml["u" /* pushParseAndPop */])([null],
    this.PATCHES_PARSERS_, node, objectStack, this);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<number>|undefined} flat coordinates.
 */
GML3.prototype.readSegment_ = function(node, objectStack) {
  return Object(xml["u" /* pushParseAndPop */])([null],
    this.SEGMENTS_PARSERS_, node, objectStack, this);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<(Array.<number>)>|undefined} flat coordinates.
 */
GML3.prototype.readPolygonPatch_ = function(node, objectStack) {
  return Object(xml["u" /* pushParseAndPop */])([null],
    this.FLAT_LINEAR_RINGS_PARSERS_, node, objectStack, this);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<number>|undefined} flat coordinates.
 */
GML3.prototype.readLineStringSegment_ = function(node, objectStack) {
  return Object(xml["u" /* pushParseAndPop */])([null],
    this.GEOMETRY_FLAT_COORDINATES_PARSERS_,
    node, objectStack, this);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
GML3.prototype.interiorParser_ = function(node, objectStack) {
  /** @type {Array.<number>|undefined} */
  const flatLinearRing = Object(xml["u" /* pushParseAndPop */])(undefined,
    this.RING_PARSERS, node, objectStack, this);
  if (flatLinearRing) {
    const flatLinearRings = /** @type {Array.<Array.<number>>} */
        (objectStack[objectStack.length - 1]);
    flatLinearRings.push(flatLinearRing);
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
GML3.prototype.exteriorParser_ = function(node, objectStack) {
  /** @type {Array.<number>|undefined} */
  const flatLinearRing = Object(xml["u" /* pushParseAndPop */])(undefined,
    this.RING_PARSERS, node, objectStack, this);
  if (flatLinearRing) {
    const flatLinearRings = /** @type {Array.<Array.<number>>} */
        (objectStack[objectStack.length - 1]);
    flatLinearRings[0] = flatLinearRing;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {module:ol/geom/Polygon|undefined} Polygon.
 */
GML3.prototype.readSurface_ = function(node, objectStack) {
  /** @type {Array.<Array.<number>>} */
  const flatLinearRings = Object(xml["u" /* pushParseAndPop */])([null],
    this.SURFACE_PARSERS_, node, objectStack, this);
  if (flatLinearRings && flatLinearRings[0]) {
    const polygon = new Polygon["b" /* default */](null);
    const flatCoordinates = flatLinearRings[0];
    const ends = [flatCoordinates.length];
    let i, ii;
    for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
      Object(array["c" /* extend */])(flatCoordinates, flatLinearRings[i]);
      ends.push(flatCoordinates.length);
    }
    polygon.setFlatCoordinates(
      GeometryLayout["a" /* default */].XYZ, flatCoordinates, ends);
    return polygon;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {module:ol/geom/LineString|undefined} LineString.
 */
GML3.prototype.readCurve_ = function(node, objectStack) {
  /** @type {Array.<number>} */
  const flatCoordinates = Object(xml["u" /* pushParseAndPop */])([null],
    this.CURVE_PARSERS_, node, objectStack, this);
  if (flatCoordinates) {
    const lineString = new LineString["a" /* default */](null);
    lineString.setFlatCoordinates(GeometryLayout["a" /* default */].XYZ, flatCoordinates);
    return lineString;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {module:ol/extent~Extent|undefined} Envelope.
 */
GML3.prototype.readEnvelope_ = function(node, objectStack) {
  /** @type {Array.<number>} */
  const flatCoordinates = Object(xml["u" /* pushParseAndPop */])([null],
    this.ENVELOPE_PARSERS_, node, objectStack, this);
  return Object(ol_extent["k" /* createOrUpdate */])(flatCoordinates[1][0],
    flatCoordinates[1][1], flatCoordinates[2][0],
    flatCoordinates[2][1]);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<number>|undefined} Flat coordinates.
 */
GML3.prototype.readFlatPos_ = function(node, objectStack) {
  let s = Object(xml["e" /* getAllTextContent */])(node, false);
  const re = /^\s*([+\-]?\d*\.?\d+(?:[eE][+\-]?\d+)?)\s*/;
  /** @type {Array.<number>} */
  const flatCoordinates = [];
  let m;
  while ((m = re.exec(s))) {
    flatCoordinates.push(parseFloat(m[1]));
    s = s.substr(m[0].length);
  }
  if (s !== '') {
    return undefined;
  }
  const context = objectStack[0];
  const containerSrs = context['srsName'];
  let axisOrientation = 'enu';
  if (containerSrs) {
    const proj = Object(ol_proj["h" /* get */])(containerSrs);
    axisOrientation = proj.getAxisOrientation();
  }
  if (axisOrientation === 'neu') {
    let i, ii;
    for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {
      const y = flatCoordinates[i];
      const x = flatCoordinates[i + 1];
      flatCoordinates[i] = x;
      flatCoordinates[i + 1] = y;
    }
  }
  const len = flatCoordinates.length;
  if (len == 2) {
    flatCoordinates.push(0);
  }
  if (len === 0) {
    return undefined;
  }
  return flatCoordinates;
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<number>|undefined} Flat coordinates.
 */
GML3.prototype.readFlatPosList_ = function(node, objectStack) {
  const s = Object(xml["e" /* getAllTextContent */])(node, false).replace(/^\s*|\s*$/g, '');
  const context = objectStack[0];
  const containerSrs = context['srsName'];
  const contextDimension = context['srsDimension'];
  let axisOrientation = 'enu';
  if (containerSrs) {
    const proj = Object(ol_proj["h" /* get */])(containerSrs);
    axisOrientation = proj.getAxisOrientation();
  }
  const coords = s.split(/\s+/);
  // The "dimension" attribute is from the GML 3.0.1 spec.
  let dim = 2;
  if (node.getAttribute('srsDimension')) {
    dim = Object(xsd["g" /* readNonNegativeIntegerString */])(
      node.getAttribute('srsDimension'));
  } else if (node.getAttribute('dimension')) {
    dim = Object(xsd["g" /* readNonNegativeIntegerString */])(
      node.getAttribute('dimension'));
  } else if (node.parentNode.getAttribute('srsDimension')) {
    dim = Object(xsd["g" /* readNonNegativeIntegerString */])(
      node.parentNode.getAttribute('srsDimension'));
  } else if (contextDimension) {
    dim = Object(xsd["g" /* readNonNegativeIntegerString */])(contextDimension);
  }
  let x, y, z;
  const flatCoordinates = [];
  for (let i = 0, ii = coords.length; i < ii; i += dim) {
    x = parseFloat(coords[i]);
    y = parseFloat(coords[i + 1]);
    z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;
    if (axisOrientation.substr(0, 2) === 'en') {
      flatCoordinates.push(x, y, z);
    } else {
      flatCoordinates.push(y, x, z);
    }
  }
  return flatCoordinates;
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'pos': Object(xml["o" /* makeReplacer */])(GML3.prototype.readFlatPos_),
    'posList': Object(xml["o" /* makeReplacer */])(GML3.prototype.readFlatPosList_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.FLAT_LINEAR_RINGS_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'interior': GML3.prototype.interiorParser_,
    'exterior': GML3.prototype.exteriorParser_
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.GEOMETRY_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'Point': Object(xml["o" /* makeReplacer */])(GMLBase["b" /* default */].prototype.readPoint),
    'MultiPoint': Object(xml["o" /* makeReplacer */])(
      GMLBase["b" /* default */].prototype.readMultiPoint),
    'LineString': Object(xml["o" /* makeReplacer */])(
      GMLBase["b" /* default */].prototype.readLineString),
    'MultiLineString': Object(xml["o" /* makeReplacer */])(
      GMLBase["b" /* default */].prototype.readMultiLineString),
    'LinearRing': Object(xml["o" /* makeReplacer */])(
      GMLBase["b" /* default */].prototype.readLinearRing),
    'Polygon': Object(xml["o" /* makeReplacer */])(GMLBase["b" /* default */].prototype.readPolygon),
    'MultiPolygon': Object(xml["o" /* makeReplacer */])(
      GMLBase["b" /* default */].prototype.readMultiPolygon),
    'Surface': Object(xml["o" /* makeReplacer */])(GML3.prototype.readSurface_),
    'MultiSurface': Object(xml["o" /* makeReplacer */])(
      GML3.prototype.readMultiSurface_),
    'Curve': Object(xml["o" /* makeReplacer */])(GML3.prototype.readCurve_),
    'MultiCurve': Object(xml["o" /* makeReplacer */])(
      GML3.prototype.readMultiCurve_),
    'Envelope': Object(xml["o" /* makeReplacer */])(GML3.prototype.readEnvelope_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.MULTICURVE_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'curveMember': Object(xml["j" /* makeArrayPusher */])(
      GML3.prototype.curveMemberParser_),
    'curveMembers': Object(xml["j" /* makeArrayPusher */])(
      GML3.prototype.curveMemberParser_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.MULTISURFACE_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'surfaceMember': Object(xml["j" /* makeArrayPusher */])(
      GML3.prototype.surfaceMemberParser_),
    'surfaceMembers': Object(xml["j" /* makeArrayPusher */])(
      GML3.prototype.surfaceMemberParser_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.CURVEMEMBER_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'LineString': Object(xml["j" /* makeArrayPusher */])(
      GMLBase["b" /* default */].prototype.readLineString),
    'Curve': Object(xml["j" /* makeArrayPusher */])(GML3.prototype.readCurve_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.SURFACEMEMBER_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'Polygon': Object(xml["j" /* makeArrayPusher */])(GMLBase["b" /* default */].prototype.readPolygon),
    'Surface': Object(xml["j" /* makeArrayPusher */])(GML3.prototype.readSurface_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.SURFACE_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'patches': Object(xml["o" /* makeReplacer */])(GML3.prototype.readPatch_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.CURVE_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'segments': Object(xml["o" /* makeReplacer */])(GML3.prototype.readSegment_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.ENVELOPE_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'lowerCorner': Object(xml["j" /* makeArrayPusher */])(
      GML3.prototype.readFlatPosList_),
    'upperCorner': Object(xml["j" /* makeArrayPusher */])(
      GML3.prototype.readFlatPosList_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.PATCHES_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'PolygonPatch': Object(xml["o" /* makeReplacer */])(
      GML3.prototype.readPolygonPatch_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML3.prototype.SEGMENTS_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'LineStringSegment': Object(xml["o" /* makeReplacer */])(
      GML3.prototype.readLineStringSegment_)
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Point} value Point geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writePos_ = function(node, value, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsDimension = hasZ ? 3 : 2;
  node.setAttribute('srsDimension', srsDimension);
  const srsName = context['srsName'];
  let axisOrientation = 'enu';
  if (srsName) {
    axisOrientation = Object(ol_proj["h" /* get */])(srsName).getAxisOrientation();
  }
  const point = value.getCoordinates();
  let coords;
  // only 2d for simple features profile
  if (axisOrientation.substr(0, 2) === 'en') {
    coords = (point[0] + ' ' + point[1]);
  } else {
    coords = (point[1] + ' ' + point[0]);
  }
  if (hasZ) {
    // For newly created points, Z can be undefined.
    const z = point[2] || 0;
    coords += ' ' + z;
  }
  Object(xsd["n" /* writeStringTextNode */])(node, coords);
};


/**
 * @param {Array.<number>} point Point geometry.
 * @param {string=} opt_srsName Optional srsName
 * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.
 * @return {string} The coords string.
 * @private
 */
GML3.prototype.getCoords_ = function(point, opt_srsName, opt_hasZ) {
  let axisOrientation = 'enu';
  if (opt_srsName) {
    axisOrientation = Object(ol_proj["h" /* get */])(opt_srsName).getAxisOrientation();
  }
  let coords = ((axisOrientation.substr(0, 2) === 'en') ?
    point[0] + ' ' + point[1] :
    point[1] + ' ' + point[0]);
  if (opt_hasZ) {
    // For newly created points, Z can be undefined.
    const z = point[2] || 0;
    coords += ' ' + z;
  }

  return coords;
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LineString|module:ol/geom/LinearRing} value Geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writePosList_ = function(node, value, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsDimension = hasZ ? 3 : 2;
  node.setAttribute('srsDimension', srsDimension);
  const srsName = context['srsName'];
  // only 2d for simple features profile
  const points = value.getCoordinates();
  const len = points.length;
  const parts = new Array(len);
  let point;
  for (let i = 0; i < len; ++i) {
    point = points[i];
    parts[i] = this.getCoords_(point, srsName, hasZ);
  }
  Object(xsd["n" /* writeStringTextNode */])(node, parts.join(' '));
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Point} geometry Point geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writePoint_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const srsName = context['srsName'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const pos = Object(xml["d" /* createElementNS */])(node.namespaceURI, 'pos');
  node.appendChild(pos);
  this.writePos_(pos, geometry, objectStack);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {Array.<*>} objectStack Node stack.
 */
GML3.prototype.writeEnvelope = function(node, extent, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const srsName = context['srsName'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const keys = ['lowerCorner', 'upperCorner'];
  const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
  Object(xml["v" /* pushSerializeAndPop */])(/** @type {module:ol/xml~NodeStackItem} */
    ({node: node}), this.ENVELOPE_SERIALIZERS_,
    xml["b" /* OBJECT_PROPERTY_NODE_FACTORY */],
    values,
    objectStack, keys, this);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LinearRing} geometry LinearRing geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeLinearRing_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const srsName = context['srsName'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const posList = Object(xml["d" /* createElementNS */])(node.namespaceURI, 'posList');
  node.appendChild(posList);
  this.writePosList_(posList, geometry, objectStack);
};


/**
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node} Node.
 * @private
 */
GML3.prototype.RING_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {
  const context = objectStack[objectStack.length - 1];
  const parentNode = context.node;
  const exteriorWritten = context['exteriorWritten'];
  if (exteriorWritten === undefined) {
    context['exteriorWritten'] = true;
  }
  return Object(xml["d" /* createElementNS */])(parentNode.namespaceURI,
    exteriorWritten !== undefined ? 'interior' : 'exterior');
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Polygon} geometry Polygon geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeSurfaceOrPolygon_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsName = context['srsName'];
  if (node.nodeName !== 'PolygonPatch' && srsName) {
    node.setAttribute('srsName', srsName);
  }
  if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
    const rings = geometry.getLinearRings();
    Object(xml["v" /* pushSerializeAndPop */])(
      {node: node, hasZ: hasZ, srsName: srsName},
      this.RING_SERIALIZERS_,
      this.RING_NODE_FACTORY_,
      rings, objectStack, undefined, this);
  } else if (node.nodeName === 'Surface') {
    const patches = Object(xml["d" /* createElementNS */])(node.namespaceURI, 'patches');
    node.appendChild(patches);
    this.writeSurfacePatches_(
      patches, geometry, objectStack);
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LineString} geometry LineString geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeCurveOrLineString_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const srsName = context['srsName'];
  if (node.nodeName !== 'LineStringSegment' && srsName) {
    node.setAttribute('srsName', srsName);
  }
  if (node.nodeName === 'LineString' ||
      node.nodeName === 'LineStringSegment') {
    const posList = Object(xml["d" /* createElementNS */])(node.namespaceURI, 'posList');
    node.appendChild(posList);
    this.writePosList_(posList, geometry, objectStack);
  } else if (node.nodeName === 'Curve') {
    const segments = Object(xml["d" /* createElementNS */])(node.namespaceURI, 'segments');
    node.appendChild(segments);
    this.writeCurveSegments_(segments,
      geometry, objectStack);
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/MultiPolygon} geometry MultiPolygon geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeMultiSurfaceOrPolygon_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsName = context['srsName'];
  const surface = context['surface'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const polygons = geometry.getPolygons();
  Object(xml["v" /* pushSerializeAndPop */])({node: node, hasZ: hasZ, srsName: srsName, surface: surface},
    this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,
    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,
    objectStack, undefined, this);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/MultiPoint} geometry MultiPoint geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeMultiPoint_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const srsName = context['srsName'];
  const hasZ = context['hasZ'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const points = geometry.getPoints();
  Object(xml["v" /* pushSerializeAndPop */])({node: node, hasZ: hasZ, srsName: srsName},
    this.POINTMEMBER_SERIALIZERS_,
    Object(xml["q" /* makeSimpleNodeFactory */])('pointMember'), points,
    objectStack, undefined, this);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/MultiLineString} geometry MultiLineString geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeMultiCurveOrLineString_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsName = context['srsName'];
  const curve = context['curve'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const lines = geometry.getLineStrings();
  Object(xml["v" /* pushSerializeAndPop */])({node: node, hasZ: hasZ, srsName: srsName, curve: curve},
    this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,
    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,
    objectStack, undefined, this);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LinearRing} ring LinearRing geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeRing_ = function(node, ring, objectStack) {
  const linearRing = Object(xml["d" /* createElementNS */])(node.namespaceURI, 'LinearRing');
  node.appendChild(linearRing);
  this.writeLinearRing_(linearRing, ring, objectStack);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Polygon} polygon Polygon geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeSurfaceOrPolygonMember_ = function(node, polygon, objectStack) {
  const child = this.GEOMETRY_NODE_FACTORY_(
    polygon, objectStack);
  if (child) {
    node.appendChild(child);
    this.writeSurfaceOrPolygon_(child, polygon, objectStack);
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Point} point Point geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writePointMember_ = function(node, point, objectStack) {
  const child = Object(xml["d" /* createElementNS */])(node.namespaceURI, 'Point');
  node.appendChild(child);
  this.writePoint_(child, point, objectStack);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LineString} line LineString geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeLineStringOrCurveMember_ = function(node, line, objectStack) {
  const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
  if (child) {
    node.appendChild(child);
    this.writeCurveOrLineString_(child, line, objectStack);
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Polygon} polygon Polygon geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeSurfacePatches_ = function(node, polygon, objectStack) {
  const child = Object(xml["d" /* createElementNS */])(node.namespaceURI, 'PolygonPatch');
  node.appendChild(child);
  this.writeSurfaceOrPolygon_(child, polygon, objectStack);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LineString} line LineString geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeCurveSegments_ = function(node, line, objectStack) {
  const child = Object(xml["d" /* createElementNS */])(node.namespaceURI,
    'LineStringSegment');
  node.appendChild(child);
  this.writeCurveOrLineString_(child, line, objectStack);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Geometry|module:ol/extent~Extent} geometry Geometry.
 * @param {Array.<*>} objectStack Node stack.
 */
GML3.prototype.writeGeometryElement = function(node, geometry, objectStack) {
  const context = /** @type {module:ol/format/Feature~WriteOptions} */ (objectStack[objectStack.length - 1]);
  const item = Object(ol_obj["a" /* assign */])({}, context);
  item.node = node;
  let value;
  if (Array.isArray(geometry)) {
    if (context.dataProjection) {
      value = Object(ol_proj["o" /* transformExtent */])(
        geometry, context.featureProjection, context.dataProjection);
    } else {
      value = geometry;
    }
  } else {
    value = Object(Feature["b" /* transformWithOptions */])(/** @type {module:ol/geom/Geometry} */ (geometry), true, context);
  }
  Object(xml["v" /* pushSerializeAndPop */])(/** @type {module:ol/xml~NodeStackItem} */
    (item), this.GEOMETRY_SERIALIZERS_,
    this.GEOMETRY_NODE_FACTORY_, [value],
    objectStack, undefined, this);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/Feature} feature Feature.
 * @param {Array.<*>} objectStack Node stack.
 */
GML3.prototype.writeFeatureElement = function(node, feature, objectStack) {
  const fid = feature.getId();
  if (fid) {
    node.setAttribute('fid', fid);
  }
  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  const featureNS = context['featureNS'];
  const geometryName = feature.getGeometryName();
  if (!context.serializers) {
    context.serializers = {};
    context.serializers[featureNS] = {};
  }
  const properties = feature.getProperties();
  const keys = [];
  const values = [];
  for (const key in properties) {
    const value = properties[key];
    if (value !== null) {
      keys.push(key);
      values.push(value);
      if (key == geometryName || value instanceof Geometry["a" /* default */]) {
        if (!(key in context.serializers[featureNS])) {
          context.serializers[featureNS][key] = Object(xml["l" /* makeChildAppender */])(
            this.writeGeometryElement, this);
        }
      } else {
        if (!(key in context.serializers[featureNS])) {
          context.serializers[featureNS][key] = Object(xml["l" /* makeChildAppender */])(xsd["n" /* writeStringTextNode */]);
        }
      }
    }
  }
  const item = Object(ol_obj["a" /* assign */])({}, context);
  item.node = node;
  Object(xml["v" /* pushSerializeAndPop */])(/** @type {module:ol/xml~NodeStackItem} */
    (item), context.serializers,
    Object(xml["q" /* makeSimpleNodeFactory */])(undefined, featureNS),
    values,
    objectStack, keys);
};


/**
 * @param {Node} node Node.
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML3.prototype.writeFeatureMembers_ = function(node, features, objectStack) {
  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  const featureType = context['featureType'];
  const featureNS = context['featureNS'];
  const serializers = {};
  serializers[featureNS] = {};
  serializers[featureNS][featureType] = Object(xml["l" /* makeChildAppender */])(
    this.writeFeatureElement, this);
  const item = Object(ol_obj["a" /* assign */])({}, context);
  item.node = node;
  Object(xml["v" /* pushSerializeAndPop */])(/** @type {module:ol/xml~NodeStackItem} */
    (item),
    serializers,
    Object(xml["q" /* makeSimpleNodeFactory */])(featureType, featureNS), features,
    objectStack);
};


/**
 * @const
 * @type {Object.<string, string>}
 */
const MULTIGEOMETRY_TO_MEMBER_NODENAME = {
  'MultiLineString': 'lineStringMember',
  'MultiCurve': 'curveMember',
  'MultiPolygon': 'polygonMember',
  'MultiSurface': 'surfaceMember'
};


/**
 * @const
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node|undefined} Node.
 * @private
 */
GML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {
  const parentNode = objectStack[objectStack.length - 1].node;
  return Object(xml["d" /* createElementNS */])('http://www.opengis.net/gml',
    MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);
};


/**
 * @const
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node|undefined} Node.
 * @private
 */
GML3.prototype.GEOMETRY_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {
  const context = objectStack[objectStack.length - 1];
  const multiSurface = context['multiSurface'];
  const surface = context['surface'];
  const curve = context['curve'];
  const multiCurve = context['multiCurve'];
  let nodeName;
  if (!Array.isArray(value)) {
    nodeName = /** @type {module:ol/geom/Geometry} */ (value).getType();
    if (nodeName === 'MultiPolygon' && multiSurface === true) {
      nodeName = 'MultiSurface';
    } else if (nodeName === 'Polygon' && surface === true) {
      nodeName = 'Surface';
    } else if (nodeName === 'LineString' && curve === true) {
      nodeName = 'Curve';
    } else if (nodeName === 'MultiLineString' && multiCurve === true) {
      nodeName = 'MultiCurve';
    }
  } else {
    nodeName = 'Envelope';
  }
  return Object(xml["d" /* createElementNS */])('http://www.opengis.net/gml',
    nodeName);
};


/**
 * Encode a geometry in GML 3.1.1 Simple Features.
 *
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {Node} Node.
 * @override
 * @api
 */
GML3.prototype.writeGeometryNode = function(geometry, opt_options) {
  opt_options = this.adaptOptions(opt_options);
  const geom = Object(xml["d" /* createElementNS */])('http://www.opengis.net/gml', 'geom');
  const context = {node: geom, hasZ: this.hasZ, srsName: this.srsName,
    curve: this.curve_, surface: this.surface_,
    multiSurface: this.multiSurface_, multiCurve: this.multiCurve_};
  if (opt_options) {
    Object(ol_obj["a" /* assign */])(context, opt_options);
  }
  this.writeGeometryElement(geom, geometry, [context]);
  return geom;
};


/**
 * Encode an array of features in GML 3.1.1 Simple Features.
 *
 * @function
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {string} Result.
 * @api
 */
GML3.prototype.writeFeatures;


/**
 * Encode an array of features in the GML 3.1.1 format as an XML node.
 *
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {Node} Node.
 * @override
 * @api
 */
GML3.prototype.writeFeaturesNode = function(features, opt_options) {
  opt_options = this.adaptOptions(opt_options);
  const node = Object(xml["d" /* createElementNS */])('http://www.opengis.net/gml', 'featureMembers');
  node.setAttributeNS(xml["c" /* XML_SCHEMA_INSTANCE_URI */], 'xsi:schemaLocation', this.schemaLocation);
  const context = {
    srsName: this.srsName,
    hasZ: this.hasZ,
    curve: this.curve_,
    surface: this.surface_,
    multiSurface: this.multiSurface_,
    multiCurve: this.multiCurve_,
    featureNS: this.featureNS,
    featureType: this.featureType
  };
  if (opt_options) {
    Object(ol_obj["a" /* assign */])(context, opt_options);
  }
  this.writeFeatureMembers_(node, features, [context]);
  return node;
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML3.prototype.RING_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'exterior': Object(xml["l" /* makeChildAppender */])(GML3.prototype.writeRing_),
    'interior': Object(xml["l" /* makeChildAppender */])(GML3.prototype.writeRing_)
  }
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML3.prototype.ENVELOPE_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'lowerCorner': Object(xml["l" /* makeChildAppender */])(xsd["n" /* writeStringTextNode */]),
    'upperCorner': Object(xml["l" /* makeChildAppender */])(xsd["n" /* writeStringTextNode */])
  }
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'surfaceMember': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeSurfaceOrPolygonMember_),
    'polygonMember': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeSurfaceOrPolygonMember_)
  }
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML3.prototype.POINTMEMBER_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'pointMember': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writePointMember_)
  }
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'lineStringMember': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeLineStringOrCurveMember_),
    'curveMember': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeLineStringOrCurveMember_)
  }
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML3.prototype.GEOMETRY_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'Curve': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeCurveOrLineString_),
    'MultiCurve': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeMultiCurveOrLineString_),
    'Point': Object(xml["l" /* makeChildAppender */])(GML3.prototype.writePoint_),
    'MultiPoint': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeMultiPoint_),
    'LineString': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeCurveOrLineString_),
    'MultiLineString': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeMultiCurveOrLineString_),
    'LinearRing': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeLinearRing_),
    'Polygon': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeSurfaceOrPolygon_),
    'MultiPolygon': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeMultiSurfaceOrPolygon_),
    'Surface': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeSurfaceOrPolygon_),
    'MultiSurface': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeMultiSurfaceOrPolygon_),
    'Envelope': Object(xml["l" /* makeChildAppender */])(
      GML3.prototype.writeEnvelope)
  }
};


/* harmony default export */ var format_GML3 = (GML3);

// CONCATENATED MODULE: ../src/ol/format/GML.js
/**
 * @module ol/format/GML
 */


/**
 * @classdesc
 * Feature format for reading and writing data in the GML format
 * version 3.1.1.
 * Currently only supports GML 3.1.1 Simple Features profile.
 *
 * @constructor
 * @param {module:ol/format/GMLBase~Options=} opt_options
 *     Optional configuration object.
 * @extends {module:ol/format/GMLBase}
 * @api
 */
const GML = format_GML3;


/**
 * Encode an array of features in GML 3.1.1 Simple Features.
 *
 * @function
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {string} Result.
 * @api
 */
GML.prototype.writeFeatures;


/**
 * Encode an array of features in the GML 3.1.1 format as an XML node.
 *
 * @function
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {Node} Node.
 * @api
 */
GML.prototype.writeFeaturesNode;

/* harmony default export */ var format_GML = (GML);

// EXTERNAL MODULE: ../src/ol/format/GPX.js
var GPX = __webpack_require__(209);

// EXTERNAL MODULE: ../src/ol/format/IGC.js
var IGC = __webpack_require__(208);

// EXTERNAL MODULE: ../src/ol/format/KML.js
var KML = __webpack_require__(107);

// EXTERNAL MODULE: ../src/ol/format/MVT.js + 1 modules
var MVT = __webpack_require__(135);

// EXTERNAL MODULE: ../src/ol/format/OWS.js
var OWS = __webpack_require__(207);

// EXTERNAL MODULE: ../src/ol/format/Polyline.js + 1 modules
var Polyline = __webpack_require__(205);

// EXTERNAL MODULE: ../src/ol/format/TopoJSON.js
var TopoJSON = __webpack_require__(182);

// EXTERNAL MODULE: ../src/ol/asserts.js
var asserts = __webpack_require__(27);

// EXTERNAL MODULE: ../src/ol/format/GML2.js
var GML2 = __webpack_require__(201);

// EXTERNAL MODULE: ../src/ol/format/filter.js + 22 modules
var format_filter = __webpack_require__(178);

// EXTERNAL MODULE: ../src/ol/format/XMLFeature.js
var XMLFeature = __webpack_require__(94);

// CONCATENATED MODULE: ../src/ol/format/WFS.js
/**
 * @module ol/format/WFS
 */














/**
 * @typedef {Object} Options
 * @property {Object.<string, string>|string} [featureNS] The namespace URI used for features.
 * @property {Array.<string>|string} [featureType] The feature type to parse. Only used for read operations.
 * @property {module:ol/format/GMLBase} [gmlFormat] The GML format to use to parse the response. Default is `ol/format/GML3`.
 * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.
 */


/**
 * @typedef {Object} WriteGetFeatureOptions
 * @property {string} featureNS The namespace URI used for features.
 * @property {string} featurePrefix The prefix for the feature namespace.
 * @property {Array.<string>} featureTypes The feature type names.
 * @property {string} [srsName] SRS name. No srsName attribute will be set on
 * geometries when this is not provided.
 * @property {string} [handle] Handle.
 * @property {string} [outputFormat] Output format.
 * @property {number} [maxFeatures] Maximum number of features to fetch.
 * @property {string} [geometryName] Geometry name to use in a BBOX filter.
 * @property {Array.<string>} [propertyNames] Optional list of property names to serialize.
 * @property {number} [startIndex] Start index to use for WFS paging. This is a
 * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.
 * @property {number} [count] Number of features to retrieve when paging. This is a
 * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some
 * Web Feature Services have repurposed `maxfeatures` instead.
 * @property {module:ol/extent~Extent} [bbox] Extent to use for the BBOX filter.
 * @property {module:ol/format/filter/Filter} [filter] Filter condition. See
 * {@link module:ol/format/Filter} for more information.
 * @property {string} [resultType] Indicates what response should be returned,
 * E.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.
 */


/**
 * @typedef {Object} WriteTransactionOptions
 * @property {string} featureNS The namespace URI used for features.
 * @property {string} featurePrefix The prefix for the feature namespace.
 * @property {string} featureType The feature type name.
 * @property {string} [srsName] SRS name. No srsName attribute will be set on
 * geometries when this is not provided.
 * @property {string} [handle] Handle.
 * @property {boolean} [hasZ] Must be set to true if the transaction is for
 * a 3D layer. This will allow the Z coordinate to be included in the transaction.
 * @property {Array.<Object>} nativeElements Native elements. Currently not supported.
 * @property {module:ol/format/GMLBase~Options} [gmlOptions] GML options for the WFS transaction writer.
 * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0` or `1.1.0`.
 */


/**
 * Number of features; bounds/extent.
 * @typedef {Object} FeatureCollectionMetadata
 * @property {number} numberOfFeatures
 * @property {module:ol/extent~Extent} bounds
 */


/**
 * Total deleted; total inserted; total updated; array of insert ids.
 * @typedef {Object} TransactionResponse
 * @property {number} totalDeleted
 * @property {number} totalInserted
 * @property {number} totalUpdated
 * @property {Array.<string>} insertIds
 */


/**
 * @type {string}
 */
const FEATURE_PREFIX = 'feature';


/**
 * @type {string}
 */
const XMLNS = 'http://www.w3.org/2000/xmlns/';


/**
 * @type {string}
 */
const OGCNS = 'http://www.opengis.net/ogc';


/**
 * @type {string}
 */
const WFSNS = 'http://www.opengis.net/wfs';


/**
 * @type {string}
 */
const FESNS = 'http://www.opengis.net/fes';


/**
 * @type {Object.<string, string>}
 */
const SCHEMA_LOCATIONS = {
  '1.1.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',
  '1.0.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd'
};


/**
 * @const
 * @type {string}
 */
const DEFAULT_VERSION = '1.1.0';


/**
 * @classdesc
 * Feature format for reading and writing data in the WFS format.
 * By default, supports WFS version 1.1.0. You can pass a GML format
 * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).
 * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.
 *
 * @constructor
 * @param {module:ol/format/WFS~Options=} opt_options Optional configuration object.
 * @extends {module:ol/format/XMLFeature}
 * @api
 */
const WFS = function(opt_options) {
  const options = opt_options ? opt_options : {};

  /**
   * @private
   * @type {Array.<string>|string|undefined}
   */
  this.featureType_ = options.featureType;

  /**
   * @private
   * @type {Object.<string, string>|string|undefined}
   */
  this.featureNS_ = options.featureNS;

  /**
   * @private
   * @type {module:ol/format/GMLBase}
   */
  this.gmlFormat_ = options.gmlFormat ?
    options.gmlFormat : new format_GML3();

  /**
   * @private
   * @type {string}
   */
  this.schemaLocation_ = options.schemaLocation ?
    options.schemaLocation : SCHEMA_LOCATIONS[DEFAULT_VERSION];

  XMLFeature["a" /* default */].call(this);
};

Object(util["c" /* inherits */])(WFS, XMLFeature["a" /* default */]);


/**
 * @return {Array.<string>|string|undefined} featureType
 */
WFS.prototype.getFeatureType = function() {
  return this.featureType_;
};


/**
 * @param {Array.<string>|string|undefined} featureType Feature type(s) to parse.
 */
WFS.prototype.setFeatureType = function(featureType) {
  this.featureType_ = featureType;
};


/**
 * Read all features from a WFS FeatureCollection.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
WFS.prototype.readFeatures;


/**
 * @inheritDoc
 */
WFS.prototype.readFeaturesFromNode = function(node, opt_options) {
  const context = /** @type {module:ol/xml~NodeStackItem} */ ({
    'featureType': this.featureType_,
    'featureNS': this.featureNS_
  });
  Object(ol_obj["a" /* assign */])(context, this.getReadOptions(node, opt_options ? opt_options : {}));
  const objectStack = [context];
  this.gmlFormat_.FEATURE_COLLECTION_PARSERS[GMLBase["a" /* GMLNS */]][
    'featureMember'] =
      Object(xml["j" /* makeArrayPusher */])(GMLBase["b" /* default */].prototype.readFeaturesInternal);
  let features = Object(xml["u" /* pushParseAndPop */])([],
    this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,
    objectStack, this.gmlFormat_);
  if (!features) {
    features = [];
  }
  return features;
};


/**
 * Read transaction response of the source.
 *
 * @param {Document|Node|Object|string} source Source.
 * @return {module:ol/format/WFS~TransactionResponse|undefined} Transaction response.
 * @api
 */
WFS.prototype.readTransactionResponse = function(source) {
  if (Object(xml["g" /* isDocument */])(source)) {
    return this.readTransactionResponseFromDocument(
      /** @type {Document} */ (source));
  } else if (Object(xml["h" /* isNode */])(source)) {
    return this.readTransactionResponseFromNode(/** @type {Node} */ (source));
  } else if (typeof source === 'string') {
    const doc = Object(xml["s" /* parse */])(source);
    return this.readTransactionResponseFromDocument(doc);
  } else {
    return undefined;
  }
};


/**
 * Read feature collection metadata of the source.
 *
 * @param {Document|Node|Object|string} source Source.
 * @return {module:ol/format/WFS~FeatureCollectionMetadata|undefined}
 *     FeatureCollection metadata.
 * @api
 */
WFS.prototype.readFeatureCollectionMetadata = function(source) {
  if (Object(xml["g" /* isDocument */])(source)) {
    return this.readFeatureCollectionMetadataFromDocument(
      /** @type {Document} */ (source));
  } else if (Object(xml["h" /* isNode */])(source)) {
    return this.readFeatureCollectionMetadataFromNode(
      /** @type {Node} */ (source));
  } else if (typeof source === 'string') {
    const doc = Object(xml["s" /* parse */])(source);
    return this.readFeatureCollectionMetadataFromDocument(doc);
  } else {
    return undefined;
  }
};


/**
 * @param {Document} doc Document.
 * @return {module:ol/format/WFS~FeatureCollectionMetadata|undefined}
 *     FeatureCollection metadata.
 */
WFS.prototype.readFeatureCollectionMetadataFromDocument = function(doc) {
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      return this.readFeatureCollectionMetadataFromNode(n);
    }
  }
  return undefined;
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const FEATURE_COLLECTION_PARSERS = {
  'http://www.opengis.net/gml': {
    'boundedBy': Object(xml["n" /* makeObjectPropertySetter */])(
      GMLBase["b" /* default */].prototype.readGeometryElement, 'bounds')
  }
};


/**
 * @param {Node} node Node.
 * @return {module:ol/format/WFS~FeatureCollectionMetadata|undefined}
 *     FeatureCollection metadata.
 */
WFS.prototype.readFeatureCollectionMetadataFromNode = function(node) {
  const result = {};
  const value = Object(xsd["g" /* readNonNegativeIntegerString */])(
    node.getAttribute('numberOfFeatures'));
  result['numberOfFeatures'] = value;
  return Object(xml["u" /* pushParseAndPop */])(
    /** @type {module:ol/format/WFS~FeatureCollectionMetadata} */ (result),
    FEATURE_COLLECTION_PARSERS, node, [], this.gmlFormat_);
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TRANSACTION_SUMMARY_PARSERS = {
  'http://www.opengis.net/wfs': {
    'totalInserted': Object(xml["n" /* makeObjectPropertySetter */])(xsd["f" /* readNonNegativeInteger */]),
    'totalUpdated': Object(xml["n" /* makeObjectPropertySetter */])(xsd["f" /* readNonNegativeInteger */]),
    'totalDeleted': Object(xml["n" /* makeObjectPropertySetter */])(xsd["f" /* readNonNegativeInteger */])
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Transaction Summary.
 */
function readTransactionSummary(node, objectStack) {
  return Object(xml["u" /* pushParseAndPop */])(
    {}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const OGC_FID_PARSERS = {
  'http://www.opengis.net/ogc': {
    'FeatureId': Object(xml["j" /* makeArrayPusher */])(function(node, objectStack) {
      return node.getAttribute('fid');
    })
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function fidParser(node, objectStack) {
  Object(xml["t" /* parseNode */])(OGC_FID_PARSERS, node, objectStack);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const INSERT_RESULTS_PARSERS = {
  'http://www.opengis.net/wfs': {
    'Feature': fidParser
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Array.<string>|undefined} Insert results.
 */
function readInsertResults(node, objectStack) {
  return Object(xml["u" /* pushParseAndPop */])(
    [], INSERT_RESULTS_PARSERS, node, objectStack);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TRANSACTION_RESPONSE_PARSERS = {
  'http://www.opengis.net/wfs': {
    'TransactionSummary': Object(xml["n" /* makeObjectPropertySetter */])(
      readTransactionSummary, 'transactionSummary'),
    'InsertResults': Object(xml["n" /* makeObjectPropertySetter */])(
      readInsertResults, 'insertIds')
  }
};


/**
 * @param {Document} doc Document.
 * @return {module:ol/format/WFS~TransactionResponse|undefined} Transaction response.
 */
WFS.prototype.readTransactionResponseFromDocument = function(doc) {
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      return this.readTransactionResponseFromNode(n);
    }
  }
  return undefined;
};


/**
 * @param {Node} node Node.
 * @return {module:ol/format/WFS~TransactionResponse|undefined} Transaction response.
 */
WFS.prototype.readTransactionResponseFromNode = function(node) {
  return Object(xml["u" /* pushParseAndPop */])(
    /** @type {module:ol/format/WFS~TransactionResponse} */({}),
    TRANSACTION_RESPONSE_PARSERS, node, []);
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const QUERY_SERIALIZERS = {
  'http://www.opengis.net/wfs': {
    'PropertyName': Object(xml["l" /* makeChildAppender */])(xsd["n" /* writeStringTextNode */])
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/Feature} feature Feature.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeFeature(node, feature, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const featureType = context['featureType'];
  const featureNS = context['featureNS'];
  const gmlVersion = context['gmlVersion'];
  const child = Object(xml["d" /* createElementNS */])(featureNS, featureType);
  node.appendChild(child);
  if (gmlVersion === 2) {
    GML2["a" /* default */].prototype.writeFeatureElement(child, feature, objectStack);
  } else {
    format_GML3.prototype.writeFeatureElement(child, feature, objectStack);
  }
}


/**
 * @param {Node} node Node.
 * @param {number|string} fid Feature identifier.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeOgcFidFilter(node, fid, objectStack) {
  const filter = Object(xml["d" /* createElementNS */])(OGCNS, 'Filter');
  const child = Object(xml["d" /* createElementNS */])(OGCNS, 'FeatureId');
  filter.appendChild(child);
  child.setAttribute('fid', fid);
  node.appendChild(filter);
}


/**
 * @param {string|undefined} featurePrefix The prefix of the feature.
 * @param {string} featureType The type of the feature.
 * @returns {string} The value of the typeName property.
 */
function getTypeName(featurePrefix, featureType) {
  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;
  const prefix = featurePrefix + ':';
  // The featureType already contains the prefix.
  if (featureType.indexOf(prefix) === 0) {
    return featureType;
  } else {
    return prefix + featureType;
  }
}


/**
 * @param {Node} node Node.
 * @param {module:ol/Feature} feature Feature.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeDelete(node, feature, objectStack) {
  const context = objectStack[objectStack.length - 1];
  Object(asserts["a" /* assert */])(feature.getId() !== undefined, 26); // Features must have an id set
  const featureType = context['featureType'];
  const featurePrefix = context['featurePrefix'];
  const featureNS = context['featureNS'];
  const typeName = getTypeName(featurePrefix, featureType);
  node.setAttribute('typeName', typeName);
  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
  const fid = feature.getId();
  if (fid !== undefined) {
    writeOgcFidFilter(node, fid, objectStack);
  }
}


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const TRANSACTION_SERIALIZERS = {
  'http://www.opengis.net/wfs': {
    'Insert': Object(xml["l" /* makeChildAppender */])(writeFeature),
    'Update': Object(xml["l" /* makeChildAppender */])(writeUpdate),
    'Delete': Object(xml["l" /* makeChildAppender */])(writeDelete),
    'Property': Object(xml["l" /* makeChildAppender */])(writeProperty),
    'Native': Object(xml["l" /* makeChildAppender */])(writeNative)
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/Feature} feature Feature.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeUpdate(node, feature, objectStack) {
  const context = objectStack[objectStack.length - 1];
  Object(asserts["a" /* assert */])(feature.getId() !== undefined, 27); // Features must have an id set
  const featureType = context['featureType'];
  const featurePrefix = context['featurePrefix'];
  const featureNS = context['featureNS'];
  const typeName = getTypeName(featurePrefix, featureType);
  const geometryName = feature.getGeometryName();
  node.setAttribute('typeName', typeName);
  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
  const fid = feature.getId();
  if (fid !== undefined) {
    const keys = feature.getKeys();
    const values = [];
    for (let i = 0, ii = keys.length; i < ii; i++) {
      const value = feature.get(keys[i]);
      if (value !== undefined) {
        let name = keys[i];
        if (value instanceof Geometry["a" /* default */]) {
          name = geometryName;
        }
        values.push({name: name, value: value});
      }
    }
    Object(xml["v" /* pushSerializeAndPop */])(/** @type {module:ol/xml~NodeStackItem} */ (
      {'gmlVersion': context['gmlVersion'], node: node,
        'hasZ': context['hasZ'], 'srsName': context['srsName']}),
    TRANSACTION_SERIALIZERS,
    Object(xml["q" /* makeSimpleNodeFactory */])('Property'), values,
    objectStack);
    writeOgcFidFilter(node, fid, objectStack);
  }
}


/**
 * @param {Node} node Node.
 * @param {Object} pair Property name and value.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeProperty(node, pair, objectStack) {
  const name = Object(xml["d" /* createElementNS */])(WFSNS, 'Name');
  const context = objectStack[objectStack.length - 1];
  const gmlVersion = context['gmlVersion'];
  node.appendChild(name);
  Object(xsd["n" /* writeStringTextNode */])(name, pair.name);
  if (pair.value !== undefined && pair.value !== null) {
    const value = Object(xml["d" /* createElementNS */])(WFSNS, 'Value');
    node.appendChild(value);
    if (pair.value instanceof Geometry["a" /* default */]) {
      if (gmlVersion === 2) {
        GML2["a" /* default */].prototype.writeGeometryElement(value,
          pair.value, objectStack);
      } else {
        format_GML3.prototype.writeGeometryElement(value,
          pair.value, objectStack);
      }
    } else {
      Object(xsd["n" /* writeStringTextNode */])(value, pair.value);
    }
  }
}


/**
 * @param {Node} node Node.
 * @param {{vendorId: string, safeToIgnore: boolean, value: string}}
 *     nativeElement The native element.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeNative(node, nativeElement, objectStack) {
  if (nativeElement.vendorId) {
    node.setAttribute('vendorId', nativeElement.vendorId);
  }
  if (nativeElement.safeToIgnore !== undefined) {
    node.setAttribute('safeToIgnore', nativeElement.safeToIgnore);
  }
  if (nativeElement.value !== undefined) {
    Object(xsd["n" /* writeStringTextNode */])(node, nativeElement.value);
  }
}


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const GETFEATURE_SERIALIZERS = {
  'http://www.opengis.net/wfs': {
    'Query': Object(xml["l" /* makeChildAppender */])(writeQuery)
  },
  'http://www.opengis.net/ogc': {
    'During': Object(xml["l" /* makeChildAppender */])(writeDuringFilter),
    'And': Object(xml["l" /* makeChildAppender */])(writeLogicalFilter),
    'Or': Object(xml["l" /* makeChildAppender */])(writeLogicalFilter),
    'Not': Object(xml["l" /* makeChildAppender */])(writeNotFilter),
    'BBOX': Object(xml["l" /* makeChildAppender */])(writeBboxFilter),
    'Contains': Object(xml["l" /* makeChildAppender */])(writeContainsFilter),
    'Intersects': Object(xml["l" /* makeChildAppender */])(writeIntersectsFilter),
    'Within': Object(xml["l" /* makeChildAppender */])(writeWithinFilter),
    'PropertyIsEqualTo': Object(xml["l" /* makeChildAppender */])(writeComparisonFilter),
    'PropertyIsNotEqualTo': Object(xml["l" /* makeChildAppender */])(writeComparisonFilter),
    'PropertyIsLessThan': Object(xml["l" /* makeChildAppender */])(writeComparisonFilter),
    'PropertyIsLessThanOrEqualTo': Object(xml["l" /* makeChildAppender */])(writeComparisonFilter),
    'PropertyIsGreaterThan': Object(xml["l" /* makeChildAppender */])(writeComparisonFilter),
    'PropertyIsGreaterThanOrEqualTo': Object(xml["l" /* makeChildAppender */])(writeComparisonFilter),
    'PropertyIsNull': Object(xml["l" /* makeChildAppender */])(writeIsNullFilter),
    'PropertyIsBetween': Object(xml["l" /* makeChildAppender */])(writeIsBetweenFilter),
    'PropertyIsLike': Object(xml["l" /* makeChildAppender */])(writeIsLikeFilter)
  }
};


/**
 * @param {Node} node Node.
 * @param {string} featureType Feature type.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeQuery(node, featureType, objectStack) {
  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  const featurePrefix = context['featurePrefix'];
  const featureNS = context['featureNS'];
  const propertyNames = context['propertyNames'];
  const srsName = context['srsName'];
  let typeName;
  // If feature prefix is not defined, we must not use the default prefix.
  if (featurePrefix) {
    typeName = getTypeName(featurePrefix, featureType);
  } else {
    typeName = featureType;
  }
  node.setAttribute('typeName', typeName);
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  if (featureNS) {
    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
  }
  const item = /** @type {module:ol/xml~NodeStackItem} */ (Object(ol_obj["a" /* assign */])({}, context));
  item.node = node;
  Object(xml["v" /* pushSerializeAndPop */])(item,
    QUERY_SERIALIZERS,
    Object(xml["q" /* makeSimpleNodeFactory */])('PropertyName'), propertyNames,
    objectStack);
  const filter = context['filter'];
  if (filter) {
    const child = Object(xml["d" /* createElementNS */])(OGCNS, 'Filter');
    node.appendChild(child);
    writeFilterCondition(child, filter, objectStack);
  }
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/Filter} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeFilterCondition(node, filter, objectStack) {
  /** @type {module:ol/xml~NodeStackItem} */
  const item = {node: node};
  Object(xml["v" /* pushSerializeAndPop */])(item,
    GETFEATURE_SERIALIZERS,
    Object(xml["q" /* makeSimpleNodeFactory */])(filter.getTagName()),
    [filter], objectStack);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/Bbox} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeBboxFilter(node, filter, objectStack) {
  const context = objectStack[objectStack.length - 1];
  context['srsName'] = filter.srsName;

  writeOgcPropertyName(node, filter.geometryName);
  format_GML3.prototype.writeGeometryElement(node, filter.extent, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/Contains} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeContainsFilter(node, filter, objectStack) {
  const context = objectStack[objectStack.length - 1];
  context['srsName'] = filter.srsName;

  writeOgcPropertyName(node, filter.geometryName);
  format_GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/Intersects} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeIntersectsFilter(node, filter, objectStack) {
  const context = objectStack[objectStack.length - 1];
  context['srsName'] = filter.srsName;

  writeOgcPropertyName(node, filter.geometryName);
  format_GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/Within} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeWithinFilter(node, filter, objectStack) {
  const context = objectStack[objectStack.length - 1];
  context['srsName'] = filter.srsName;

  writeOgcPropertyName(node, filter.geometryName);
  format_GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/During} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeDuringFilter(node, filter, objectStack) {

  const valueReference = Object(xml["d" /* createElementNS */])(FESNS, 'ValueReference');
  Object(xsd["n" /* writeStringTextNode */])(valueReference, filter.propertyName);
  node.appendChild(valueReference);

  const timePeriod = Object(xml["d" /* createElementNS */])(GMLBase["a" /* GMLNS */], 'TimePeriod');

  node.appendChild(timePeriod);

  const begin = Object(xml["d" /* createElementNS */])(GMLBase["a" /* GMLNS */], 'begin');
  timePeriod.appendChild(begin);
  writeTimeInstant(begin, filter.begin);

  const end = Object(xml["d" /* createElementNS */])(GMLBase["a" /* GMLNS */], 'end');
  timePeriod.appendChild(end);
  writeTimeInstant(end, filter.end);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/LogicalNary} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeLogicalFilter(node, filter, objectStack) {
  /** @type {module:ol/xml~NodeStackItem} */
  const item = {node: node};
  const conditions = filter.conditions;
  for (let i = 0, ii = conditions.length; i < ii; ++i) {
    const condition = conditions[i];
    Object(xml["v" /* pushSerializeAndPop */])(item,
      GETFEATURE_SERIALIZERS,
      Object(xml["q" /* makeSimpleNodeFactory */])(condition.getTagName()),
      [condition], objectStack);
  }
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/Not} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeNotFilter(node, filter, objectStack) {
  /** @type {module:ol/xml~NodeStackItem} */
  const item = {node: node};
  const condition = filter.condition;
  Object(xml["v" /* pushSerializeAndPop */])(item,
    GETFEATURE_SERIALIZERS,
    Object(xml["q" /* makeSimpleNodeFactory */])(condition.getTagName()),
    [condition], objectStack);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/ComparisonBinary} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeComparisonFilter(node, filter, objectStack) {
  if (filter.matchCase !== undefined) {
    node.setAttribute('matchCase', filter.matchCase.toString());
  }
  writeOgcPropertyName(node, filter.propertyName);
  writeOgcLiteral(node, '' + filter.expression);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/IsNull} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeIsNullFilter(node, filter, objectStack) {
  writeOgcPropertyName(node, filter.propertyName);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/IsBetween} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeIsBetweenFilter(node, filter, objectStack) {
  writeOgcPropertyName(node, filter.propertyName);

  const lowerBoundary = Object(xml["d" /* createElementNS */])(OGCNS, 'LowerBoundary');
  node.appendChild(lowerBoundary);
  writeOgcLiteral(lowerBoundary, '' + filter.lowerBoundary);

  const upperBoundary = Object(xml["d" /* createElementNS */])(OGCNS, 'UpperBoundary');
  node.appendChild(upperBoundary);
  writeOgcLiteral(upperBoundary, '' + filter.upperBoundary);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/format/filter/IsLike} filter Filter.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeIsLikeFilter(node, filter, objectStack) {
  node.setAttribute('wildCard', filter.wildCard);
  node.setAttribute('singleChar', filter.singleChar);
  node.setAttribute('escapeChar', filter.escapeChar);
  if (filter.matchCase !== undefined) {
    node.setAttribute('matchCase', filter.matchCase.toString());
  }
  writeOgcPropertyName(node, filter.propertyName);
  writeOgcLiteral(node, '' + filter.pattern);
}


/**
 * @param {string} tagName Tag name.
 * @param {Node} node Node.
 * @param {string} value Value.
 */
function writeOgcExpression(tagName, node, value) {
  const property = Object(xml["d" /* createElementNS */])(OGCNS, tagName);
  Object(xsd["n" /* writeStringTextNode */])(property, value);
  node.appendChild(property);
}


/**
 * @param {Node} node Node.
 * @param {string} value PropertyName value.
 */
function writeOgcPropertyName(node, value) {
  writeOgcExpression('PropertyName', node, value);
}


/**
 * @param {Node} node Node.
 * @param {string} value PropertyName value.
 */
function writeOgcLiteral(node, value) {
  writeOgcExpression('Literal', node, value);
}


/**
 * @param {Node} node Node.
 * @param {string} time PropertyName value.
 */
function writeTimeInstant(node, time) {
  const timeInstant = Object(xml["d" /* createElementNS */])(GMLBase["a" /* GMLNS */], 'TimeInstant');
  node.appendChild(timeInstant);

  const timePosition = Object(xml["d" /* createElementNS */])(GMLBase["a" /* GMLNS */], 'timePosition');
  timeInstant.appendChild(timePosition);
  Object(xsd["n" /* writeStringTextNode */])(timePosition, time);
}


/**
 * Encode filter as WFS `Filter` and return the Node.
 *
 * @param {module:ol/format/filter/Filter} filter Filter.
 * @return {Node} Result.
 * @api
 */
function writeFilter(filter) {
  const child = Object(xml["d" /* createElementNS */])(OGCNS, 'Filter');
  writeFilterCondition(child, filter, []);
  return child;
}


/**
 * @param {Node} node Node.
 * @param {Array.<string>} featureTypes Feature types.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeGetFeature(node, featureTypes, objectStack) {
  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  const item = /** @type {module:ol/xml~NodeStackItem} */ (Object(ol_obj["a" /* assign */])({}, context));
  item.node = node;
  Object(xml["v" /* pushSerializeAndPop */])(item,
    GETFEATURE_SERIALIZERS,
    Object(xml["q" /* makeSimpleNodeFactory */])('Query'), featureTypes,
    objectStack);
}


/**
 * Encode format as WFS `GetFeature` and return the Node.
 *
 * @param {module:ol/format/WFS~WriteGetFeatureOptions} options Options.
 * @return {Node} Result.
 * @api
 */
WFS.prototype.writeGetFeature = function(options) {
  const node = Object(xml["d" /* createElementNS */])(WFSNS, 'GetFeature');
  node.setAttribute('service', 'WFS');
  node.setAttribute('version', '1.1.0');
  let filter;
  if (options) {
    if (options.handle) {
      node.setAttribute('handle', options.handle);
    }
    if (options.outputFormat) {
      node.setAttribute('outputFormat', options.outputFormat);
    }
    if (options.maxFeatures !== undefined) {
      node.setAttribute('maxFeatures', options.maxFeatures);
    }
    if (options.resultType) {
      node.setAttribute('resultType', options.resultType);
    }
    if (options.startIndex !== undefined) {
      node.setAttribute('startIndex', options.startIndex);
    }
    if (options.count !== undefined) {
      node.setAttribute('count', options.count);
    }
    filter = options.filter;
    if (options.bbox) {
      Object(asserts["a" /* assert */])(options.geometryName,
        12); // `options.geometryName` must also be provided when `options.bbox` is set
      const bbox = Object(format_filter["b" /* bbox */])(
        /** @type {string} */ (options.geometryName), options.bbox, options.srsName);
      if (filter) {
        // if bbox and filter are both set, combine the two into a single filter
        filter = Object(format_filter["a" /* and */])(filter, bbox);
      } else {
        filter = bbox;
      }
    }
  }
  node.setAttributeNS(xml["c" /* XML_SCHEMA_INSTANCE_URI */], 'xsi:schemaLocation', this.schemaLocation_);
  /** @type {module:ol/xml~NodeStackItem} */
  const context = {
    node: node,
    'srsName': options.srsName,
    'featureNS': options.featureNS ? options.featureNS : this.featureNS_,
    'featurePrefix': options.featurePrefix,
    'geometryName': options.geometryName,
    'filter': filter,
    'propertyNames': options.propertyNames ? options.propertyNames : []
  };
  Object(asserts["a" /* assert */])(Array.isArray(options.featureTypes),
    11); // `options.featureTypes` should be an Array
  writeGetFeature(node, /** @type {!Array.<string>} */ (options.featureTypes), [context]);
  return node;
};


/**
 * Encode format as WFS `Transaction` and return the Node.
 *
 * @param {Array.<module:ol/Feature>} inserts The features to insert.
 * @param {Array.<module:ol/Feature>} updates The features to update.
 * @param {Array.<module:ol/Feature>} deletes The features to delete.
 * @param {module:ol/format/WFS~WriteTransactionOptions} options Write options.
 * @return {Node} Result.
 * @api
 */
WFS.prototype.writeTransaction = function(inserts, updates, deletes, options) {
  const objectStack = [];
  const node = Object(xml["d" /* createElementNS */])(WFSNS, 'Transaction');
  const version = options.version ? options.version : DEFAULT_VERSION;
  const gmlVersion = version === '1.0.0' ? 2 : 3;
  node.setAttribute('service', 'WFS');
  node.setAttribute('version', version);
  let baseObj;
  /** @type {module:ol/xml~NodeStackItem} */
  let obj;
  if (options) {
    baseObj = options.gmlOptions ? options.gmlOptions : {};
    if (options.handle) {
      node.setAttribute('handle', options.handle);
    }
  }
  const schemaLocation = SCHEMA_LOCATIONS[version];
  node.setAttributeNS(xml["c" /* XML_SCHEMA_INSTANCE_URI */], 'xsi:schemaLocation', schemaLocation);
  const featurePrefix = options.featurePrefix ? options.featurePrefix : FEATURE_PREFIX;
  if (inserts) {
    obj = {node: node, 'featureNS': options.featureNS,
      'featureType': options.featureType, 'featurePrefix': featurePrefix,
      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};
    Object(ol_obj["a" /* assign */])(obj, baseObj);
    Object(xml["v" /* pushSerializeAndPop */])(obj,
      TRANSACTION_SERIALIZERS,
      Object(xml["q" /* makeSimpleNodeFactory */])('Insert'), inserts,
      objectStack);
  }
  if (updates) {
    obj = {node: node, 'featureNS': options.featureNS,
      'featureType': options.featureType, 'featurePrefix': featurePrefix,
      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};
    Object(ol_obj["a" /* assign */])(obj, baseObj);
    Object(xml["v" /* pushSerializeAndPop */])(obj,
      TRANSACTION_SERIALIZERS,
      Object(xml["q" /* makeSimpleNodeFactory */])('Update'), updates,
      objectStack);
  }
  if (deletes) {
    Object(xml["v" /* pushSerializeAndPop */])({node: node, 'featureNS': options.featureNS,
      'featureType': options.featureType, 'featurePrefix': featurePrefix,
      'gmlVersion': gmlVersion, 'srsName': options.srsName},
    TRANSACTION_SERIALIZERS,
    Object(xml["q" /* makeSimpleNodeFactory */])('Delete'), deletes,
    objectStack);
  }
  if (options.nativeElements) {
    Object(xml["v" /* pushSerializeAndPop */])({node: node, 'featureNS': options.featureNS,
      'featureType': options.featureType, 'featurePrefix': featurePrefix,
      'gmlVersion': gmlVersion, 'srsName': options.srsName},
    TRANSACTION_SERIALIZERS,
    Object(xml["q" /* makeSimpleNodeFactory */])('Native'), options.nativeElements,
    objectStack);
  }
  return node;
};


/**
 * Read the projection from a WFS source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @return {?module:ol/proj/Projection} Projection.
 * @api
 */
WFS.prototype.readProjection;


/**
 * @inheritDoc
 */
WFS.prototype.readProjectionFromDocument = function(doc) {
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      return this.readProjectionFromNode(n);
    }
  }
  return null;
};


/**
 * @inheritDoc
 */
WFS.prototype.readProjectionFromNode = function(node) {
  if (node.firstElementChild &&
      node.firstElementChild.firstElementChild) {
    node = node.firstElementChild.firstElementChild;
    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
      if (!(n.childNodes.length === 0 ||
          (n.childNodes.length === 1 &&
          n.firstChild.nodeType === 3))) {
        const objectStack = [{}];
        this.gmlFormat_.readGeometryElement(n, objectStack);
        return Object(ol_proj["h" /* get */])(objectStack.pop().srsName);
      }
    }
  }

  return null;
};
/* harmony default export */ var format_WFS = (WFS);

// EXTERNAL MODULE: ../src/ol/format/WKT.js
var WKT = __webpack_require__(181);

// EXTERNAL MODULE: ../src/ol/format/WMSCapabilities.js
var WMSCapabilities = __webpack_require__(206);

// EXTERNAL MODULE: ../src/ol/format/WMSGetFeatureInfo.js
var WMSGetFeatureInfo = __webpack_require__(188);

// EXTERNAL MODULE: ../src/ol/format/WMTSCapabilities.js
var WMTSCapabilities = __webpack_require__(137);

// CONCATENATED MODULE: ../src/ol/format.js
/* unused concated harmony import EsriJSON */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return EsriJSON["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "b", function() { return GeoJSON["a" /* default */]; });
/* unused concated harmony import GML */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return /* unused export */ undefined; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "a", function() { return GPX["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "c", function() { return IGC["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "d", function() { return KML["a" /* default */]; });
/* unused concated harmony import MVT */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return MVT["a" /* default */]; });
/* unused concated harmony import OWS */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return OWS["a" /* default */]; });
/* unused concated harmony import Polyline */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return Polyline["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "e", function() { return TopoJSON["a" /* default */]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "f", function() { return format_WFS; });
/* unused concated harmony import WKT */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return WKT["a" /* default */]; });
/* unused concated harmony import WMSCapabilities */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return WMSCapabilities["a" /* default */]; });
/* unused concated harmony import WMSGetFeatureInfo */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return WMSGetFeatureInfo["a" /* default */]; });
/* unused concated harmony import WMTSCapabilities */
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, false, function() { return WMTSCapabilities["a" /* default */]; });
/**
 * @module ol/format
 */


















/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getDefaultFillStyle */
/* unused harmony export getDefaultImageStyle */
/* unused harmony export getDefaultStrokeStyle */
/* unused harmony export getDefaultTextStyle */
/* unused harmony export getDefaultStyle */
/* unused harmony export getDefaultStyleArray */
/* unused harmony export readFlatCoordinates */
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(27);
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(77);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(42);
/* harmony import */ var _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(94);
/* harmony import */ var _format_xsd_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6);
/* harmony import */ var _geom_GeometryCollection_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(151);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(41);
/* harmony import */ var _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(71);
/* harmony import */ var _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(73);
/* harmony import */ var _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(82);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(30);
/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(39);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(21);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(7);
/* harmony import */ var _style_Fill_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(104);
/* harmony import */ var _style_Icon_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(160);
/* harmony import */ var _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(100);
/* harmony import */ var _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(80);
/* harmony import */ var _style_Stroke_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(89);
/* harmony import */ var _style_Style_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(75);
/* harmony import */ var _style_Text_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(158);
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(0);
/**
 * @module ol/format/KML
 */




























/**
 * @typedef {Object} Vec2
 * @property {number} x
 * @property {module:ol/style/IconAnchorUnits} xunits
 * @property {number} y
 * @property {module:ol/style/IconAnchorUnits} yunits
 * @property {module:ol/style/IconOrigin} origin
 */

/**
 * @typedef {Object} GxTrackObject
 * @property {Array.<number>} flatCoordinates
 * @property {Array.<number>} whens
 */

/**
 * @type {module:ol/color~Color}
 */
let DEFAULT_COLOR;

/**
 * @type {module:ol/style/Fill}
 */
let DEFAULT_FILL_STYLE = null;

/**
 * Get the default fill style (or null if not yet set).
 * @return {module:ol/style/Fill} The default fill style.
 */
function getDefaultFillStyle() {
  return DEFAULT_FILL_STYLE;
}

/**
 * @type {module:ol/size~Size}
 */
let DEFAULT_IMAGE_STYLE_ANCHOR;

/**
 * @type {module:ol/style/IconAnchorUnits}
 */
let DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;

/**
 * @type {module:ol/style/IconAnchorUnits}
 */
let DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;

/**
 * @type {module:ol/size~Size}
 */
let DEFAULT_IMAGE_STYLE_SIZE;

/**
 * @type {string}
 */
let DEFAULT_IMAGE_STYLE_SRC;

/**
 * @type {number}
 */
let DEFAULT_IMAGE_SCALE_MULTIPLIER;

/**
 * @type {module:ol/style/Image}
 */
let DEFAULT_IMAGE_STYLE = null;

/**
 * Get the default image style (or null if not yet set).
 * @return {module:ol/style/Image} The default image style.
 */
function getDefaultImageStyle() {
  return DEFAULT_IMAGE_STYLE;
}

/**
 * @type {string}
 */
let DEFAULT_NO_IMAGE_STYLE;

/**
 * @type {module:ol/style/Stroke}
 */
let DEFAULT_STROKE_STYLE = null;

/**
 * Get the default stroke style (or null if not yet set).
 * @return {module:ol/style/Stroke} The default stroke style.
 */
function getDefaultStrokeStyle() {
  return DEFAULT_STROKE_STYLE;
}

/**
 * @type {module:ol/style/Stroke}
 */
let DEFAULT_TEXT_STROKE_STYLE;

/**
 * @type {module:ol/style/Text}
 */
let DEFAULT_TEXT_STYLE = null;

/**
 * Get the default text style (or null if not yet set).
 * @return {module:ol/style/Text} The default text style.
 */
function getDefaultTextStyle() {
  return DEFAULT_TEXT_STYLE;
}

/**
 * @type {module:ol/style/Style}
 */
let DEFAULT_STYLE = null;

/**
 * Get the default style (or null if not yet set).
 * @return {module:ol/style/Style} The default style.
 */
function getDefaultStyle() {
  return DEFAULT_STYLE;
}

/**
 * @type {Array.<module:ol/style/Style>}
 */
let DEFAULT_STYLE_ARRAY = null;

/**
 * Get the default style array (or null if not yet set).
 * @return {Array.<module:ol/style/Style>} The default style.
 */
function getDefaultStyleArray() {
  return DEFAULT_STYLE_ARRAY;
}


function createStyleDefaults() {

  DEFAULT_COLOR = [255, 255, 255, 1];

  DEFAULT_FILL_STYLE = new _style_Fill_js__WEBPACK_IMPORTED_MODULE_19__[/* default */ "a"]({
    color: DEFAULT_COLOR
  });

  DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2]; // FIXME maybe [8, 32] ?

  DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"].PIXELS;

  DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"].PIXELS;

  DEFAULT_IMAGE_STYLE_SIZE = [64, 64];

  DEFAULT_IMAGE_STYLE_SRC =
      'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';

  DEFAULT_IMAGE_SCALE_MULTIPLIER = 0.5;

  DEFAULT_IMAGE_STYLE = new _style_Icon_js__WEBPACK_IMPORTED_MODULE_20__[/* default */ "a"]({
    anchor: DEFAULT_IMAGE_STYLE_ANCHOR,
    anchorOrigin: _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"].BOTTOM_LEFT,
    anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,
    anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,
    crossOrigin: 'anonymous',
    rotation: 0,
    scale: DEFAULT_IMAGE_SCALE_MULTIPLIER,
    size: DEFAULT_IMAGE_STYLE_SIZE,
    src: DEFAULT_IMAGE_STYLE_SRC
  });

  DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';

  DEFAULT_STROKE_STYLE = new _style_Stroke_js__WEBPACK_IMPORTED_MODULE_23__[/* default */ "a"]({
    color: DEFAULT_COLOR,
    width: 1
  });

  DEFAULT_TEXT_STROKE_STYLE = new _style_Stroke_js__WEBPACK_IMPORTED_MODULE_23__[/* default */ "a"]({
    color: [51, 51, 51, 1],
    width: 2
  });

  DEFAULT_TEXT_STYLE = new _style_Text_js__WEBPACK_IMPORTED_MODULE_25__[/* default */ "a"]({
    font: 'bold 16px Helvetica',
    fill: DEFAULT_FILL_STYLE,
    stroke: DEFAULT_TEXT_STROKE_STYLE,
    scale: 0.8
  });

  DEFAULT_STYLE = new _style_Style_js__WEBPACK_IMPORTED_MODULE_24__[/* default */ "c"]({
    fill: DEFAULT_FILL_STYLE,
    image: DEFAULT_IMAGE_STYLE,
    text: DEFAULT_TEXT_STYLE,
    stroke: DEFAULT_STROKE_STYLE,
    zIndex: 0
  });

  DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];

}


/**
 * @typedef {Object} Options
 * @property {boolean} [extractStyles=true] Extract styles from the KML.
 * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.
 * @property {Array.<module:ol/style/Style>} [defaultStyle] Default style. The
 * default default style is the same as Google Earth.
 * @property {boolean} [writeStyles=true] Write styles into KML.
 */


/**
 * @classdesc
 * Feature format for reading and writing data in the KML format.
 *
 * Note that the KML format uses the URL() constructor. Older browsers such as IE
 * which do not support this will need a URL polyfill to be loaded before use.
 *
 * @constructor
 * @extends {module:ol/format/XMLFeature}
 * @param {module:ol/format/KML~Options=} opt_options Options.
 * @api
 */
const KML = function(opt_options) {

  const options = opt_options ? opt_options : {};

  _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].call(this);

  if (!DEFAULT_STYLE_ARRAY) {
    createStyleDefaults();
  }

  /**
   * @inheritDoc
   */
  this.dataProjection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_18__[/* get */ "h"])('EPSG:4326');

  /**
   * @private
   * @type {Array.<module:ol/style/Style>}
   */
  this.defaultStyle_ = options.defaultStyle ?
    options.defaultStyle : DEFAULT_STYLE_ARRAY;

  /**
   * @private
   * @type {boolean}
   */
  this.extractStyles_ = options.extractStyles !== undefined ?
    options.extractStyles : true;

  /**
   * @private
   * @type {boolean}
   */
  this.writeStyles_ = options.writeStyles !== undefined ?
    options.writeStyles : true;

  /**
   * @private
   * @type {!Object.<string, (Array.<module:ol/style/Style>|string)>}
   */
  this.sharedStyles_ = {};

  /**
   * @private
   * @type {boolean}
   */
  this.showPointNames_ = options.showPointNames !== undefined ?
    options.showPointNames : true;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(KML, _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"]);


/**
 * @const
 * @type {Array.<string>}
 */
const GX_NAMESPACE_URIS = [
  'http://www.google.com/kml/ext/2.2'
];


/**
 * @const
 * @type {Array.<null|string>}
 */
const NAMESPACE_URIS = [
  null,
  'http://earth.google.com/kml/2.0',
  'http://earth.google.com/kml/2.1',
  'http://earth.google.com/kml/2.2',
  'http://www.opengis.net/kml/2.2'
];


/**
 * @const
 * @type {string}
 */
const SCHEMA_LOCATION = 'http://www.opengis.net/kml/2.2 ' +
    'https://developers.google.com/kml/schema/kml22gx.xsd';


/**
 * @type {Object.<string, module:ol/style/IconAnchorUnits>}
 */
const ICON_ANCHOR_UNITS_MAP = {
  'fraction': _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"].FRACTION,
  'pixels': _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"].PIXELS,
  'insetPixels': _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"].PIXELS
};


/**
 * @param {module:ol/style/Style|undefined} foundStyle Style.
 * @param {string} name Name.
 * @return {module:ol/style/Style} style Style.
 */
function createNameStyleFunction(foundStyle, name) {
  let textStyle = null;
  const textOffset = [0, 0];
  let textAlign = 'start';
  if (foundStyle.getImage()) {
    let imageSize = foundStyle.getImage().getImageSize();
    if (imageSize === null) {
      imageSize = DEFAULT_IMAGE_STYLE_SIZE;
    }
    if (imageSize.length == 2) {
      const imageScale = foundStyle.getImage().getScale();
      // Offset the label to be centered to the right of the icon, if there is
      // one.
      textOffset[0] = imageScale * imageSize[0] / 2;
      textOffset[1] = -imageScale * imageSize[1] / 2;
      textAlign = 'left';
    }
  }
  if (foundStyle.getText() !== null) {
    // clone the text style, customizing it with name, alignments and offset.
    // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).
    const foundText = foundStyle.getText();
    textStyle = foundText.clone();
    textStyle.setFont(foundText.getFont() || DEFAULT_TEXT_STYLE.getFont());
    textStyle.setScale(foundText.getScale() || DEFAULT_TEXT_STYLE.getScale());
    textStyle.setFill(foundText.getFill() || DEFAULT_TEXT_STYLE.getFill());
    textStyle.setStroke(foundText.getStroke() || DEFAULT_TEXT_STROKE_STYLE);
  } else {
    textStyle = DEFAULT_TEXT_STYLE.clone();
  }
  textStyle.setText(name);
  textStyle.setOffsetX(textOffset[0]);
  textStyle.setOffsetY(textOffset[1]);
  textStyle.setTextAlign(textAlign);

  const nameStyle = new _style_Style_js__WEBPACK_IMPORTED_MODULE_24__[/* default */ "c"]({
    text: textStyle
  });
  return nameStyle;
}


/**
 * @param {Array.<module:ol/style/Style>|undefined} style Style.
 * @param {string} styleUrl Style URL.
 * @param {Array.<module:ol/style/Style>} defaultStyle Default style.
 * @param {!Object.<string, (Array.<module:ol/style/Style>|string)>} sharedStyles Shared styles.
 * @param {boolean|undefined} showPointNames true to show names for point placemarks.
 * @return {module:ol/style/Style~StyleFunction} Feature style function.
 */
function createFeatureStyleFunction(style, styleUrl, defaultStyle, sharedStyles, showPointNames) {

  return (
    /**
     * @param {module:ol/Feature} feature feature.
     * @param {number} resolution Resolution.
     * @return {Array.<module:ol/style/Style>} Style.
     */
    function(feature, resolution) {
      let drawName = showPointNames;
      /** @type {module:ol/style/Style|undefined} */
      let nameStyle;
      let name = '';
      if (drawName) {
        const geometry = feature.getGeometry();
        if (geometry) {
          drawName = geometry.getType() === _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].POINT;
        }
      }

      if (drawName) {
        name = /** @type {string} */ (feature.get('name'));
        drawName = drawName && name;
      }

      if (style) {
        if (drawName) {
          nameStyle = createNameStyleFunction(style[0], name);
          return style.concat(nameStyle);
        }
        return style;
      }
      if (styleUrl) {
        const foundStyle = findStyle(styleUrl, defaultStyle, sharedStyles);
        if (drawName) {
          nameStyle = createNameStyleFunction(foundStyle[0], name);
          return foundStyle.concat(nameStyle);
        }
        return foundStyle;
      }
      if (drawName) {
        nameStyle = createNameStyleFunction(defaultStyle[0], name);
        return defaultStyle.concat(nameStyle);
      }
      return defaultStyle;
    }
  );
}


/**
 * @param {Array.<module:ol/style/Style>|string|undefined} styleValue Style value.
 * @param {Array.<module:ol/style/Style>} defaultStyle Default style.
 * @param {!Object.<string, (Array.<module:ol/style/Style>|string)>} sharedStyles
 * Shared styles.
 * @return {Array.<module:ol/style/Style>} Style.
 */
function findStyle(styleValue, defaultStyle, sharedStyles) {
  if (Array.isArray(styleValue)) {
    return styleValue;
  } else if (typeof styleValue === 'string') {
    // KML files in the wild occasionally forget the leading `#` on styleUrls
    // defined in the same document.  Add a leading `#` if it enables to find
    // a style.
    if (!(styleValue in sharedStyles) && ('#' + styleValue in sharedStyles)) {
      styleValue = '#' + styleValue;
    }
    return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);
  } else {
    return defaultStyle;
  }
}


/**
 * @param {Node} node Node.
 * @return {module:ol/color~Color|undefined} Color.
 */
function readColor(node) {
  const s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* getAllTextContent */ "e"])(node, false);
  // The KML specification states that colors should not include a leading `#`
  // but we tolerate them.
  const m = /^\s*#?\s*([0-9A-Fa-f]{8})\s*$/.exec(s);
  if (m) {
    const hexColor = m[1];
    return [
      parseInt(hexColor.substr(6, 2), 16),
      parseInt(hexColor.substr(4, 2), 16),
      parseInt(hexColor.substr(2, 2), 16),
      parseInt(hexColor.substr(0, 2), 16) / 255
    ];

  } else {
    return undefined;
  }
}


/**
 * @param {Node} node Node.
 * @return {Array.<number>|undefined} Flat coordinates.
 */
function readFlatCoordinates(node) {
  let s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* getAllTextContent */ "e"])(node, false);
  const flatCoordinates = [];
  // The KML specification states that coordinate tuples should not include
  // spaces, but we tolerate them.
  const re =
      /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)\s*,\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)(?:\s*,\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?))?\s*/i;
  let m;
  while ((m = re.exec(s))) {
    const x = parseFloat(m[1]);
    const y = parseFloat(m[2]);
    const z = m[3] ? parseFloat(m[3]) : 0;
    flatCoordinates.push(x, y, z);
    s = s.substr(m[0].length);
  }
  if (s !== '') {
    return undefined;
  }
  return flatCoordinates;
}


/**
 * @param {Node} node Node.
 * @return {string} URI.
 */
function readURI(node) {
  const s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* getAllTextContent */ "e"])(node, false).trim();
  let baseURI = node.baseURI;
  if (!baseURI || baseURI == 'about:blank') {
    baseURI = window.location.href;
  }
  if (baseURI) {
    const url = new URL(s, baseURI);
    return url.href;
  } else {
    return s;
  }
}


/**
 * @param {Node} node Node.
 * @return {module:ol/format/KML~Vec2} Vec2.
 */
function readVec2(node) {
  const xunits = node.getAttribute('xunits');
  const yunits = node.getAttribute('yunits');
  let origin;
  if (xunits !== 'insetPixels') {
    if (yunits !== 'insetPixels') {
      origin = _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"].BOTTOM_LEFT;
    } else {
      origin = _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"].TOP_LEFT;
    }
  } else {
    if (yunits !== 'insetPixels') {
      origin = _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"].BOTTOM_RIGHT;
    } else {
      origin = _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"].TOP_RIGHT;
    }
  }
  return {
    x: parseFloat(node.getAttribute('x')),
    xunits: ICON_ANCHOR_UNITS_MAP[xunits],
    y: parseFloat(node.getAttribute('y')),
    yunits: ICON_ANCHOR_UNITS_MAP[yunits],
    origin: origin
  };
}


/**
 * @param {Node} node Node.
 * @return {number|undefined} Scale.
 */
function readScale(node) {
  return Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"])(node);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const STYLE_MAP_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Pair': pairDataParser
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Array.<module:ol/style/Style>|string|undefined} StyleMap.
 */
function readStyleMapValue(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(undefined,
    STYLE_MAP_PARSERS, node, objectStack);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const ICON_STYLE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Icon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readIcon),
    'heading': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
    'hotSpot': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readVec2),
    'scale': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readScale)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function iconStyleParser(node, objectStack) {
  // FIXME refreshMode
  // FIXME refreshInterval
  // FIXME viewRefreshTime
  // FIXME viewBoundScale
  // FIXME viewFormat
  // FIXME httpQuery
  const object = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(
    {}, ICON_STYLE_PARSERS, node, objectStack);
  if (!object) {
    return;
  }
  const styleObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  const IconObject = 'Icon' in object ? object['Icon'] : {};
  const drawIcon = (!('Icon' in object) || Object.keys(IconObject).length > 0);
  let src;
  const href = /** @type {string|undefined} */
      (IconObject['href']);
  if (href) {
    src = href;
  } else if (drawIcon) {
    src = DEFAULT_IMAGE_STYLE_SRC;
  }
  let anchor, anchorXUnits, anchorYUnits;
  let anchorOrigin = _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"].BOTTOM_LEFT;
  const hotSpot = /** @type {module:ol/format/KML~Vec2|undefined} */
      (object['hotSpot']);
  if (hotSpot) {
    anchor = [hotSpot.x, hotSpot.y];
    anchorXUnits = hotSpot.xunits;
    anchorYUnits = hotSpot.yunits;
    anchorOrigin = hotSpot.origin;
  } else if (src === DEFAULT_IMAGE_STYLE_SRC) {
    anchor = DEFAULT_IMAGE_STYLE_ANCHOR;
    anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
    anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
  } else if (/^http:\/\/maps\.(?:google|gstatic)\.com\//.test(src)) {
    anchor = [0.5, 0];
    anchorXUnits = _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"].FRACTION;
    anchorYUnits = _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"].FRACTION;
  }

  let offset;
  const x = /** @type {number|undefined} */
      (IconObject['x']);
  const y = /** @type {number|undefined} */
      (IconObject['y']);
  if (x !== undefined && y !== undefined) {
    offset = [x, y];
  }

  let size;
  const w = /** @type {number|undefined} */
      (IconObject['w']);
  const h = /** @type {number|undefined} */
      (IconObject['h']);
  if (w !== undefined && h !== undefined) {
    size = [w, h];
  }

  let rotation;
  const heading = /** @type {number} */
      (object['heading']);
  if (heading !== undefined) {
    rotation = Object(_math_js__WEBPACK_IMPORTED_MODULE_17__[/* toRadians */ "j"])(heading);
  }

  let scale = /** @type {number|undefined} */
      (object['scale']);

  if (drawIcon) {
    if (src == DEFAULT_IMAGE_STYLE_SRC) {
      size = DEFAULT_IMAGE_STYLE_SIZE;
      if (scale === undefined) {
        scale = DEFAULT_IMAGE_SCALE_MULTIPLIER;
      }
    }

    const imageStyle = new _style_Icon_js__WEBPACK_IMPORTED_MODULE_20__[/* default */ "a"]({
      anchor: anchor,
      anchorOrigin: anchorOrigin,
      anchorXUnits: anchorXUnits,
      anchorYUnits: anchorYUnits,
      crossOrigin: 'anonymous', // FIXME should this be configurable?
      offset: offset,
      offsetOrigin: _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"].BOTTOM_LEFT,
      rotation: rotation,
      scale: scale,
      size: size,
      src: src
    });
    styleObject['imageStyle'] = imageStyle;
  } else {
    // handle the case when we explicitly want to draw no icon.
    styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const LABEL_STYLE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'color': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readColor),
    'scale': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readScale)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function labelStyleParser(node, objectStack) {
  // FIXME colorMode
  const object = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(
    {}, LABEL_STYLE_PARSERS, node, objectStack);
  if (!object) {
    return;
  }
  const styleObject = objectStack[objectStack.length - 1];
  const textStyle = new _style_Text_js__WEBPACK_IMPORTED_MODULE_25__[/* default */ "a"]({
    fill: new _style_Fill_js__WEBPACK_IMPORTED_MODULE_19__[/* default */ "a"]({
      color: /** @type {module:ol/color~Color} */
          ('color' in object ? object['color'] : DEFAULT_COLOR)
    }),
    scale: /** @type {number|undefined} */
        (object['scale'])
  });
  styleObject['textStyle'] = textStyle;
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const LINE_STYLE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'color': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readColor),
    'width': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"])
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function lineStyleParser(node, objectStack) {
  // FIXME colorMode
  // FIXME gx:outerColor
  // FIXME gx:outerWidth
  // FIXME gx:physicalWidth
  // FIXME gx:labelVisibility
  const object = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(
    {}, LINE_STYLE_PARSERS, node, objectStack);
  if (!object) {
    return;
  }
  const styleObject = objectStack[objectStack.length - 1];
  const strokeStyle = new _style_Stroke_js__WEBPACK_IMPORTED_MODULE_23__[/* default */ "a"]({
    color: /** @type {module:ol/color~Color} */
        ('color' in object ? object['color'] : DEFAULT_COLOR),
    width: /** @type {number} */ ('width' in object ? object['width'] : 1)
  });
  styleObject['strokeStyle'] = strokeStyle;
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const POLY_STYLE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'color': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readColor),
    'fill': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readBoolean */ "a"]),
    'outline': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readBoolean */ "a"])
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function polyStyleParser(node, objectStack) {
  // FIXME colorMode
  const object = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(
    {}, POLY_STYLE_PARSERS, node, objectStack);
  if (!object) {
    return;
  }
  const styleObject = objectStack[objectStack.length - 1];
  const fillStyle = new _style_Fill_js__WEBPACK_IMPORTED_MODULE_19__[/* default */ "a"]({
    color: /** @type {module:ol/color~Color} */
        ('color' in object ? object['color'] : DEFAULT_COLOR)
  });
  styleObject['fillStyle'] = fillStyle;
  const fill = /** @type {boolean|undefined} */ (object['fill']);
  if (fill !== undefined) {
    styleObject['fill'] = fill;
  }
  const outline = /** @type {boolean|undefined} */ (object['outline']);
  if (outline !== undefined) {
    styleObject['outline'] = outline;
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const FLAT_LINEAR_RING_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'coordinates': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeReplacer */ "o"])(readFlatCoordinates)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Array.<number>} LinearRing flat coordinates.
 */
function readFlatLinearRing(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(null,
    FLAT_LINEAR_RING_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function gxCoordParser(node, objectStack) {
  const gxTrackObject = /** @type {module:ol/format/KML~GxTrackObject} */
      (objectStack[objectStack.length - 1]);
  const flatCoordinates = gxTrackObject.flatCoordinates;
  const s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* getAllTextContent */ "e"])(node, false);
  const re =
      /^\s*([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s*$/i;
  const m = re.exec(s);
  if (m) {
    const x = parseFloat(m[1]);
    const y = parseFloat(m[2]);
    const z = parseFloat(m[3]);
    flatCoordinates.push(x, y, z, 0);
  } else {
    flatCoordinates.push(0, 0, 0, 0);
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const GX_MULTITRACK_GEOMETRY_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  GX_NAMESPACE_URIS, {
    'Track': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeArrayPusher */ "j"])(readGxTrack)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/MultiLineString|undefined} MultiLineString.
 */
function readGxMultiTrack(node, objectStack) {
  const lineStrings = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])([],
    GX_MULTITRACK_GEOMETRY_PARSERS, node, objectStack);
  if (!lineStrings) {
    return undefined;
  }
  const multiLineString = new _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](null);
  multiLineString.setLineStrings(lineStrings);
  return multiLineString;
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const GX_TRACK_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'when': whenParser
  }, Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
    GX_NAMESPACE_URIS, {
      'coord': gxCoordParser
    }));


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/LineString|undefined} LineString.
 */
function readGxTrack(node, objectStack) {
  const gxTrackObject = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(
    /** @type {module:ol/format/KML~GxTrackObject} */ ({
      flatCoordinates: [],
      whens: []
    }), GX_TRACK_PARSERS, node, objectStack);
  if (!gxTrackObject) {
    return undefined;
  }
  const flatCoordinates = gxTrackObject.flatCoordinates;
  const whens = gxTrackObject.whens;
  for (let i = 0, ii = Math.min(flatCoordinates.length, whens.length); i < ii; ++i) {
    flatCoordinates[4 * i + 3] = whens[i];
  }
  const lineString = new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"](null);
  lineString.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].XYZM, flatCoordinates);
  return lineString;
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const ICON_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'href': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readURI)
  }, Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
    GX_NAMESPACE_URIS, {
      'x': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
      'y': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
      'w': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
      'h': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"])
    }));


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object} Icon object.
 */
function readIcon(node, objectStack) {
  const iconObject = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(
    {}, ICON_PARSERS, node, objectStack);
  if (iconObject) {
    return iconObject;
  } else {
    return null;
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const GEOMETRY_FLAT_COORDINATES_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'coordinates': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeReplacer */ "o"])(readFlatCoordinates)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Array.<number>} Flat coordinates.
 */
function readFlatCoordinatesFromNode(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(null,
    GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const EXTRUDE_AND_ALTITUDE_MODE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'extrude': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readBoolean */ "a"]),
    'tessellate': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readBoolean */ "a"]),
    'altitudeMode': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"])
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/LineString|undefined} LineString.
 */
function readLineString(node, objectStack) {
  const properties = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])({},
    EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,
    objectStack);
  const flatCoordinates =
      readFlatCoordinatesFromNode(node, objectStack);
  if (flatCoordinates) {
    const lineString = new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"](null);
    lineString.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].XYZ, flatCoordinates);
    lineString.setProperties(properties);
    return lineString;
  } else {
    return undefined;
  }
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/Polygon|undefined} Polygon.
 */
function readLinearRing(node, objectStack) {
  const properties = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])({},
    EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,
    objectStack);
  const flatCoordinates =
      readFlatCoordinatesFromNode(node, objectStack);
  if (flatCoordinates) {
    const polygon = new _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "b"](null);
    polygon.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].XYZ, flatCoordinates,
      [flatCoordinates.length]);
    polygon.setProperties(properties);
    return polygon;
  } else {
    return undefined;
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const MULTI_GEOMETRY_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'LineString': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeArrayPusher */ "j"])(readLineString),
    'LinearRing': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeArrayPusher */ "j"])(readLinearRing),
    'MultiGeometry': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeArrayPusher */ "j"])(readMultiGeometry),
    'Point': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeArrayPusher */ "j"])(readPoint),
    'Polygon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeArrayPusher */ "j"])(readPolygon)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/Geometry} Geometry.
 */
function readMultiGeometry(node, objectStack) {
  const geometries = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])([],
    MULTI_GEOMETRY_PARSERS, node, objectStack);
  if (!geometries) {
    return null;
  }
  if (geometries.length === 0) {
    return new _geom_GeometryCollection_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](geometries);
  }
  /** @type {module:ol/geom/Geometry} */
  let multiGeometry;
  let homogeneous = true;
  const type = geometries[0].getType();
  let geometry;
  for (let i = 1, ii = geometries.length; i < ii; ++i) {
    geometry = geometries[i];
    if (geometry.getType() != type) {
      homogeneous = false;
      break;
    }
  }
  if (homogeneous) {
    let layout;
    let flatCoordinates;
    if (type == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].POINT) {
      const point = geometries[0];
      layout = point.getLayout();
      flatCoordinates = point.getFlatCoordinates();
      for (let i = 1, ii = geometries.length; i < ii; ++i) {
        geometry = geometries[i];
        Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(flatCoordinates, geometry.getFlatCoordinates());
      }
      multiGeometry = new _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"](null);
      multiGeometry.setFlatCoordinates(layout, flatCoordinates);
      setCommonGeometryProperties(multiGeometry, geometries);
    } else if (type == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].LINE_STRING) {
      multiGeometry = new _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](null);
      multiGeometry.setLineStrings(geometries);
      setCommonGeometryProperties(multiGeometry, geometries);
    } else if (type == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].POLYGON) {
      multiGeometry = new _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"](null);
      multiGeometry.setPolygons(geometries);
      setCommonGeometryProperties(multiGeometry, geometries);
    } else if (type == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].GEOMETRY_COLLECTION) {
      multiGeometry = new _geom_GeometryCollection_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](geometries);
    } else {
      Object(_asserts_js__WEBPACK_IMPORTED_MODULE_3__[/* assert */ "a"])(false, 37); // Unknown geometry type found
    }
  } else {
    multiGeometry = new _geom_GeometryCollection_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](geometries);
  }
  return (
    /** @type {module:ol/geom/Geometry} */ (multiGeometry)
  );
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/Point|undefined} Point.
 */
function readPoint(node, objectStack) {
  const properties = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])({},
    EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,
    objectStack);
  const flatCoordinates =
      readFlatCoordinatesFromNode(node, objectStack);
  if (flatCoordinates) {
    const point = new _geom_Point_js__WEBPACK_IMPORTED_MODULE_15__[/* default */ "a"](null);
    point.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].XYZ, flatCoordinates);
    point.setProperties(properties);
    return point;
  } else {
    return undefined;
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const FLAT_LINEAR_RINGS_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'innerBoundaryIs': innerBoundaryIsParser,
    'outerBoundaryIs': outerBoundaryIsParser
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/geom/Polygon|undefined} Polygon.
 */
function readPolygon(node, objectStack) {
  const properties = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(/** @type {Object<string,*>} */ ({}),
    EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,
    objectStack);
  const flatLinearRings = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])([null],
    FLAT_LINEAR_RINGS_PARSERS, node, objectStack);
  if (flatLinearRings && flatLinearRings[0]) {
    const polygon = new _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "b"](null);
    const flatCoordinates = flatLinearRings[0];
    const ends = [flatCoordinates.length];
    for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {
      Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(flatCoordinates, flatLinearRings[i]);
      ends.push(flatCoordinates.length);
    }
    polygon.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].XYZ, flatCoordinates, ends);
    polygon.setProperties(properties);
    return polygon;
  } else {
    return undefined;
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const STYLE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'IconStyle': iconStyleParser,
    'LabelStyle': labelStyleParser,
    'LineStyle': lineStyleParser,
    'PolyStyle': polyStyleParser
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Array.<module:ol/style/Style>} Style.
 */
function readStyle(node, objectStack) {
  const styleObject = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(
    {}, STYLE_PARSERS, node, objectStack);
  if (!styleObject) {
    return null;
  }
  let fillStyle = /** @type {module:ol/style/Fill} */
      ('fillStyle' in styleObject ?
        styleObject['fillStyle'] : DEFAULT_FILL_STYLE);
  const fill = /** @type {boolean|undefined} */ (styleObject['fill']);
  if (fill !== undefined && !fill) {
    fillStyle = null;
  }
  let imageStyle = /** @type {module:ol/style/Image} */
      ('imageStyle' in styleObject ?
        styleObject['imageStyle'] : DEFAULT_IMAGE_STYLE);
  if (imageStyle == DEFAULT_NO_IMAGE_STYLE) {
    imageStyle = undefined;
  }
  const textStyle = /** @type {module:ol/style/Text} */
      ('textStyle' in styleObject ?
        styleObject['textStyle'] : DEFAULT_TEXT_STYLE);
  let strokeStyle = /** @type {module:ol/style/Stroke} */
      ('strokeStyle' in styleObject ?
        styleObject['strokeStyle'] : DEFAULT_STROKE_STYLE);
  const outline = /** @type {boolean|undefined} */
      (styleObject['outline']);
  if (outline !== undefined && !outline) {
    strokeStyle = null;
  }
  return [new _style_Style_js__WEBPACK_IMPORTED_MODULE_24__[/* default */ "c"]({
    fill: fillStyle,
    image: imageStyle,
    stroke: strokeStyle,
    text: textStyle,
    zIndex: undefined // FIXME
  })];
}


/**
 * Reads an array of geometries and creates arrays for common geometry
 * properties. Then sets them to the multi geometry.
 * @param {module:ol/geom/MultiPoint|module:ol/geom/MultiLineString|module:ol/geom/MultiPolygon}
 *     multiGeometry A multi-geometry.
 * @param {Array.<module:ol/geom/Geometry>} geometries List of geometries.
 */
function setCommonGeometryProperties(multiGeometry, geometries) {
  const ii = geometries.length;
  const extrudes = new Array(geometries.length);
  const tessellates = new Array(geometries.length);
  const altitudeModes = new Array(geometries.length);
  let hasExtrude, hasTessellate, hasAltitudeMode;
  hasExtrude = hasTessellate = hasAltitudeMode = false;
  for (let i = 0; i < ii; ++i) {
    const geometry = geometries[i];
    extrudes[i] = geometry.get('extrude');
    tessellates[i] = geometry.get('tessellate');
    altitudeModes[i] = geometry.get('altitudeMode');
    hasExtrude = hasExtrude || extrudes[i] !== undefined;
    hasTessellate = hasTessellate || tessellates[i] !== undefined;
    hasAltitudeMode = hasAltitudeMode || altitudeModes[i];
  }
  if (hasExtrude) {
    multiGeometry.set('extrude', extrudes);
  }
  if (hasTessellate) {
    multiGeometry.set('tessellate', tessellates);
  }
  if (hasAltitudeMode) {
    multiGeometry.set('altitudeMode', altitudeModes);
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const DATA_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'displayName': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'value': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"])
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function dataParser(node, objectStack) {
  const name = node.getAttribute('name');
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* parseNode */ "t"])(DATA_PARSERS, node, objectStack);
  const featureObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  if (name !== null) {
    featureObject[name] = featureObject.value;
  } else if (featureObject.displayName !== null) {
    featureObject[featureObject.displayName] = featureObject.value;
  }
  delete featureObject['value'];
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const EXTENDED_DATA_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Data': dataParser,
    'SchemaData': schemaDataParser
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function extendedDataParser(node, objectStack) {
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* parseNode */ "t"])(EXTENDED_DATA_PARSERS, node, objectStack);
}

/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const REGION_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'LatLonAltBox': latLonAltBoxParser,
    'Lod': lodParser
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function regionParser(node, objectStack) {
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* parseNode */ "t"])(REGION_PARSERS, node, objectStack);
}

/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const PAIR_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Style': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readStyle),
    'key': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'styleUrl': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readURI)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function pairDataParser(node, objectStack) {
  const pairObject = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(
    {}, PAIR_PARSERS, node, objectStack);
  if (!pairObject) {
    return;
  }
  const key = /** @type {string|undefined} */
      (pairObject['key']);
  if (key && key == 'normal') {
    const styleUrl = /** @type {string|undefined} */
        (pairObject['styleUrl']);
    if (styleUrl) {
      objectStack[objectStack.length - 1] = styleUrl;
    }
    const Style = /** @type {module:ol/style/Style} */
        (pairObject['Style']);
    if (Style) {
      objectStack[objectStack.length - 1] = Style;
    }
  }
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function placemarkStyleMapParser(node, objectStack) {
  const styleMapValue = readStyleMapValue(node, objectStack);
  if (!styleMapValue) {
    return;
  }
  const placemarkObject = objectStack[objectStack.length - 1];
  if (Array.isArray(styleMapValue)) {
    placemarkObject['Style'] = styleMapValue;
  } else if (typeof styleMapValue === 'string') {
    placemarkObject['styleUrl'] = styleMapValue;
  } else {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_3__[/* assert */ "a"])(false, 38); // `styleMapValue` has an unknown type
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const SCHEMA_DATA_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'SimpleData': simpleDataParser
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function schemaDataParser(node, objectStack) {
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* parseNode */ "t"])(SCHEMA_DATA_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function simpleDataParser(node, objectStack) {
  const name = node.getAttribute('name');
  if (name !== null) {
    const data = Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"])(node);
    const featureObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    featureObject[name] = data;
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const LAT_LON_ALT_BOX_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'altitudeMode': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'minAltitude': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
    'maxAltitude': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
    'north': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
    'south': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
    'east': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
    'west': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"])
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function latLonAltBoxParser(node, objectStack) {
  const object = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])({}, LAT_LON_ALT_BOX_PARSERS, node, objectStack);
  if (!object) {
    return;
  }
  const regionObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  const extent = [
    parseFloat(object['west']),
    parseFloat(object['south']),
    parseFloat(object['east']),
    parseFloat(object['north'])
  ];
  regionObject['extent'] = extent;
  regionObject['altitudeMode'] = object['altitudeMode'];
  regionObject['minAltitude'] = parseFloat(object['minAltitude']);
  regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const LOD_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'minLodPixels': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
    'maxLodPixels': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
    'minFadeExtent': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"]),
    'maxFadeExtent': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readDecimal */ "d"])
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function lodParser(node, objectStack) {
  const object = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])({}, LOD_PARSERS, node, objectStack);
  if (!object) {
    return;
  }
  const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);
  lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);
  lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);
  lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const INNER_BOUNDARY_IS_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'LinearRing': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeReplacer */ "o"])(readFlatLinearRing)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function innerBoundaryIsParser(node, objectStack) {
  /** @type {Array.<number>|undefined} */
  const flatLinearRing = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(undefined,
    INNER_BOUNDARY_IS_PARSERS, node, objectStack);
  if (flatLinearRing) {
    const flatLinearRings = /** @type {Array.<Array.<number>>} */
        (objectStack[objectStack.length - 1]);
    flatLinearRings.push(flatLinearRing);
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const OUTER_BOUNDARY_IS_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'LinearRing': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeReplacer */ "o"])(readFlatLinearRing)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function outerBoundaryIsParser(node, objectStack) {
  /** @type {Array.<number>|undefined} */
  const flatLinearRing = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])(undefined,
    OUTER_BOUNDARY_IS_PARSERS, node, objectStack);
  if (flatLinearRing) {
    const flatLinearRings = /** @type {Array.<Array.<number>>} */
        (objectStack[objectStack.length - 1]);
    flatLinearRings[0] = flatLinearRing;
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const NETWORK_LINK_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ExtendedData': extendedDataParser,
    'Region': regionParser,
    'Link': linkParser,
    'address': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'description': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'open': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readBoolean */ "a"]),
    'phoneNumber': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'visibility': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readBoolean */ "a"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const LINK_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'href': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readURI)
  });


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function linkParser(node, objectStack) {
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* parseNode */ "t"])(LINK_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function whenParser(node, objectStack) {
  const gxTrackObject = /** @type {module:ol/format/KML~GxTrackObject} */
      (objectStack[objectStack.length - 1]);
  const whens = gxTrackObject.whens;
  const s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* getAllTextContent */ "e"])(node, false);
  const when = Date.parse(s);
  whens.push(isNaN(when) ? 0 : when);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const PLACEMARK_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ExtendedData': extendedDataParser,
    'Region': regionParser,
    'MultiGeometry': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(
      readMultiGeometry, 'geometry'),
    'LineString': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(
      readLineString, 'geometry'),
    'LinearRing': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(
      readLinearRing, 'geometry'),
    'Point': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(
      readPoint, 'geometry'),
    'Polygon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(
      readPolygon, 'geometry'),
    'Style': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readStyle),
    'StyleMap': placemarkStyleMapParser,
    'address': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'description': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'open': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readBoolean */ "a"]),
    'phoneNumber': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"]),
    'styleUrl': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(readURI),
    'visibility': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readBoolean */ "a"])
  }, Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
    GX_NAMESPACE_URIS, {
      'MultiTrack': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(
        readGxMultiTrack, 'geometry'),
      'Track': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeObjectPropertySetter */ "n"])(
        readGxTrack, 'geometry')
    }
  ));


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<module:ol/Feature>|undefined} Features.
 */
KML.prototype.readDocumentOrFolder_ = function(node, objectStack) {
  // FIXME use scope somehow
  const parsersNS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
    NAMESPACE_URIS, {
      'Document': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeArrayExtender */ "i"])(this.readDocumentOrFolder_, this),
      'Folder': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeArrayExtender */ "i"])(this.readDocumentOrFolder_, this),
      'Placemark': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeArrayPusher */ "j"])(this.readPlacemark_, this),
      'Style': this.readSharedStyle_.bind(this),
      'StyleMap': this.readSharedStyleMap_.bind(this)
    });
  /** @type {Array.<module:ol/Feature>} */
  const features = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])([], parsersNS, node, objectStack, this);
  if (features) {
    return features;
  } else {
    return undefined;
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {module:ol/Feature|undefined} Feature.
 */
KML.prototype.readPlacemark_ = function(node, objectStack) {
  const object = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])({'geometry': null},
    PLACEMARK_PARSERS, node, objectStack);
  if (!object) {
    return undefined;
  }
  const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]();
  const id = node.getAttribute('id');
  if (id !== null) {
    feature.setId(id);
  }
  const options = /** @type {module:ol/format/Feature~ReadOptions} */ (objectStack[0]);

  const geometry = object['geometry'];
  if (geometry) {
    Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_5__[/* transformWithOptions */ "b"])(geometry, false, options);
  }
  feature.setGeometry(geometry);
  delete object['geometry'];

  if (this.extractStyles_) {
    const style = object['Style'];
    const styleUrl = object['styleUrl'];
    const styleFunction = createFeatureStyleFunction(
      style, styleUrl, this.defaultStyle_, this.sharedStyles_,
      this.showPointNames_);
    feature.setStyle(styleFunction);
  }
  delete object['Style'];
  // we do not remove the styleUrl property from the object, so it
  // gets stored on feature when setProperties is called

  feature.setProperties(object);

  return feature;
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
KML.prototype.readSharedStyle_ = function(node, objectStack) {
  const id = node.getAttribute('id');
  if (id !== null) {
    const style = readStyle(node, objectStack);
    if (style) {
      let styleUri;
      let baseURI = node.baseURI;
      if (!baseURI || baseURI == 'about:blank') {
        baseURI = window.location.href;
      }
      if (baseURI) {
        const url = new URL('#' + id, baseURI);
        styleUri = url.href;
      } else {
        styleUri = '#' + id;
      }
      this.sharedStyles_[styleUri] = style;
    }
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
KML.prototype.readSharedStyleMap_ = function(node, objectStack) {
  const id = node.getAttribute('id');
  if (id === null) {
    return;
  }
  const styleMapValue = readStyleMapValue(node, objectStack);
  if (!styleMapValue) {
    return;
  }
  let styleUri;
  let baseURI = node.baseURI;
  if (!baseURI || baseURI == 'about:blank') {
    baseURI = window.location.href;
  }
  if (baseURI) {
    const url = new URL('#' + id, baseURI);
    styleUri = url.href;
  } else {
    styleUri = '#' + id;
  }
  this.sharedStyles_[styleUri] = styleMapValue;
};


/**
 * Read the first feature from a KML source. MultiGeometries are converted into
 * GeometryCollections if they are a mix of geometry types, and into MultiPoint/
 * MultiLineString/MultiPolygon if they are all of the same type.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature} Feature.
 * @api
 */
KML.prototype.readFeature;


/**
 * @inheritDoc
 */
KML.prototype.readFeatureFromNode = function(node, opt_options) {
  if (!Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, node.namespaceURI)) {
    return null;
  }
  const feature = this.readPlacemark_(
    node, [this.getReadOptions(node, opt_options)]);
  if (feature) {
    return feature;
  } else {
    return null;
  }
};


/**
 * Read all features from a KML source. MultiGeometries are converted into
 * GeometryCollections if they are a mix of geometry types, and into MultiPoint/
 * MultiLineString/MultiPolygon if they are all of the same type.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
KML.prototype.readFeatures;


/**
 * @inheritDoc
 */
KML.prototype.readFeaturesFromNode = function(node, opt_options) {
  if (!Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, node.namespaceURI)) {
    return [];
  }
  let features;
  const localName = node.localName;
  if (localName == 'Document' || localName == 'Folder') {
    features = this.readDocumentOrFolder_(
      node, [this.getReadOptions(node, opt_options)]);
    if (features) {
      return features;
    } else {
      return [];
    }
  } else if (localName == 'Placemark') {
    const feature = this.readPlacemark_(
      node, [this.getReadOptions(node, opt_options)]);
    if (feature) {
      return [feature];
    } else {
      return [];
    }
  } else if (localName == 'kml') {
    features = [];
    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
      const fs = this.readFeaturesFromNode(n, opt_options);
      if (fs) {
        Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(features, fs);
      }
    }
    return features;
  } else {
    return [];
  }
};


/**
 * Read the name of the KML.
 *
 * @param {Document|Node|string} source Source.
 * @return {string|undefined} Name.
 * @api
 */
KML.prototype.readName = function(source) {
  if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* isDocument */ "g"])(source)) {
    return this.readNameFromDocument(/** @type {Document} */ (source));
  } else if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* isNode */ "h"])(source)) {
    return this.readNameFromNode(/** @type {Node} */ (source));
  } else if (typeof source === 'string') {
    const doc = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* parse */ "s"])(source);
    return this.readNameFromDocument(doc);
  } else {
    return undefined;
  }
};


/**
 * @param {Document} doc Document.
 * @return {string|undefined} Name.
 */
KML.prototype.readNameFromDocument = function(doc) {
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      const name = this.readNameFromNode(n);
      if (name) {
        return name;
      }
    }
  }
  return undefined;
};


/**
 * @param {Node} node Node.
 * @return {string|undefined} Name.
 */
KML.prototype.readNameFromNode = function(node) {
  for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
    if (Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, n.namespaceURI) &&
        n.localName == 'name') {
      return Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* readString */ "h"])(n);
    }
  }
  for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
    const localName = n.localName;
    if (Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, n.namespaceURI) &&
        (localName == 'Document' ||
         localName == 'Folder' ||
         localName == 'Placemark' ||
         localName == 'kml')) {
      const name = this.readNameFromNode(n);
      if (name) {
        return name;
      }
    }
  }
  return undefined;
};


/**
 * Read the network links of the KML.
 *
 * @param {Document|Node|string} source Source.
 * @return {Array.<Object>} Network links.
 * @api
 */
KML.prototype.readNetworkLinks = function(source) {
  const networkLinks = [];
  if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* isDocument */ "g"])(source)) {
    Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(networkLinks, this.readNetworkLinksFromDocument(
      /** @type {Document} */ (source)));
  } else if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* isNode */ "h"])(source)) {
    Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(networkLinks, this.readNetworkLinksFromNode(
      /** @type {Node} */ (source)));
  } else if (typeof source === 'string') {
    const doc = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* parse */ "s"])(source);
    Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(networkLinks, this.readNetworkLinksFromDocument(doc));
  }
  return networkLinks;
};


/**
 * @param {Document} doc Document.
 * @return {Array.<Object>} Network links.
 */
KML.prototype.readNetworkLinksFromDocument = function(doc) {
  const networkLinks = [];
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(networkLinks, this.readNetworkLinksFromNode(n));
    }
  }
  return networkLinks;
};


/**
 * @param {Node} node Node.
 * @return {Array.<Object>} Network links.
 */
KML.prototype.readNetworkLinksFromNode = function(node) {
  const networkLinks = [];
  for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
    if (Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, n.namespaceURI) &&
        n.localName == 'NetworkLink') {
      const obj = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])({}, NETWORK_LINK_PARSERS,
        n, []);
      networkLinks.push(obj);
    }
  }
  for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
    const localName = n.localName;
    if (Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, n.namespaceURI) &&
        (localName == 'Document' ||
         localName == 'Folder' ||
         localName == 'kml')) {
      Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(networkLinks, this.readNetworkLinksFromNode(n));
    }
  }
  return networkLinks;
};


/**
 * Read the regions of the KML.
 *
 * @param {Document|Node|string} source Source.
 * @return {Array.<Object>} Regions.
 * @api
 */
KML.prototype.readRegion = function(source) {
  const regions = [];
  if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* isDocument */ "g"])(source)) {
    Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(regions, this.readRegionFromDocument(
      /** @type {Document} */ (source)));
  } else if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* isNode */ "h"])(source)) {
    Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(regions, this.readRegionFromNode(
      /** @type {Node} */ (source)));
  } else if (typeof source === 'string') {
    const doc = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* parse */ "s"])(source);
    Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(regions, this.readRegionFromDocument(doc));
  }
  return regions;
};


/**
 * @param {Document} doc Document.
 * @return {Array.<Object>} Region.
 */
KML.prototype.readRegionFromDocument = function(doc) {
  const regions = [];
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(regions, this.readRegionFromNode(n));
    }
  }
  return regions;
};


/**
 * @param {Node} node Node.
 * @return {Array.<Object>} Region.
 * @api
 */
KML.prototype.readRegionFromNode = function(node) {
  const regions = [];
  for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
    if (Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, n.namespaceURI) &&
        n.localName == 'Region') {
      const obj = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushParseAndPop */ "u"])({}, REGION_PARSERS,
        n, []);
      regions.push(obj);
    }
  }
  for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
    const localName = n.localName;
    if (Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, n.namespaceURI) &&
        (localName == 'Document' ||
         localName == 'Folder' ||
         localName == 'kml')) {
      Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(regions, this.readRegionFromNode(n));
    }
  }
  return regions;
};


/**
 * Read the projection from a KML source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @return {module:ol/proj/Projection} Projection.
 * @api
 */
KML.prototype.readProjection;


/**
 * @param {Node} node Node to append a TextNode with the color to.
 * @param {module:ol/color~Color|string} color Color.
 */
function writeColorTextNode(node, color) {
  const rgba = Object(_color_js__WEBPACK_IMPORTED_MODULE_4__[/* asArray */ "a"])(color);
  const opacity = (rgba.length == 4) ? rgba[3] : 1;
  const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];
  for (let i = 0; i < 4; ++i) {
    const hex = parseInt(abgr[i], 10).toString(16);
    abgr[i] = (hex.length == 1) ? '0' + hex : hex;
  }
  Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"])(node, abgr.join(''));
}


/**
 * @param {Node} node Node to append a TextNode with the coordinates to.
 * @param {Array.<number>} coordinates Coordinates.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeCoordinatesTextNode(node, coordinates, objectStack) {
  const context = objectStack[objectStack.length - 1];

  const layout = context['layout'];
  const stride = context['stride'];

  let dimension;
  if (layout == _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].XY ||
      layout == _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].XYM) {
    dimension = 2;
  } else if (layout == _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].XYZ ||
      layout == _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].XYZM) {
    dimension = 3;
  } else {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_3__[/* assert */ "a"])(false, 34); // Invalid geometry layout
  }

  const ii = coordinates.length;
  let text = '';
  if (ii > 0) {
    text += coordinates[0];
    for (let d = 1; d < dimension; ++d) {
      text += ',' + coordinates[d];
    }
    for (let i = stride; i < ii; i += stride) {
      text += ' ' + coordinates[i];
      for (let d = 1; d < dimension; ++d) {
        text += ',' + coordinates[i + d];
      }
    }
  }
  Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"])(node, text);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const EXTENDEDDATA_NODE_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Data': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeDataNode),
    'value': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeDataNodeValue),
    'displayName': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeDataNodeName)
  });


/**
 * @param {Node} node Node.
 * @param {{name: *, value: *}} pair Name value pair.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeDataNode(node, pair, objectStack) {
  node.setAttribute('name', pair.name);
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  const value = pair.value;

  if (typeof value == 'object') {
    if (value !== null && value.displayName) {
      Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, EXTENDEDDATA_NODE_SERIALIZERS,
        _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], [value.displayName], objectStack, ['displayName']);
    }

    if (value !== null && value.value) {
      Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, EXTENDEDDATA_NODE_SERIALIZERS,
        _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], [value.value], objectStack, ['value']);
    }
  } else {
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, EXTENDEDDATA_NODE_SERIALIZERS,
      _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], [value], objectStack, ['value']);
  }
}


/**
 * @param {Node} node Node to append a TextNode with the name to.
 * @param {string} name DisplayName.
 */
function writeDataNodeName(node, name) {
  Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeCDATASection */ "j"])(node, name);
}


/**
 * @param {Node} node Node to append a CDATA Section with the value to.
 * @param {string} value Value.
 */
function writeDataNodeValue(node, value) {
  Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"])(node, value);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const DOCUMENT_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Placemark': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writePlacemark)
  });


/**
 * @const
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node|undefined} Node.
 */
const DOCUMENT_NODE_FACTORY = function(value, objectStack, opt_nodeName) {
  const parentNode = objectStack[objectStack.length - 1].node;
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* createElementNS */ "d"])(parentNode.namespaceURI, 'Placemark');
};


/**
 * @param {Node} node Node.
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {Array.<*>} objectStack Object stack.
 * @this {module:ol/format/KML}
 */
function writeDocument(node, features, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, DOCUMENT_SERIALIZERS,
    DOCUMENT_NODE_FACTORY, features, objectStack, undefined,
    this);
}


/**
 * A factory for creating Data nodes.
 * @const
 * @type {function(*, Array.<*>): (Node|undefined)}
 */
const DATA_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSimpleNodeFactory */ "q"])('Data');


/**
 * @param {Node} node Node.
 * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeExtendedData(node, namesAndValues, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  const names = namesAndValues.names;
  const values = namesAndValues.values;
  const length = names.length;

  for (let i = 0; i < length; i++) {
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, EXTENDEDDATA_NODE_SERIALIZERS,
      DATA_NODE_FACTORY, [{name: names[i], value: values[i]}], objectStack);
  }
}


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const ICON_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'href'
  ],
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(GX_NAMESPACE_URIS, [
    'x', 'y', 'w', 'h'
  ]));


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const ICON_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'href': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"])
  }, Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
    GX_NAMESPACE_URIS, {
      'x': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeDecimalTextNode */ "l"]),
      'y': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeDecimalTextNode */ "l"]),
      'w': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeDecimalTextNode */ "l"]),
      'h': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeDecimalTextNode */ "l"])
    }));


/**
 * @const
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node|undefined} Node.
 */
const GX_NODE_FACTORY = function(value, objectStack, opt_nodeName) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* createElementNS */ "d"])(GX_NAMESPACE_URIS[0],
    'gx:' + opt_nodeName);
};


/**
 * @param {Node} node Node.
 * @param {Object} icon Icon object.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeIcon(node, icon, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  const parentNode = objectStack[objectStack.length - 1].node;
  let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];
  let values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(icon, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context,
    ICON_SERIALIZERS, _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"],
    values, objectStack, orderedKeys);
  orderedKeys =
      ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];
  values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(icon, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, ICON_SERIALIZERS,
    GX_NODE_FACTORY, values, objectStack, orderedKeys);
}


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const ICON_STYLE_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'scale', 'heading', 'Icon', 'hotSpot'
  ]);


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const ICON_STYLE_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Icon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeIcon),
    'heading': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeDecimalTextNode */ "l"]),
    'hotSpot': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeVec2),
    'scale': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeScaleTextNode)
  });


/**
 * @param {Node} node Node.
 * @param {module:ol/style/Icon} style Icon style.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeIconStyle(node, style, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  const properties = {};
  const src = style.getSrc();
  const size = style.getSize();
  const iconImageSize = style.getImageSize();
  const iconProperties = {
    'href': src
  };

  if (size) {
    iconProperties['w'] = size[0];
    iconProperties['h'] = size[1];
    const anchor = style.getAnchor(); // top-left
    const origin = style.getOrigin(); // top-left

    if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {
      iconProperties['x'] = origin[0];
      iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);
    }

    if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {
      const /** @type {module:ol/format/KML~Vec2} */ hotSpot = {
        x: anchor[0],
        xunits: _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"].PIXELS,
        y: size[1] - anchor[1],
        yunits: _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"].PIXELS
      };
      properties['hotSpot'] = hotSpot;
    }
  }

  properties['Icon'] = iconProperties;

  const scale = style.getScale();
  if (scale !== 1) {
    properties['scale'] = scale;
  }

  const rotation = style.getRotation();
  if (rotation !== 0) {
    properties['heading'] = rotation; // 0-360
  }

  const parentNode = objectStack[objectStack.length - 1].node;
  const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, ICON_STYLE_SERIALIZERS,
    _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], values, objectStack, orderedKeys);
}


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const LABEL_STYLE_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'color', 'scale'
  ]);


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const LABEL_STYLE_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'color': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeColorTextNode),
    'scale': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeScaleTextNode)
  });


/**
 * @param {Node} node Node.
 * @param {module:ol/style/Text} style style.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeLabelStyle(node, style, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  const properties = {};
  const fill = style.getFill();
  if (fill) {
    properties['color'] = fill.getColor();
  }
  const scale = style.getScale();
  if (scale && scale !== 1) {
    properties['scale'] = scale;
  }
  const parentNode = objectStack[objectStack.length - 1].node;
  const orderedKeys =
      LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, LABEL_STYLE_SERIALIZERS,
    _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], values, objectStack, orderedKeys);
}


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const LINE_STYLE_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'color', 'width'
  ]);


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const LINE_STYLE_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'color': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeColorTextNode),
    'width': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeDecimalTextNode */ "l"])
  });


/**
 * @param {Node} node Node.
 * @param {module:ol/style/Stroke} style style.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeLineStyle(node, style, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  const properties = {
    'color': style.getColor(),
    'width': style.getWidth()
  };
  const parentNode = objectStack[objectStack.length - 1].node;
  const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, LINE_STYLE_SERIALIZERS,
    _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], values, objectStack, orderedKeys);
}


/**
 * @const
 * @type {Object.<string, string>}
 */
const GEOMETRY_TYPE_TO_NODENAME = {
  'Point': 'Point',
  'LineString': 'LineString',
  'LinearRing': 'LinearRing',
  'Polygon': 'Polygon',
  'MultiPoint': 'MultiGeometry',
  'MultiLineString': 'MultiGeometry',
  'MultiPolygon': 'MultiGeometry',
  'GeometryCollection': 'MultiGeometry'
};


/**
 * @const
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node|undefined} Node.
 */
const GEOMETRY_NODE_FACTORY = function(value, objectStack, opt_nodeName) {
  if (value) {
    const parentNode = objectStack[objectStack.length - 1].node;
    return Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* createElementNS */ "d"])(parentNode.namespaceURI,
      GEOMETRY_TYPE_TO_NODENAME[/** @type {module:ol/geom/Geometry} */ (value).getType()]);
  }
};


/**
 * A factory for creating Point nodes.
 * @const
 * @type {function(*, Array.<*>, string=): (Node|undefined)}
 */
const POINT_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSimpleNodeFactory */ "q"])('Point');


/**
 * A factory for creating LineString nodes.
 * @const
 * @type {function(*, Array.<*>, string=): (Node|undefined)}
 */
const LINE_STRING_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSimpleNodeFactory */ "q"])('LineString');


/**
 * A factory for creating LinearRing nodes.
 * @const
 * @type {function(*, Array.<*>, string=): (Node|undefined)}
 */
const LINEAR_RING_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSimpleNodeFactory */ "q"])('LinearRing');


/**
 * A factory for creating Polygon nodes.
 * @const
 * @type {function(*, Array.<*>, string=): (Node|undefined)}
 */
const POLYGON_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSimpleNodeFactory */ "q"])('Polygon');


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const MULTI_GEOMETRY_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'LineString': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(
      writePrimitiveGeometry),
    'Point': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(
      writePrimitiveGeometry),
    'Polygon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writePolygon),
    'GeometryCollection': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(
      writeMultiGeometry)
  });


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeMultiGeometry(node, geometry, objectStack) {
  /** @type {module:ol/xml~NodeStackItem} */
  const context = {node: node};
  const type = geometry.getType();
  /** @type {Array.<module:ol/geom/Geometry>} */
  let geometries;
  /** @type {function(*, Array.<*>, string=): (Node|undefined)} */
  let factory;
  if (type == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].GEOMETRY_COLLECTION) {
    geometries = /** @type {module:ol/geom/GeometryCollection} */ (geometry).getGeometries();
    factory = GEOMETRY_NODE_FACTORY;
  } else if (type == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].MULTI_POINT) {
    geometries = /** @type {module:ol/geom/MultiPoint} */ (geometry).getPoints();
    factory = POINT_NODE_FACTORY;
  } else if (type == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].MULTI_LINE_STRING) {
    geometries =
        (/** @type {module:ol/geom/MultiLineString} */ (geometry)).getLineStrings();
    factory = LINE_STRING_NODE_FACTORY;
  } else if (type == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].MULTI_POLYGON) {
    geometries =
        (/** @type {module:ol/geom/MultiPolygon} */ (geometry)).getPolygons();
    factory = POLYGON_NODE_FACTORY;
  } else {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_3__[/* assert */ "a"])(false, 39); // Unknown geometry type
  }
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context,
    MULTI_GEOMETRY_SERIALIZERS, factory,
    geometries, objectStack);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const BOUNDARY_IS_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'LinearRing': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(
      writePrimitiveGeometry)
  });


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LinearRing} linearRing Linear ring.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeBoundaryIs(node, linearRing, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context,
    BOUNDARY_IS_SERIALIZERS,
    LINEAR_RING_NODE_FACTORY, [linearRing], objectStack);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const PLACEMARK_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ExtendedData': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeExtendedData),
    'MultiGeometry': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeMultiGeometry),
    'LineString': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writePrimitiveGeometry),
    'LinearRing': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writePrimitiveGeometry),
    'Point': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writePrimitiveGeometry),
    'Polygon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writePolygon),
    'Style': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeStyle),
    'address': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"]),
    'description': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"]),
    'name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"]),
    'open': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeBooleanTextNode */ "i"]),
    'phoneNumber': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"]),
    'styleUrl': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"]),
    'visibility': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeBooleanTextNode */ "i"])
  });


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const PLACEMARK_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'name', 'open', 'visibility', 'address', 'phoneNumber', 'description',
    'styleUrl', 'Style'
  ]);


/**
 * A factory for creating ExtendedData nodes.
 * @const
 * @type {function(*, Array.<*>): (Node|undefined)}
 */
const EXTENDEDDATA_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSimpleNodeFactory */ "q"])('ExtendedData');


/**
 * FIXME currently we do serialize arbitrary/custom feature properties
 * (ExtendedData).
 * @param {Node} node Node.
 * @param {module:ol/Feature} feature Feature.
 * @param {Array.<*>} objectStack Object stack.
 * @this {module:ol/format/KML}
 */
function writePlacemark(node, feature, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};

  // set id
  if (feature.getId()) {
    node.setAttribute('id', feature.getId());
  }

  // serialize properties (properties unknown to KML are not serialized)
  const properties = feature.getProperties();

  // don't export these to ExtendedData
  const filter = {'address': 1, 'description': 1, 'name': 1, 'open': 1,
    'phoneNumber': 1, 'styleUrl': 1, 'visibility': 1};
  filter[feature.getGeometryName()] = 1;
  const keys = Object.keys(properties || {}).sort().filter(function(v) {
    return !filter[v];
  });

  if (keys.length > 0) {
    const sequence = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(properties, keys);
    const namesAndValues = {names: keys, values: sequence};
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, PLACEMARK_SERIALIZERS,
      EXTENDEDDATA_NODE_FACTORY, [namesAndValues], objectStack);
  }

  const styleFunction = feature.getStyleFunction();
  if (styleFunction) {
    // FIXME the styles returned by the style function are supposed to be
    // resolution-independent here
    const styles = styleFunction(feature, 0);
    if (styles) {
      const style = Array.isArray(styles) ? styles[0] : styles;
      if (this.writeStyles_) {
        properties['Style'] = style;
      }
      const textStyle = style.getText();
      if (textStyle) {
        properties['name'] = textStyle.getText();
      }
    }
  }
  const parentNode = objectStack[objectStack.length - 1].node;
  const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, PLACEMARK_SERIALIZERS,
    _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], values, objectStack, orderedKeys);

  // serialize geometry
  const options = /** @type {module:ol/format/Feature~WriteOptions} */ (objectStack[0]);
  let geometry = feature.getGeometry();
  if (geometry) {
    geometry = Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_5__[/* transformWithOptions */ "b"])(geometry, true, options);
  }
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, PLACEMARK_SERIALIZERS,
    GEOMETRY_NODE_FACTORY, [geometry], objectStack);
}


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const PRIMITIVE_GEOMETRY_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'extrude', 'tessellate', 'altitudeMode', 'coordinates'
  ]);


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const PRIMITIVE_GEOMETRY_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'extrude': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeBooleanTextNode */ "i"]),
    'tessellate': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeBooleanTextNode */ "i"]),
    'altitudeMode': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeStringTextNode */ "n"]),
    'coordinates': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeCoordinatesTextNode)
  });


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/SimpleGeometry} geometry Geometry.
 * @param {Array.<*>} objectStack Object stack.
 */
function writePrimitiveGeometry(node, geometry, objectStack) {
  const flatCoordinates = geometry.getFlatCoordinates();
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  context['layout'] = geometry.getLayout();
  context['stride'] = geometry.getStride();

  // serialize properties (properties unknown to KML are not serialized)
  const properties = geometry.getProperties();
  properties.coordinates = flatCoordinates;

  const parentNode = objectStack[objectStack.length - 1].node;
  const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, PRIMITIVE_GEOMETRY_SERIALIZERS,
    _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], values, objectStack, orderedKeys);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const POLYGON_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'outerBoundaryIs': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(
      writeBoundaryIs),
    'innerBoundaryIs': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(
      writeBoundaryIs)
  });


/**
 * A factory for creating innerBoundaryIs nodes.
 * @const
 * @type {function(*, Array.<*>, string=): (Node|undefined)}
 */
const INNER_BOUNDARY_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSimpleNodeFactory */ "q"])('innerBoundaryIs');


/**
 * A factory for creating outerBoundaryIs nodes.
 * @const
 * @type {function(*, Array.<*>, string=): (Node|undefined)}
 */
const OUTER_BOUNDARY_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSimpleNodeFactory */ "q"])('outerBoundaryIs');


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Polygon} polygon Polygon.
 * @param {Array.<*>} objectStack Object stack.
 */
function writePolygon(node, polygon, objectStack) {
  const linearRings = polygon.getLinearRings();
  const outerRing = linearRings.shift();
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  // inner rings
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context,
    POLYGON_SERIALIZERS,
    INNER_BOUNDARY_NODE_FACTORY,
    linearRings, objectStack);
  // outer ring
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context,
    POLYGON_SERIALIZERS,
    OUTER_BOUNDARY_NODE_FACTORY,
    [outerRing], objectStack);
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const POLY_STYLE_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'color': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeColorTextNode)
  });


/**
 * A factory for creating coordinates nodes.
 * @const
 * @type {function(*, Array.<*>, string=): (Node|undefined)}
 */
const COLOR_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSimpleNodeFactory */ "q"])('color');


/**
 * @param {Node} node Node.
 * @param {module:ol/style/Fill} style Style.
 * @param {Array.<*>} objectStack Object stack.
 */
function writePolyStyle(node, style, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, POLY_STYLE_SERIALIZERS,
    COLOR_NODE_FACTORY, [style.getColor()], objectStack);
}


/**
 * @param {Node} node Node to append a TextNode with the scale to.
 * @param {number|undefined} scale Scale.
 */
function writeScaleTextNode(node, scale) {
  // the Math is to remove any excess decimals created by float arithmetic
  Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_7__[/* writeDecimalTextNode */ "l"])(node,
    Math.round(scale * 1e6) / 1e6);
}


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const STYLE_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'IconStyle', 'LabelStyle', 'LineStyle', 'PolyStyle'
  ]);


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const STYLE_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'IconStyle': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeIconStyle),
    'LabelStyle': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeLabelStyle),
    'LineStyle': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeLineStyle),
    'PolyStyle': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writePolyStyle)
  });


/**
 * @param {Node} node Node.
 * @param {module:ol/style/Style} style Style.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeStyle(node, style, objectStack) {
  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: node};
  const properties = {};
  const fillStyle = style.getFill();
  const strokeStyle = style.getStroke();
  const imageStyle = style.getImage();
  const textStyle = style.getText();
  if (imageStyle instanceof _style_Icon_js__WEBPACK_IMPORTED_MODULE_20__[/* default */ "a"]) {
    properties['IconStyle'] = imageStyle;
  }
  if (textStyle) {
    properties['LabelStyle'] = textStyle;
  }
  if (strokeStyle) {
    properties['LineStyle'] = strokeStyle;
  }
  if (fillStyle) {
    properties['PolyStyle'] = fillStyle;
  }
  const parentNode = objectStack[objectStack.length - 1].node;
  const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, STYLE_SERIALIZERS,
    _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], values, objectStack, orderedKeys);
}


/**
 * @param {Node} node Node to append a TextNode with the Vec2 to.
 * @param {module:ol/format/KML~Vec2} vec2 Vec2.
 */
function writeVec2(node, vec2) {
  node.setAttribute('x', vec2.x);
  node.setAttribute('y', vec2.y);
  node.setAttribute('xunits', vec2.xunits);
  node.setAttribute('yunits', vec2.yunits);
}


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const KML_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'Document', 'Placemark'
  ]);


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const KML_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Document': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writeDocument),
    'Placemark': Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeChildAppender */ "l"])(writePlacemark)
  });


/**
 * Encode an array of features in the KML format. GeometryCollections, MultiPoints,
 * MultiLineStrings, and MultiPolygons are output as MultiGeometries.
 *
 * @function
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {string} Result.
 * @api
 */
KML.prototype.writeFeatures;


/**
 * Encode an array of features in the KML format as an XML node. GeometryCollections,
 * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.
 *
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {Node} Node.
 * @override
 * @api
 */
KML.prototype.writeFeaturesNode = function(features, opt_options) {
  opt_options = this.adaptOptions(opt_options);
  const kml = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* createElementNS */ "d"])(NAMESPACE_URIS[4], 'kml');
  const xmlnsUri = 'http://www.w3.org/2000/xmlns/';
  kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);
  kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* XML_SCHEMA_INSTANCE_URI */ "c"]);
  kml.setAttributeNS(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* XML_SCHEMA_INSTANCE_URI */ "c"], 'xsi:schemaLocation', SCHEMA_LOCATION);

  const /** @type {module:ol/xml~NodeStackItem} */ context = {node: kml};
  const properties = {};
  if (features.length > 1) {
    properties['Document'] = features;
  } else if (features.length == 1) {
    properties['Placemark'] = features[0];
  }
  const orderedKeys = KML_SEQUENCE[kml.namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_26__[/* pushSerializeAndPop */ "v"])(context, KML_SERIALIZERS,
    _xml_js__WEBPACK_IMPORTED_MODULE_26__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"], values, [opt_options], orderedKeys,
    this);
  return kml;
};

/* harmony default export */ __webpack_exports__["a"] = (KML);


/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return unByKey; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14);
/**
 * @module ol/Observable
 */





/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * An event target providing convenient methods for listener registration
 * and unregistration. A generic `change` event is always available through
 * {@link module:ol/Observable~Observable#changed}.
 *
 * @constructor
 * @extends {module:ol/events/EventTarget}
 * @fires module:ol/events/Event~Event
 * @struct
 * @api
 */
const Observable = function() {

  _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {number}
   */
  this.revision_ = 0;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Observable, _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * Removes an event listener using the key returned by `on()` or `once()`.
 * @param {module:ol/events~EventsKey|Array.<module:ol/events~EventsKey>} key The key returned by `on()`
 *     or `once()` (or an array of keys).
 * @api
 */
function unByKey(key) {
  if (Array.isArray(key)) {
    for (let i = 0, ii = key.length; i < ii; ++i) {
      Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* unlistenByKey */ "e"])(key[i]);
    }
  } else {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* unlistenByKey */ "e"])(/** @type {module:ol/events~EventsKey} */ (key));
  }
}


/**
 * Increases the revision counter and dispatches a 'change' event.
 * @api
 */
Observable.prototype.changed = function() {
  ++this.revision_;
  this.dispatchEvent(_events_EventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CHANGE);
};


/**
 * Dispatches an event and calls all listeners listening for events
 * of this type. The event parameter can either be a string or an
 * Object with a `type` property.
 *
 * @param {{type: string,
 *     target: (EventTarget|module:ol/events/EventTarget|undefined)}|
 *     module:ol/events/Event|string} event Event object.
 * @function
 * @api
 */
Observable.prototype.dispatchEvent;


/**
 * Get the version number for this object.  Each time the object is modified,
 * its version number will be incremented.
 * @return {number} Revision.
 * @api
 */
Observable.prototype.getRevision = function() {
  return this.revision_;
};


/**
 * Listen for a certain type of event.
 * @param {string|Array.<string>} type The event type or array of event types.
 * @param {function(?): ?} listener The listener function.
 * @return {module:ol/events~EventsKey|Array.<module:ol/events~EventsKey>} Unique key for the listener. If
 *     called with an array of event types as the first argument, the return
 *     will be an array of keys.
 * @api
 */
Observable.prototype.on = function(type, listener) {
  if (Array.isArray(type)) {
    const len = type.length;
    const keys = new Array(len);
    for (let i = 0; i < len; ++i) {
      keys[i] = Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(this, type[i], listener);
    }
    return keys;
  } else {
    return Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(this, /** @type {string} */ (type), listener);
  }
};


/**
 * Listen once for a certain type of event.
 * @param {string|Array.<string>} type The event type or array of event types.
 * @param {function(?): ?} listener The listener function.
 * @return {module:ol/events~EventsKey|Array.<module:ol/events~EventsKey>} Unique key for the listener. If
 *     called with an array of event types as the first argument, the return
 *     will be an array of keys.
 * @api
 */
Observable.prototype.once = function(type, listener) {
  if (Array.isArray(type)) {
    const len = type.length;
    const keys = new Array(len);
    for (let i = 0; i < len; ++i) {
      keys[i] = Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listenOnce */ "b"])(this, type[i], listener);
    }
    return keys;
  } else {
    return Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listenOnce */ "b"])(this, /** @type {string} */ (type), listener);
  }
};


/**
 * Unlisten for a certain type of event.
 * @param {string|Array.<string>} type The event type or array of event types.
 * @param {function(?): ?} listener The listener function.
 * @api
 */
Observable.prototype.un = function(type, listener) {
  if (Array.isArray(type)) {
    for (let i = 0, ii = type.length; i < ii; ++i) {
      Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* unlisten */ "c"])(this, type[i], listener);
    }
    return;
  } else {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* unlisten */ "c"])(this, /** @type {string} */ (type), listener);
  }
};
/* harmony default export */ __webpack_exports__["a"] = (Observable);


/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(147);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);
/* harmony import */ var _TileRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(130);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(21);
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(58);
/* harmony import */ var _tilecoord_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(57);
/**
 * @module ol/tilegrid/TileGrid
 */










/**
 * @typedef {Object} Options
 * @property {module:ol/extent~Extent} [extent] Extent for the tile grid. No tiles outside this
 * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or
 * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
 * @property {number} [minZoom=0] Minimum zoom.
 * @property {module:ol/coordinate~Coordinate} [origin] The tile grid origin, i.e. where the `x`
 * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and upwards. If not
 * specified, `extent` or `origins` must be provided.
 * @property {Array.<module:ol/coordinate~Coordinate>} [origins] Tile grid origins, i.e. where
 * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
 * should match the length of the `resolutions` array, i.e. each resolution can have a different
 * origin. Tile coordinates increase left to right and upwards. If not specified, `extent` or
 * `origin` must be provided.
 * @property {!Array.<number>} resolutions Resolutions. The array index of each resolution needs
 * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
 * array will have a length of `maxZoom + 1`.
 * @property {Array.<module:ol/size~Size>} [sizes] Sizes.
 * @property {number|module:ol/size~Size} [tileSize] Tile size.
 * Default is `[256, 256]`.
 * @property {Array.<module:ol/size~Size>} [tileSizes] Tile sizes. If given, the array length
 * should match the length of the `resolutions` array, i.e. each resolution can have a different
 * tile size.
 */


/**
 * @classdesc
 * Base class for setting the grid pattern for sources accessing tiled-image
 * servers.
 *
 * @constructor
 * @param {module:ol/tilegrid/TileGrid~Options} options Tile grid options.
 * @struct
 * @api
 */
const TileGrid = function(options) {

  /**
   * @protected
   * @type {number}
   */
  this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;

  /**
   * @private
   * @type {!Array.<number>}
   */
  this.resolutions_ = options.resolutions;
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(Object(_array_js__WEBPACK_IMPORTED_MODULE_3__[/* isSorted */ "g"])(this.resolutions_, function(a, b) {
    return b - a;
  }, true), 17); // `resolutions` must be sorted in descending order


  // check if we've got a consistent zoom factor and origin
  let zoomFactor;
  if (!options.origins) {
    for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
      if (!zoomFactor) {
        zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
      } else {
        if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
          zoomFactor = undefined;
          break;
        }
      }
    }
  }


  /**
   * @private
   * @type {number|undefined}
   */
  this.zoomFactor_ = zoomFactor;


  /**
   * @protected
   * @type {number}
   */
  this.maxZoom = this.resolutions_.length - 1;

  /**
   * @private
   * @type {module:ol/coordinate~Coordinate}
   */
  this.origin_ = options.origin !== undefined ? options.origin : null;

  /**
   * @private
   * @type {Array.<module:ol/coordinate~Coordinate>}
   */
  this.origins_ = null;
  if (options.origins !== undefined) {
    this.origins_ = options.origins;
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(this.origins_.length == this.resolutions_.length,
      20); // Number of `origins` and `resolutions` must be equal
  }

  const extent = options.extent;

  if (extent !== undefined &&
      !this.origin_ && !this.origins_) {
    this.origin_ = Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* getTopLeft */ "C"])(extent);
  }

  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(
    (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),
    18); // Either `origin` or `origins` must be configured, never both

  /**
   * @private
   * @type {Array.<number|module:ol/size~Size>}
   */
  this.tileSizes_ = null;
  if (options.tileSizes !== undefined) {
    this.tileSizes_ = options.tileSizes;
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(this.tileSizes_.length == this.resolutions_.length,
      19); // Number of `tileSizes` and `resolutions` must be equal
  }

  /**
   * @private
   * @type {number|module:ol/size~Size}
   */
  this.tileSize_ = options.tileSize !== undefined ?
    options.tileSize :
    !this.tileSizes_ ? _common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_TILE_SIZE */ "b"] : null;
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(
    (!this.tileSize_ && this.tileSizes_) ||
      (this.tileSize_ && !this.tileSizes_),
    22); // Either `tileSize` or `tileSizes` must be configured, never both

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.extent_ = extent !== undefined ? extent : null;


  /**
   * @private
   * @type {Array.<module:ol/TileRange>}
   */
  this.fullTileRanges_ = null;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.tmpSize_ = [0, 0];

  if (options.sizes !== undefined) {
    this.fullTileRanges_ = options.sizes.map(function(size, z) {
      const tileRange = new _TileRange_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "b"](
        Math.min(0, size[0]), Math.max(size[0] - 1, -1),
        Math.min(0, size[1]), Math.max(size[1] - 1, -1));
      return tileRange;
    }, this);
  } else if (extent) {
    this.calculateTileRanges_(extent);
  }

};


/**
 * @private
 * @type {module:ol/tilecoord~TileCoord}
 */
const tmpTileCoord = [0, 0, 0];


/**
 * Call a function with each tile coordinate for a given extent and zoom level.
 *
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} zoom Integer zoom level.
 * @param {function(module:ol/tilecoord~TileCoord)} callback Function called with each tile coordinate.
 * @api
 */
TileGrid.prototype.forEachTileCoord = function(extent, zoom, callback) {
  const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
  for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
    for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
      callback([zoom, i, j]);
    }
  }
};


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {function(this: T, number, module:ol/TileRange): boolean} callback Callback.
 * @param {T=} opt_this The object to use as `this` in `callback`.
 * @param {module:ol/TileRange=} opt_tileRange Temporary module:ol/TileRange object.
 * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.
 * @return {boolean} Callback succeeded.
 * @template T
 */
TileGrid.prototype.forEachTileCoordParentTileRange = function(tileCoord, callback, opt_this, opt_tileRange, opt_extent) {
  let tileRange, x, y;
  let tileCoordExtent = null;
  let z = tileCoord[0] - 1;
  if (this.zoomFactor_ === 2) {
    x = tileCoord[1];
    y = tileCoord[2];
  } else {
    tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
  }
  while (z >= this.minZoom) {
    if (this.zoomFactor_ === 2) {
      x = Math.floor(x / 2);
      y = Math.floor(y / 2);
      tileRange = Object(_TileRange_js__WEBPACK_IMPORTED_MODULE_2__[/* createOrUpdate */ "a"])(x, x, y, y, opt_tileRange);
    } else {
      tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
    }
    if (callback.call(opt_this, z, tileRange)) {
      return true;
    }
    --z;
  }
  return false;
};


/**
 * Get the extent for this tile grid, if it was configured.
 * @return {module:ol/extent~Extent} Extent.
 */
TileGrid.prototype.getExtent = function() {
  return this.extent_;
};


/**
 * Get the maximum zoom level for the grid.
 * @return {number} Max zoom.
 * @api
 */
TileGrid.prototype.getMaxZoom = function() {
  return this.maxZoom;
};


/**
 * Get the minimum zoom level for the grid.
 * @return {number} Min zoom.
 * @api
 */
TileGrid.prototype.getMinZoom = function() {
  return this.minZoom;
};


/**
 * Get the origin for the grid at the given zoom level.
 * @param {number} z Integer zoom level.
 * @return {module:ol/coordinate~Coordinate} Origin.
 * @api
 */
TileGrid.prototype.getOrigin = function(z) {
  if (this.origin_) {
    return this.origin_;
  } else {
    return this.origins_[z];
  }
};


/**
 * Get the resolution for the given zoom level.
 * @param {number} z Integer zoom level.
 * @return {number} Resolution.
 * @api
 */
TileGrid.prototype.getResolution = function(z) {
  return this.resolutions_[z];
};


/**
 * Get the list of resolutions for the tile grid.
 * @return {Array.<number>} Resolutions.
 * @api
 */
TileGrid.prototype.getResolutions = function() {
  return this.resolutions_;
};


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/TileRange=} opt_tileRange Temporary module:ol/TileRange object.
 * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.
 * @return {module:ol/TileRange} Tile range.
 */
TileGrid.prototype.getTileCoordChildTileRange = function(tileCoord, opt_tileRange, opt_extent) {
  if (tileCoord[0] < this.maxZoom) {
    if (this.zoomFactor_ === 2) {
      const minX = tileCoord[1] * 2;
      const minY = tileCoord[2] * 2;
      return Object(_TileRange_js__WEBPACK_IMPORTED_MODULE_2__[/* createOrUpdate */ "a"])(minX, minX + 1, minY, minY + 1, opt_tileRange);
    }
    const tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
    return this.getTileRangeForExtentAndZ(
      tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
  }
  return null;
};


/**
 * Get the extent for a tile range.
 * @param {number} z Integer zoom level.
 * @param {module:ol/TileRange} tileRange Tile range.
 * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.
 * @return {module:ol/extent~Extent} Extent.
 */
TileGrid.prototype.getTileRangeExtent = function(z, tileRange, opt_extent) {
  const origin = this.getOrigin(z);
  const resolution = this.getResolution(z);
  const tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_6__[/* toSize */ "d"])(this.getTileSize(z), this.tmpSize_);
  const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
  const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
  const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
  const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* createOrUpdate */ "k"])(minX, minY, maxX, maxY, opt_extent);
};


/**
 * Get a tile range for the given extent and integer zoom level.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} z Integer zoom level.
 * @param {module:ol/TileRange=} opt_tileRange Temporary tile range object.
 * @return {module:ol/TileRange} Tile range.
 */
TileGrid.prototype.getTileRangeForExtentAndZ = function(extent, z, opt_tileRange) {
  const tileCoord = tmpTileCoord;
  this.getTileCoordForXYAndZ_(extent[0], extent[1], z, false, tileCoord);
  const minX = tileCoord[1];
  const minY = tileCoord[2];
  this.getTileCoordForXYAndZ_(extent[2], extent[3], z, true, tileCoord);
  return Object(_TileRange_js__WEBPACK_IMPORTED_MODULE_2__[/* createOrUpdate */ "a"])(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
};


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @return {module:ol/coordinate~Coordinate} Tile center.
 */
TileGrid.prototype.getTileCoordCenter = function(tileCoord) {
  const origin = this.getOrigin(tileCoord[0]);
  const resolution = this.getResolution(tileCoord[0]);
  const tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_6__[/* toSize */ "d"])(this.getTileSize(tileCoord[0]), this.tmpSize_);
  return [
    origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
    origin[1] + (tileCoord[2] + 0.5) * tileSize[1] * resolution
  ];
};


/**
 * Get the extent of a tile coordinate.
 *
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/extent~Extent=} opt_extent Temporary extent object.
 * @return {module:ol/extent~Extent} Extent.
 * @api
 */
TileGrid.prototype.getTileCoordExtent = function(tileCoord, opt_extent) {
  const origin = this.getOrigin(tileCoord[0]);
  const resolution = this.getResolution(tileCoord[0]);
  const tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_6__[/* toSize */ "d"])(this.getTileSize(tileCoord[0]), this.tmpSize_);
  const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
  const minY = origin[1] + tileCoord[2] * tileSize[1] * resolution;
  const maxX = minX + tileSize[0] * resolution;
  const maxY = minY + tileSize[1] * resolution;
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* createOrUpdate */ "k"])(minX, minY, maxX, maxY, opt_extent);
};


/**
 * Get the tile coordinate for the given map coordinate and resolution.  This
 * method considers that coordinates that intersect tile boundaries should be
 * assigned the higher tile coordinate.
 *
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} resolution Resolution.
 * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Destination module:ol/tilecoord~TileCoord object.
 * @return {module:ol/tilecoord~TileCoord} Tile coordinate.
 * @api
 */
TileGrid.prototype.getTileCoordForCoordAndResolution = function(coordinate, resolution, opt_tileCoord) {
  return this.getTileCoordForXYAndResolution_(
    coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
};


/**
 * Note that this method should not be called for resolutions that correspond
 * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {number} resolution Resolution (for a non-integer zoom level).
 * @param {boolean} reverseIntersectionPolicy Instead of letting edge
 *     intersections go to the higher tile coordinate, let edge intersections
 *     go to the lower tile coordinate.
 * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Temporary module:ol/tilecoord~TileCoord object.
 * @return {module:ol/tilecoord~TileCoord} Tile coordinate.
 * @private
 */
TileGrid.prototype.getTileCoordForXYAndResolution_ = function(
  x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
  const z = this.getZForResolution(resolution);
  const scale = resolution / this.getResolution(z);
  const origin = this.getOrigin(z);
  const tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_6__[/* toSize */ "d"])(this.getTileSize(z), this.tmpSize_);

  const adjustX = reverseIntersectionPolicy ? 0.5 : 0;
  const adjustY = reverseIntersectionPolicy ? 0 : 0.5;
  const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
  const yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);
  let tileCoordX = scale * xFromOrigin / tileSize[0];
  let tileCoordY = scale * yFromOrigin / tileSize[1];

  if (reverseIntersectionPolicy) {
    tileCoordX = Math.ceil(tileCoordX) - 1;
    tileCoordY = Math.ceil(tileCoordY) - 1;
  } else {
    tileCoordX = Math.floor(tileCoordX);
    tileCoordY = Math.floor(tileCoordY);
  }

  return Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_7__[/* createOrUpdate */ "a"])(z, tileCoordX, tileCoordY, opt_tileCoord);
};


/**
 * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
 * they should have separate implementations.  This method is for integer zoom
 * levels.  The other method should only be called for resolutions corresponding
 * to non-integer zoom levels.
 * @param {number} x Map x coordinate.
 * @param {number} y Map y coordinate.
 * @param {number} z Integer zoom level.
 * @param {boolean} reverseIntersectionPolicy Instead of letting edge
 *     intersections go to the higher tile coordinate, let edge intersections
 *     go to the lower tile coordinate.
 * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Temporary module:ol/tilecoord~TileCoord object.
 * @return {module:ol/tilecoord~TileCoord} Tile coordinate.
 * @private
 */
TileGrid.prototype.getTileCoordForXYAndZ_ = function(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
  const origin = this.getOrigin(z);
  const resolution = this.getResolution(z);
  const tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_6__[/* toSize */ "d"])(this.getTileSize(z), this.tmpSize_);

  const adjustX = reverseIntersectionPolicy ? 0.5 : 0;
  const adjustY = reverseIntersectionPolicy ? 0 : 0.5;
  const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
  const yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);
  let tileCoordX = xFromOrigin / tileSize[0];
  let tileCoordY = yFromOrigin / tileSize[1];

  if (reverseIntersectionPolicy) {
    tileCoordX = Math.ceil(tileCoordX) - 1;
    tileCoordY = Math.ceil(tileCoordY) - 1;
  } else {
    tileCoordX = Math.floor(tileCoordX);
    tileCoordY = Math.floor(tileCoordY);
  }

  return Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_7__[/* createOrUpdate */ "a"])(z, tileCoordX, tileCoordY, opt_tileCoord);
};


/**
 * Get a tile coordinate given a map coordinate and zoom level.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} z Zoom level.
 * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Destination module:ol/tilecoord~TileCoord object.
 * @return {module:ol/tilecoord~TileCoord} Tile coordinate.
 * @api
 */
TileGrid.prototype.getTileCoordForCoordAndZ = function(coordinate, z, opt_tileCoord) {
  return this.getTileCoordForXYAndZ_(
    coordinate[0], coordinate[1], z, false, opt_tileCoord);
};


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @return {number} Tile resolution.
 */
TileGrid.prototype.getTileCoordResolution = function(tileCoord) {
  return this.resolutions_[tileCoord[0]];
};


/**
 * Get the tile size for a zoom level. The type of the return value matches the
 * `tileSize` or `tileSizes` that the tile grid was configured with. To always
 * get an `module:ol/size~Size`, run the result through `module:ol/size~Size.toSize()`.
 * @param {number} z Z.
 * @return {number|module:ol/size~Size} Tile size.
 * @api
 */
TileGrid.prototype.getTileSize = function(z) {
  if (this.tileSize_) {
    return this.tileSize_;
  } else {
    return this.tileSizes_[z];
  }
};


/**
 * @param {number} z Zoom level.
 * @return {module:ol/TileRange} Extent tile range for the specified zoom level.
 */
TileGrid.prototype.getFullTileRange = function(z) {
  if (!this.fullTileRanges_) {
    return null;
  } else {
    return this.fullTileRanges_[z];
  }
};


/**
 * @param {number} resolution Resolution.
 * @param {number=} opt_direction If 0, the nearest resolution will be used.
 *     If 1, the nearest lower resolution will be used. If -1, the nearest
 *     higher resolution will be used. Default is 0.
 * @return {number} Z.
 * @api
 */
TileGrid.prototype.getZForResolution = function(resolution, opt_direction) {
  const z = Object(_array_js__WEBPACK_IMPORTED_MODULE_3__[/* linearFindNearest */ "h"])(this.resolutions_, resolution, opt_direction || 0);
  return Object(_math_js__WEBPACK_IMPORTED_MODULE_5__[/* clamp */ "a"])(z, this.minZoom, this.maxZoom);
};


/**
 * @param {!module:ol/extent~Extent} extent Extent for this tile grid.
 * @private
 */
TileGrid.prototype.calculateTileRanges_ = function(extent) {
  const length = this.resolutions_.length;
  const fullTileRanges = new Array(length);
  for (let z = this.minZoom; z < length; ++z) {
    fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
  }
  this.fullTileRanges_ = fullTileRanges;
};
/* harmony default export */ __webpack_exports__["a"] = (TileGrid);


/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TileSourceEvent; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29);
/* harmony import */ var _TileCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(185);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(36);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7);
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(58);
/* harmony import */ var _source_Source_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(131);
/* harmony import */ var _tilecoord_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(57);
/* harmony import */ var _tilegrid_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(67);
/**
 * @module ol/source/Tile
 */











/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions]
 * @property {number} [cacheSize]
 * @property {module:ol/extent~Extent} [extent]
 * @property {boolean} [opaque]
 * @property {number} [tilePixelRatio]
 * @property {module:ol/proj~ProjectionLike} [projection]
 * @property {module:ol/source/State} [state]
 * @property {module:ol/tilegrid/TileGrid} [tileGrid]
 * @property {boolean} [wrapX=true]
 * @property {number} [transition]
 */


/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for sources providing images divided into a tile grid.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/source/Source}
 * @param {module:ol/source/Tile~Options=} options SourceTile source options.
 * @api
 */
const TileSource = function(options) {

  _source_Source_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].call(this, {
    attributions: options.attributions,
    extent: options.extent,
    projection: options.projection,
    state: options.state,
    wrapX: options.wrapX
  });

  /**
   * @private
   * @type {boolean}
   */
  this.opaque_ = options.opaque !== undefined ? options.opaque : false;

  /**
   * @private
   * @type {number}
   */
  this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?
    options.tilePixelRatio : 1;

  /**
   * @protected
   * @type {module:ol/tilegrid/TileGrid}
   */
  this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;

  /**
   * @protected
   * @type {module:ol/TileCache}
   */
  this.tileCache = new _TileCache_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](options.cacheSize);

  /**
   * @protected
   * @type {module:ol/size~Size}
   */
  this.tmpSize = [0, 0];

  /**
   * @private
   * @type {string}
   */
  this.key_ = '';

  /**
   * @protected
   * @type {module:ol/Tile~Options}
   */
  this.tileOptions = {transition: options.transition};

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(TileSource, _source_Source_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]);


/**
 * @return {boolean} Can expire cache.
 */
TileSource.prototype.canExpireCache = function() {
  return this.tileCache.canExpireCache();
};


/**
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {!Object.<string, module:ol/TileRange>} usedTiles Used tiles.
 */
TileSource.prototype.expireCache = function(projection, usedTiles) {
  const tileCache = this.getTileCacheForProjection(projection);
  if (tileCache) {
    tileCache.expireCache(usedTiles);
  }
};


/**
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {number} z Zoom level.
 * @param {module:ol/TileRange} tileRange Tile range.
 * @param {function(module:ol/Tile):(boolean|undefined)} callback Called with each
 *     loaded tile.  If the callback returns `false`, the tile will not be
 *     considered loaded.
 * @return {boolean} The tile range is fully covered with loaded tiles.
 */
TileSource.prototype.forEachLoadedTile = function(projection, z, tileRange, callback) {
  const tileCache = this.getTileCacheForProjection(projection);
  if (!tileCache) {
    return false;
  }

  let covered = true;
  let tile, tileCoordKey, loaded;
  for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
    for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
      tileCoordKey = Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_8__[/* getKeyZXY */ "d"])(z, x, y);
      loaded = false;
      if (tileCache.containsKey(tileCoordKey)) {
        tile = /** @type {!module:ol/Tile} */ (tileCache.get(tileCoordKey));
        loaded = tile.getState() === _TileState_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].LOADED;
        if (loaded) {
          loaded = (callback(tile) !== false);
        }
      }
      if (!loaded) {
        covered = false;
      }
    }
  }
  return covered;
};


/**
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {number} Gutter.
 */
TileSource.prototype.getGutter = function(projection) {
  return 0;
};


/**
 * Return the key to be used for all tiles in the source.
 * @return {string} The key for all tiles.
 * @protected
 */
TileSource.prototype.getKey = function() {
  return this.key_;
};


/**
 * Set the value to be used as the key for all tiles in the source.
 * @param {string} key The key for tiles.
 * @protected
 */
TileSource.prototype.setKey = function(key) {
  if (this.key_ !== key) {
    this.key_ = key;
    this.changed();
  }
};


/**
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {boolean} Opaque.
 */
TileSource.prototype.getOpaque = function(projection) {
  return this.opaque_;
};


/**
 * @inheritDoc
 */
TileSource.prototype.getResolutions = function() {
  return this.tileGrid.getResolutions();
};


/**
 * @abstract
 * @param {number} z Tile coordinate z.
 * @param {number} x Tile coordinate x.
 * @param {number} y Tile coordinate y.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {!module:ol/Tile} Tile.
 */
TileSource.prototype.getTile = function(z, x, y, pixelRatio, projection) {};


/**
 * Return the tile grid of the tile source.
 * @return {module:ol/tilegrid/TileGrid} Tile grid.
 * @api
 */
TileSource.prototype.getTileGrid = function() {
  return this.tileGrid;
};


/**
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {!module:ol/tilegrid/TileGrid} Tile grid.
 */
TileSource.prototype.getTileGridForProjection = function(projection) {
  if (!this.tileGrid) {
    return Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_9__[/* getForProjection */ "d"])(projection);
  } else {
    return this.tileGrid;
  }
};


/**
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {module:ol/TileCache} Tile cache.
 * @protected
 */
TileSource.prototype.getTileCacheForProjection = function(projection) {
  const thisProj = this.getProjection();
  if (thisProj && !Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* equivalent */ "f"])(thisProj, projection)) {
    return null;
  } else {
    return this.tileCache;
  }
};


/**
 * Get the tile pixel ratio for this source. Subclasses may override this
 * method, which is meant to return a supported pixel ratio that matches the
 * provided `pixelRatio` as close as possible.
 * @param {number} pixelRatio Pixel ratio.
 * @return {number} Tile pixel ratio.
 */
TileSource.prototype.getTilePixelRatio = function(pixelRatio) {
  return this.tilePixelRatio_;
};


/**
 * @param {number} z Z.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {module:ol/size~Size} Tile size.
 */
TileSource.prototype.getTilePixelSize = function(z, pixelRatio, projection) {
  const tileGrid = this.getTileGridForProjection(projection);
  const tilePixelRatio = this.getTilePixelRatio(pixelRatio);
  const tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_6__[/* toSize */ "d"])(tileGrid.getTileSize(z), this.tmpSize);
  if (tilePixelRatio == 1) {
    return tileSize;
  } else {
    return Object(_size_js__WEBPACK_IMPORTED_MODULE_6__[/* scale */ "c"])(tileSize, tilePixelRatio, this.tmpSize);
  }
};


/**
 * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
 * is outside the resolution and extent range of the tile grid, `null` will be
 * returned.
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/proj/Projection=} opt_projection Projection.
 * @return {module:ol/tilecoord~TileCoord} Tile coordinate to be passed to the tileUrlFunction or
 *     null if no tile URL should be created for the passed `tileCoord`.
 */
TileSource.prototype.getTileCoordForTileUrlFunction = function(tileCoord, opt_projection) {
  const projection = opt_projection !== undefined ?
    opt_projection : this.getProjection();
  const tileGrid = this.getTileGridForProjection(projection);
  if (this.getWrapX() && projection.isGlobal()) {
    tileCoord = Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_9__[/* wrapX */ "e"])(tileGrid, tileCoord, projection);
  }
  return Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_8__[/* withinExtentAndZ */ "g"])(tileCoord, tileGrid) ? tileCoord : null;
};


/**
 * @inheritDoc
 */
TileSource.prototype.refresh = function() {
  this.tileCache.clear();
  this.changed();
};


/**
 * Marks a tile coord as being used, without triggering a load.
 * @param {number} z Tile coordinate z.
 * @param {number} x Tile coordinate x.
 * @param {number} y Tile coordinate y.
 * @param {module:ol/proj/Projection} projection Projection.
 */
TileSource.prototype.useTile = _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* UNDEFINED */ "c"];


/**
 * @classdesc
 * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
 * type.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {string} type Type.
 * @param {module:ol/Tile} tile The tile.
 */
const TileSourceEvent = function(type, tile) {

  _events_Event_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this, type);

  /**
   * The tile related to the event.
   * @type {module:ol/Tile}
   * @api
   */
  this.tile = tile;

};
Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(TileSourceEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);

/* harmony default export */ __webpack_exports__["b"] = (TileSource);


/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/format/FormatType
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  ARRAY_BUFFER: 'arraybuffer',
  JSON: 'json',
  TEXT: 'text',
  XML: 'xml'
});


/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return linearRingContainsExtent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return linearRingContainsXY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return linearRingsContainsXY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return linearRingssContainsXY; });
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/**
 * @module ol/geom/flat/contains
 */



/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {boolean} Contains extent.
 */
function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {
  const outside = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* forEachCorner */ "t"])(extent,
    /**
     * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
     * @return {boolean} Contains (x, y).
     */
    function(coordinate) {
      return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
    });
  return !outside;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {boolean} Contains (x, y).
 */
function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
  // http://geomalgorithms.com/a03-_inclusion.html
  // Copyright 2000 softSurfer, 2012 Dan Sunday
  // This code may be freely used and modified for any purpose
  // providing that this copyright notice is included with it.
  // SoftSurfer makes no warranty for this code, and cannot be held
  // liable for any real or imagined damage resulting from its use.
  // Users of this code must verify correctness for their application.
  let wn = 0;
  let x1 = flatCoordinates[end - stride];
  let y1 = flatCoordinates[end - stride + 1];
  for (; offset < end; offset += stride) {
    const x2 = flatCoordinates[offset];
    const y2 = flatCoordinates[offset + 1];
    if (y1 <= y) {
      if (y2 > y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) > 0) {
        wn++;
      }
    } else if (y2 <= y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) < 0) {
      wn--;
    }
    x1 = x2;
    y1 = y2;
  }
  return wn !== 0;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {boolean} Contains (x, y).
 */
function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
  if (ends.length === 0) {
    return false;
  }
  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
    return false;
  }
  for (let i = 1, ii = ends.length; i < ii; ++i) {
    if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {
      return false;
    }
  }
  return true;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {boolean} Contains (x, y).
 */
function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {
  if (endss.length === 0) {
    return false;
  }
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
      return true;
    }
    offset = ends[ends.length - 1];
  }
  return false;
}


/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/source/VectorEventType
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  /**
   * Triggered when a feature is added to the source.
   * @event ol/source/Vector~VectorSourceEvent#addfeature
   * @api
   */
  ADDFEATURE: 'addfeature',

  /**
   * Triggered when a feature is updated.
   * @event ol/source/Vector~VectorSourceEvent#changefeature
   * @api
   */
  CHANGEFEATURE: 'changefeature',

  /**
   * Triggered when the clear method is called on the source.
   * @event ol/source/Vector~VectorSourceEvent#clear
   * @api
   */
  CLEAR: 'clear',

  /**
   * Triggered when a feature is removed from the source.
   * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.
   * @event ol/source/Vector~VectorSourceEvent#removefeature
   * @api
   */
  REMOVEFEATURE: 'removefeature'
});


/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(169);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _Image_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(138);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(27);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(15);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(7);
/* harmony import */ var _reproj_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(140);
/* harmony import */ var _source_Image_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(64);
/* harmony import */ var _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(143);
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(117);
/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(115);
/**
 * @module ol/source/ImageWMS
 */
















/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
 * the image from the remote server.
 * @property {module:ol/source/WMSServerType|string} [serverType] The type of
 * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.
 * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
 * @property {Object.<string,*>} params WMS request parameters.
 * At least a `LAYERS` param is required. `STYLES` is
 * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
 * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means
 * twice the width and height of the map viewport, and so on. Must be `1` or
 * higher.
 * @property {Array.<number>} [resolutions] Resolutions.
 * If specified, requests will be made for these resolutions only.
 * @property {string} url WMS service URL.
 */


/**
 * @classdesc
 * Source for WMS servers providing single, untiled images.
 *
 * @constructor
 * @fires ol/source/Image~ImageSourceEvent
 * @extends {module:ol/source/Image}
 * @param {module:ol/source/ImageWMS~Options=} [opt_options] ImageWMS options.
 * @api
 */
const ImageWMS = function(opt_options) {

  const options = opt_options || {};

  _source_Image_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].call(this, {
    attributions: options.attributions,
    projection: options.projection,
    resolutions: options.resolutions
  });

  /**
   * @private
   * @type {?string}
   */
  this.crossOrigin_ =
      options.crossOrigin !== undefined ? options.crossOrigin : null;

  /**
   * @private
   * @type {string|undefined}
   */
  this.url_ = options.url;

  /**
   * @private
   * @type {module:ol/Image~LoadFunction}
   */
  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?
    options.imageLoadFunction : _source_Image_js__WEBPACK_IMPORTED_MODULE_10__[/* defaultImageLoadFunction */ "b"];

  /**
   * @private
   * @type {!Object}
   */
  this.params_ = options.params || {};

  /**
   * @private
   * @type {boolean}
   */
  this.v13_ = true;
  this.updateV13_();

  /**
   * @private
   * @type {module:ol/source/WMSServerType|undefined}
   */
  this.serverType_ = /** @type {module:ol/source/WMSServerType|undefined} */ (options.serverType);

  /**
   * @private
   * @type {boolean}
   */
  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

  /**
   * @private
   * @type {module:ol/Image}
   */
  this.image_ = null;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.imageSize_ = [0, 0];

  /**
   * @private
   * @type {number}
   */
  this.renderedRevision_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_1__[/* inherits */ "c"])(ImageWMS, _source_Image_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"]);


/**
 * @const
 * @type {module:ol/size~Size}
 */
const GETFEATUREINFO_IMAGE_SIZE = [101, 101];


/**
 * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
 * projection. Return `undefined` if the GetFeatureInfo URL cannot be
 * constructed.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} resolution Resolution.
 * @param {module:ol/proj~ProjectionLike} projection Projection.
 * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should
 *     be provided. If `QUERY_LAYERS` is not provided then the layers specified
 *     in the `LAYERS` parameter will be used. `VERSION` should not be
 *     specified here.
 * @return {string|undefined} GetFeatureInfo URL.
 * @api
 */
ImageWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {
  if (this.url_ === undefined) {
    return undefined;
  }
  const projectionObj = Object(_proj_js__WEBPACK_IMPORTED_MODULE_8__[/* get */ "h"])(projection);
  const sourceProjectionObj = this.getProjection();

  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
    resolution = Object(_reproj_js__WEBPACK_IMPORTED_MODULE_9__[/* calculateSourceResolution */ "a"])(sourceProjectionObj, projectionObj, coordinate, resolution);
    coordinate = Object(_proj_js__WEBPACK_IMPORTED_MODULE_8__[/* transform */ "n"])(coordinate, projectionObj, sourceProjectionObj);
  }

  const extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getForViewAndSize */ "z"])(coordinate, resolution, 0,
    GETFEATUREINFO_IMAGE_SIZE);

  const baseParams = {
    'SERVICE': 'WMS',
    'VERSION': _common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_WMS_VERSION */ "a"],
    'REQUEST': 'GetFeatureInfo',
    'FORMAT': 'image/png',
    'TRANSPARENT': true,
    'QUERY_LAYERS': this.params_['LAYERS']
  };
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_7__[/* assign */ "a"])(baseParams, this.params_, params);

  const x = Math.floor((coordinate[0] - extent[0]) / resolution);
  const y = Math.floor((extent[3] - coordinate[1]) / resolution);
  baseParams[this.v13_ ? 'I' : 'X'] = x;
  baseParams[this.v13_ ? 'J' : 'Y'] = y;

  return this.getRequestUrl_(
    extent, GETFEATUREINFO_IMAGE_SIZE,
    1, sourceProjectionObj || projectionObj, baseParams);
};


/**
 * Get the user-provided params, i.e. those passed to the constructor through
 * the "params" option, and possibly updated using the updateParams method.
 * @return {Object} Params.
 * @api
 */
ImageWMS.prototype.getParams = function() {
  return this.params_;
};


/**
 * @inheritDoc
 */
ImageWMS.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {

  if (this.url_ === undefined) {
    return null;
  }

  resolution = this.findNearestResolution(resolution);

  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {
    pixelRatio = 1;
  }

  const imageResolution = resolution / pixelRatio;

  const center = Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getCenter */ "x"])(extent);
  const viewWidth = Math.ceil(Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getWidth */ "E"])(extent) / imageResolution);
  const viewHeight = Math.ceil(Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getHeight */ "A"])(extent) / imageResolution);
  const viewExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getForViewAndSize */ "z"])(center, imageResolution, 0,
    [viewWidth, viewHeight]);
  const requestWidth = Math.ceil(this.ratio_ * Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getWidth */ "E"])(extent) / imageResolution);
  const requestHeight = Math.ceil(this.ratio_ * Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getHeight */ "A"])(extent) / imageResolution);
  const requestExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getForViewAndSize */ "z"])(center, imageResolution, 0,
    [requestWidth, requestHeight]);

  const image = this.image_;
  if (image &&
      this.renderedRevision_ == this.getRevision() &&
      image.getResolution() == resolution &&
      image.getPixelRatio() == pixelRatio &&
      Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* containsExtent */ "g"])(image.getExtent(), viewExtent)) {
    return image;
  }

  const params = {
    'SERVICE': 'WMS',
    'VERSION': _common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_WMS_VERSION */ "a"],
    'REQUEST': 'GetMap',
    'FORMAT': 'image/png',
    'TRANSPARENT': true
  };
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_7__[/* assign */ "a"])(params, this.params_);

  this.imageSize_[0] = Math.round(Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getWidth */ "E"])(requestExtent) / imageResolution);
  this.imageSize_[1] = Math.round(Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getHeight */ "A"])(requestExtent) / imageResolution);

  const url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio,
    projection, params);

  this.image_ = new _Image_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](requestExtent, resolution, pixelRatio,
    url, this.crossOrigin_, this.imageLoadFunction_);

  this.renderedRevision_ = this.getRevision();

  Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(this.image_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].CHANGE,
    this.handleImageChange, this);

  return this.image_;

};


/**
 * Return the image load function of the source.
 * @return {module:ol/Image~LoadFunction} The image load function.
 * @api
 */
ImageWMS.prototype.getImageLoadFunction = function() {
  return this.imageLoadFunction_;
};


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/size~Size} size Size.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {Object} params Params.
 * @return {string} Request URL.
 * @private
 */
ImageWMS.prototype.getRequestUrl_ = function(extent, size, pixelRatio, projection, params) {

  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_3__[/* assert */ "a"])(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`

  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();

  if (!('STYLES' in this.params_)) {
    params['STYLES'] = '';
  }

  if (pixelRatio != 1) {
    switch (this.serverType_) {
      case _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"].GEOSERVER:
        const dpi = (90 * pixelRatio + 0.5) | 0;
        if ('FORMAT_OPTIONS' in params) {
          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;
        } else {
          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;
        }
        break;
      case _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"].MAPSERVER:
        params['MAP_RESOLUTION'] = 90 * pixelRatio;
        break;
      case _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"].CARMENTA_SERVER:
      case _source_WMSServerType_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"].QGIS:
        params['DPI'] = 90 * pixelRatio;
        break;
      default:
        Object(_asserts_js__WEBPACK_IMPORTED_MODULE_3__[/* assert */ "a"])(false, 8); // Unknown `serverType` configured
        break;
    }
  }

  params['WIDTH'] = size[0];
  params['HEIGHT'] = size[1];

  const axisOrientation = projection.getAxisOrientation();
  let bbox;
  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {
    bbox = [extent[1], extent[0], extent[3], extent[2]];
  } else {
    bbox = extent;
  }
  params['BBOX'] = bbox.join(',');

  return Object(_uri_js__WEBPACK_IMPORTED_MODULE_13__[/* appendParams */ "a"])(/** @type {string} */ (this.url_), params);
};


/**
 * Return the URL used for this WMS source.
 * @return {string|undefined} URL.
 * @api
 */
ImageWMS.prototype.getUrl = function() {
  return this.url_;
};


/**
 * Set the image load function of the source.
 * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.
 * @api
 */
ImageWMS.prototype.setImageLoadFunction = function(imageLoadFunction) {
  this.image_ = null;
  this.imageLoadFunction_ = imageLoadFunction;
  this.changed();
};


/**
 * Set the URL to use for requests.
 * @param {string|undefined} url URL.
 * @api
 */
ImageWMS.prototype.setUrl = function(url) {
  if (url != this.url_) {
    this.url_ = url;
    this.image_ = null;
    this.changed();
  }
};


/**
 * Update the user-provided params.
 * @param {Object} params Params.
 * @api
 */
ImageWMS.prototype.updateParams = function(params) {
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_7__[/* assign */ "a"])(this.params_, params);
  this.updateV13_();
  this.image_ = null;
  this.changed();
};


/**
 * @private
 */
ImageWMS.prototype.updateV13_ = function() {
  const version = this.params_['VERSION'] || _common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_WMS_VERSION */ "a"];
  this.v13_ = Object(_string_js__WEBPACK_IMPORTED_MODULE_12__[/* compareVersions */ "a"])(version, '1.3') >= 0;
};
/* harmony default export */ __webpack_exports__["a"] = (ImageWMS);


/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return appendParams; });
/**
 * @module ol/uri
 */


/**
 * Appends query parameters to a URI.
 *
 * @param {string} uri The original URI, which may already have query data.
 * @param {!Object} params An object where keys are URI-encoded parameter keys,
 *     and the values are arbitrary types or arrays.
 * @return {string} The new URI.
 */
function appendParams(uri, params) {
  const keyParams = [];
  // Skip any null or undefined parameter values
  Object.keys(params).forEach(function(k) {
    if (params[k] !== null && params[k] !== undefined) {
      keyParams.push(k + '=' + encodeURIComponent(params[k]));
    }
  });
  const qs = keyParams.join('&');
  // remove any trailing ? or &
  uri = uri.replace(/[?&]$/, '');
  // append ? or & depending on whether uri has existing parameters
  uri = uri.indexOf('?') === -1 ? uri + '?' : uri + '&';
  return uri + qs;
}


/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/TileState.js
var TileState = __webpack_require__(19);

// EXTERNAL MODULE: ../src/ol/tileurlfunction.js
var tileurlfunction = __webpack_require__(84);

// EXTERNAL MODULE: ../src/ol/source/Tile.js
var Tile = __webpack_require__(110);

// CONCATENATED MODULE: ../src/ol/source/TileEventType.js
/**
 * @module ol/source/TileEventType
 */

/**
 * @enum {string}
 */
/* harmony default export */ var TileEventType = ({

  /**
   * Triggered when a tile starts loading.
   * @event module:ol/source/Tile~TileSourceEvent#tileloadstart
   * @api
   */
  TILELOADSTART: 'tileloadstart',

  /**
   * Triggered when a tile finishes loading, either when its data is loaded,
   * or when loading was aborted because the tile is no longer needed.
   * @event module:ol/source/Tile~TileSourceEvent#tileloadend
   * @api
   */
  TILELOADEND: 'tileloadend',

  /**
   * Triggered if tile loading results in an error.
   * @event module:ol/source/Tile~TileSourceEvent#tileloaderror
   * @api
   */
  TILELOADERROR: 'tileloaderror'

});

// EXTERNAL MODULE: ../src/ol/tilecoord.js
var tilecoord = __webpack_require__(57);

// CONCATENATED MODULE: ../src/ol/source/UrlTile.js
/**
 * @module ol/source/UrlTile
 */







/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions]
 * @property {number} [cacheSize]
 * @property {module:ol/extent~Extent} [extent]
 * @property {boolean} [opaque]
 * @property {module:ol/proj~ProjectionLike} [projection]
 * @property {module:ol/source/State} [state]
 * @property {module:ol/tilegrid/TileGrid} [tileGrid]
 * @property {module:ol/Tile~LoadFunction} tileLoadFunction
 * @property {number} [tilePixelRatio]
 * @property {module:ol/Tile~UrlFunction} [tileUrlFunction]
 * @property {string} [url]
 * @property {Array.<string>} [urls]
 * @property {boolean} [wrapX=true]
 * @property {number} [transition]
 */


/**
 * @classdesc
 * Base class for sources providing tiles divided into a tile grid over http.
 *
 * @constructor
 * @abstract
 * @fires module:ol/source/TileEvent
 * @extends {module:ol/source/Tile}
 * @param {module:ol/source/UrlTile~Options=} options Image tile options.
 */
const UrlTile = function(options) {

  Tile["b" /* default */].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize,
    extent: options.extent,
    opaque: options.opaque,
    projection: options.projection,
    state: options.state,
    tileGrid: options.tileGrid,
    tilePixelRatio: options.tilePixelRatio,
    wrapX: options.wrapX,
    transition: options.transition
  });

  /**
   * @protected
   * @type {module:ol/Tile~LoadFunction}
   */
  this.tileLoadFunction = options.tileLoadFunction;

  /**
   * @protected
   * @type {module:ol/Tile~UrlFunction}
   */
  this.tileUrlFunction = this.fixedTileUrlFunction ?
    this.fixedTileUrlFunction.bind(this) : tileurlfunction["d" /* nullTileUrlFunction */];

  /**
   * @protected
   * @type {!Array.<string>|null}
   */
  this.urls = null;

  if (options.urls) {
    this.setUrls(options.urls);
  } else if (options.url) {
    this.setUrl(options.url);
  }
  if (options.tileUrlFunction) {
    this.setTileUrlFunction(options.tileUrlFunction);
  }

  /**
   * @private
   * @type {!Object.<number, boolean>}
   */
  this.tileLoadingKeys_ = {};

};

Object(util["c" /* inherits */])(UrlTile, Tile["b" /* default */]);


/**
 * @type {module:ol/Tile~UrlFunction|undefined}
 * @protected
 */
UrlTile.prototype.fixedTileUrlFunction;

/**
 * Return the tile load function of the source.
 * @return {module:ol/Tile~LoadFunction} TileLoadFunction
 * @api
 */
UrlTile.prototype.getTileLoadFunction = function() {
  return this.tileLoadFunction;
};


/**
 * Return the tile URL function of the source.
 * @return {module:ol/Tile~UrlFunction} TileUrlFunction
 * @api
 */
UrlTile.prototype.getTileUrlFunction = function() {
  return this.tileUrlFunction;
};


/**
 * Return the URLs used for this source.
 * When a tileUrlFunction is used instead of url or urls,
 * null will be returned.
 * @return {!Array.<string>|null} URLs.
 * @api
 */
UrlTile.prototype.getUrls = function() {
  return this.urls;
};


/**
 * Handle tile change events.
 * @param {module:ol/events/Event} event Event.
 * @protected
 */
UrlTile.prototype.handleTileChange = function(event) {
  const tile = /** @type {module:ol/Tile} */ (event.target);
  const uid = Object(util["b" /* getUid */])(tile);
  const tileState = tile.getState();
  let type;
  if (tileState == TileState["a" /* default */].LOADING) {
    this.tileLoadingKeys_[uid] = true;
    type = TileEventType.TILELOADSTART;
  } else if (uid in this.tileLoadingKeys_) {
    delete this.tileLoadingKeys_[uid];
    type = tileState == TileState["a" /* default */].ERROR ? TileEventType.TILELOADERROR :
      (tileState == TileState["a" /* default */].LOADED || tileState == TileState["a" /* default */].ABORT) ?
        TileEventType.TILELOADEND : undefined;
  }
  if (type != undefined) {
    this.dispatchEvent(new Tile["a" /* TileSourceEvent */](type, tile));
  }
};


/**
 * Set the tile load function of the source.
 * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.
 * @api
 */
UrlTile.prototype.setTileLoadFunction = function(tileLoadFunction) {
  this.tileCache.clear();
  this.tileLoadFunction = tileLoadFunction;
  this.changed();
};


/**
 * Set the tile URL function of the source.
 * @param {module:ol/Tile~UrlFunction} tileUrlFunction Tile URL function.
 * @param {string=} opt_key Optional new tile key for the source.
 * @api
 */
UrlTile.prototype.setTileUrlFunction = function(tileUrlFunction, opt_key) {
  this.tileUrlFunction = tileUrlFunction;
  this.tileCache.pruneExceptNewestZ();
  if (typeof opt_key !== 'undefined') {
    this.setKey(opt_key);
  } else {
    this.changed();
  }
};


/**
 * Set the URL to use for requests.
 * @param {string} url URL.
 * @api
 */
UrlTile.prototype.setUrl = function(url) {
  const urls = this.urls = Object(tileurlfunction["c" /* expandUrl */])(url);
  this.setTileUrlFunction(this.fixedTileUrlFunction ?
    this.fixedTileUrlFunction.bind(this) :
    Object(tileurlfunction["a" /* createFromTemplates */])(urls, this.tileGrid), url);
};


/**
 * Set the URLs to use for requests.
 * @param {Array.<string>} urls URLs.
 * @api
 */
UrlTile.prototype.setUrls = function(urls) {
  this.urls = urls;
  const key = urls.join('\n');
  this.setTileUrlFunction(this.fixedTileUrlFunction ?
    this.fixedTileUrlFunction.bind(this) :
    Object(tileurlfunction["a" /* createFromTemplates */])(urls, this.tileGrid), key);
};


/**
 * @inheritDoc
 */
UrlTile.prototype.useTile = function(z, x, y) {
  const tileCoordKey = Object(tilecoord["d" /* getKeyZXY */])(z, x, y);
  if (this.tileCache.containsKey(tileCoordKey)) {
    this.tileCache.get(tileCoordKey);
  }
};
/* harmony default export */ var source_UrlTile = __webpack_exports__["a"] = (UrlTile);


/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return padNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return compareVersions; });
/**
 * @module ol/string
 */

/**
 * @param {number} number Number to be formatted
 * @param {number} width The desired width
 * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)
 * @returns {string} Formatted string
 */
function padNumber(number, width, opt_precision) {
  const numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;
  let decimal = numberString.indexOf('.');
  decimal = decimal === -1 ? numberString.length : decimal;
  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;
}


/**
 * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js
 * @param {string|number} v1 First version
 * @param {string|number} v2 Second version
 * @returns {number} Value
 */
function compareVersions(v1, v2) {
  const s1 = ('' + v1).split('.');
  const s2 = ('' + v2).split('.');

  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {
    const n1 = parseInt(s1[i] || '0', 10);
    const n2 = parseInt(s2[i] || '0', 10);

    if (n1 > n2) {
      return 1;
    }
    if (n2 > n1) {
      return -1;
    }
  }

  return 0;
}


/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/layer/VectorTileRenderType
 */

/**
 * @enum {string}
 * Render mode for vector tiles:
 *  * `'image'`: Vector tiles are rendered as images. Great performance, but
 *    point symbols and texts are always rotated with the view and pixels are
 *    scaled during zoom animations.
 *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels
 *    are scaled during zoom animations. Point symbols and texts are accurately
 *    rendered as vectors and can stay upright on rotated views.
 *  * `'vector'`: Vector tiles are rendered as vectors. Most accurate rendering
 *    even during animations, but slower performance than the other options.
 * @api
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  IMAGE: 'image',
  HYBRID: 'hybrid',
  VECTOR: 'vector'
});


/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RenderType */
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _LayerType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var _layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(144);
/* harmony import */ var _layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24);
/* harmony import */ var _layer_VectorTileRenderType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(118);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(15);
/**
 * @module ol/layer/VectorTile
 */









/**
 * @enum {string}
 * Render mode for vector tiles:
 *  * `'image'`: Vector tiles are rendered as images. Great performance, but
 *    point symbols and texts are always rotated with the view and pixels are
 *    scaled during zoom animations.
 *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels
 *    are scaled during zoom animations. Point symbols and texts are accurately
 *    rendered as vectors and can stay upright on rotated views.
 *  * `'vector'`: Vector tiles are rendered as vectors. Most accurate rendering
 *    even during animations, but slower performance than the other options.
 * @api
 */
const RenderType = {
  IMAGE: 'image',
  HYBRID: 'hybrid',
  VECTOR: 'vector'
};


/**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {module:ol/render~OrderFunction} [renderOrder] Render order. Function to be used when sorting
 * features before rendering. By default features are drawn in the order that they are created. Use
 * `null` to avoid the sort, but get an undefined draw order.
 * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the
 * renderer when getting features from the vector tile for the rendering or hit-detection.
 * Recommended value: Vector tiles are usually generated with a buffer, so this value should match
 * the largest possible buffer of the used tiles. It should be at least the size of the largest
 * point symbol or line width.
 * @property {module:ol/layer/VectorTileRenderType|string} [renderMode='hybrid'] Render mode for vector tiles:
 *  * `'image'`: Vector tiles are rendered as images. Great performance, but point symbols and texts
 *    are always rotated with the view and pixels are scaled during zoom animations.
 *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom
 *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on
 *    rotated views.
 *  * `'vector'`: Vector tiles are rendered as vectors. Most accurate rendering even during
 *    animations, but slower performance than the other options.
 *
 * When `declutter` is set to `true`, `'hybrid'` will be used instead of `'image'`.
 * @property {module:ol/source/VectorTile} [source] Source.
 * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage
 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
 * use {@link module:ol/Map#addLayer}.
 * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
 * image and text styles, and the priority is defined by the z-index of the style. Lower z-index
 * means higher priority. When set to `true`, a `renderMode` of `'image'` will be overridden with
 * `'hybrid'`.
 * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style] Layer style. See
 * {@link module:ol/style} for default style which will be used if this is not defined.
 * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be
 * recreated during animations. This means that no vectors will be shown clipped, but the setting
 * will have a performance impact for large amounts of vector data. When set to `false`, batches
 * will be recreated when no animation is active.
 * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be
 * recreated during interactions. See also `updateWhileAnimating`.
 * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
 * means no preloading.
 * @property {module:ol/render~OrderFunction} [renderOrder] Render order. Function to be used when sorting
 * features before rendering. By default features are drawn in the order that they are created.
 * @property {(module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction)} [style] Layer style. See
 * {@link module:ol/style} for default style which will be used if this is not defined.
 * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
 */


/**
 * @classdesc
 * Layer for vector tile data that is rendered client-side.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @constructor
 * @extends {module:ol/layer/Vector}
 * @param {module:ol/layer/VectorTile~Options=} opt_options Options.
 * @api
 */
const VectorTileLayer = function(opt_options) {
  const options = opt_options ? opt_options : {};

  let renderMode = options.renderMode || _layer_VectorTileRenderType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].HYBRID;
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_2__[/* assert */ "a"])(renderMode == undefined ||
      renderMode == _layer_VectorTileRenderType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].IMAGE ||
      renderMode == _layer_VectorTileRenderType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].HYBRID ||
      renderMode == _layer_VectorTileRenderType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].VECTOR,
  28); // `renderMode` must be `'image'`, `'hybrid'` or `'vector'`
  if (options.declutter && renderMode == _layer_VectorTileRenderType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].IMAGE) {
    renderMode = _layer_VectorTileRenderType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].HYBRID;
  }
  options.renderMode = renderMode;

  const baseOptions = Object(_obj_js__WEBPACK_IMPORTED_MODULE_6__[/* assign */ "a"])({}, options);

  delete baseOptions.preload;
  delete baseOptions.useInterimTilesOnError;
  _layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this,  /** @type {module:ol/layer/Vector~Options} */ (baseOptions));

  this.setPreload(options.preload ? options.preload : 0);
  this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?
    options.useInterimTilesOnError : true);

  /**
   * The layer type.
   * @protected
   * @type {module:ol/LayerType}
   */
  this.type = _LayerType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].VECTOR_TILE;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(VectorTileLayer, _layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * Return the level as number to which we will preload tiles up to.
 * @return {number} The level to preload tiles up to.
 * @observable
 * @api
 */
VectorTileLayer.prototype.getPreload = function() {
  return /** @type {number} */ (this.get(_layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].PRELOAD));
};


/**
 * Whether we use interim tiles on error.
 * @return {boolean} Use interim tiles on error.
 * @observable
 * @api
 */
VectorTileLayer.prototype.getUseInterimTilesOnError = function() {
  return /** @type {boolean} */ (this.get(_layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].USE_INTERIM_TILES_ON_ERROR));
};


/**
 * Set the level as number to which we will preload tiles up to.
 * @param {number} preload The level to preload tiles up to.
 * @observable
 * @api
 */
VectorTileLayer.prototype.setPreload = function(preload) {
  this.set(_layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].PRELOAD, preload);
};


/**
 * Set whether we use interim tiles on error.
 * @param {boolean} useInterimTilesOnError Use interim tiles on error.
 * @observable
 * @api
 */
VectorTileLayer.prototype.setUseInterimTilesOnError = function(useInterimTilesOnError) {
  this.set(_layer_TileProperty_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
};


/**
 * Return the associated {@link module:ol/source/VectorTile vectortilesource} of the layer.
 * @function
 * @return {module:ol/source/VectorTile} Source.
 * @api
 */
VectorTileLayer.prototype.getSource;
/* harmony default export */ __webpack_exports__["a"] = (VectorTileLayer);


/***/ }),
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return register; });
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _transforms_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(134);
/* harmony import */ var _Projection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68);
/**
 * @module ol/proj/proj4
 */




/**
 * Make projections defined in proj4 (with `proj4.defs()`) available in
 * OpenLayers.
 *
 * This function should be called whenever changes are made to the proj4
 * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be
 * modified by this function.
 *
 * @param {?} proj4 Proj4.
 * @api
 */
function register(proj4) {
  const projCodes = Object.keys(proj4.defs);
  const len = projCodes.length;
  let i, j;
  for (i = 0; i < len; ++i) {
    const code = projCodes[i];
    if (!Object(_proj_js__WEBPACK_IMPORTED_MODULE_0__[/* get */ "h"])(code)) {
      const def = proj4.defs(code);
      Object(_proj_js__WEBPACK_IMPORTED_MODULE_0__[/* addProjection */ "d"])(new _Projection_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]({
        code: code,
        axisOrientation: def.axis,
        metersPerUnit: def.to_meter,
        units: def.units
      }));
    }
  }
  for (i = 0; i < len; ++i) {
    const code1 = projCodes[i];
    const proj1 = Object(_proj_js__WEBPACK_IMPORTED_MODULE_0__[/* get */ "h"])(code1);
    for (j = 0; j < len; ++j) {
      const code2 = projCodes[j];
      const proj2 = Object(_proj_js__WEBPACK_IMPORTED_MODULE_0__[/* get */ "h"])(code2);
      if (!Object(_transforms_js__WEBPACK_IMPORTED_MODULE_1__[/* get */ "c"])(code1, code2)) {
        if (proj4.defs[code1] === proj4.defs[code2]) {
          Object(_proj_js__WEBPACK_IMPORTED_MODULE_0__[/* addEquivalentProjections */ "c"])([proj1, proj2]);
        } else {
          const transform = proj4(code1, code2);
          Object(_proj_js__WEBPACK_IMPORTED_MODULE_0__[/* addCoordinateTransforms */ "b"])(proj1, proj2, transform.forward, transform.inverse);
        }
      }
    }
  }
}


/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19);
/* harmony import */ var _VectorImageTile_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(196);
/* harmony import */ var _VectorTile_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(210);
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(58);
/* harmony import */ var _source_UrlTile_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(116);
/* harmony import */ var _tilecoord_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(57);
/* harmony import */ var _tilegrid_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(67);
/**
 * @module ol/source/VectorTile
 */









/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=128] Cache size.
 * @property {module:ol/format/Feature} [format] Feature format for tiles. Used and required by the default.
 * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this
 * to `false` (e.g. for sources with polygons that represent administrative
 * boundaries or TopoJSON sources) allows the renderer to optimise fill and
 * stroke operations.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {module:ol/source/State} [state] Source state.
 * @property {module:ol/VectorTile~TileClass} [tileClass] Class used to instantiate image tiles.
 * Default is {@link module:ol/VectorTile}.
 * @property {number} [maxZoom=22] Optional max zoom level.
 * @property {number} [minZoom] Optional min zoom level.
 * @property {number|module:ol/size~Size} [tileSize=512] Optional tile size.
 * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.
 * @property {module:ol/Tile~LoadFunction} [tileLoadFunction]
 * Optional function to load a tile given a URL. Could look like this:
 * ```js
 * function(tile, url) {
 *   tile.setLoader(function() {
 *     var data = // ... fetch data
 *     var format = tile.getFormat();
 *     tile.setProjection(format.readProjection(data));
 *     tile.setFeatures(format.readFeatures(data, {
 *       // featureProjection is not required for ol/format/MVT
 *       featureProjection: map.getView().getProjection()
 *     }));
 *     // the line below is only required for ol/format/MVT
 *     tile.setExtent(format.getLastExtent());
 *   };
 * });
 * ```
 * @property {module:ol/Tile~UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
 * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
 * used instead of defining each one separately in the `urls` option.
 * @property {number} [transition] A duration for tile opacity
 * transitions in milliseconds. A duration of 0 disables the opacity transition.
 * @property {Array.<string>} [urls] An array of URL templates.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * When set to `false`, only one world
 * will be rendered. When set to `true`, tiles will be wrapped horizontally to
 * render multiple worlds.
 */


/**
 * @classdesc
 * Class for layer sources providing vector data divided into a tile grid, to be
 * used with {@link module:ol/layer/VectorTile~VectorTile}. Although this source receives tiles
 * with vector features from the server, it is not meant for feature editing.
 * Features are optimized for rendering, their geometries are clipped at or near
 * tile boundaries and simplified for a view resolution. See
 * {@link module:ol/source/Vector} for vector sources that are suitable for feature
 * editing.
 *
 * @constructor
 * @fires module:ol/source/Tile~TileSourceEvent
 * @extends {module:ol/source/UrlTile}
 * @param {module:ol/source/VectorTile~Options=} options Vector tile options.
 * @api
 */
const VectorTile = function(options) {
  const projection = options.projection || 'EPSG:3857';

  const extent = options.extent || Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_7__[/* extentFromProjection */ "c"])(projection);

  const tileGrid = options.tileGrid || Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_7__[/* createXYZ */ "b"])({
    extent: extent,
    maxZoom: options.maxZoom || 22,
    minZoom: options.minZoom,
    tileSize: options.tileSize || 512
  });

  _source_UrlTile_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize !== undefined ? options.cacheSize : 128,
    extent: extent,
    opaque: false,
    projection: projection,
    state: options.state,
    tileGrid: tileGrid,
    tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : _VectorImageTile_js__WEBPACK_IMPORTED_MODULE_2__[/* defaultLoadFunction */ "b"],
    tileUrlFunction: options.tileUrlFunction,
    url: options.url,
    urls: options.urls,
    wrapX: options.wrapX === undefined ? true : options.wrapX,
    transition: options.transition
  });

  /**
   * @private
   * @type {module:ol/format/Feature}
   */
  this.format_ = options.format ? options.format : null;

  /**
     * @private
     * @type {Object.<string, module:ol/VectorTile>}
     */
  this.sourceTiles_ = {};

  /**
   * @private
   * @type {boolean}
   */
  this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;

  /**
     * @protected
     * @type {function(new: module:ol/VectorTile, module:ol/tilecoord~TileCoord, module:ol/TileState, string,
     *        module:ol/format/Feature, module:ol/Tile~LoadFunction)}
     */
  this.tileClass = options.tileClass ? options.tileClass : _VectorTile_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"];

  /**
   * @private
   * @type {Object.<string, module:ol/tilegrid/TileGrid>}
   */
  this.tileGrids_ = {};

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(VectorTile, _source_UrlTile_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]);


/**
 * @return {boolean} The source can have overlapping geometries.
 */
VectorTile.prototype.getOverlaps = function() {
  return this.overlaps_;
};

/**
 * clear {@link module:ol/TileCache~TileCache} and delete all source tiles
 * @api
 */
VectorTile.prototype.clear = function() {
  this.tileCache.clear();
  this.sourceTiles_ = {};
};

/**
 * @inheritDoc
 */
VectorTile.prototype.getTile = function(z, x, y, pixelRatio, projection) {
  const tileCoordKey = Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_6__[/* getKeyZXY */ "d"])(z, x, y);
  if (this.tileCache.containsKey(tileCoordKey)) {
    return (
      /** @type {!module:ol/Tile} */ (this.tileCache.get(tileCoordKey))
    );
  } else {
    const tileCoord = [z, x, y];
    const urlTileCoord = this.getTileCoordForTileUrlFunction(
      tileCoord, projection);
    const tile = new _VectorImageTile_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](
      tileCoord,
      urlTileCoord !== null ? _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].IDLE : _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].EMPTY,
      this.getRevision(),
      this.format_, this.tileLoadFunction, urlTileCoord, this.tileUrlFunction,
      this.tileGrid, this.getTileGridForProjection(projection),
      this.sourceTiles_, pixelRatio, projection, this.tileClass,
      this.handleTileChange.bind(this), tileCoord[0]);

    this.tileCache.set(tileCoordKey, tile);
    return tile;
  }
};


/**
 * @inheritDoc
 */
VectorTile.prototype.getTileGridForProjection = function(projection) {
  const code = projection.getCode();
  let tileGrid = this.tileGrids_[code];
  if (!tileGrid) {
    // A tile grid that matches the tile size of the source tile grid is more
    // likely to have 1:1 relationships between source tiles and rendered tiles.
    const sourceTileGrid = this.tileGrid;
    tileGrid = this.tileGrids_[code] = Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_7__[/* createForProjection */ "a"])(projection, undefined,
      sourceTileGrid ? sourceTileGrid.getTileSize(sourceTileGrid.getMinZoom()) : undefined);
  }
  return tileGrid;
};


/**
 * @inheritDoc
 */
VectorTile.prototype.getTilePixelRatio = function(pixelRatio) {
  return pixelRatio;
};


/**
 * @inheritDoc
 */
VectorTile.prototype.getTilePixelSize = function(z, pixelRatio, projection) {
  const tileGrid = this.getTileGridForProjection(projection);
  const tileSize = Object(_size_js__WEBPACK_IMPORTED_MODULE_4__[/* toSize */ "d"])(tileGrid.getTileSize(z), this.tmpSize);
  return [Math.round(tileSize[0] * pixelRatio), Math.round(tileSize[1] * pixelRatio)];
};
/* harmony default export */ __webpack_exports__["a"] = (VectorTile);


/***/ }),
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export simplifyLineString */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return douglasPeucker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return douglasPeuckerArray; });
/* unused harmony export douglasPeuckerMultiArray */
/* unused harmony export radialDistance */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return snap; });
/* unused harmony export quantize */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return quantizeArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return quantizeMultiArray; });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/**
 * @module ol/geom/flat/simplify
 */
// Based on simplify-js https://github.com/mourner/simplify-js
// Copyright (c) 2012, Vladimir Agafonkin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//    1. Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.




/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {boolean} highQuality Highest quality.
 * @param {Array.<number>=} opt_simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @return {Array.<number>} Simplified line string.
 */
function simplifyLineString(flatCoordinates, offset, end,
  stride, squaredTolerance, highQuality, opt_simplifiedFlatCoordinates) {
  const simplifiedFlatCoordinates = opt_simplifiedFlatCoordinates !== undefined ?
    opt_simplifiedFlatCoordinates : [];
  if (!highQuality) {
    end = radialDistance(flatCoordinates, offset, end,
      stride, squaredTolerance,
      simplifiedFlatCoordinates, 0);
    flatCoordinates = simplifiedFlatCoordinates;
    offset = 0;
    stride = 2;
  }
  simplifiedFlatCoordinates.length = douglasPeucker(
    flatCoordinates, offset, end, stride, squaredTolerance,
    simplifiedFlatCoordinates, 0);
  return simplifiedFlatCoordinates;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @return {number} Simplified offset.
 */
function douglasPeucker(flatCoordinates, offset, end,
  stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
  const n = (end - offset) / stride;
  if (n < 3) {
    for (; offset < end; offset += stride) {
      simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset];
      simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + 1];
    }
    return simplifiedOffset;
  }
  /** @type {Array.<number>} */
  const markers = new Array(n);
  markers[0] = 1;
  markers[n - 1] = 1;
  /** @type {Array.<number>} */
  const stack = [offset, end - stride];
  let index = 0;
  while (stack.length > 0) {
    const last = stack.pop();
    const first = stack.pop();
    let maxSquaredDistance = 0;
    const x1 = flatCoordinates[first];
    const y1 = flatCoordinates[first + 1];
    const x2 = flatCoordinates[last];
    const y2 = flatCoordinates[last + 1];
    for (let i = first + stride; i < last; i += stride) {
      const x = flatCoordinates[i];
      const y = flatCoordinates[i + 1];
      const squaredDistance = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* squaredSegmentDistance */ "h"])(
        x, y, x1, y1, x2, y2);
      if (squaredDistance > maxSquaredDistance) {
        index = i;
        maxSquaredDistance = squaredDistance;
      }
    }
    if (maxSquaredDistance > squaredTolerance) {
      markers[(index - offset) / stride] = 1;
      if (first + stride < index) {
        stack.push(first, index);
      }
      if (index + stride < last) {
        stack.push(index, last);
      }
    }
  }
  for (let i = 0; i < n; ++i) {
    if (markers[i]) {
      simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + i * stride];
      simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + i * stride + 1];
    }
  }
  return simplifiedOffset;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @param {Array.<number>} simplifiedEnds Simplified ends.
 * @return {number} Simplified offset.
 */
function douglasPeuckerArray(flatCoordinates, offset,
  ends, stride, squaredTolerance, simplifiedFlatCoordinates,
  simplifiedOffset, simplifiedEnds) {
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    simplifiedOffset = douglasPeucker(
      flatCoordinates, offset, end, stride, squaredTolerance,
      simplifiedFlatCoordinates, simplifiedOffset);
    simplifiedEnds.push(simplifiedOffset);
    offset = end;
  }
  return simplifiedOffset;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @param {Array.<Array.<number>>} simplifiedEndss Simplified endss.
 * @return {number} Simplified offset.
 */
function douglasPeuckerMultiArray(
  flatCoordinates, offset, endss, stride, squaredTolerance,
  simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    const simplifiedEnds = [];
    simplifiedOffset = douglasPeuckerArray(
      flatCoordinates, offset, ends, stride, squaredTolerance,
      simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
    simplifiedEndss.push(simplifiedEnds);
    offset = ends[ends.length - 1];
  }
  return simplifiedOffset;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @return {number} Simplified offset.
 */
function radialDistance(flatCoordinates, offset, end,
  stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
  if (end <= offset + stride) {
    // zero or one point, no simplification possible, so copy and return
    for (; offset < end; offset += stride) {
      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
      simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + 1];
    }
    return simplifiedOffset;
  }
  let x1 = flatCoordinates[offset];
  let y1 = flatCoordinates[offset + 1];
  // copy first point
  simplifiedFlatCoordinates[simplifiedOffset++] = x1;
  simplifiedFlatCoordinates[simplifiedOffset++] = y1;
  let x2 = x1;
  let y2 = y1;
  for (offset += stride; offset < end; offset += stride) {
    x2 = flatCoordinates[offset];
    y2 = flatCoordinates[offset + 1];
    if (Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* squaredDistance */ "g"])(x1, y1, x2, y2) > squaredTolerance) {
      // copy point at offset
      simplifiedFlatCoordinates[simplifiedOffset++] = x2;
      simplifiedFlatCoordinates[simplifiedOffset++] = y2;
      x1 = x2;
      y1 = y2;
    }
  }
  if (x2 != x1 || y2 != y1) {
    // copy last point
    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
  }
  return simplifiedOffset;
}


/**
 * @param {number} value Value.
 * @param {number} tolerance Tolerance.
 * @return {number} Rounded value.
 */
function snap(value, tolerance) {
  return tolerance * Math.round(value / tolerance);
}


/**
 * Simplifies a line string using an algorithm designed by Tim Schaub.
 * Coordinates are snapped to the nearest value in a virtual grid and
 * consecutive duplicate coordinates are discarded.  This effectively preserves
 * topology as the simplification of any subsection of a line string is
 * independent of the rest of the line string.  This means that, for examples,
 * the common edge between two polygons will be simplified to the same line
 * string independently in both polygons.  This implementation uses a single
 * pass over the coordinates and eliminates intermediate collinear points.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} tolerance Tolerance.
 * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @return {number} Simplified offset.
 */
function quantize(flatCoordinates, offset, end, stride,
  tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
  // do nothing if the line is empty
  if (offset == end) {
    return simplifiedOffset;
  }
  // snap the first coordinate (P1)
  let x1 = snap(flatCoordinates[offset], tolerance);
  let y1 = snap(flatCoordinates[offset + 1], tolerance);
  offset += stride;
  // add the first coordinate to the output
  simplifiedFlatCoordinates[simplifiedOffset++] = x1;
  simplifiedFlatCoordinates[simplifiedOffset++] = y1;
  // find the next coordinate that does not snap to the same value as the first
  // coordinate (P2)
  let x2, y2;
  do {
    x2 = snap(flatCoordinates[offset], tolerance);
    y2 = snap(flatCoordinates[offset + 1], tolerance);
    offset += stride;
    if (offset == end) {
      // all coordinates snap to the same value, the line collapses to a point
      // push the last snapped value anyway to ensure that the output contains
      // at least two points
      // FIXME should we really return at least two points anyway?
      simplifiedFlatCoordinates[simplifiedOffset++] = x2;
      simplifiedFlatCoordinates[simplifiedOffset++] = y2;
      return simplifiedOffset;
    }
  } while (x2 == x1 && y2 == y1);
  while (offset < end) {
    // snap the next coordinate (P3)
    const x3 = snap(flatCoordinates[offset], tolerance);
    const y3 = snap(flatCoordinates[offset + 1], tolerance);
    offset += stride;
    // skip P3 if it is equal to P2
    if (x3 == x2 && y3 == y2) {
      continue;
    }
    // calculate the delta between P1 and P2
    const dx1 = x2 - x1;
    const dy1 = y2 - y1;
    // calculate the delta between P3 and P1
    const dx2 = x3 - x1;
    const dy2 = y3 - y1;
    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
    // P1 in the same direction then P2 is on the straight line between P1 and
    // P3
    if ((dx1 * dy2 == dy1 * dx2) &&
        ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
        ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {
      // discard P2 and set P2 = P3
      x2 = x3;
      y2 = y3;
      continue;
    }
    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
    // between P3 and P1 or on the opposite half of the line to P2.  add P2,
    // and continue with P1 = P2 and P2 = P3
    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    x1 = x2;
    y1 = y2;
    x2 = x3;
    y2 = y3;
  }
  // add the last point (P2)
  simplifiedFlatCoordinates[simplifiedOffset++] = x2;
  simplifiedFlatCoordinates[simplifiedOffset++] = y2;
  return simplifiedOffset;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} tolerance Tolerance.
 * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @param {Array.<number>} simplifiedEnds Simplified ends.
 * @return {number} Simplified offset.
 */
function quantizeArray(
  flatCoordinates, offset, ends, stride,
  tolerance,
  simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    simplifiedOffset = quantize(
      flatCoordinates, offset, end, stride,
      tolerance,
      simplifiedFlatCoordinates, simplifiedOffset);
    simplifiedEnds.push(simplifiedOffset);
    offset = end;
  }
  return simplifiedOffset;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} tolerance Tolerance.
 * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @param {Array.<Array.<number>>} simplifiedEndss Simplified endss.
 * @return {number} Simplified offset.
 */
function quantizeMultiArray(
  flatCoordinates, offset, endss, stride,
  tolerance,
  simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    const simplifiedEnds = [];
    simplifiedOffset = quantizeArray(
      flatCoordinates, offset, ends, stride,
      tolerance,
      simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
    simplifiedEndss.push(simplifiedEnds);
    offset = ends[ends.length - 1];
  }
  return simplifiedOffset;
}


/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29);
/**
 * @module ol/Disposable
 */


/**
 * Objects that need to clean up after themselves.
 * @constructor
 */
const Disposable = function() {};

/**
 * The object has already been disposed.
 * @type {boolean}
 * @private
 */
Disposable.prototype.disposed_ = false;

/**
 * Clean up.
 */
Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
  }
};

/**
 * Extension point for disposable objects.
 * @protected
 */
Disposable.prototype.disposeInternal = _functions_js__WEBPACK_IMPORTED_MODULE_0__[/* UNDEFINED */ "c"];
/* harmony default export */ __webpack_exports__["a"] = (Disposable);


/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(72);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/**
 * @module ol/ImageBase
 */




/**
 * @constructor
 * @abstract
 * @extends {module:ol/events/EventTarget}
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number|undefined} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/ImageState} state State.
 */
const ImageBase = function(extent, resolution, pixelRatio, state) {

  _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this);

  /**
   * @protected
   * @type {module:ol/extent~Extent}
   */
  this.extent = extent;

  /**
   * @private
   * @type {number}
   */
  this.pixelRatio_ = pixelRatio;

  /**
   * @protected
   * @type {number|undefined}
   */
  this.resolution = resolution;

  /**
   * @protected
   * @type {module:ol/ImageState}
   */
  this.state = state;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(ImageBase, _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @protected
 */
ImageBase.prototype.changed = function() {
  this.dispatchEvent(_events_EventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].CHANGE);
};


/**
 * @return {module:ol/extent~Extent} Extent.
 */
ImageBase.prototype.getExtent = function() {
  return this.extent;
};


/**
 * @abstract
 * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
 */
ImageBase.prototype.getImage = function() {};


/**
 * @return {number} PixelRatio.
 */
ImageBase.prototype.getPixelRatio = function() {
  return this.pixelRatio_;
};


/**
 * @return {number} Resolution.
 */
ImageBase.prototype.getResolution = function() {
  return /** @type {number} */ (this.resolution);
};


/**
 * @return {module:ol/ImageState} State.
 */
ImageBase.prototype.getState = function() {
  return this.state;
};


/**
 * Load not yet loaded URI.
 * @abstract
 */
ImageBase.prototype.load = function() {};

/* harmony default export */ __webpack_exports__["a"] = (ImageBase);


/***/ }),
/* 125 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/ObjectEventType
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  /**
   * Triggered when a property is changed.
   * @event module:ol/Object~ObjectEvent#propertychange
   * @api
   */
  PROPERTYCHANGE: 'propertychange'
});


/***/ }),
/* 126 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/render/VectorContext
 */
/**
 * Context for drawing geometries.  A vector context is available on render
 * events and does not need to be constructed directly.
 * @constructor
 * @abstract
 * @struct
 * @api
 */
const VectorContext = function() {
};


/**
 * Render a geometry with a custom renderer.
 *
 * @param {module:ol/geom/SimpleGeometry} geometry Geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 * @param {Function} renderer Renderer.
 */
VectorContext.prototype.drawCustom = function(geometry, feature, renderer) {};


/**
 * Render a geometry.
 *
 * @param {module:ol/geom/Geometry} geometry The geometry to render.
 */
VectorContext.prototype.drawGeometry = function(geometry) {};


/**
 * Set the rendering style.
 *
 * @param {module:ol/style/Style} style The rendering style.
 */
VectorContext.prototype.setStyle = function(style) {};


/**
 * @param {module:ol/geom/Circle} circleGeometry Circle geometry.
 * @param {module:ol/Feature} feature Feature.
 */
VectorContext.prototype.drawCircle = function(circleGeometry, feature) {};


/**
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/style/Style} style Style.
 */
VectorContext.prototype.drawFeature = function(feature, style) {};


/**
 * @param {module:ol/geom/GeometryCollection} geometryCollectionGeometry Geometry
 *     collection.
 * @param {module:ol/Feature} feature Feature.
 */
VectorContext.prototype.drawGeometryCollection = function(geometryCollectionGeometry, feature) {};


/**
 * @param {module:ol/geom/LineString|module:ol/render/Feature} lineStringGeometry Line string geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
VectorContext.prototype.drawLineString = function(lineStringGeometry, feature) {};


/**
 * @param {module:ol/geom/MultiLineString|module:ol/render/Feature} multiLineStringGeometry MultiLineString geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
VectorContext.prototype.drawMultiLineString = function(multiLineStringGeometry, feature) {};


/**
 * @param {module:ol/geom/MultiPoint|module:ol/render/Feature} multiPointGeometry MultiPoint geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
VectorContext.prototype.drawMultiPoint = function(multiPointGeometry, feature) {};


/**
 * @param {module:ol/geom/MultiPolygon} multiPolygonGeometry MultiPolygon geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
VectorContext.prototype.drawMultiPolygon = function(multiPolygonGeometry, feature) {};


/**
 * @param {module:ol/geom/Point|module:ol/render/Feature} pointGeometry Point geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
VectorContext.prototype.drawPoint = function(pointGeometry, feature) {};


/**
 * @param {module:ol/geom/Polygon|module:ol/render/Feature} polygonGeometry Polygon geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
VectorContext.prototype.drawPolygon = function(polygonGeometry, feature) {};


/**
 * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 */
VectorContext.prototype.drawText = function(geometry, feature) {};


/**
 * @param {module:ol/style/Fill} fillStyle Fill style.
 * @param {module:ol/style/Stroke} strokeStyle Stroke style.
 */
VectorContext.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {};


/**
 * @param {module:ol/style/Image} imageStyle Image style.
 * @param {module:ol/render/canvas~DeclutterGroup=} opt_declutterGroup Declutter.
 */
VectorContext.prototype.setImageStyle = function(imageStyle, opt_declutterGroup) {};


/**
 * @param {module:ol/style/Text} textStyle Text style.
 * @param {module:ol/render/canvas~DeclutterGroup=} opt_declutterGroup Declutter.
 */
VectorContext.prototype.setTextStyle = function(textStyle, opt_declutterGroup) {};
/* harmony default export */ __webpack_exports__["a"] = (VectorContext);


/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return disable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return none; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createSnapToN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createSnapToZero; });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/**
 * @module ol/rotationconstraint
 */



/**
 * @typedef {function((number|undefined), number): (number|undefined)} Type
 */


/**
 * @param {number|undefined} rotation Rotation.
 * @param {number} delta Delta.
 * @return {number|undefined} Rotation.
 */
function disable(rotation, delta) {
  if (rotation !== undefined) {
    return 0;
  } else {
    return undefined;
  }
}


/**
 * @param {number|undefined} rotation Rotation.
 * @param {number} delta Delta.
 * @return {number|undefined} Rotation.
 */
function none(rotation, delta) {
  if (rotation !== undefined) {
    return rotation + delta;
  } else {
    return undefined;
  }
}


/**
 * @param {number} n N.
 * @return {module:ol/rotationconstraint~Type} Rotation constraint.
 */
function createSnapToN(n) {
  const theta = 2 * Math.PI / n;
  return (
    /**
     * @param {number|undefined} rotation Rotation.
     * @param {number} delta Delta.
     * @return {number|undefined} Rotation.
     */
    function(rotation, delta) {
      if (rotation !== undefined) {
        rotation = Math.floor((rotation + delta) / theta + 0.5) * theta;
        return rotation;
      } else {
        return undefined;
      }
    });
}


/**
 * @param {number=} opt_tolerance Tolerance.
 * @return {module:ol/rotationconstraint~Type} Rotation constraint.
 */
function createSnapToZero(opt_tolerance) {
  const tolerance = opt_tolerance || Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toRadians */ "j"])(5);
  return (
    /**
     * @param {number|undefined} rotation Rotation.
     * @param {number} delta Delta.
     * @return {number|undefined} Rotation.
     */
    function(rotation, delta) {
      if (rotation !== undefined) {
        if (Math.abs(rotation + delta) <= tolerance) {
          return 0;
        } else {
          return rotation + delta;
        }
      } else {
        return undefined;
      }
    });
}


/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/pointer/EventSource
 */
/**
 * @param {module:ol/pointer/PointerEventHandler} dispatcher Event handler.
 * @param {!Object.<string, function(Event)>} mapping Event mapping.
 * @constructor
 */
const EventSource = function(dispatcher, mapping) {
  /**
   * @type {module:ol/pointer/PointerEventHandler}
   */
  this.dispatcher = dispatcher;

  /**
   * @private
   * @const
   * @type {!Object.<string, function(Event)>}
   */
  this.mapping_ = mapping;
};


/**
 * List of events supported by this source.
 * @return {Array.<string>} Event names
 */
EventSource.prototype.getEvents = function() {
  return Object.keys(this.mapping_);
};


/**
 * Returns the handler that should handle a given event type.
 * @param {string} eventType The event type.
 * @return {function(Event)} Handler
 */
EventSource.prototype.getHandlerForEvent = function(eventType) {
  return this.mapping_[eventType];
};
/* harmony default export */ __webpack_exports__["a"] = (EventSource);


/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _LayerType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60);
/* harmony import */ var _TileRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(130);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19);
/* harmony import */ var _ViewHint_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(43);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(32);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3);
/* harmony import */ var _canvas_IntermediateCanvas_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(171);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(18);
/**
 * @module ol/renderer/canvas/TileLayer
 */










/**
 * @constructor
 * @extends {module:ol/renderer/canvas/IntermediateCanvas}
 * @param {module:ol/layer/Tile|module:ol/layer/VectorTile} tileLayer Tile layer.
 * @api
 */
const CanvasTileLayerRenderer = function(tileLayer) {

  _canvas_IntermediateCanvas_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].call(this, tileLayer);

  /**
   * @protected
   * @type {CanvasRenderingContext2D}
   */
  this.context = this.context === null ? null : Object(_dom_js__WEBPACK_IMPORTED_MODULE_5__[/* createCanvasContext2D */ "a"])();

  /**
   * @private
   * @type {number}
   */
  this.oversampling_;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.renderedExtent_ = null;

  /**
   * @protected
   * @type {number}
   */
  this.renderedRevision;

  /**
   * @protected
   * @type {!Array.<module:ol/Tile>}
   */
  this.renderedTiles = [];

  /**
   * @private
   * @type {boolean}
   */
  this.newTiles_ = false;

  /**
   * @protected
   * @type {module:ol/extent~Extent}
   */
  this.tmpExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* createEmpty */ "j"])();

  /**
   * @private
   * @type {module:ol/TileRange}
   */
  this.tmpTileRange_ = new _TileRange_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "b"](0, 0, 0, 0);

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.imageTransform_ = Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* create */ "c"])();

  /**
   * @protected
   * @type {number}
   */
  this.zDirection = 0;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(CanvasTileLayerRenderer, _canvas_IntermediateCanvas_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]);


/**
 * Determine if this renderer handles the provided layer.
 * @param {module:ol/layer/Layer} layer The candidate layer.
 * @return {boolean} The renderer can render the layer.
 */
CanvasTileLayerRenderer['handles'] = function(layer) {
  return layer.getType() === _LayerType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].TILE;
};


/**
 * Create a layer renderer.
 * @param {module:ol/renderer/Map} mapRenderer The map renderer.
 * @param {module:ol/layer/Layer} layer The layer to be rendererd.
 * @return {module:ol/renderer/canvas/TileLayer} The layer renderer.
 */
CanvasTileLayerRenderer['create'] = function(mapRenderer, layer) {
  return new CanvasTileLayerRenderer(/** @type {module:ol/layer/Tile} */ (layer));
};


/**
 * @private
 * @param {module:ol/Tile} tile Tile.
 * @return {boolean} Tile is drawable.
 */
CanvasTileLayerRenderer.prototype.isDrawableTile_ = function(tile) {
  const tileState = tile.getState();
  const useInterimTilesOnError = this.getLayer().getUseInterimTilesOnError();
  return tileState == _TileState_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].LOADED ||
      tileState == _TileState_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].EMPTY ||
      tileState == _TileState_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].ERROR && !useInterimTilesOnError;
};


/**
 * @param {number} z Tile coordinate z.
 * @param {number} x Tile coordinate x.
 * @param {number} y Tile coordinate y.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {!module:ol/Tile} Tile.
 */
CanvasTileLayerRenderer.prototype.getTile = function(z, x, y, pixelRatio, projection) {
  const layer = this.getLayer();
  const source = /** @type {module:ol/source/Tile} */ (layer.getSource());
  let tile = source.getTile(z, x, y, pixelRatio, projection);
  if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].ERROR) {
    if (!layer.getUseInterimTilesOnError()) {
      // When useInterimTilesOnError is false, we consider the error tile as loaded.
      tile.setState(_TileState_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].LOADED);
    } else if (layer.getPreload() > 0) {
      // Preloaded tiles for lower resolutions might have finished loading.
      this.newTiles_ = true;
    }
  }
  if (!this.isDrawableTile_(tile)) {
    tile = tile.getInterimTile();
  }
  return tile;
};

/**
 * @inheritDoc
 */
CanvasTileLayerRenderer.prototype.prepareFrame = function(frameState, layerState) {

  const pixelRatio = frameState.pixelRatio;
  const size = frameState.size;
  const viewState = frameState.viewState;
  const projection = viewState.projection;
  const viewResolution = viewState.resolution;
  const viewCenter = viewState.center;

  const tileLayer = this.getLayer();
  const tileSource = /** @type {module:ol/source/Tile} */ (tileLayer.getSource());
  const sourceRevision = tileSource.getRevision();
  const tileGrid = tileSource.getTileGridForProjection(projection);
  const z = tileGrid.getZForResolution(viewResolution, this.zDirection);
  const tileResolution = tileGrid.getResolution(z);
  let oversampling = Math.round(viewResolution / tileResolution) || 1;
  let extent = frameState.extent;

  if (layerState.extent !== undefined) {
    extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getIntersection */ "B"])(extent, layerState.extent);
  }
  if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* isEmpty */ "H"])(extent)) {
    // Return false to prevent the rendering of the layer.
    return false;
  }

  const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
  const imageExtent = tileGrid.getTileRangeExtent(z, tileRange);

  const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);

  /**
   * @type {Object.<number, Object.<string, module:ol/Tile>>}
   */
  const tilesToDrawByZ = {};
  tilesToDrawByZ[z] = {};

  const findLoadedTiles = this.createLoadedTileFinder(
    tileSource, projection, tilesToDrawByZ);

  const hints = frameState.viewHints;
  const animatingOrInteracting = hints[_ViewHint_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].ANIMATING] || hints[_ViewHint_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].INTERACTING];

  const tmpExtent = this.tmpExtent;
  const tmpTileRange = this.tmpTileRange_;
  this.newTiles_ = false;
  let tile, x, y;
  for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
    for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
      if (Date.now() - frameState.time > 16 && animatingOrInteracting) {
        continue;
      }
      tile = this.getTile(z, x, y, pixelRatio, projection);
      if (this.isDrawableTile_(tile)) {
        const uid = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(this);
        if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].LOADED) {
          tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
          const inTransition = tile.inTransition(uid);
          if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
            this.newTiles_ = true;
          }
        }
        if (tile.getAlpha(uid, frameState.time) === 1) {
          // don't look for alt tiles if alpha is 1
          continue;
        }
      }

      const childTileRange = tileGrid.getTileCoordChildTileRange(
        tile.tileCoord, tmpTileRange, tmpExtent);
      let covered = false;
      if (childTileRange) {
        covered = findLoadedTiles(z + 1, childTileRange);
      }
      if (!covered) {
        tileGrid.forEachTileCoordParentTileRange(
          tile.tileCoord, findLoadedTiles, null, tmpTileRange, tmpExtent);
      }

    }
  }

  const renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;
  if (!(this.renderedResolution && Date.now() - frameState.time > 16 && animatingOrInteracting) && (
    this.newTiles_ ||
        !(this.renderedExtent_ && Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* containsExtent */ "g"])(this.renderedExtent_, extent)) ||
        this.renderedRevision != sourceRevision ||
        oversampling != this.oversampling_ ||
        !animatingOrInteracting && renderedResolution != this.renderedResolution
  )) {

    const context = this.context;
    if (context) {
      const tilePixelSize = tileSource.getTilePixelSize(z, pixelRatio, projection);
      const width = Math.round(tileRange.getWidth() * tilePixelSize[0] / oversampling);
      const height = Math.round(tileRange.getHeight() * tilePixelSize[1] / oversampling);
      const canvas = context.canvas;
      if (canvas.width != width || canvas.height != height) {
        this.oversampling_ = oversampling;
        canvas.width = width;
        canvas.height = height;
      } else {
        if (this.renderedExtent_ && !Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* equals */ "p"])(imageExtent, this.renderedExtent_)) {
          context.clearRect(0, 0, width, height);
        }
        oversampling = this.oversampling_;
      }
    }

    this.renderedTiles.length = 0;
    /** @type {Array.<number>} */
    const zs = Object.keys(tilesToDrawByZ).map(Number);
    zs.sort(function(a, b) {
      if (a === z) {
        return 1;
      } else if (b === z) {
        return -1;
      } else {
        return a > b ? 1 : a < b ? -1 : 0;
      }
    });
    let currentResolution, currentScale, currentTilePixelSize, currentZ, i, ii;
    let tileExtent, tileGutter, tilesToDraw, w, h;
    for (i = 0, ii = zs.length; i < ii; ++i) {
      currentZ = zs[i];
      currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
      currentResolution = tileGrid.getResolution(currentZ);
      currentScale = currentResolution / tileResolution;
      tileGutter = tilePixelRatio * tileSource.getGutter(projection);
      tilesToDraw = tilesToDrawByZ[currentZ];
      for (const tileCoordKey in tilesToDraw) {
        tile = tilesToDraw[tileCoordKey];
        tileExtent = tileGrid.getTileCoordExtent(tile.getTileCoord(), tmpExtent);
        x = (tileExtent[0] - imageExtent[0]) / tileResolution * tilePixelRatio / oversampling;
        y = (imageExtent[3] - tileExtent[3]) / tileResolution * tilePixelRatio / oversampling;
        w = currentTilePixelSize[0] * currentScale / oversampling;
        h = currentTilePixelSize[1] * currentScale / oversampling;
        this.drawTileImage(tile, frameState, layerState, x, y, w, h, tileGutter, z === currentZ);
        this.renderedTiles.push(tile);
      }
    }

    this.renderedRevision = sourceRevision;
    this.renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;
    this.renderedExtent_ = imageExtent;
  }

  const scale = this.renderedResolution / viewResolution;
  const transform = Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* compose */ "b"])(this.imageTransform_,
    pixelRatio * size[0] / 2, pixelRatio * size[1] / 2,
    scale, scale,
    0,
    (this.renderedExtent_[0] - viewCenter[0]) / this.renderedResolution * pixelRatio,
    (viewCenter[1] - this.renderedExtent_[3]) / this.renderedResolution * pixelRatio);
  Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* compose */ "b"])(this.coordinateToCanvasPixelTransform,
    pixelRatio * size[0] / 2 - transform[4], pixelRatio * size[1] / 2 - transform[5],
    pixelRatio / viewResolution, -pixelRatio / viewResolution,
    0,
    -viewCenter[0], -viewCenter[1]);


  this.updateUsedTiles(frameState.usedTiles, tileSource, z, tileRange);
  this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio,
    projection, extent, z, tileLayer.getPreload());
  this.scheduleExpireCache(frameState, tileSource);

  return this.renderedTiles.length > 0;
};


/**
 * @param {module:ol/Tile} tile Tile.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/layer/Layer~State} layerState Layer state.
 * @param {number} x Left of the tile.
 * @param {number} y Top of the tile.
 * @param {number} w Width of the tile.
 * @param {number} h Height of the tile.
 * @param {number} gutter Tile gutter.
 * @param {boolean} transition Apply an alpha transition.
 */
CanvasTileLayerRenderer.prototype.drawTileImage = function(tile, frameState, layerState, x, y, w, h, gutter, transition) {
  const image = tile.getImage(this.getLayer());
  if (!image) {
    return;
  }
  const uid = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(this);
  const alpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
  if (alpha === 1 && !this.getLayer().getSource().getOpaque(frameState.viewState.projection)) {
    this.context.clearRect(x, y, w, h);
  }
  const alphaChanged = alpha !== this.context.globalAlpha;
  if (alphaChanged) {
    this.context.save();
    this.context.globalAlpha = alpha;
  }
  this.context.drawImage(image, gutter, gutter,
    image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);

  if (alphaChanged) {
    this.context.restore();
  }
  if (alpha !== 1) {
    frameState.animate = true;
  } else if (transition) {
    tile.endTransition(uid);
  }
};


/**
 * @inheritDoc
 */
CanvasTileLayerRenderer.prototype.getImage = function() {
  const context = this.context;
  return context ? context.canvas : null;
};


/**
 * @function
 * @return {module:ol/layer/Tile|module:ol/layer/VectorTile}
 */
CanvasTileLayerRenderer.prototype.getLayer;


/**
 * @inheritDoc
 */
CanvasTileLayerRenderer.prototype.getImageTransform = function() {
  return this.imageTransform_;
};
/* harmony default export */ __webpack_exports__["a"] = (CanvasTileLayerRenderer);


/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createOrUpdate; });
/**
 * @module ol/TileRange
 */
/**
 * A representation of a contiguous block of tiles.  A tile range is specified
 * by its min/max tile coordinates and is inclusive of coordinates.
 *
 * @constructor
 * @param {number} minX Minimum X.
 * @param {number} maxX Maximum X.
 * @param {number} minY Minimum Y.
 * @param {number} maxY Maximum Y.
 * @struct
 */
const TileRange = function(minX, maxX, minY, maxY) {

  /**
   * @type {number}
   */
  this.minX = minX;

  /**
   * @type {number}
   */
  this.maxX = maxX;

  /**
   * @type {number}
   */
  this.minY = minY;

  /**
   * @type {number}
   */
  this.maxY = maxY;

};


/**
 * @param {number} minX Minimum X.
 * @param {number} maxX Maximum X.
 * @param {number} minY Minimum Y.
 * @param {number} maxY Maximum Y.
 * @param {module:ol/TileRange=} tileRange TileRange.
 * @return {module:ol/TileRange} Tile range.
 */
function createOrUpdate(minX, maxX, minY, maxY, tileRange) {
  if (tileRange !== undefined) {
    tileRange.minX = minX;
    tileRange.maxX = maxX;
    tileRange.minY = minY;
    tileRange.maxY = maxY;
    return tileRange;
  } else {
    return new TileRange(minX, maxX, minY, maxY);
  }
}


/**
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @return {boolean} Contains tile coordinate.
 */
TileRange.prototype.contains = function(tileCoord) {
  return this.containsXY(tileCoord[1], tileCoord[2]);
};


/**
 * @param {module:ol/TileRange} tileRange Tile range.
 * @return {boolean} Contains.
 */
TileRange.prototype.containsTileRange = function(tileRange) {
  return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
      this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;
};


/**
 * @param {number} x Tile coordinate x.
 * @param {number} y Tile coordinate y.
 * @return {boolean} Contains coordinate.
 */
TileRange.prototype.containsXY = function(x, y) {
  return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
};


/**
 * @param {module:ol/TileRange} tileRange Tile range.
 * @return {boolean} Equals.
 */
TileRange.prototype.equals = function(tileRange) {
  return this.minX == tileRange.minX && this.minY == tileRange.minY &&
      this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;
};


/**
 * @param {module:ol/TileRange} tileRange Tile range.
 */
TileRange.prototype.extend = function(tileRange) {
  if (tileRange.minX < this.minX) {
    this.minX = tileRange.minX;
  }
  if (tileRange.maxX > this.maxX) {
    this.maxX = tileRange.maxX;
  }
  if (tileRange.minY < this.minY) {
    this.minY = tileRange.minY;
  }
  if (tileRange.maxY > this.maxY) {
    this.maxY = tileRange.maxY;
  }
};


/**
 * @return {number} Height.
 */
TileRange.prototype.getHeight = function() {
  return this.maxY - this.minY + 1;
};


/**
 * @return {module:ol/size~Size} Size.
 */
TileRange.prototype.getSize = function() {
  return [this.getWidth(), this.getHeight()];
};


/**
 * @return {number} Width.
 */
TileRange.prototype.getWidth = function() {
  return this.maxX - this.minX + 1;
};


/**
 * @param {module:ol/TileRange} tileRange Tile range.
 * @return {boolean} Intersects.
 */
TileRange.prototype.intersects = function(tileRange) {
  return this.minX <= tileRange.maxX &&
      this.maxX >= tileRange.minX &&
      this.minY <= tileRange.maxY &&
      this.maxY >= tileRange.minY;
};
/* harmony default export */ __webpack_exports__["b"] = (TileRange);


/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(31);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50);
/**
 * @module ol/source/Source
 */







/**
 * A function that returns a string or an array of strings representing source
 * attributions.
 *
 * @typedef {function(module:ol/PluggableMap~FrameState): (string|Array.<string>)} Attribution
 */


/**
 * A type that can be used to provide attribution information for data sources.
 *
 * It represents either
 * * a simple string (e.g. `'© Acme Inc.'`)
 * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
 * * a function that returns a string or array of strings (`{@link module:ol/source/Source~Attribution}`)
 *
 * @typedef {string|Array.<string>|module:ol/source/Source~Attribution} AttributionLike
 */


/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions]
 * @property {module:ol/proj~ProjectionLike} projection
 * @property {module:ol/source/State} [state]
 * @property {boolean} [wrapX]
 */


/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for {@link module:ol/layer/Layer~Layer} sources.
 *
 * A generic `change` event is triggered when the state of the source changes.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/Object}
 * @param {module:ol/source/Source~Options} options Source options.
 * @api
 */
const Source = function(options) {

  _Object_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {module:ol/proj/Projection}
   */
  this.projection_ = Object(_proj_js__WEBPACK_IMPORTED_MODULE_3__[/* get */ "h"])(options.projection);

  /**
   * @private
   * @type {?module:ol/source/Source~Attribution}
   */
  this.attributions_ = this.adaptAttributions_(options.attributions);

  /**
   * @private
   * @type {module:ol/source/State}
   */
  this.state_ = options.state !== undefined ?
    options.state : _source_State_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].READY;

  /**
   * @private
   * @type {boolean}
   */
  this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Source, _Object_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);

/**
 * Turns the attributions option into an attributions function.
 * @param {module:ol/source/Source~AttributionLike|undefined} attributionLike The attribution option.
 * @return {?module:ol/source/Source~Attribution} An attribution function (or null).
 */
Source.prototype.adaptAttributions_ = function(attributionLike) {
  if (!attributionLike) {
    return null;
  }
  if (Array.isArray(attributionLike)) {
    return function(frameState) {
      return attributionLike;
    };
  }

  if (typeof attributionLike === 'function') {
    return attributionLike;
  }

  return function(frameState) {
    return [attributionLike];
  };
};

/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {number} hitTolerance Hit tolerance in pixels.
 * @param {Object.<string, boolean>} skippedFeatureUids Skipped feature uids.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T} callback Feature callback.
 * @return {T|undefined} Callback result.
 * @template T
 */
Source.prototype.forEachFeatureAtCoordinate = _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* UNDEFINED */ "c"];


/**
 * Get the attribution function for the source.
 * @return {?module:ol/source/Source~Attribution} Attribution function.
 */
Source.prototype.getAttributions = function() {
  return this.attributions_;
};


/**
 * Get the projection of the source.
 * @return {module:ol/proj/Projection} Projection.
 * @api
 */
Source.prototype.getProjection = function() {
  return this.projection_;
};


/**
 * @abstract
 * @return {Array.<number>|undefined} Resolutions.
 */
Source.prototype.getResolutions = function() {};


/**
 * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
 * @return {module:ol/source/State} State.
 * @api
 */
Source.prototype.getState = function() {
  return this.state_;
};


/**
 * @return {boolean|undefined} Wrap X.
 */
Source.prototype.getWrapX = function() {
  return this.wrapX_;
};


/**
 * Refreshes the source and finally dispatches a 'change' event.
 * @api
 */
Source.prototype.refresh = function() {
  this.changed();
};


/**
 * Set the attributions of the source.
 * @param {module:ol/source/Source~AttributionLike|undefined} attributions Attributions.
 *     Can be passed as `string`, `Array<string>`, `{@link module:ol/source/Source~Attribution}`,
 *     or `undefined`.
 * @api
 */
Source.prototype.setAttributions = function(attributions) {
  this.attributions_ = this.adaptAttributions_(attributions);
  this.changed();
};


/**
 * Set the state of the source.
 * @param {module:ol/source/State} state State.
 * @protected
 */
Source.prototype.setState = function(state) {
  this.state_ = state;
  this.changed();
};
/* harmony default export */ __webpack_exports__["a"] = (Source);


/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var rbush__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(192);
/* harmony import */ var rbush__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rbush__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(15);
/**
 * @module ol/structs/RBush
 */





/**
 * @typedef {Object} Entry
 * @property {number} minX
 * @property {number} minY
 * @property {number} maxX
 * @property {number} maxY
 * @property {Object} [value]
 */

/**
 * Wrapper around the RBush by Vladimir Agafonkin.
 *
 * @constructor
 * @param {number=} opt_maxEntries Max entries.
 * @see https://github.com/mourner/rbush
 * @struct
 * @template T
 */
const RBush = function(opt_maxEntries) {

  /**
   * @private
   */
  this.rbush_ = rbush__WEBPACK_IMPORTED_MODULE_1___default()(opt_maxEntries, undefined);

  /**
   * A mapping between the objects added to this rbush wrapper
   * and the objects that are actually added to the internal rbush.
   * @private
   * @type {Object.<number, module:ol/structs/RBush~Entry>}
   */
  this.items_ = {};

};


/**
 * Insert a value into the RBush.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {T} value Value.
 */
RBush.prototype.insert = function(extent, value) {
  /** @type {module:ol/structs/RBush~Entry} */
  const item = {
    minX: extent[0],
    minY: extent[1],
    maxX: extent[2],
    maxY: extent[3],
    value: value
  };

  this.rbush_.insert(item);
  this.items_[Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(value)] = item;
};


/**
 * Bulk-insert values into the RBush.
 * @param {Array.<module:ol/extent~Extent>} extents Extents.
 * @param {Array.<T>} values Values.
 */
RBush.prototype.load = function(extents, values) {
  const items = new Array(values.length);
  for (let i = 0, l = values.length; i < l; i++) {
    const extent = extents[i];
    const value = values[i];

    /** @type {module:ol/structs/RBush~Entry} */
    const item = {
      minX: extent[0],
      minY: extent[1],
      maxX: extent[2],
      maxY: extent[3],
      value: value
    };
    items[i] = item;
    this.items_[Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(value)] = item;
  }
  this.rbush_.load(items);
};


/**
 * Remove a value from the RBush.
 * @param {T} value Value.
 * @return {boolean} Removed.
 */
RBush.prototype.remove = function(value) {
  const uid = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(value);

  // get the object in which the value was wrapped when adding to the
  // internal rbush. then use that object to do the removal.
  const item = this.items_[uid];
  delete this.items_[uid];
  return this.rbush_.remove(item) !== null;
};


/**
 * Update the extent of a value in the RBush.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {T} value Value.
 */
RBush.prototype.update = function(extent, value) {
  const item = this.items_[Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(value)];
  const bbox = [item.minX, item.minY, item.maxX, item.maxY];
  if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* equals */ "p"])(bbox, extent)) {
    this.remove(value);
    this.insert(extent, value);
  }
};


/**
 * Return all values in the RBush.
 * @return {Array.<T>} All.
 */
RBush.prototype.getAll = function() {
  const items = this.rbush_.all();
  return items.map(function(item) {
    return item.value;
  });
};


/**
 * Return all values in the given extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {Array.<T>} All in extent.
 */
RBush.prototype.getInExtent = function(extent) {
  /** @type {module:ol/structs/RBush~Entry} */
  const bbox = {
    minX: extent[0],
    minY: extent[1],
    maxX: extent[2],
    maxY: extent[3]
  };
  const items = this.rbush_.search(bbox);
  return items.map(function(item) {
    return item.value;
  });
};


/**
 * Calls a callback function with each value in the tree.
 * If the callback returns a truthy value, this value is returned without
 * checking the rest of the tree.
 * @param {function(this: S, T): *} callback Callback.
 * @param {S=} opt_this The object to use as `this` in `callback`.
 * @return {*} Callback return value.
 * @template S
 */
RBush.prototype.forEach = function(callback, opt_this) {
  return this.forEach_(this.getAll(), callback, opt_this);
};


/**
 * Calls a callback function with each value in the provided extent.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {function(this: S, T): *} callback Callback.
 * @param {S=} opt_this The object to use as `this` in `callback`.
 * @return {*} Callback return value.
 * @template S
 */
RBush.prototype.forEachInExtent = function(extent, callback, opt_this) {
  return this.forEach_(this.getInExtent(extent), callback, opt_this);
};


/**
 * @param {Array.<T>} values Values.
 * @param {function(this: S, T): *} callback Callback.
 * @param {S=} opt_this The object to use as `this` in `callback`.
 * @private
 * @return {*} Callback return value.
 * @template S
 */
RBush.prototype.forEach_ = function(values, callback, opt_this) {
  let result;
  for (let i = 0, l = values.length; i < l; i++) {
    result = callback.call(opt_this, values[i]);
    if (result) {
      return result;
    }
  }
  return result;
};


/**
 * @return {boolean} Is empty.
 */
RBush.prototype.isEmpty = function() {
  return Object(_obj_js__WEBPACK_IMPORTED_MODULE_3__[/* isEmpty */ "d"])(this.items_);
};


/**
 * Remove all values from the RBush.
 */
RBush.prototype.clear = function() {
  this.rbush_.clear();
  this.items_ = {};
};


/**
 * @param {module:ol/extent~Extent=} opt_extent Extent.
 * @return {module:ol/extent~Extent} Extent.
 */
RBush.prototype.getExtent = function(opt_extent) {
  // FIXME add getExtent() to rbush
  const data = this.rbush_.data;
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_2__[/* createOrUpdate */ "k"])(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
};


/**
 * @param {module:ol/structs/RBush} rbush R-Tree.
 */
RBush.prototype.concat = function(rbush) {
  this.rbush_.load(rbush.rbush_.all());
  for (const i in rbush.items_) {
    this.items_[i | 0] = rbush.items_[i | 0];
  }
};
/* harmony default export */ __webpack_exports__["a"] = (RBush);


/***/ }),
/* 133 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36);
/**
 * @module ol/MapEvent
 */



/**
 * @classdesc
 * Events emitted as map events are instances of this type.
 * See {@link module:ol/Map~Map} for which events trigger a map event.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {string} type Event type.
 * @param {module:ol/PluggableMap} map Map.
 * @param {?module:ol/PluggableMap~FrameState=} opt_frameState Frame state.
 */
const MapEvent = function(type, map, opt_frameState) {

  _events_Event_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, type);

  /**
   * The map where the event occurred.
   * @type {module:ol/PluggableMap}
   * @api
   */
  this.map = map;

  /**
   * The frame state at the time of the event.
   * @type {?module:ol/PluggableMap~FrameState}
   * @api
   */
  this.frameState = opt_frameState !== undefined ? opt_frameState : null;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MapEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);
/* harmony default export */ __webpack_exports__["a"] = (MapEvent);


/***/ }),
/* 134 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return clear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return add; });
/* unused harmony export remove */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return get; });
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);
/**
 * @module ol/proj/transforms
 */



/**
 * @private
 * @type {!Object.<string, Object.<string, module:ol/proj~TransformFunction>>}
 */
let transforms = {};


/**
 * Clear the transform cache.
 */
function clear() {
  transforms = {};
}


/**
 * Registers a conversion function to convert coordinates from the source
 * projection to the destination projection.
 *
 * @param {module:ol/proj/Projection} source Source.
 * @param {module:ol/proj/Projection} destination Destination.
 * @param {module:ol/proj~TransformFunction} transformFn Transform.
 */
function add(source, destination, transformFn) {
  const sourceCode = source.getCode();
  const destinationCode = destination.getCode();
  if (!(sourceCode in transforms)) {
    transforms[sourceCode] = {};
  }
  transforms[sourceCode][destinationCode] = transformFn;
}


/**
 * Unregisters the conversion function to convert coordinates from the source
 * projection to the destination projection.  This method is used to clean up
 * cached transforms during testing.
 *
 * @param {module:ol/proj/Projection} source Source projection.
 * @param {module:ol/proj/Projection} destination Destination projection.
 * @return {module:ol/proj~TransformFunction} transformFn The unregistered transform.
 */
function remove(source, destination) {
  const sourceCode = source.getCode();
  const destinationCode = destination.getCode();
  const transform = transforms[sourceCode][destinationCode];
  delete transforms[sourceCode][destinationCode];
  if (Object(_obj_js__WEBPACK_IMPORTED_MODULE_0__[/* isEmpty */ "d"])(transforms[sourceCode])) {
    delete transforms[sourceCode];
  }
  return transform;
}


/**
 * Get a transform given a source code and a destination code.
 * @param {string} sourceCode The code for the source projection.
 * @param {string} destinationCode The code for the destination projection.
 * @return {module:ol/proj~TransformFunction|undefined} The transform function (if found).
 */
function get(sourceCode, destinationCode) {
  let transform;
  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
    transform = transforms[sourceCode][destinationCode];
  }
  return transform;
}


/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/asserts.js
var asserts = __webpack_require__(27);

// EXTERNAL MODULE: ../node_modules/pbf/index.js
var node_modules_pbf = __webpack_require__(233);
var pbf_default = /*#__PURE__*/__webpack_require__.n(node_modules_pbf);

// EXTERNAL MODULE: ../src/ol/format/Feature.js
var Feature = __webpack_require__(42);

// EXTERNAL MODULE: ../src/ol/format/FormatType.js
var FormatType = __webpack_require__(111);

// EXTERNAL MODULE: ../src/ol/geom/GeometryLayout.js
var GeometryLayout = __webpack_require__(22);

// EXTERNAL MODULE: ../src/ol/geom/GeometryType.js
var GeometryType = __webpack_require__(9);

// EXTERNAL MODULE: ../src/ol/geom/LineString.js
var LineString = __webpack_require__(41);

// EXTERNAL MODULE: ../src/ol/geom/MultiLineString.js
var MultiLineString = __webpack_require__(71);

// EXTERNAL MODULE: ../src/ol/geom/MultiPoint.js
var MultiPoint = __webpack_require__(73);

// EXTERNAL MODULE: ../src/ol/geom/MultiPolygon.js
var MultiPolygon = __webpack_require__(82);

// EXTERNAL MODULE: ../src/ol/geom/Point.js
var Point = __webpack_require__(30);

// EXTERNAL MODULE: ../src/ol/geom/Polygon.js
var Polygon = __webpack_require__(39);

// EXTERNAL MODULE: ../src/ol/geom/flat/orient.js + 1 modules
var orient = __webpack_require__(93);

// EXTERNAL MODULE: ../src/ol/proj/Projection.js
var Projection = __webpack_require__(68);

// EXTERNAL MODULE: ../src/ol/proj/Units.js
var Units = __webpack_require__(59);

// EXTERNAL MODULE: ../src/ol/functions.js
var functions = __webpack_require__(29);

// EXTERNAL MODULE: ../src/ol/array.js
var array = __webpack_require__(16);

// EXTERNAL MODULE: ../src/ol/extent.js
var extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/geom/flat/center.js
var center = __webpack_require__(229);

// EXTERNAL MODULE: ../src/ol/geom/flat/interiorpoint.js
var interiorpoint = __webpack_require__(177);

// EXTERNAL MODULE: ../src/ol/geom/flat/interpolate.js
var interpolate = __webpack_require__(153);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// EXTERNAL MODULE: ../src/ol/geom/flat/transform.js
var transform = __webpack_require__(61);

// EXTERNAL MODULE: ../src/ol/transform.js
var ol_transform = __webpack_require__(18);

// CONCATENATED MODULE: ../src/ol/render/Feature.js
/**
 * @module ol/render/Feature
 */











/**
 * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like
 * structure, optimized for vector tile rendering and styling. Geometry access
 * through the API is limited to getting the type and extent of the geometry.
 *
 * @constructor
 * @param {module:ol/geom/GeometryType} type Geometry type.
 * @param {Array.<number>} flatCoordinates Flat coordinates. These always need
 *     to be right-handed for polygons.
 * @param {Array.<number>|Array.<Array.<number>>} ends Ends or Endss.
 * @param {Object.<string, *>} properties Properties.
 * @param {number|string|undefined} id Feature id.
 */
const RenderFeature = function(type, flatCoordinates, ends, properties, id) {
  /**
   * @private
   * @type {module:ol/extent~Extent|undefined}
   */
  this.extent_;

  /**
   * @private
   * @type {number|string|undefined}
   */
  this.id_ = id;

  /**
   * @private
   * @type {module:ol/geom/GeometryType}
   */
  this.type_ = type;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.flatCoordinates_ = flatCoordinates;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.flatInteriorPoints_ = null;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.flatMidpoints_ = null;

  /**
   * @private
   * @type {Array.<number>|Array.<Array.<number>>}
   */
  this.ends_ = ends;

  /**
   * @private
   * @type {Object.<string, *>}
   */
  this.properties_ = properties;

};


/**
 * @type {module:ol/transform~Transform}
 */
const tmpTransform = Object(ol_transform["c" /* create */])();


/**
 * Get a feature property by its key.
 * @param {string} key Key
 * @return {*} Value for the requested key.
 * @api
 */
RenderFeature.prototype.get = function(key) {
  return this.properties_[key];
};


/**
 * @return {Array.<number>|Array.<Array.<number>>} Ends or endss.
 */
RenderFeature.prototype.getEnds =
RenderFeature.prototype.getEndss = function() {
  return this.ends_;
};


/**
 * Get the extent of this feature's geometry.
 * @return {module:ol/extent~Extent} Extent.
 * @api
 */
RenderFeature.prototype.getExtent = function() {
  if (!this.extent_) {
    this.extent_ = this.type_ === GeometryType["a" /* default */].POINT ?
      Object(extent["m" /* createOrUpdateFromCoordinate */])(this.flatCoordinates_) :
      Object(extent["o" /* createOrUpdateFromFlatCoordinates */])(
        this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);

  }
  return this.extent_;
};


/**
 * @return {Array.<number>} Flat interior points.
 */
RenderFeature.prototype.getFlatInteriorPoint = function() {
  if (!this.flatInteriorPoints_) {
    const flatCenter = Object(extent["x" /* getCenter */])(this.getExtent());
    this.flatInteriorPoints_ = Object(interiorpoint["a" /* getInteriorPointOfArray */])(
      this.flatCoordinates_, 0, this.ends_, 2, flatCenter, 0);
  }
  return this.flatInteriorPoints_;
};


/**
 * @return {Array.<number>} Flat interior points.
 */
RenderFeature.prototype.getFlatInteriorPoints = function() {
  if (!this.flatInteriorPoints_) {
    const flatCenters = Object(center["a" /* linearRingss */])(
      this.flatCoordinates_, 0, this.ends_, 2);
    this.flatInteriorPoints_ = Object(interiorpoint["b" /* getInteriorPointsOfMultiArray */])(
      this.flatCoordinates_, 0, this.ends_, 2, flatCenters);
  }
  return this.flatInteriorPoints_;
};


/**
 * @return {Array.<number>} Flat midpoint.
 */
RenderFeature.prototype.getFlatMidpoint = function() {
  if (!this.flatMidpoints_) {
    this.flatMidpoints_ = Object(interpolate["a" /* interpolatePoint */])(
      this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);
  }
  return this.flatMidpoints_;
};


/**
 * @return {Array.<number>} Flat midpoints.
 */
RenderFeature.prototype.getFlatMidpoints = function() {
  if (!this.flatMidpoints_) {
    this.flatMidpoints_ = [];
    const flatCoordinates = this.flatCoordinates_;
    let offset = 0;
    const ends = this.ends_;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      const midpoint = Object(interpolate["a" /* interpolatePoint */])(
        flatCoordinates, offset, end, 2, 0.5);
      Object(array["c" /* extend */])(this.flatMidpoints_, midpoint);
      offset = end;
    }
  }
  return this.flatMidpoints_;
};

/**
 * Get the feature identifier.  This is a stable identifier for the feature and
 * is set when reading data from a remote source.
 * @return {number|string|undefined} Id.
 * @api
 */
RenderFeature.prototype.getId = function() {
  return this.id_;
};


/**
 * @return {Array.<number>} Flat coordinates.
 */
RenderFeature.prototype.getOrientedFlatCoordinates = function() {
  return this.flatCoordinates_;
};


/**
 * @return {Array.<number>} Flat coordinates.
 */
RenderFeature.prototype.getFlatCoordinates =
    RenderFeature.prototype.getOrientedFlatCoordinates;


/**
 * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when
 * determining the geometry type in style function (see {@link #getType}).
 * @return {module:ol/render/Feature} Feature.
 * @api
 */
RenderFeature.prototype.getGeometry = function() {
  return this;
};


/**
 * Get the feature properties.
 * @return {Object.<string, *>} Feature properties.
 * @api
 */
RenderFeature.prototype.getProperties = function() {
  return this.properties_;
};


/**
 * Get the feature for working with its geometry.
 * @return {module:ol/render/Feature} Feature.
 */
RenderFeature.prototype.getSimplifiedGeometry =
    RenderFeature.prototype.getGeometry;


/**
 * @return {number} Stride.
 */
RenderFeature.prototype.getStride = function() {
  return 2;
};


/**
 * @return {undefined}
 */
RenderFeature.prototype.getStyleFunction = functions["c" /* UNDEFINED */];


/**
 * Get the type of this feature's geometry.
 * @return {module:ol/geom/GeometryType} Geometry type.
 * @api
 */
RenderFeature.prototype.getType = function() {
  return this.type_;
};

/**
 * Transform geometry coordinates from tile pixel space to projected.
 * The SRS of the source and destination are expected to be the same.
 *
 * @param {module:ol/proj~ProjectionLike} source The current projection
 * @param {module:ol/proj~ProjectionLike} destination The desired projection.
 */
RenderFeature.prototype.transform = function(source, destination) {
  source = Object(proj["h" /* get */])(source);
  const pixelExtent = source.getExtent();
  const projectedExtent = source.getWorldExtent();
  const scale = Object(extent["A" /* getHeight */])(projectedExtent) / Object(extent["A" /* getHeight */])(pixelExtent);
  Object(ol_transform["b" /* compose */])(tmpTransform,
    projectedExtent[0], projectedExtent[3],
    scale, -scale, 0,
    0, 0);
  Object(transform["c" /* transform2D */])(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2,
    tmpTransform, this.flatCoordinates_);
};
/* harmony default export */ var render_Feature = (RenderFeature);

// CONCATENATED MODULE: ../src/ol/format/MVT.js
/**
 * @module ol/format/MVT
 */
//FIXME Implement projection handling




















/**
 * @typedef {Object} Options
 * @property {function((module:ol/geom/Geometry|Object.<string,*>)=)|function(module:ol/geom/GeometryType,Array.<number>,(Array.<number>|Array.<Array.<number>>),Object.<string,*>,number)} [featureClass]
 * Class for features returned by {@link module:ol/format/MVT#readFeatures}. Set to
 * {@link module:ol/Feature~Feature} to get full editing and geometry support at the cost of
 * decreased rendering performance. The default is {@link module:ol/render/Feature~RenderFeature},
 * which is optimized for rendering and hit detection.
 * @property {string} [geometryName='geometry'] Geometry name to use when creating
 * features.
 * @property {string} [layerName='layer'] Name of the feature attribute that
 * holds the layer name.
 * @property {Array.<string>} [layers] Layers to read features from. If not
 * provided, features will be read from all layers.
 */


/**
 * @classdesc
 * Feature format for reading data in the Mapbox MVT format.
 *
 * @constructor
 * @extends {module:ol/format/Feature}
 * @param {module:ol/format/MVT~Options=} opt_options Options.
 * @api
 */
const MVT = function(opt_options) {

  Feature["a" /* default */].call(this);

  const options = opt_options ? opt_options : {};

  /**
   * @type {module:ol/proj/Projection}
   */
  this.dataProjection = new Projection["a" /* default */]({
    code: '',
    units: Units["b" /* default */].TILE_PIXELS
  });

  /**
   * @private
   * @type {function((module:ol/geom/Geometry|Object.<string,*>)=)|
   *     function(module:ol/geom/GeometryType,Array.<number>,
   *         (Array.<number>|Array.<Array.<number>>),Object.<string,*>,number)}
   */
  this.featureClass_ = options.featureClass ?
    options.featureClass : render_Feature;

  /**
   * @private
   * @type {string|undefined}
   */
  this.geometryName_ = options.geometryName;

  /**
   * @private
   * @type {string}
   */
  this.layerName_ = options.layerName ? options.layerName : 'layer';

  /**
   * @private
   * @type {Array.<string>}
   */
  this.layers_ = options.layers ? options.layers : null;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.extent_ = null;

};

Object(util["c" /* inherits */])(MVT, Feature["a" /* default */]);


/**
 * Reader callback for parsing layers.
 * @param {number} tag The tag.
 * @param {Object} layers The layers object.
 * @param {Object} pbf The PBF.
 */
function layersPBFReader(tag, layers, pbf) {
  if (tag === 3) {
    const layer = {
      keys: [],
      values: [],
      features: []
    };
    const end = pbf.readVarint() + pbf.pos;
    pbf.readFields(layerPBFReader, layer, end);
    layer.length = layer.features.length;
    if (layer.length) {
      layers[layer.name] = layer;
    }
  }
}

/**
 * Reader callback for parsing layer.
 * @param {number} tag The tag.
 * @param {Object} layer The layer object.
 * @param {Object} pbf The PBF.
 */
function layerPBFReader(tag, layer, pbf) {
  if (tag === 15) {
    layer.version = pbf.readVarint();
  } else if (tag === 1) {
    layer.name = pbf.readString();
  } else if (tag === 5) {
    layer.extent = pbf.readVarint();
  } else if (tag === 2) {
    layer.features.push(pbf.pos);
  } else if (tag === 3) {
    layer.keys.push(pbf.readString());
  } else if (tag === 4) {
    let value = null;
    const end = pbf.readVarint() + pbf.pos;
    while (pbf.pos < end) {
      tag = pbf.readVarint() >> 3;
      value = tag === 1 ? pbf.readString() :
        tag === 2 ? pbf.readFloat() :
          tag === 3 ? pbf.readDouble() :
            tag === 4 ? pbf.readVarint64() :
              tag === 5 ? pbf.readVarint() :
                tag === 6 ? pbf.readSVarint() :
                  tag === 7 ? pbf.readBoolean() : null;
    }
    layer.values.push(value);
  }
}

/**
 * Reader callback for parsing feature.
 * @param {number} tag The tag.
 * @param {Object} feature The feature object.
 * @param {Object} pbf The PBF.
 */
function featurePBFReader(tag, feature, pbf) {
  if (tag == 1) {
    feature.id = pbf.readVarint();
  } else if (tag == 2) {
    const end = pbf.readVarint() + pbf.pos;
    while (pbf.pos < end) {
      const key = feature.layer.keys[pbf.readVarint()];
      const value = feature.layer.values[pbf.readVarint()];
      feature.properties[key] = value;
    }
  } else if (tag == 3) {
    feature.type = pbf.readVarint();
  } else if (tag == 4) {
    feature.geometry = pbf.pos;
  }
}


/**
 * Read a raw feature from the pbf offset stored at index `i` in the raw layer.
 * @suppress {missingProperties}
 * @param {Object} pbf PBF.
 * @param {Object} layer Raw layer.
 * @param {number} i Index of the feature in the raw layer's `features` array.
 * @return {Object} Raw feature.
 */
function readRawFeature(pbf, layer, i) {
  pbf.pos = layer.features[i];
  const end = pbf.readVarint() + pbf.pos;

  const feature = {
    layer: layer,
    type: 0,
    properties: {}
  };
  pbf.readFields(featurePBFReader, feature, end);
  return feature;
}


/**
 * Read the raw geometry from the pbf offset stored in a raw feature's geometry
 * property.
 * @suppress {missingProperties}
 * @param {Object} pbf PBF.
 * @param {Object} feature Raw feature.
 * @param {Array.<number>} flatCoordinates Array to store flat coordinates in.
 * @param {Array.<number>} ends Array to store ends in.
 * @private
 */
MVT.prototype.readRawGeometry_ = function(pbf, feature, flatCoordinates, ends) {
  pbf.pos = feature.geometry;

  const end = pbf.readVarint() + pbf.pos;
  let cmd = 1;
  let length = 0;
  let x = 0;
  let y = 0;
  let coordsLen = 0;
  let currentEnd = 0;

  while (pbf.pos < end) {
    if (!length) {
      const cmdLen = pbf.readVarint();
      cmd = cmdLen & 0x7;
      length = cmdLen >> 3;
    }

    length--;

    if (cmd === 1 || cmd === 2) {
      x += pbf.readSVarint();
      y += pbf.readSVarint();

      if (cmd === 1) { // moveTo
        if (coordsLen > currentEnd) {
          ends.push(coordsLen);
          currentEnd = coordsLen;
        }
      }

      flatCoordinates.push(x, y);
      coordsLen += 2;

    } else if (cmd === 7) {

      if (coordsLen > currentEnd) {
        // close polygon
        flatCoordinates.push(
          flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);
        coordsLen += 2;
      }

    } else {
      Object(asserts["a" /* assert */])(false, 59); // Invalid command found in the PBF
    }
  }

  if (coordsLen > currentEnd) {
    ends.push(coordsLen);
    currentEnd = coordsLen;
  }

};


/**
 * @suppress {missingProperties}
 * @param {number} type The raw feature's geometry type
 * @param {number} numEnds Number of ends of the flat coordinates of the
 * geometry.
 * @return {module:ol/geom/GeometryType} The geometry type.
 */
function getGeometryType(type, numEnds) {
  /** @type {module:ol/geom/GeometryType} */
  let geometryType;
  if (type === 1) {
    geometryType = numEnds === 1 ?
      GeometryType["a" /* default */].POINT : GeometryType["a" /* default */].MULTI_POINT;
  } else if (type === 2) {
    geometryType = numEnds === 1 ?
      GeometryType["a" /* default */].LINE_STRING :
      GeometryType["a" /* default */].MULTI_LINE_STRING;
  } else if (type === 3) {
    geometryType = GeometryType["a" /* default */].POLYGON;
    // MultiPolygon not relevant for rendering - winding order determines
    // outer rings of polygons.
  }
  return geometryType;
}

/**
 * @private
 * @param {Object} pbf PBF
 * @param {Object} rawFeature Raw Mapbox feature.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature|module:ol/render/Feature} Feature.
 */
MVT.prototype.createFeature_ = function(pbf, rawFeature, opt_options) {
  const type = rawFeature.type;
  if (type === 0) {
    return null;
  }

  let feature;
  const id = rawFeature.id;
  const values = rawFeature.properties;
  values[this.layerName_] = rawFeature.layer.name;

  const flatCoordinates = [];
  let ends = [];
  this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);

  const geometryType = getGeometryType(type, ends.length);

  if (this.featureClass_ === render_Feature) {
    feature = new this.featureClass_(geometryType, flatCoordinates, ends, values, id);
  } else {
    let geom;
    if (geometryType == GeometryType["a" /* default */].POLYGON) {
      const endss = [];
      let offset = 0;
      let prevEndIndex = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        if (!Object(orient["a" /* linearRingIsClockwise */])(flatCoordinates, offset, end, 2)) {
          endss.push(ends.slice(prevEndIndex, i));
          prevEndIndex = i;
        }
        offset = end;
      }
      if (endss.length > 1) {
        ends = endss;
        geom = new MultiPolygon["a" /* default */](null);
      } else {
        geom = new Polygon["b" /* default */](null);
      }
    } else {
      geom = geometryType === GeometryType["a" /* default */].POINT ? new Point["a" /* default */](null) :
        geometryType === GeometryType["a" /* default */].LINE_STRING ? new LineString["a" /* default */](null) :
          geometryType === GeometryType["a" /* default */].POLYGON ? new Polygon["b" /* default */](null) :
            geometryType === GeometryType["a" /* default */].MULTI_POINT ? new MultiPoint["a" /* default */] (null) :
              geometryType === GeometryType["a" /* default */].MULTI_LINE_STRING ? new MultiLineString["a" /* default */](null) :
                null;
    }
    geom.setFlatCoordinates(GeometryLayout["a" /* default */].XY, flatCoordinates, ends);
    feature = new this.featureClass_();
    if (this.geometryName_) {
      feature.setGeometryName(this.geometryName_);
    }
    const geometry = Object(Feature["b" /* transformWithOptions */])(geom, false, this.adaptOptions(opt_options));
    feature.setGeometry(geometry);
    feature.setId(id);
    feature.setProperties(values);
  }

  return feature;
};


/**
 * @inheritDoc
 * @api
 */
MVT.prototype.getLastExtent = function() {
  return this.extent_;
};


/**
 * @inheritDoc
 */
MVT.prototype.getType = function() {
  return FormatType["a" /* default */].ARRAY_BUFFER;
};


/**
 * @inheritDoc
 * @api
 */
MVT.prototype.readFeatures = function(source, opt_options) {
  const layers = this.layers_;

  const pbf = new pbf_default.a(/** @type {ArrayBuffer} */ (source));
  const pbfLayers = pbf.readFields(layersPBFReader, {});
  /** @type {Array.<module:ol/Feature|module:ol/render/Feature>} */
  const features = [];
  for (const name in pbfLayers) {
    if (layers && layers.indexOf(name) == -1) {
      continue;
    }
    const pbfLayer = pbfLayers[name];

    for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {
      const rawFeature = readRawFeature(pbf, pbfLayer, i);
      features.push(this.createFeature_(pbf, rawFeature));
    }
    this.extent_ = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
  }

  return features;
};


/**
 * @inheritDoc
 * @api
 */
MVT.prototype.readProjection = function(source) {
  return this.dataProjection;
};


/**
 * Sets the layers that features will be read from.
 * @param {Array.<string>} layers Layers.
 * @api
 */
MVT.prototype.setLayers = function(layers) {
  this.layers_ = layers;
};


/**
 * Not implemented.
 * @override
 */
MVT.prototype.readFeature = function() {};


/**
 * Not implemented.
 * @override
 */
MVT.prototype.readGeometry = function() {};


/**
 * Not implemented.
 * @override
 */
MVT.prototype.writeFeature = function() {};


/**
 * Not implemented.
 * @override
 */
MVT.prototype.writeGeometry = function() {};


/**
 * Not implemented.
 * @override
 */
MVT.prototype.writeFeatures = function() {};
/* harmony default export */ var format_MVT = __webpack_exports__["a"] = (MVT);


/***/ }),
/* 136 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/PluggableMap.js
var PluggableMap = __webpack_require__(166);

// EXTERNAL MODULE: ../src/ol/control.js + 5 modules
var control = __webpack_require__(25);

// EXTERNAL MODULE: ../src/ol/interaction.js + 17 modules
var interaction = __webpack_require__(33);

// EXTERNAL MODULE: ../src/ol/obj.js
var obj = __webpack_require__(15);

// EXTERNAL MODULE: ../src/ol/reproj/common.js
var common = __webpack_require__(85);

// EXTERNAL MODULE: ../src/ol/functions.js
var functions = __webpack_require__(29);

// EXTERNAL MODULE: ../src/ol/LayerType.js
var LayerType = __webpack_require__(60);

// EXTERNAL MODULE: ../src/ol/ViewHint.js
var ViewHint = __webpack_require__(43);

// EXTERNAL MODULE: ../src/ol/dom.js
var dom = __webpack_require__(32);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/render/Event.js
var Event = __webpack_require__(162);

// EXTERNAL MODULE: ../src/ol/render/EventType.js
var EventType = __webpack_require__(78);

// EXTERNAL MODULE: ../src/ol/geom/GeometryType.js
var GeometryType = __webpack_require__(9);

// EXTERNAL MODULE: ../src/ol/render/ReplayType.js
var ReplayType = __webpack_require__(38);

// EXTERNAL MODULE: ../src/ol/render/VectorContext.js
var VectorContext = __webpack_require__(126);

// EXTERNAL MODULE: ../src/ol/array.js
var array = __webpack_require__(16);

// EXTERNAL MODULE: ../src/ol/render/replay.js
var render_replay = __webpack_require__(79);

// EXTERNAL MODULE: ../src/ol/render/ReplayGroup.js
var ReplayGroup = __webpack_require__(193);

// EXTERNAL MODULE: ../src/ol/color.js
var color = __webpack_require__(77);

// EXTERNAL MODULE: ../src/ol/geom/flat/transform.js
var flat_transform = __webpack_require__(61);

// EXTERNAL MODULE: ../src/ol/webgl.js
var webgl = __webpack_require__(12);

// CONCATENATED MODULE: ../src/ol/webgl/Shader.js
/**
 * @module ol/webgl/Shader
 */


/**
 * @constructor
 * @abstract
 * @param {string} source Source.
 * @struct
 */
const WebGLShader = function(source) {

  /**
   * @private
   * @type {string}
   */
  this.source_ = source;

};


/**
 * @abstract
 * @return {number} Type.
 */
WebGLShader.prototype.getType = function() {};


/**
 * @return {string} Source.
 */
WebGLShader.prototype.getSource = function() {
  return this.source_;
};


/**
 * @return {boolean} Is animated?
 */
WebGLShader.prototype.isAnimated = functions["a" /* FALSE */];
/* harmony default export */ var Shader = (WebGLShader);

// CONCATENATED MODULE: ../src/ol/webgl/Fragment.js
/**
 * @module ol/webgl/Fragment
 */




/**
 * @constructor
 * @extends {module:ol/webgl/Shader}
 * @param {string} source Source.
 * @struct
 */
const WebGLFragment = function(source) {
  Shader.call(this, source);
};

Object(util["c" /* inherits */])(WebGLFragment, Shader);


/**
 * @inheritDoc
 */
WebGLFragment.prototype.getType = function() {
  return webgl["m" /* FRAGMENT_SHADER */];
};
/* harmony default export */ var Fragment = (WebGLFragment);

// CONCATENATED MODULE: ../src/ol/webgl/Vertex.js
/**
 * @module ol/webgl/Vertex
 */




/**
 * @constructor
 * @extends {module:ol/webgl/Shader}
 * @param {string} source Source.
 * @struct
 */
const WebGLVertex = function(source) {
  Shader.call(this, source);
};

Object(util["c" /* inherits */])(WebGLVertex, Shader);


/**
 * @inheritDoc
 */
WebGLVertex.prototype.getType = function() {
  return webgl["K" /* VERTEX_SHADER */];
};
/* harmony default export */ var Vertex = (WebGLVertex);

// CONCATENATED MODULE: ../src/ol/render/webgl/circlereplay/defaultshader.js
/**
 * @module ol/render/webgl/circlereplay/defaultshader
 */
// This file is automatically generated, do not edit.
// Run `make shaders` to generate, and commit the result.





const fragment = new Fragment(webgl["g" /* DEBUG */] ?
  'precision mediump float;\nvarying vec2 v_center;\nvarying vec2 v_offset;\nvarying float v_halfWidth;\nvarying float v_pixelRatio;\n\n\n\nuniform float u_opacity;\nuniform vec4 u_fillColor;\nuniform vec4 u_strokeColor;\nuniform vec2 u_size;\n\nvoid main(void) {\n  vec2 windowCenter = vec2((v_center.x + 1.0) / 2.0 * u_size.x * v_pixelRatio,\n      (v_center.y + 1.0) / 2.0 * u_size.y * v_pixelRatio);\n  vec2 windowOffset = vec2((v_offset.x + 1.0) / 2.0 * u_size.x * v_pixelRatio,\n      (v_offset.y + 1.0) / 2.0 * u_size.y * v_pixelRatio);\n  float radius = length(windowCenter - windowOffset);\n  float dist = length(windowCenter - gl_FragCoord.xy);\n  if (dist > radius + v_halfWidth) {\n    if (u_strokeColor.a == 0.0) {\n      gl_FragColor = u_fillColor;\n    } else {\n      gl_FragColor = u_strokeColor;\n    }\n    gl_FragColor.a = gl_FragColor.a - (dist - (radius + v_halfWidth));\n  } else if (u_fillColor.a == 0.0) {\n    // Hooray, no fill, just stroke. We can use real antialiasing.\n    gl_FragColor = u_strokeColor;\n    if (dist < radius - v_halfWidth) {\n      gl_FragColor.a = gl_FragColor.a - (radius - v_halfWidth - dist);\n    }\n  } else {\n    gl_FragColor = u_fillColor;\n    float strokeDist = radius - v_halfWidth;\n    float antialias = 2.0 * v_pixelRatio;\n    if (dist > strokeDist) {\n      gl_FragColor = u_strokeColor;\n    } else if (dist >= strokeDist - antialias) {\n      float step = smoothstep(strokeDist - antialias, strokeDist, dist);\n      gl_FragColor = mix(u_fillColor, u_strokeColor, step);\n    }\n  }\n  gl_FragColor.a = gl_FragColor.a * u_opacity;\n  if (gl_FragColor.a <= 0.0) {\n    discard;\n  }\n}\n' :
  'precision mediump float;varying vec2 a;varying vec2 b;varying float c;varying float d;uniform float m;uniform vec4 n;uniform vec4 o;uniform vec2 p;void main(void){vec2 windowCenter=vec2((a.x+1.0)/2.0*p.x*d,(a.y+1.0)/2.0*p.y*d);vec2 windowOffset=vec2((b.x+1.0)/2.0*p.x*d,(b.y+1.0)/2.0*p.y*d);float radius=length(windowCenter-windowOffset);float dist=length(windowCenter-gl_FragCoord.xy);if(dist>radius+c){if(o.a==0.0){gl_FragColor=n;}else{gl_FragColor=o;}gl_FragColor.a=gl_FragColor.a-(dist-(radius+c));}else if(n.a==0.0){gl_FragColor=o;if(dist<radius-c){gl_FragColor.a=gl_FragColor.a-(radius-c-dist);}} else{gl_FragColor=n;float strokeDist=radius-c;float antialias=2.0*d;if(dist>strokeDist){gl_FragColor=o;}else if(dist>=strokeDist-antialias){float step=smoothstep(strokeDist-antialias,strokeDist,dist);gl_FragColor=mix(n,o,step);}} gl_FragColor.a=gl_FragColor.a*m;if(gl_FragColor.a<=0.0){discard;}}');

const vertex = new Vertex(webgl["g" /* DEBUG */] ?
  'varying vec2 v_center;\nvarying vec2 v_offset;\nvarying float v_halfWidth;\nvarying float v_pixelRatio;\n\n\nattribute vec2 a_position;\nattribute float a_instruction;\nattribute float a_radius;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_lineWidth;\nuniform float u_pixelRatio;\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  v_center = vec4(u_projectionMatrix * vec4(a_position, 0.0, 1.0)).xy;\n  v_pixelRatio = u_pixelRatio;\n  float lineWidth = u_lineWidth * u_pixelRatio;\n  v_halfWidth = lineWidth / 2.0;\n  if (lineWidth == 0.0) {\n    lineWidth = 2.0 * u_pixelRatio;\n  }\n  vec2 offset;\n  // Radius with anitaliasing (roughly).\n  float radius = a_radius + 3.0 * u_pixelRatio;\n  // Until we get gl_VertexID in WebGL, we store an instruction.\n  if (a_instruction == 0.0) {\n    // Offsetting the edges of the triangle by lineWidth / 2 is necessary, however\n    // we should also leave some space for the antialiasing, thus we offset by lineWidth.\n    offset = vec2(-1.0, 1.0);\n  } else if (a_instruction == 1.0) {\n    offset = vec2(-1.0, -1.0);\n  } else if (a_instruction == 2.0) {\n    offset = vec2(1.0, -1.0);\n  } else {\n    offset = vec2(1.0, 1.0);\n  }\n\n  gl_Position = u_projectionMatrix * vec4(a_position + offset * radius, 0.0, 1.0) +\n      offsetMatrix * vec4(offset * lineWidth, 0.0, 0.0);\n  v_offset = vec4(u_projectionMatrix * vec4(a_position.x + a_radius, a_position.y,\n      0.0, 1.0)).xy;\n\n  if (distance(v_center, v_offset) > 20000.0) {\n    gl_Position = vec4(v_center, 0.0, 1.0);\n  }\n}\n\n\n' :
  'varying vec2 a;varying vec2 b;varying float c;varying float d;attribute vec2 e;attribute float f;attribute float g;uniform mat4 h;uniform mat4 i;uniform mat4 j;uniform float k;uniform float l;void main(void){mat4 offsetMatrix=i*j;a=vec4(h*vec4(e,0.0,1.0)).xy;d=l;float lineWidth=k*l;c=lineWidth/2.0;if(lineWidth==0.0){lineWidth=2.0*l;}vec2 offset;float radius=g+3.0*l;if(f==0.0){offset=vec2(-1.0,1.0);}else if(f==1.0){offset=vec2(-1.0,-1.0);}else if(f==2.0){offset=vec2(1.0,-1.0);}else{offset=vec2(1.0,1.0);}gl_Position=h*vec4(e+offset*radius,0.0,1.0)+offsetMatrix*vec4(offset*lineWidth,0.0,0.0);b=vec4(h*vec4(e.x+g,e.y,0.0,1.0)).xy;if(distance(a,b)>20000.0){gl_Position=vec4(a,0.0,1.0);}}');

// CONCATENATED MODULE: ../src/ol/render/webgl/circlereplay/defaultshader/Locations.js
/**
 * @module ol/render/webgl/circlereplay/defaultshader/Locations
 */
// This file is automatically generated, do not edit
// Run `make shaders` to generate, and commit the result.



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
const Locations = function(gl, program) {

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_projectionMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_projectionMatrix' : 'h');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_offsetScaleMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_offsetScaleMatrix' : 'i');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_offsetRotateMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_offsetRotateMatrix' : 'j');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_lineWidth = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_lineWidth' : 'k');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_pixelRatio = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_pixelRatio' : 'l');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_opacity = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_opacity' : 'm');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_fillColor = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_fillColor' : 'n');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_strokeColor = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_strokeColor' : 'o');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_size = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_size' : 'p');

  /**
   * @type {number}
   */
  this.a_position = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_position' : 'e');

  /**
   * @type {number}
   */
  this.a_instruction = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_instruction' : 'f');

  /**
   * @type {number}
   */
  this.a_radius = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_radius' : 'g');
};

/* harmony default export */ var defaultshader_Locations = (Locations);

// EXTERNAL MODULE: ../src/ol/transform.js
var ol_transform = __webpack_require__(18);

// CONCATENATED MODULE: ../src/ol/vec/mat4.js
/**
 * @module ol/vec/mat4
 */


/**
 * @return {Array.<number>} 4x4 matrix representing a 3D identity transform.
 */
function create() {
  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
}


/**
 * @param {Array.<number>} mat4 Flattened 4x4 matrix receiving the result.
 * @param {module:ol/transform~Transform} transform Transformation matrix.
 * @return {Array.<number>} 2D transformation matrix as flattened 4x4 matrix.
 */
function fromTransform(mat4, transform) {
  mat4[0] = transform[0];
  mat4[1] = transform[1];
  mat4[4] = transform[2];
  mat4[5] = transform[3];
  mat4[12] = transform[4];
  mat4[13] = transform[5];
  return mat4;
}

// CONCATENATED MODULE: ../src/ol/render/webgl/Replay.js
/**
 * @module ol/render/webgl/Replay
 */







/**
 * @constructor
 * @abstract
 * @extends {module:ol/render/VectorContext}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Max extent.
 * @struct
 */
const WebGLReplay = function(tolerance, maxExtent) {
  VectorContext["a" /* default */].call(this);

  /**
   * @protected
   * @type {number}
   */
  this.tolerance = tolerance;

  /**
   * @protected
   * @const
   * @type {module:ol/extent~Extent}
   */
  this.maxExtent = maxExtent;

  /**
   * The origin of the coordinate system for the point coordinates sent to
   * the GPU. To eliminate jitter caused by precision problems in the GPU
   * we use the "Rendering Relative to Eye" technique described in the "3D
   * Engine Design for Virtual Globes" book.
   * @protected
   * @type {module:ol/coordinate~Coordinate}
   */
  this.origin = Object(ol_extent["x" /* getCenter */])(maxExtent);

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.projectionMatrix_ = Object(ol_transform["c" /* create */])();

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.offsetRotateMatrix_ = Object(ol_transform["c" /* create */])();

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.offsetScaleMatrix_ = Object(ol_transform["c" /* create */])();

  /**
   * @private
   * @type {Array.<number>}
   */
  this.tmpMat4_ = create();

  /**
   * @protected
   * @type {Array.<number>}
   */
  this.indices = [];

  /**
   * @protected
   * @type {?module:ol/webgl/Buffer}
   */
  this.indicesBuffer = null;

  /**
   * Start index per feature (the index).
   * @protected
   * @type {Array.<number>}
   */
  this.startIndices = [];

  /**
   * Start index per feature (the feature).
   * @protected
   * @type {Array.<module:ol/Feature|module:ol/render/Feature>}
   */
  this.startIndicesFeature = [];

  /**
   * @protected
   * @type {Array.<number>}
   */
  this.vertices = [];

  /**
   * @protected
   * @type {?module:ol/webgl/Buffer}
   */
  this.verticesBuffer = null;

  /**
   * Optional parameter for PolygonReplay instances.
   * @protected
   * @type {module:ol/render/webgl/LineStringReplay|undefined}
   */
  this.lineStringReplay = undefined;

};

Object(util["c" /* inherits */])(WebGLReplay, VectorContext["a" /* default */]);


/**
 * @abstract
 * @param {module:ol/webgl/Context} context WebGL context.
 * @return {function()} Delete resources function.
 */
WebGLReplay.prototype.getDeleteResourcesFunction = function(context) {};


/**
 * @abstract
 * @param {module:ol/webgl/Context} context Context.
 */
WebGLReplay.prototype.finish = function(context) {};


/**
 * @abstract
 * @protected
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {module:ol/size~Size} size Size.
 * @param {number} pixelRatio Pixel ratio.
 * @return {module:ol/render/webgl/circlereplay/defaultshader/Locations|
            module:ol/render/webgl/linestringreplay/defaultshader/Locations|
            module:ol/render/webgl/polygonreplay/defaultshader/Locations|
            module:ol/render/webgl/texturereplay/defaultshader/Locations} Locations.
 */
WebGLReplay.prototype.setUpProgram = function(gl, context, size, pixelRatio) {};


/**
 * @abstract
 * @protected
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/render/webgl/circlereplay/defaultshader/Locations|
           module:ol/render/webgl/linestringreplay/defaultshader/Locations|
           module:ol/render/webgl/polygonreplay/defaultshader/Locations|
           module:ol/render/webgl/texturereplay/defaultshader/Locations} locations Locations.
 */
WebGLReplay.prototype.shutDownProgram = function(gl, locations) {};


/**
 * @abstract
 * @protected
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @param {boolean} hitDetection Hit detection mode.
 */
WebGLReplay.prototype.drawReplay = function(gl, context, skippedFeaturesHash, hitDetection) {};


/**
 * @abstract
 * @protected
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T|undefined} featureCallback Feature callback.
 * @param {module:ol/extent~Extent=} opt_hitExtent Hit extent: Only features intersecting this extent are checked.
 * @return {T|undefined} Callback result.
 * @template T
 */
WebGLReplay.prototype.drawHitDetectionReplayOneByOne = function(gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {};


/**
 * @protected
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T|undefined} featureCallback Feature callback.
 * @param {boolean} oneByOne Draw features one-by-one for the hit-detecion.
 * @param {module:ol/extent~Extent=} opt_hitExtent Hit extent: Only features intersecting
 *  this extent are checked.
 * @return {T|undefined} Callback result.
 * @template T
 */
WebGLReplay.prototype.drawHitDetectionReplay = function(gl, context, skippedFeaturesHash,
  featureCallback, oneByOne, opt_hitExtent) {
  if (!oneByOne) {
    // draw all hit-detection features in "once" (by texture group)
    return this.drawHitDetectionReplayAll(gl, context,
      skippedFeaturesHash, featureCallback);
  } else {
    // draw hit-detection features one by one
    return this.drawHitDetectionReplayOneByOne(gl, context,
      skippedFeaturesHash, featureCallback, opt_hitExtent);
  }
};


/**
 * @protected
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T|undefined} featureCallback Feature callback.
 * @return {T|undefined} Callback result.
 * @template T
 */
WebGLReplay.prototype.drawHitDetectionReplayAll = function(gl, context, skippedFeaturesHash,
  featureCallback) {
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  this.drawReplay(gl, context, skippedFeaturesHash, true);

  const result = featureCallback(null);
  if (result) {
    return result;
  } else {
    return undefined;
  }
};


/**
 * @param {module:ol/webgl/Context} context Context.
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {module:ol/size~Size} size Size.
 * @param {number} pixelRatio Pixel ratio.
 * @param {number} opacity Global opacity.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T|undefined} featureCallback Feature callback.
 * @param {boolean} oneByOne Draw features one-by-one for the hit-detecion.
 * @param {module:ol/extent~Extent=} opt_hitExtent Hit extent: Only features intersecting
 *  this extent are checked.
 * @return {T|undefined} Callback result.
 * @template T
 */
WebGLReplay.prototype.replay = function(context,
  center, resolution, rotation, size, pixelRatio,
  opacity, skippedFeaturesHash,
  featureCallback, oneByOne, opt_hitExtent) {
  const gl = context.getGL();
  let tmpStencil, tmpStencilFunc, tmpStencilMaskVal, tmpStencilRef, tmpStencilMask,
      tmpStencilOpFail, tmpStencilOpPass, tmpStencilOpZFail;

  if (this.lineStringReplay) {
    tmpStencil = gl.isEnabled(gl.STENCIL_TEST);
    tmpStencilFunc = gl.getParameter(gl.STENCIL_FUNC);
    tmpStencilMaskVal = gl.getParameter(gl.STENCIL_VALUE_MASK);
    tmpStencilRef = gl.getParameter(gl.STENCIL_REF);
    tmpStencilMask = gl.getParameter(gl.STENCIL_WRITEMASK);
    tmpStencilOpFail = gl.getParameter(gl.STENCIL_FAIL);
    tmpStencilOpPass = gl.getParameter(gl.STENCIL_PASS_DEPTH_PASS);
    tmpStencilOpZFail = gl.getParameter(gl.STENCIL_PASS_DEPTH_FAIL);

    gl.enable(gl.STENCIL_TEST);
    gl.clear(gl.STENCIL_BUFFER_BIT);
    gl.stencilMask(255);
    gl.stencilFunc(gl.ALWAYS, 1, 255);
    gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);

    this.lineStringReplay.replay(context,
      center, resolution, rotation, size, pixelRatio,
      opacity, skippedFeaturesHash,
      featureCallback, oneByOne, opt_hitExtent);

    gl.stencilMask(0);
    gl.stencilFunc(gl.NOTEQUAL, 1, 255);
  }

  context.bindBuffer(webgl["a" /* ARRAY_BUFFER */], this.verticesBuffer);

  context.bindBuffer(webgl["j" /* ELEMENT_ARRAY_BUFFER */], this.indicesBuffer);

  const locations = this.setUpProgram(gl, context, size, pixelRatio);

  // set the "uniform" values
  const projectionMatrix = Object(ol_transform["f" /* reset */])(this.projectionMatrix_);
  Object(ol_transform["h" /* scale */])(projectionMatrix, 2 / (resolution * size[0]), 2 / (resolution * size[1]));
  Object(ol_transform["g" /* rotate */])(projectionMatrix, -rotation);
  Object(ol_transform["j" /* translate */])(projectionMatrix, -(center[0] - this.origin[0]), -(center[1] - this.origin[1]));

  const offsetScaleMatrix = Object(ol_transform["f" /* reset */])(this.offsetScaleMatrix_);
  Object(ol_transform["h" /* scale */])(offsetScaleMatrix, 2 / size[0], 2 / size[1]);

  const offsetRotateMatrix = Object(ol_transform["f" /* reset */])(this.offsetRotateMatrix_);
  if (rotation !== 0) {
    Object(ol_transform["g" /* rotate */])(offsetRotateMatrix, -rotation);
  }

  gl.uniformMatrix4fv(locations.u_projectionMatrix, false,
    fromTransform(this.tmpMat4_, projectionMatrix));
  gl.uniformMatrix4fv(locations.u_offsetScaleMatrix, false,
    fromTransform(this.tmpMat4_, offsetScaleMatrix));
  gl.uniformMatrix4fv(locations.u_offsetRotateMatrix, false,
    fromTransform(this.tmpMat4_, offsetRotateMatrix));
  gl.uniform1f(locations.u_opacity, opacity);

  // draw!
  let result;
  if (featureCallback === undefined) {
    this.drawReplay(gl, context, skippedFeaturesHash, false);
  } else {
    // draw feature by feature for the hit-detection
    result = this.drawHitDetectionReplay(gl, context, skippedFeaturesHash,
      featureCallback, oneByOne, opt_hitExtent);
  }

  // disable the vertex attrib arrays
  this.shutDownProgram(gl, locations);

  if (this.lineStringReplay) {
    if (!tmpStencil) {
      gl.disable(gl.STENCIL_TEST);
    }
    gl.clear(gl.STENCIL_BUFFER_BIT);
    gl.stencilFunc(/** @type {number} */ (tmpStencilFunc),
      /** @type {number} */ (tmpStencilRef), /** @type {number} */ (tmpStencilMaskVal));
    gl.stencilMask(/** @type {number} */ (tmpStencilMask));
    gl.stencilOp(/** @type {number} */ (tmpStencilOpFail),
      /** @type {number} */ (tmpStencilOpZFail), /** @type {number} */ (tmpStencilOpPass));
  }

  return result;
};

/**
 * @protected
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {number} start Start index.
 * @param {number} end End index.
 */
WebGLReplay.prototype.drawElements = function(
  gl, context, start, end) {
  const elementType = context.hasOESElementIndexUint ?
    webgl["I" /* UNSIGNED_INT */] : webgl["J" /* UNSIGNED_SHORT */];
  const elementSize = context.hasOESElementIndexUint ? 4 : 2;

  const numItems = end - start;
  const offsetInBytes = start * elementSize;
  gl.drawElements(webgl["F" /* TRIANGLES */], numItems, elementType, offsetInBytes);
};
/* harmony default export */ var Replay = (WebGLReplay);

// CONCATENATED MODULE: ../src/ol/render/webgl.js
/**
 * @module ol/render/webgl
 */


/**
 * @const
 * @type {string}
 */
const DEFAULT_FONT = '10px sans-serif';


/**
 * @const
 * @type {module:ol/color~Color}
 */
const DEFAULT_FILLSTYLE = [0.0, 0.0, 0.0, 1.0];


/**
 * @const
 * @type {string}
 */
const DEFAULT_LINECAP = 'round';


/**
 * @const
 * @type {Array.<number>}
 */
const DEFAULT_LINEDASH = [];


/**
 * @const
 * @type {number}
 */
const DEFAULT_LINEDASHOFFSET = 0;


/**
 * @const
 * @type {string}
 */
const DEFAULT_LINEJOIN = 'round';


/**
 * @const
 * @type {number}
 */
const DEFAULT_MITERLIMIT = 10;

/**
 * @const
 * @type {module:ol/color~Color}
 */
const DEFAULT_STROKESTYLE = [0.0, 0.0, 0.0, 1.0];


/**
 * @const
 * @type {number}
 */
const DEFAULT_TEXTALIGN = 0.5;


/**
 * @const
 * @type {number}
 */
const DEFAULT_TEXTBASELINE = 0.5;


/**
 * @const
 * @type {number}
 */
const DEFAULT_LINEWIDTH = 1;

/**
 * @const
 * @type {number}
 */
const EPSILON = Number.EPSILON || 2.220446049250313e-16;

/**
 * Calculates the orientation of a triangle based on the determinant method.
 * @param {number} x1 First X coordinate.
 * @param {number} y1 First Y coordinate.
 * @param {number} x2 Second X coordinate.
 * @param {number} y2 Second Y coordinate.
 * @param {number} x3 Third X coordinate.
 * @param {number} y3 Third Y coordinate.
 * @return {boolean|undefined} Triangle is clockwise.
 */
const triangleIsCounterClockwise = function(x1, y1, x2, y2, x3, y3) {
  const area = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1);
  return (area <= EPSILON && area >= -EPSILON) ?
    undefined : area > 0;
};


// CONCATENATED MODULE: ../src/ol/webgl/Buffer.js
/**
 * @module ol/webgl/Buffer
 */


/**
 * @enum {number}
 */
const BufferUsage = {
  STATIC_DRAW: webgl["w" /* STATIC_DRAW */],
  STREAM_DRAW: webgl["y" /* STREAM_DRAW */],
  DYNAMIC_DRAW: webgl["i" /* DYNAMIC_DRAW */]
};

/**
 * @constructor
 * @param {Array.<number>=} opt_arr Array.
 * @param {number=} opt_usage Usage.
 * @struct
 */
const WebGLBuffer = function(opt_arr, opt_usage) {

  /**
   * @private
   * @type {Array.<number>}
   */
  this.arr_ = opt_arr !== undefined ? opt_arr : [];

  /**
   * @private
   * @type {number}
   */
  this.usage_ = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;

};


/**
 * @return {Array.<number>} Array.
 */
WebGLBuffer.prototype.getArray = function() {
  return this.arr_;
};


/**
 * @return {number} Usage.
 */
WebGLBuffer.prototype.getUsage = function() {
  return this.usage_;
};

/* harmony default export */ var Buffer = (WebGLBuffer);

// CONCATENATED MODULE: ../src/ol/render/webgl/CircleReplay.js
/**
 * @module ol/render/webgl/CircleReplay
 */













/**
 * @constructor
 * @extends {module:ol/render/webgl/Replay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Max extent.
 * @struct
 */
const WebGLCircleReplay = function(tolerance, maxExtent) {
  Replay.call(this, tolerance, maxExtent);

  /**
   * @private
   * @type {module:ol/render/webgl/circlereplay/defaultshader/Locations}
   */
  this.defaultLocations_ = null;

  /**
   * @private
   * @type {Array.<Array.<Array.<number>|number>>}
   */
  this.styles_ = [];

  /**
   * @private
   * @type {Array.<number>}
   */
  this.styleIndices_ = [];

  /**
   * @private
   * @type {number}
   */
  this.radius_ = 0;

  /**
   * @private
   * @type {{fillColor: (Array.<number>|null),
   *         strokeColor: (Array.<number>|null),
   *         lineDash: Array.<number>,
   *         lineDashOffset: (number|undefined),
   *         lineWidth: (number|undefined),
   *         changed: boolean}|null}
   */
  this.state_ = {
    fillColor: null,
    strokeColor: null,
    lineDash: null,
    lineDashOffset: undefined,
    lineWidth: undefined,
    changed: false
  };

};

Object(util["c" /* inherits */])(WebGLCircleReplay, Replay);


/**
 * @private
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 */
WebGLCircleReplay.prototype.drawCoordinates_ = function(
  flatCoordinates, offset, end, stride) {
  let numVertices = this.vertices.length;
  let numIndices = this.indices.length;
  let n = numVertices / 4;
  let i, ii;
  for (i = offset, ii = end; i < ii; i += stride) {
    this.vertices[numVertices++] = flatCoordinates[i];
    this.vertices[numVertices++] = flatCoordinates[i + 1];
    this.vertices[numVertices++] = 0;
    this.vertices[numVertices++] = this.radius_;

    this.vertices[numVertices++] = flatCoordinates[i];
    this.vertices[numVertices++] = flatCoordinates[i + 1];
    this.vertices[numVertices++] = 1;
    this.vertices[numVertices++] = this.radius_;

    this.vertices[numVertices++] = flatCoordinates[i];
    this.vertices[numVertices++] = flatCoordinates[i + 1];
    this.vertices[numVertices++] = 2;
    this.vertices[numVertices++] = this.radius_;

    this.vertices[numVertices++] = flatCoordinates[i];
    this.vertices[numVertices++] = flatCoordinates[i + 1];
    this.vertices[numVertices++] = 3;
    this.vertices[numVertices++] = this.radius_;

    this.indices[numIndices++] = n;
    this.indices[numIndices++] = n + 1;
    this.indices[numIndices++] = n + 2;

    this.indices[numIndices++] = n + 2;
    this.indices[numIndices++] = n + 3;
    this.indices[numIndices++] = n;

    n += 4;
  }
};


/**
 * @inheritDoc
 */
WebGLCircleReplay.prototype.drawCircle = function(circleGeometry, feature) {
  const radius = circleGeometry.getRadius();
  const stride = circleGeometry.getStride();
  if (radius) {
    this.startIndices.push(this.indices.length);
    this.startIndicesFeature.push(feature);
    if (this.state_.changed) {
      this.styleIndices_.push(this.indices.length);
      this.state_.changed = false;
    }

    this.radius_ = radius;
    let flatCoordinates = circleGeometry.getFlatCoordinates();
    flatCoordinates = Object(flat_transform["d" /* translate */])(flatCoordinates, 0, 2,
      stride, -this.origin[0], -this.origin[1]);
    this.drawCoordinates_(flatCoordinates, 0, 2, stride);
  } else {
    if (this.state_.changed) {
      this.styles_.pop();
      if (this.styles_.length) {
        const lastState = this.styles_[this.styles_.length - 1];
        this.state_.fillColor =  /** @type {Array.<number>} */ (lastState[0]);
        this.state_.strokeColor = /** @type {Array.<number>} */ (lastState[1]);
        this.state_.lineWidth = /** @type {number} */ (lastState[2]);
        this.state_.changed = false;
      }
    }
  }
};


/**
 * @inheritDoc
 **/
WebGLCircleReplay.prototype.finish = function(context) {
  // create, bind, and populate the vertices buffer
  this.verticesBuffer = new Buffer(this.vertices);

  // create, bind, and populate the indices buffer
  this.indicesBuffer = new Buffer(this.indices);

  this.startIndices.push(this.indices.length);

  //Clean up, if there is nothing to draw
  if (this.styleIndices_.length === 0 && this.styles_.length > 0) {
    this.styles_ = [];
  }

  this.vertices = null;
  this.indices = null;
};


/**
 * @inheritDoc
 */
WebGLCircleReplay.prototype.getDeleteResourcesFunction = function(context) {
  // We only delete our stuff here. The shaders and the program may
  // be used by other CircleReplay instances (for other layers). And
  // they will be deleted when disposing of the module:ol/webgl/Context~WebGLContext
  // object.
  const verticesBuffer = this.verticesBuffer;
  const indicesBuffer = this.indicesBuffer;
  return function() {
    context.deleteBuffer(verticesBuffer);
    context.deleteBuffer(indicesBuffer);
  };
};


/**
 * @inheritDoc
 */
WebGLCircleReplay.prototype.setUpProgram = function(gl, context, size, pixelRatio) {
  // get the program
  const program = context.getProgram(fragment, vertex);

  // get the locations
  let locations;
  if (!this.defaultLocations_) {
    locations = new defaultshader_Locations(gl, program);
    this.defaultLocations_ = locations;
  } else {
    locations = this.defaultLocations_;
  }

  context.useProgram(program);

  // enable the vertex attrib arrays
  gl.enableVertexAttribArray(locations.a_position);
  gl.vertexAttribPointer(locations.a_position, 2, webgl["l" /* FLOAT */],
    false, 16, 0);

  gl.enableVertexAttribArray(locations.a_instruction);
  gl.vertexAttribPointer(locations.a_instruction, 1, webgl["l" /* FLOAT */],
    false, 16, 8);

  gl.enableVertexAttribArray(locations.a_radius);
  gl.vertexAttribPointer(locations.a_radius, 1, webgl["l" /* FLOAT */],
    false, 16, 12);

  // Enable renderer specific uniforms.
  gl.uniform2fv(locations.u_size, size);
  gl.uniform1f(locations.u_pixelRatio, pixelRatio);

  return locations;
};


/**
 * @inheritDoc
 */
WebGLCircleReplay.prototype.shutDownProgram = function(gl, locations) {
  gl.disableVertexAttribArray(locations.a_position);
  gl.disableVertexAttribArray(locations.a_instruction);
  gl.disableVertexAttribArray(locations.a_radius);
};


/**
 * @inheritDoc
 */
WebGLCircleReplay.prototype.drawReplay = function(gl, context, skippedFeaturesHash, hitDetection) {
  if (!Object(obj["d" /* isEmpty */])(skippedFeaturesHash)) {
    this.drawReplaySkipping_(gl, context, skippedFeaturesHash);
  } else {
    //Draw by style groups to minimize drawElements() calls.
    let i, start, end, nextStyle;
    end = this.startIndices[this.startIndices.length - 1];
    for (i = this.styleIndices_.length - 1; i >= 0; --i) {
      start = this.styleIndices_[i];
      nextStyle = this.styles_[i];
      this.setFillStyle_(gl, /** @type {Array.<number>} */ (nextStyle[0]));
      this.setStrokeStyle_(gl, /** @type {Array.<number>} */ (nextStyle[1]),
        /** @type {number} */ (nextStyle[2]));
      this.drawElements(gl, context, start, end);
      end = start;
    }
  }
};


/**
 * @inheritDoc
 */
WebGLCircleReplay.prototype.drawHitDetectionReplayOneByOne = function(gl, context, skippedFeaturesHash,
  featureCallback, opt_hitExtent) {
  let i, start, end, nextStyle, groupStart, feature, featureUid, featureIndex;
  featureIndex = this.startIndices.length - 2;
  end = this.startIndices[featureIndex + 1];
  for (i = this.styleIndices_.length - 1; i >= 0; --i) {
    nextStyle = this.styles_[i];
    this.setFillStyle_(gl, /** @type {Array.<number>} */ (nextStyle[0]));
    this.setStrokeStyle_(gl, /** @type {Array.<number>} */ (nextStyle[1]),
      /** @type {number} */ (nextStyle[2]));
    groupStart = this.styleIndices_[i];

    while (featureIndex >= 0 &&
        this.startIndices[featureIndex] >= groupStart) {
      start = this.startIndices[featureIndex];
      feature = this.startIndicesFeature[featureIndex];
      featureUid = Object(util["b" /* getUid */])(feature).toString();

      if (skippedFeaturesHash[featureUid] === undefined &&
          feature.getGeometry() &&
          (opt_hitExtent === undefined || Object(ol_extent["F" /* intersects */])(
            /** @type {Array<number>} */ (opt_hitExtent),
            feature.getGeometry().getExtent()))) {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        this.drawElements(gl, context, start, end);

        const result = featureCallback(feature);

        if (result) {
          return result;
        }

      }
      featureIndex--;
      end = start;
    }
  }
  return undefined;
};


/**
 * @private
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {Object} skippedFeaturesHash Ids of features to skip.
 */
WebGLCircleReplay.prototype.drawReplaySkipping_ = function(gl, context, skippedFeaturesHash) {
  let i, start, end, nextStyle, groupStart, feature, featureUid, featureIndex, featureStart;
  featureIndex = this.startIndices.length - 2;
  end = start = this.startIndices[featureIndex + 1];
  for (i = this.styleIndices_.length - 1; i >= 0; --i) {
    nextStyle = this.styles_[i];
    this.setFillStyle_(gl, /** @type {Array.<number>} */ (nextStyle[0]));
    this.setStrokeStyle_(gl, /** @type {Array.<number>} */ (nextStyle[1]),
      /** @type {number} */ (nextStyle[2]));
    groupStart = this.styleIndices_[i];

    while (featureIndex >= 0 &&
        this.startIndices[featureIndex] >= groupStart) {
      featureStart = this.startIndices[featureIndex];
      feature = this.startIndicesFeature[featureIndex];
      featureUid = Object(util["b" /* getUid */])(feature).toString();

      if (skippedFeaturesHash[featureUid]) {
        if (start !== end) {
          this.drawElements(gl, context, start, end);
        }
        end = featureStart;
      }
      featureIndex--;
      start = featureStart;
    }
    if (start !== end) {
      this.drawElements(gl, context, start, end);
    }
    start = end = groupStart;
  }
};


/**
 * @private
 * @param {WebGLRenderingContext} gl gl.
 * @param {Array.<number>} color Color.
 */
WebGLCircleReplay.prototype.setFillStyle_ = function(gl, color) {
  gl.uniform4fv(this.defaultLocations_.u_fillColor, color);
};


/**
 * @private
 * @param {WebGLRenderingContext} gl gl.
 * @param {Array.<number>} color Color.
 * @param {number} lineWidth Line width.
 */
WebGLCircleReplay.prototype.setStrokeStyle_ = function(gl, color, lineWidth) {
  gl.uniform4fv(this.defaultLocations_.u_strokeColor, color);
  gl.uniform1f(this.defaultLocations_.u_lineWidth, lineWidth);
};


/**
 * @inheritDoc
 */
WebGLCircleReplay.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {
  let strokeStyleColor, strokeStyleWidth;
  if (strokeStyle) {
    const strokeStyleLineDash = strokeStyle.getLineDash();
    this.state_.lineDash = strokeStyleLineDash ?
      strokeStyleLineDash : DEFAULT_LINEDASH;
    const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
    this.state_.lineDashOffset = strokeStyleLineDashOffset ?
      strokeStyleLineDashOffset : DEFAULT_LINEDASHOFFSET;
    strokeStyleColor = strokeStyle.getColor();
    if (!(strokeStyleColor instanceof CanvasGradient) &&
        !(strokeStyleColor instanceof CanvasPattern)) {
      strokeStyleColor = Object(color["a" /* asArray */])(strokeStyleColor).map(function(c, i) {
        return i != 3 ? c / 255 : c;
      }) || DEFAULT_STROKESTYLE;
    } else {
      strokeStyleColor = DEFAULT_STROKESTYLE;
    }
    strokeStyleWidth = strokeStyle.getWidth();
    strokeStyleWidth = strokeStyleWidth !== undefined ?
      strokeStyleWidth : DEFAULT_LINEWIDTH;
  } else {
    strokeStyleColor = [0, 0, 0, 0];
    strokeStyleWidth = 0;
  }
  let fillStyleColor = fillStyle ? fillStyle.getColor() : [0, 0, 0, 0];
  if (!(fillStyleColor instanceof CanvasGradient) &&
      !(fillStyleColor instanceof CanvasPattern)) {
    fillStyleColor = Object(color["a" /* asArray */])(fillStyleColor).map(function(c, i) {
      return i != 3 ? c / 255 : c;
    }) || DEFAULT_FILLSTYLE;
  } else {
    fillStyleColor = DEFAULT_FILLSTYLE;
  }
  if (!this.state_.strokeColor || !Object(array["b" /* equals */])(this.state_.strokeColor, strokeStyleColor) ||
      !this.state_.fillColor || !Object(array["b" /* equals */])(this.state_.fillColor, fillStyleColor) ||
      this.state_.lineWidth !== strokeStyleWidth) {
    this.state_.changed = true;
    this.state_.fillColor = fillStyleColor;
    this.state_.strokeColor = strokeStyleColor;
    this.state_.lineWidth = strokeStyleWidth;
    this.styles_.push([fillStyleColor, strokeStyleColor, strokeStyleWidth]);
  }
};
/* harmony default export */ var CircleReplay = (WebGLCircleReplay);

// CONCATENATED MODULE: ../src/ol/render/webgl/texturereplay/defaultshader.js
/**
 * @module ol/render/webgl/texturereplay/defaultshader
 */
// This file is automatically generated, do not edit.
// Run `make shaders` to generate, and commit the result.





const defaultshader_fragment = new Fragment(webgl["g" /* DEBUG */] ?
  'precision mediump float;\nvarying vec2 v_texCoord;\nvarying float v_opacity;\n\nuniform float u_opacity;\nuniform sampler2D u_image;\n\nvoid main(void) {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  gl_FragColor.rgb = texColor.rgb;\n  float alpha = texColor.a * v_opacity * u_opacity;\n  if (alpha == 0.0) {\n    discard;\n  }\n  gl_FragColor.a = alpha;\n}\n' :
  'precision mediump float;varying vec2 a;varying float b;uniform float k;uniform sampler2D l;void main(void){vec4 texColor=texture2D(l,a);gl_FragColor.rgb=texColor.rgb;float alpha=texColor.a*b*k;if(alpha==0.0){discard;}gl_FragColor.a=alpha;}');

const defaultshader_vertex = new Vertex(webgl["g" /* DEBUG */] ?
  'varying vec2 v_texCoord;\nvarying float v_opacity;\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nattribute vec2 a_offsets;\nattribute float a_opacity;\nattribute float a_rotateWithView;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix;\n  if (a_rotateWithView == 1.0) {\n    offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  }\n  vec4 offsets = offsetMatrix * vec4(a_offsets, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  v_texCoord = a_texCoord;\n  v_opacity = a_opacity;\n}\n\n\n' :
  'varying vec2 a;varying float b;attribute vec2 c;attribute vec2 d;attribute vec2 e;attribute float f;attribute float g;uniform mat4 h;uniform mat4 i;uniform mat4 j;void main(void){mat4 offsetMatrix=i;if(g==1.0){offsetMatrix=i*j;}vec4 offsets=offsetMatrix*vec4(e,0.0,0.0);gl_Position=h*vec4(c,0.0,1.0)+offsets;a=d;b=f;}');

// CONCATENATED MODULE: ../src/ol/render/webgl/texturereplay/defaultshader/Locations.js
/**
 * @module ol/render/webgl/texturereplay/defaultshader/Locations
 */
// This file is automatically generated, do not edit
// Run `make shaders` to generate, and commit the result.



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
const Locations_Locations = function(gl, program) {

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_projectionMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_projectionMatrix' : 'h');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_offsetScaleMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_offsetScaleMatrix' : 'i');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_offsetRotateMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_offsetRotateMatrix' : 'j');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_opacity = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_opacity' : 'k');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_image = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_image' : 'l');

  /**
   * @type {number}
   */
  this.a_position = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_position' : 'c');

  /**
   * @type {number}
   */
  this.a_texCoord = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_texCoord' : 'd');

  /**
   * @type {number}
   */
  this.a_offsets = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_offsets' : 'e');

  /**
   * @type {number}
   */
  this.a_opacity = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_opacity' : 'f');

  /**
   * @type {number}
   */
  this.a_rotateWithView = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_rotateWithView' : 'g');
};

/* harmony default export */ var texturereplay_defaultshader_Locations = (Locations_Locations);

// EXTERNAL MODULE: ../src/ol/Disposable.js
var Disposable = __webpack_require__(123);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// CONCATENATED MODULE: ../src/ol/webgl/ContextEventType.js
/**
 * @module ol/webgl/ContextEventType
 */

/**
 * @enum {string}
 */
/* harmony default export */ var ContextEventType = ({
  LOST: 'webglcontextlost',
  RESTORED: 'webglcontextrestored'
});

// CONCATENATED MODULE: ../src/ol/webgl/Context.js
/**
 * @module ol/webgl/Context
 */










/**
 * @typedef {Object} BufferCacheEntry
 * @property {module:ol/webgl/Buffer} buf
 * @property {WebGLBuffer} buffer
 */


/**
 * @classdesc
 * A WebGL context for accessing low-level WebGL capabilities.
 *
 * @constructor
 * @extends {module:ol/Disposable}
 * @param {HTMLCanvasElement} canvas Canvas.
 * @param {WebGLRenderingContext} gl GL.
 */
const WebGLContext = function(canvas, gl) {

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = canvas;

  /**
   * @private
   * @type {WebGLRenderingContext}
   */
  this.gl_ = gl;

  /**
   * @private
   * @type {!Object.<string, module:ol/webgl/Context~BufferCacheEntry>}
   */
  this.bufferCache_ = {};

  /**
   * @private
   * @type {!Object.<string, WebGLShader>}
   */
  this.shaderCache_ = {};

  /**
   * @private
   * @type {!Object.<string, WebGLProgram>}
   */
  this.programCache_ = {};

  /**
   * @private
   * @type {WebGLProgram}
   */
  this.currentProgram_ = null;

  /**
   * @private
   * @type {WebGLFramebuffer}
   */
  this.hitDetectionFramebuffer_ = null;

  /**
   * @private
   * @type {WebGLTexture}
   */
  this.hitDetectionTexture_ = null;

  /**
   * @private
   * @type {WebGLRenderbuffer}
   */
  this.hitDetectionRenderbuffer_ = null;

  /**
   * @type {boolean}
   */
  this.hasOESElementIndexUint = Object(array["f" /* includes */])(webgl["k" /* EXTENSIONS */], 'OES_element_index_uint');

  // use the OES_element_index_uint extension if available
  if (this.hasOESElementIndexUint) {
    gl.getExtension('OES_element_index_uint');
  }

  Object(events["a" /* listen */])(this.canvas_, ContextEventType.LOST,
    this.handleWebGLContextLost, this);
  Object(events["a" /* listen */])(this.canvas_, ContextEventType.RESTORED,
    this.handleWebGLContextRestored, this);

};

Object(util["c" /* inherits */])(WebGLContext, Disposable["a" /* default */]);


/**
 * Just bind the buffer if it's in the cache. Otherwise create
 * the WebGL buffer, bind it, populate it, and add an entry to
 * the cache.
 * @param {number} target Target.
 * @param {module:ol/webgl/Buffer} buf Buffer.
 */
WebGLContext.prototype.bindBuffer = function(target, buf) {
  const gl = this.getGL();
  const arr = buf.getArray();
  const bufferKey = String(Object(util["b" /* getUid */])(buf));
  if (bufferKey in this.bufferCache_) {
    const bufferCacheEntry = this.bufferCache_[bufferKey];
    gl.bindBuffer(target, bufferCacheEntry.buffer);
  } else {
    const buffer = gl.createBuffer();
    gl.bindBuffer(target, buffer);
    let /** @type {ArrayBufferView} */ arrayBuffer;
    if (target == webgl["a" /* ARRAY_BUFFER */]) {
      arrayBuffer = new Float32Array(arr);
    } else if (target == webgl["j" /* ELEMENT_ARRAY_BUFFER */]) {
      arrayBuffer = this.hasOESElementIndexUint ?
        new Uint32Array(arr) : new Uint16Array(arr);
    }
    gl.bufferData(target, arrayBuffer, buf.getUsage());
    this.bufferCache_[bufferKey] = {
      buf: buf,
      buffer: buffer
    };
  }
};


/**
 * @param {module:ol/webgl/Buffer} buf Buffer.
 */
WebGLContext.prototype.deleteBuffer = function(buf) {
  const gl = this.getGL();
  const bufferKey = String(Object(util["b" /* getUid */])(buf));
  const bufferCacheEntry = this.bufferCache_[bufferKey];
  if (!gl.isContextLost()) {
    gl.deleteBuffer(bufferCacheEntry.buffer);
  }
  delete this.bufferCache_[bufferKey];
};


/**
 * @inheritDoc
 */
WebGLContext.prototype.disposeInternal = function() {
  Object(events["d" /* unlistenAll */])(this.canvas_);
  const gl = this.getGL();
  if (!gl.isContextLost()) {
    for (const key in this.bufferCache_) {
      gl.deleteBuffer(this.bufferCache_[key].buffer);
    }
    for (const key in this.programCache_) {
      gl.deleteProgram(this.programCache_[key]);
    }
    for (const key in this.shaderCache_) {
      gl.deleteShader(this.shaderCache_[key]);
    }
    // delete objects for hit-detection
    gl.deleteFramebuffer(this.hitDetectionFramebuffer_);
    gl.deleteRenderbuffer(this.hitDetectionRenderbuffer_);
    gl.deleteTexture(this.hitDetectionTexture_);
  }
};


/**
 * @return {HTMLCanvasElement} Canvas.
 */
WebGLContext.prototype.getCanvas = function() {
  return this.canvas_;
};


/**
 * Get the WebGL rendering context
 * @return {WebGLRenderingContext} The rendering context.
 * @api
 */
WebGLContext.prototype.getGL = function() {
  return this.gl_;
};


/**
 * Get the frame buffer for hit detection.
 * @return {WebGLFramebuffer} The hit detection frame buffer.
 */
WebGLContext.prototype.getHitDetectionFramebuffer = function() {
  if (!this.hitDetectionFramebuffer_) {
    this.initHitDetectionFramebuffer_();
  }
  return this.hitDetectionFramebuffer_;
};


/**
 * Get shader from the cache if it's in the cache. Otherwise, create
 * the WebGL shader, compile it, and add entry to cache.
 * @param {module:ol/webgl/Shader} shaderObject Shader object.
 * @return {WebGLShader} Shader.
 */
WebGLContext.prototype.getShader = function(shaderObject) {
  const shaderKey = String(Object(util["b" /* getUid */])(shaderObject));
  if (shaderKey in this.shaderCache_) {
    return this.shaderCache_[shaderKey];
  } else {
    const gl = this.getGL();
    const shader = gl.createShader(shaderObject.getType());
    gl.shaderSource(shader, shaderObject.getSource());
    gl.compileShader(shader);
    this.shaderCache_[shaderKey] = shader;
    return shader;
  }
};


/**
 * Get the program from the cache if it's in the cache. Otherwise create
 * the WebGL program, attach the shaders to it, and add an entry to the
 * cache.
 * @param {module:ol/webgl/Fragment} fragmentShaderObject Fragment shader.
 * @param {module:ol/webgl/Vertex} vertexShaderObject Vertex shader.
 * @return {WebGLProgram} Program.
 */
WebGLContext.prototype.getProgram = function(fragmentShaderObject, vertexShaderObject) {
  const programKey = Object(util["b" /* getUid */])(fragmentShaderObject) + '/' + Object(util["b" /* getUid */])(vertexShaderObject);
  if (programKey in this.programCache_) {
    return this.programCache_[programKey];
  } else {
    const gl = this.getGL();
    const program = gl.createProgram();
    gl.attachShader(program, this.getShader(fragmentShaderObject));
    gl.attachShader(program, this.getShader(vertexShaderObject));
    gl.linkProgram(program);
    this.programCache_[programKey] = program;
    return program;
  }
};


/**
 * FIXME empty description for jsdoc
 */
WebGLContext.prototype.handleWebGLContextLost = function() {
  Object(obj["b" /* clear */])(this.bufferCache_);
  Object(obj["b" /* clear */])(this.shaderCache_);
  Object(obj["b" /* clear */])(this.programCache_);
  this.currentProgram_ = null;
  this.hitDetectionFramebuffer_ = null;
  this.hitDetectionTexture_ = null;
  this.hitDetectionRenderbuffer_ = null;
};


/**
 * FIXME empty description for jsdoc
 */
WebGLContext.prototype.handleWebGLContextRestored = function() {
};


/**
 * Creates a 1x1 pixel framebuffer for the hit-detection.
 * @private
 */
WebGLContext.prototype.initHitDetectionFramebuffer_ = function() {
  const gl = this.gl_;
  const framebuffer = gl.createFramebuffer();
  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);

  const texture = createEmptyTexture(gl, 1, 1);
  const renderbuffer = gl.createRenderbuffer();
  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 1, 1);
  gl.framebufferTexture2D(
    gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT,
    gl.RENDERBUFFER, renderbuffer);

  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);

  this.hitDetectionFramebuffer_ = framebuffer;
  this.hitDetectionTexture_ = texture;
  this.hitDetectionRenderbuffer_ = renderbuffer;
};


/**
 * Use a program.  If the program is already in use, this will return `false`.
 * @param {WebGLProgram} program Program.
 * @return {boolean} Changed.
 * @api
 */
WebGLContext.prototype.useProgram = function(program) {
  if (program == this.currentProgram_) {
    return false;
  } else {
    const gl = this.getGL();
    gl.useProgram(program);
    this.currentProgram_ = program;
    return true;
  }
};


/**
 * @param {WebGLRenderingContext} gl WebGL rendering context.
 * @param {number=} opt_wrapS wrapS.
 * @param {number=} opt_wrapT wrapT.
 * @return {WebGLTexture} The texture.
 */
function createTextureInternal(gl, opt_wrapS, opt_wrapT) {
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

  if (opt_wrapS !== undefined) {
    gl.texParameteri(
      webgl["A" /* TEXTURE_2D */], webgl["D" /* TEXTURE_WRAP_S */], opt_wrapS);
  }
  if (opt_wrapT !== undefined) {
    gl.texParameteri(
      webgl["A" /* TEXTURE_2D */], webgl["E" /* TEXTURE_WRAP_T */], opt_wrapT);
  }

  return texture;
}


/**
 * @param {WebGLRenderingContext} gl WebGL rendering context.
 * @param {number} width Width.
 * @param {number} height Height.
 * @param {number=} opt_wrapS wrapS.
 * @param {number=} opt_wrapT wrapT.
 * @return {WebGLTexture} The texture.
 */
function createEmptyTexture(gl, width, height, opt_wrapS, opt_wrapT) {
  const texture = createTextureInternal(gl, opt_wrapS, opt_wrapT);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
  return texture;
}


/**
 * @param {WebGLRenderingContext} gl WebGL rendering context.
 * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
 * @param {number=} opt_wrapS wrapS.
 * @param {number=} opt_wrapT wrapT.
 * @return {WebGLTexture} The texture.
 */
function createTexture(gl, image, opt_wrapS, opt_wrapT) {
  const texture = createTextureInternal(gl, opt_wrapS, opt_wrapT);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
  return texture;
}

/* harmony default export */ var Context = (WebGLContext);

// CONCATENATED MODULE: ../src/ol/render/webgl/TextureReplay.js
/**
 * @module ol/render/webgl/TextureReplay
 */









/**
 * @constructor
 * @abstract
 * @extends {module:ol/render/webgl/Replay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Max extent.
 * @struct
 */
const WebGLTextureReplay = function(tolerance, maxExtent) {
  Replay.call(this, tolerance, maxExtent);

  /**
   * @type {number|undefined}
   * @protected
   */
  this.anchorX = undefined;

  /**
   * @type {number|undefined}
   * @protected
   */
  this.anchorY = undefined;

  /**
   * @type {Array.<number>}
   * @protected
   */
  this.groupIndices = [];

  /**
   * @type {Array.<number>}
   * @protected
   */
  this.hitDetectionGroupIndices = [];

  /**
   * @type {number|undefined}
   * @protected
   */
  this.height = undefined;

  /**
   * @type {number|undefined}
   * @protected
   */
  this.imageHeight = undefined;

  /**
   * @type {number|undefined}
   * @protected
   */
  this.imageWidth = undefined;

  /**
   * @protected
   * @type {module:ol/render/webgl/texturereplay/defaultshader/Locations}
   */
  this.defaultLocations = null;

  /**
   * @protected
   * @type {number|undefined}
   */
  this.opacity = undefined;

  /**
   * @type {number|undefined}
   * @protected
   */
  this.originX = undefined;

  /**
   * @type {number|undefined}
   * @protected
   */
  this.originY = undefined;

  /**
   * @protected
   * @type {boolean|undefined}
   */
  this.rotateWithView = undefined;

  /**
   * @protected
   * @type {number|undefined}
   */
  this.rotation = undefined;

  /**
   * @protected
   * @type {number|undefined}
   */
  this.scale = undefined;

  /**
   * @type {number|undefined}
   * @protected
   */
  this.width = undefined;
};

Object(util["c" /* inherits */])(WebGLTextureReplay, Replay);


/**
 * @inheritDoc
 */
WebGLTextureReplay.prototype.getDeleteResourcesFunction = function(context) {
  const verticesBuffer = this.verticesBuffer;
  const indicesBuffer = this.indicesBuffer;
  const textures = this.getTextures(true);
  const gl = context.getGL();
  return function() {
    if (!gl.isContextLost()) {
      let i, ii;
      for (i = 0, ii = textures.length; i < ii; ++i) {
        gl.deleteTexture(textures[i]);
      }
    }
    context.deleteBuffer(verticesBuffer);
    context.deleteBuffer(indicesBuffer);
  };
};


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {number} My end.
 * @protected
 */
WebGLTextureReplay.prototype.drawCoordinates = function(flatCoordinates, offset, end, stride) {
  const anchorX = /** @type {number} */ (this.anchorX);
  const anchorY = /** @type {number} */ (this.anchorY);
  const height = /** @type {number} */ (this.height);
  const imageHeight = /** @type {number} */ (this.imageHeight);
  const imageWidth = /** @type {number} */ (this.imageWidth);
  const opacity = /** @type {number} */ (this.opacity);
  const originX = /** @type {number} */ (this.originX);
  const originY = /** @type {number} */ (this.originY);
  const rotateWithView = this.rotateWithView ? 1.0 : 0.0;
  // this.rotation_ is anti-clockwise, but rotation is clockwise
  const rotation = /** @type {number} */ (-this.rotation);
  const scale = /** @type {number} */ (this.scale);
  const width = /** @type {number} */ (this.width);
  const cos = Math.cos(rotation);
  const sin = Math.sin(rotation);
  let numIndices = this.indices.length;
  let numVertices = this.vertices.length;
  let i, n, offsetX, offsetY, x, y;
  for (i = offset; i < end; i += stride) {
    x = flatCoordinates[i] - this.origin[0];
    y = flatCoordinates[i + 1] - this.origin[1];

    // There are 4 vertices per [x, y] point, one for each corner of the
    // rectangle we're going to draw. We'd use 1 vertex per [x, y] point if
    // WebGL supported Geometry Shaders (which can emit new vertices), but that
    // is not currently the case.
    //
    // And each vertex includes 8 values: the x and y coordinates, the x and
    // y offsets used to calculate the position of the corner, the u and
    // v texture coordinates for the corner, the opacity, and whether the
    // the image should be rotated with the view (rotateWithView).

    n = numVertices / 8;

    // bottom-left corner
    offsetX = -scale * anchorX;
    offsetY = -scale * (height - anchorY);
    this.vertices[numVertices++] = x;
    this.vertices[numVertices++] = y;
    this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
    this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
    this.vertices[numVertices++] = originX / imageWidth;
    this.vertices[numVertices++] = (originY + height) / imageHeight;
    this.vertices[numVertices++] = opacity;
    this.vertices[numVertices++] = rotateWithView;

    // bottom-right corner
    offsetX = scale * (width - anchorX);
    offsetY = -scale * (height - anchorY);
    this.vertices[numVertices++] = x;
    this.vertices[numVertices++] = y;
    this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
    this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
    this.vertices[numVertices++] = (originX + width) / imageWidth;
    this.vertices[numVertices++] = (originY + height) / imageHeight;
    this.vertices[numVertices++] = opacity;
    this.vertices[numVertices++] = rotateWithView;

    // top-right corner
    offsetX = scale * (width - anchorX);
    offsetY = scale * anchorY;
    this.vertices[numVertices++] = x;
    this.vertices[numVertices++] = y;
    this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
    this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
    this.vertices[numVertices++] = (originX + width) / imageWidth;
    this.vertices[numVertices++] = originY / imageHeight;
    this.vertices[numVertices++] = opacity;
    this.vertices[numVertices++] = rotateWithView;

    // top-left corner
    offsetX = -scale * anchorX;
    offsetY = scale * anchorY;
    this.vertices[numVertices++] = x;
    this.vertices[numVertices++] = y;
    this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
    this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
    this.vertices[numVertices++] = originX / imageWidth;
    this.vertices[numVertices++] = originY / imageHeight;
    this.vertices[numVertices++] = opacity;
    this.vertices[numVertices++] = rotateWithView;

    this.indices[numIndices++] = n;
    this.indices[numIndices++] = n + 1;
    this.indices[numIndices++] = n + 2;
    this.indices[numIndices++] = n;
    this.indices[numIndices++] = n + 2;
    this.indices[numIndices++] = n + 3;
  }

  return numVertices;
};


/**
 * @protected
 * @param {Array.<WebGLTexture>} textures Textures.
 * @param {Array.<HTMLCanvasElement|HTMLImageElement|HTMLVideoElement>} images Images.
 * @param {!Object.<string, WebGLTexture>} texturePerImage Texture cache.
 * @param {WebGLRenderingContext} gl Gl.
 */
WebGLTextureReplay.prototype.createTextures = function(textures, images, texturePerImage, gl) {
  let texture, image, uid, i;
  const ii = images.length;
  for (i = 0; i < ii; ++i) {
    image = images[i];

    uid = Object(util["b" /* getUid */])(image).toString();
    if (uid in texturePerImage) {
      texture = texturePerImage[uid];
    } else {
      texture = createTexture(
        gl, image, webgl["c" /* CLAMP_TO_EDGE */], webgl["c" /* CLAMP_TO_EDGE */]);
      texturePerImage[uid] = texture;
    }
    textures[i] = texture;
  }
};


/**
 * @inheritDoc
 */
WebGLTextureReplay.prototype.setUpProgram = function(gl, context, size, pixelRatio) {
  // get the program
  const program = context.getProgram(defaultshader_fragment, defaultshader_vertex);

  // get the locations
  let locations;
  if (!this.defaultLocations) {
    locations = new texturereplay_defaultshader_Locations(gl, program);
    this.defaultLocations = locations;
  } else {
    locations = this.defaultLocations;
  }

  // use the program (FIXME: use the return value)
  context.useProgram(program);

  // enable the vertex attrib arrays
  gl.enableVertexAttribArray(locations.a_position);
  gl.vertexAttribPointer(locations.a_position, 2, webgl["l" /* FLOAT */],
    false, 32, 0);

  gl.enableVertexAttribArray(locations.a_offsets);
  gl.vertexAttribPointer(locations.a_offsets, 2, webgl["l" /* FLOAT */],
    false, 32, 8);

  gl.enableVertexAttribArray(locations.a_texCoord);
  gl.vertexAttribPointer(locations.a_texCoord, 2, webgl["l" /* FLOAT */],
    false, 32, 16);

  gl.enableVertexAttribArray(locations.a_opacity);
  gl.vertexAttribPointer(locations.a_opacity, 1, webgl["l" /* FLOAT */],
    false, 32, 24);

  gl.enableVertexAttribArray(locations.a_rotateWithView);
  gl.vertexAttribPointer(locations.a_rotateWithView, 1, webgl["l" /* FLOAT */],
    false, 32, 28);

  return locations;
};


/**
 * @inheritDoc
 */
WebGLTextureReplay.prototype.shutDownProgram = function(gl, locations) {
  gl.disableVertexAttribArray(locations.a_position);
  gl.disableVertexAttribArray(locations.a_offsets);
  gl.disableVertexAttribArray(locations.a_texCoord);
  gl.disableVertexAttribArray(locations.a_opacity);
  gl.disableVertexAttribArray(locations.a_rotateWithView);
};


/**
 * @inheritDoc
 */
WebGLTextureReplay.prototype.drawReplay = function(gl, context, skippedFeaturesHash, hitDetection) {
  const textures = hitDetection ? this.getHitDetectionTextures() : this.getTextures();
  const groupIndices = hitDetection ? this.hitDetectionGroupIndices : this.groupIndices;

  if (!Object(obj["d" /* isEmpty */])(skippedFeaturesHash)) {
    this.drawReplaySkipping(gl, context, skippedFeaturesHash, textures, groupIndices);
  } else {
    let i, ii, start;
    for (i = 0, ii = textures.length, start = 0; i < ii; ++i) {
      gl.bindTexture(webgl["A" /* TEXTURE_2D */], textures[i]);
      const end = groupIndices[i];
      this.drawElements(gl, context, start, end);
      start = end;
    }
  }
};


/**
 * Draw the replay while paying attention to skipped features.
 *
 * This functions creates groups of features that can be drawn to together,
 * so that the number of `drawElements` calls is minimized.
 *
 * For example given the following texture groups:
 *
 *    Group 1: A B C
 *    Group 2: D [E] F G
 *
 * If feature E should be skipped, the following `drawElements` calls will be
 * made:
 *
 *    drawElements with feature A, B and C
 *    drawElements with feature D
 *    drawElements with feature F and G
 *
 * @protected
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features
 *  to skip.
 * @param {Array.<WebGLTexture>} textures Textures.
 * @param {Array.<number>} groupIndices Texture group indices.
 */
WebGLTextureReplay.prototype.drawReplaySkipping = function(gl, context, skippedFeaturesHash, textures,
  groupIndices) {
  let featureIndex = 0;

  let i, ii;
  for (i = 0, ii = textures.length; i < ii; ++i) {
    gl.bindTexture(webgl["A" /* TEXTURE_2D */], textures[i]);
    const groupStart = (i > 0) ? groupIndices[i - 1] : 0;
    const groupEnd = groupIndices[i];

    let start = groupStart;
    let end = groupStart;
    while (featureIndex < this.startIndices.length &&
        this.startIndices[featureIndex] <= groupEnd) {
      const feature = this.startIndicesFeature[featureIndex];

      const featureUid = Object(util["b" /* getUid */])(feature).toString();
      if (skippedFeaturesHash[featureUid] !== undefined) {
        // feature should be skipped
        if (start !== end) {
          // draw the features so far
          this.drawElements(gl, context, start, end);
        }
        // continue with the next feature
        start = (featureIndex === this.startIndices.length - 1) ?
          groupEnd : this.startIndices[featureIndex + 1];
        end = start;
      } else {
        // the feature is not skipped, augment the end index
        end = (featureIndex === this.startIndices.length - 1) ?
          groupEnd : this.startIndices[featureIndex + 1];
      }
      featureIndex++;
    }

    if (start !== end) {
      // draw the remaining features (in case there was no skipped feature
      // in this texture group, all features of a group are drawn together)
      this.drawElements(gl, context, start, end);
    }
  }
};


/**
 * @inheritDoc
 */
WebGLTextureReplay.prototype.drawHitDetectionReplayOneByOne = function(gl, context, skippedFeaturesHash,
  featureCallback, opt_hitExtent) {
  let i, groupStart, start, end, feature, featureUid;
  let featureIndex = this.startIndices.length - 1;
  const hitDetectionTextures = this.getHitDetectionTextures();
  for (i = hitDetectionTextures.length - 1; i >= 0; --i) {
    gl.bindTexture(webgl["A" /* TEXTURE_2D */], hitDetectionTextures[i]);
    groupStart = (i > 0) ? this.hitDetectionGroupIndices[i - 1] : 0;
    end = this.hitDetectionGroupIndices[i];

    // draw all features for this texture group
    while (featureIndex >= 0 &&
        this.startIndices[featureIndex] >= groupStart) {
      start = this.startIndices[featureIndex];
      feature = this.startIndicesFeature[featureIndex];
      featureUid = Object(util["b" /* getUid */])(feature).toString();

      if (skippedFeaturesHash[featureUid] === undefined &&
          feature.getGeometry() &&
          (opt_hitExtent === undefined || Object(ol_extent["F" /* intersects */])(
            /** @type {Array<number>} */ (opt_hitExtent),
            feature.getGeometry().getExtent()))) {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        this.drawElements(gl, context, start, end);

        const result = featureCallback(feature);
        if (result) {
          return result;
        }
      }

      end = start;
      featureIndex--;
    }
  }
  return undefined;
};


/**
 * @inheritDoc
 */
WebGLTextureReplay.prototype.finish = function(context) {
  this.anchorX = undefined;
  this.anchorY = undefined;
  this.height = undefined;
  this.imageHeight = undefined;
  this.imageWidth = undefined;
  this.indices = null;
  this.opacity = undefined;
  this.originX = undefined;
  this.originY = undefined;
  this.rotateWithView = undefined;
  this.rotation = undefined;
  this.scale = undefined;
  this.vertices = null;
  this.width = undefined;
};


/**
 * @abstract
 * @protected
 * @param {boolean=} opt_all Return hit detection textures with regular ones.
 * @returns {Array.<WebGLTexture>} Textures.
 */
WebGLTextureReplay.prototype.getTextures = function(opt_all) {};


/**
 * @abstract
 * @protected
 * @returns {Array.<WebGLTexture>} Textures.
 */
WebGLTextureReplay.prototype.getHitDetectionTextures = function() {};
/* harmony default export */ var TextureReplay = (WebGLTextureReplay);

// CONCATENATED MODULE: ../src/ol/render/webgl/ImageReplay.js
/**
 * @module ol/render/webgl/ImageReplay
 */




/**
 * @constructor
 * @extends {module:ol/render/webgl/TextureReplay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Max extent.
 * @struct
 */
const WebGLImageReplay = function(tolerance, maxExtent) {
  TextureReplay.call(this, tolerance, maxExtent);

  /**
   * @type {Array.<HTMLCanvasElement|HTMLImageElement|HTMLVideoElement>}
   * @protected
   */
  this.images_ = [];

  /**
   * @type {Array.<HTMLCanvasElement|HTMLImageElement|HTMLVideoElement>}
   * @protected
   */
  this.hitDetectionImages_ = [];

  /**
   * @type {Array.<WebGLTexture>}
   * @private
   */
  this.textures_ = [];

  /**
   * @type {Array.<WebGLTexture>}
   * @private
   */
  this.hitDetectionTextures_ = [];

};

Object(util["c" /* inherits */])(WebGLImageReplay, TextureReplay);


/**
 * @inheritDoc
 */
WebGLImageReplay.prototype.drawMultiPoint = function(multiPointGeometry, feature) {
  this.startIndices.push(this.indices.length);
  this.startIndicesFeature.push(feature);
  const flatCoordinates = multiPointGeometry.getFlatCoordinates();
  const stride = multiPointGeometry.getStride();
  this.drawCoordinates(
    flatCoordinates, 0, flatCoordinates.length, stride);
};


/**
 * @inheritDoc
 */
WebGLImageReplay.prototype.drawPoint = function(pointGeometry, feature) {
  this.startIndices.push(this.indices.length);
  this.startIndicesFeature.push(feature);
  const flatCoordinates = pointGeometry.getFlatCoordinates();
  const stride = pointGeometry.getStride();
  this.drawCoordinates(
    flatCoordinates, 0, flatCoordinates.length, stride);
};


/**
 * @inheritDoc
 */
WebGLImageReplay.prototype.finish = function(context) {
  const gl = context.getGL();

  this.groupIndices.push(this.indices.length);
  this.hitDetectionGroupIndices.push(this.indices.length);

  // create, bind, and populate the vertices buffer
  this.verticesBuffer = new Buffer(this.vertices);

  const indices = this.indices;

  // create, bind, and populate the indices buffer
  this.indicesBuffer = new Buffer(indices);

  // create textures
  /** @type {Object.<string, WebGLTexture>} */
  const texturePerImage = {};

  this.createTextures(this.textures_, this.images_, texturePerImage, gl);

  this.createTextures(this.hitDetectionTextures_, this.hitDetectionImages_,
    texturePerImage, gl);

  this.images_ = null;
  this.hitDetectionImages_ = null;
  TextureReplay.prototype.finish.call(this, context);
};


/**
 * @inheritDoc
 */
WebGLImageReplay.prototype.setImageStyle = function(imageStyle) {
  const anchor = imageStyle.getAnchor();
  const image = imageStyle.getImage(1);
  const imageSize = imageStyle.getImageSize();
  const hitDetectionImage = imageStyle.getHitDetectionImage(1);
  const opacity = imageStyle.getOpacity();
  const origin = imageStyle.getOrigin();
  const rotateWithView = imageStyle.getRotateWithView();
  const rotation = imageStyle.getRotation();
  const size = imageStyle.getSize();
  const scale = imageStyle.getScale();

  let currentImage;
  if (this.images_.length === 0) {
    this.images_.push(image);
  } else {
    currentImage = this.images_[this.images_.length - 1];
    if (Object(util["b" /* getUid */])(currentImage) != Object(util["b" /* getUid */])(image)) {
      this.groupIndices.push(this.indices.length);
      this.images_.push(image);
    }
  }

  if (this.hitDetectionImages_.length === 0) {
    this.hitDetectionImages_.push(hitDetectionImage);
  } else {
    currentImage =
        this.hitDetectionImages_[this.hitDetectionImages_.length - 1];
    if (Object(util["b" /* getUid */])(currentImage) != Object(util["b" /* getUid */])(hitDetectionImage)) {
      this.hitDetectionGroupIndices.push(this.indices.length);
      this.hitDetectionImages_.push(hitDetectionImage);
    }
  }

  this.anchorX = anchor[0];
  this.anchorY = anchor[1];
  this.height = size[1];
  this.imageHeight = imageSize[1];
  this.imageWidth = imageSize[0];
  this.opacity = opacity;
  this.originX = origin[0];
  this.originY = origin[1];
  this.rotation = rotation;
  this.rotateWithView = rotateWithView;
  this.scale = scale;
  this.width = size[0];
};


/**
 * @inheritDoc
 */
WebGLImageReplay.prototype.getTextures = function(opt_all) {
  return opt_all ? this.textures_.concat(this.hitDetectionTextures_) : this.textures_;
};


/**
 * @inheritDoc
 */
WebGLImageReplay.prototype.getHitDetectionTextures = function() {
  return this.hitDetectionTextures_;
};
/* harmony default export */ var ImageReplay = (WebGLImageReplay);

// EXTERNAL MODULE: ../src/ol/geom/flat/orient.js + 1 modules
var orient = __webpack_require__(93);

// EXTERNAL MODULE: ../src/ol/geom/flat/area.js
var flat_area = __webpack_require__(165);

// CONCATENATED MODULE: ../src/ol/geom/flat/topology.js
/**
 * @module ol/geom/flat/topology
 */


/**
 * Check if the linestring is a boundary.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {boolean} The linestring is a boundary.
 */
function lineStringIsClosed(flatCoordinates, offset, end, stride) {
  const lastCoord = end - stride;
  if (flatCoordinates[offset] === flatCoordinates[lastCoord] &&
      flatCoordinates[offset + 1] === flatCoordinates[lastCoord + 1] && (end - offset) / stride > 3) {
    return !!Object(flat_area["a" /* linearRing */])(flatCoordinates, offset, end, stride);
  }
  return false;
}

// CONCATENATED MODULE: ../src/ol/render/webgl/linestringreplay/defaultshader.js
/**
 * @module ol/render/webgl/linestringreplay/defaultshader
 */
// This file is automatically generated, do not edit.
// Run `make shaders` to generate, and commit the result.





const linestringreplay_defaultshader_fragment = new Fragment(webgl["g" /* DEBUG */] ?
  'precision mediump float;\nvarying float v_round;\nvarying vec2 v_roundVertex;\nvarying float v_halfWidth;\n\n\n\nuniform float u_opacity;\nuniform vec4 u_color;\nuniform vec2 u_size;\nuniform float u_pixelRatio;\n\nvoid main(void) {\n  if (v_round > 0.0) {\n    vec2 windowCoords = vec2((v_roundVertex.x + 1.0) / 2.0 * u_size.x * u_pixelRatio,\n        (v_roundVertex.y + 1.0) / 2.0 * u_size.y * u_pixelRatio);\n    if (length(windowCoords - gl_FragCoord.xy) > v_halfWidth * u_pixelRatio) {\n      discard;\n    }\n  }\n  gl_FragColor = u_color;\n  float alpha = u_color.a * u_opacity;\n  if (alpha == 0.0) {\n    discard;\n  }\n  gl_FragColor.a = alpha;\n}\n' :
  'precision mediump float;varying float a;varying vec2 aVertex;varying float c;uniform float m;uniform vec4 n;uniform vec2 o;uniform float p;void main(void){if(a>0.0){vec2 windowCoords=vec2((aVertex.x+1.0)/2.0*o.x*p,(aVertex.y+1.0)/2.0*o.y*p);if(length(windowCoords-gl_FragCoord.xy)>c*p){discard;}} gl_FragColor=n;float alpha=n.a*m;if(alpha==0.0){discard;}gl_FragColor.a=alpha;}');

const linestringreplay_defaultshader_vertex = new Vertex(webgl["g" /* DEBUG */] ?
  'varying float v_round;\nvarying vec2 v_roundVertex;\nvarying float v_halfWidth;\n\n\nattribute vec2 a_lastPos;\nattribute vec2 a_position;\nattribute vec2 a_nextPos;\nattribute float a_direction;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_lineWidth;\nuniform float u_miterLimit;\n\nbool nearlyEquals(in float value, in float ref) {\n  float epsilon = 0.000000000001;\n  return value >= ref - epsilon && value <= ref + epsilon;\n}\n\nvoid alongNormal(out vec2 offset, in vec2 nextP, in float turnDir, in float direction) {\n  vec2 dirVect = nextP - a_position;\n  vec2 normal = normalize(vec2(-turnDir * dirVect.y, turnDir * dirVect.x));\n  offset = u_lineWidth / 2.0 * normal * direction;\n}\n\nvoid miterUp(out vec2 offset, out float round, in bool isRound, in float direction) {\n  float halfWidth = u_lineWidth / 2.0;\n  vec2 tangent = normalize(normalize(a_nextPos - a_position) + normalize(a_position - a_lastPos));\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 dirVect = a_nextPos - a_position;\n  vec2 tmpNormal = normalize(vec2(-dirVect.y, dirVect.x));\n  float miterLength = abs(halfWidth / dot(normal, tmpNormal));\n  offset = normal * direction * miterLength;\n  round = 0.0;\n  if (isRound) {\n    round = 1.0;\n  } else if (miterLength > u_miterLimit + u_lineWidth) {\n    offset = halfWidth * tmpNormal * direction;\n  }\n}\n\nbool miterDown(out vec2 offset, in vec4 projPos, in mat4 offsetMatrix, in float direction) {\n  bool degenerate = false;\n  vec2 tangent = normalize(normalize(a_nextPos - a_position) + normalize(a_position - a_lastPos));\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 dirVect = a_lastPos - a_position;\n  vec2 tmpNormal = normalize(vec2(-dirVect.y, dirVect.x));\n  vec2 longOffset, shortOffset, longVertex;\n  vec4 shortProjVertex;\n  float halfWidth = u_lineWidth / 2.0;\n  if (length(a_nextPos - a_position) > length(a_lastPos - a_position)) {\n    longOffset = tmpNormal * direction * halfWidth;\n    shortOffset = normalize(vec2(dirVect.y, -dirVect.x)) * direction * halfWidth;\n    longVertex = a_nextPos;\n    shortProjVertex = u_projectionMatrix * vec4(a_lastPos, 0.0, 1.0);\n  } else {\n    shortOffset = tmpNormal * direction * halfWidth;\n    longOffset = normalize(vec2(dirVect.y, -dirVect.x)) * direction * halfWidth;\n    longVertex = a_lastPos;\n    shortProjVertex = u_projectionMatrix * vec4(a_nextPos, 0.0, 1.0);\n  }\n  //Intersection algorithm based on theory by Paul Bourke (http://paulbourke.net/geometry/pointlineplane/).\n  vec4 p1 = u_projectionMatrix * vec4(longVertex, 0.0, 1.0) + offsetMatrix * vec4(longOffset, 0.0, 0.0);\n  vec4 p2 = projPos + offsetMatrix * vec4(longOffset, 0.0, 0.0);\n  vec4 p3 = shortProjVertex + offsetMatrix * vec4(-shortOffset, 0.0, 0.0);\n  vec4 p4 = shortProjVertex + offsetMatrix * vec4(shortOffset, 0.0, 0.0);\n  float denom = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);\n  float firstU = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;\n  float secondU = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;\n  float epsilon = 0.000000000001;\n  if (firstU > epsilon && firstU < 1.0 - epsilon && secondU > epsilon && secondU < 1.0 - epsilon) {\n    shortProjVertex.x = p1.x + firstU * (p2.x - p1.x);\n    shortProjVertex.y = p1.y + firstU * (p2.y - p1.y);\n    offset = shortProjVertex.xy;\n    degenerate = true;\n  } else {\n    float miterLength = abs(halfWidth / dot(normal, tmpNormal));\n    offset = normal * direction * miterLength;\n  }\n  return degenerate;\n}\n\nvoid squareCap(out vec2 offset, out float round, in bool isRound, in vec2 nextP,\n    in float turnDir, in float direction) {\n  round = 0.0;\n  vec2 dirVect = a_position - nextP;\n  vec2 firstNormal = normalize(dirVect);\n  vec2 secondNormal = vec2(turnDir * firstNormal.y * direction, -turnDir * firstNormal.x * direction);\n  vec2 hypotenuse = normalize(firstNormal - secondNormal);\n  vec2 normal = vec2(turnDir * hypotenuse.y * direction, -turnDir * hypotenuse.x * direction);\n  float length = sqrt(v_halfWidth * v_halfWidth * 2.0);\n  offset = normal * length;\n  if (isRound) {\n    round = 1.0;\n  }\n}\n\nvoid main(void) {\n  bool degenerate = false;\n  float direction = float(sign(a_direction));\n  mat4 offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  vec2 offset;\n  vec4 projPos = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n  bool round = nearlyEquals(mod(a_direction, 2.0), 0.0);\n\n  v_round = 0.0;\n  v_halfWidth = u_lineWidth / 2.0;\n  v_roundVertex = projPos.xy;\n\n  if (nearlyEquals(mod(a_direction, 3.0), 0.0) || nearlyEquals(mod(a_direction, 17.0), 0.0)) {\n    alongNormal(offset, a_nextPos, 1.0, direction);\n  } else if (nearlyEquals(mod(a_direction, 5.0), 0.0) || nearlyEquals(mod(a_direction, 13.0), 0.0)) {\n    alongNormal(offset, a_lastPos, -1.0, direction);\n  } else if (nearlyEquals(mod(a_direction, 23.0), 0.0)) {\n    miterUp(offset, v_round, round, direction);\n  } else if (nearlyEquals(mod(a_direction, 19.0), 0.0)) {\n    degenerate = miterDown(offset, projPos, offsetMatrix, direction);\n  } else if (nearlyEquals(mod(a_direction, 7.0), 0.0)) {\n    squareCap(offset, v_round, round, a_nextPos, 1.0, direction);\n  } else if (nearlyEquals(mod(a_direction, 11.0), 0.0)) {\n    squareCap(offset, v_round, round, a_lastPos, -1.0, direction);\n  }\n  if (!degenerate) {\n    vec4 offsets = offsetMatrix * vec4(offset, 0.0, 0.0);\n    gl_Position = projPos + offsets;\n  } else {\n    gl_Position = vec4(offset, 0.0, 1.0);\n  }\n}\n\n\n' :
  'varying float a;varying vec2 aVertex;varying float c;attribute vec2 d;attribute vec2 e;attribute vec2 f;attribute float g;uniform mat4 h;uniform mat4 i;uniform mat4 j;uniform float k;uniform float l;bool nearlyEquals(in float value,in float ref){float epsilon=0.000000000001;return value>=ref-epsilon&&value<=ref+epsilon;}void alongNormal(out vec2 offset,in vec2 nextP,in float turnDir,in float direction){vec2 dirVect=nextP-e;vec2 normal=normalize(vec2(-turnDir*dirVect.y,turnDir*dirVect.x));offset=k/2.0*normal*direction;}void miterUp(out vec2 offset,out float round,in bool isRound,in float direction){float halfWidth=k/2.0;vec2 tangent=normalize(normalize(f-e)+normalize(e-d));vec2 normal=vec2(-tangent.y,tangent.x);vec2 dirVect=f-e;vec2 tmpNormal=normalize(vec2(-dirVect.y,dirVect.x));float miterLength=abs(halfWidth/dot(normal,tmpNormal));offset=normal*direction*miterLength;round=0.0;if(isRound){round=1.0;}else if(miterLength>l+k){offset=halfWidth*tmpNormal*direction;}} bool miterDown(out vec2 offset,in vec4 projPos,in mat4 offsetMatrix,in float direction){bool degenerate=false;vec2 tangent=normalize(normalize(f-e)+normalize(e-d));vec2 normal=vec2(-tangent.y,tangent.x);vec2 dirVect=d-e;vec2 tmpNormal=normalize(vec2(-dirVect.y,dirVect.x));vec2 longOffset,shortOffset,longVertex;vec4 shortProjVertex;float halfWidth=k/2.0;if(length(f-e)>length(d-e)){longOffset=tmpNormal*direction*halfWidth;shortOffset=normalize(vec2(dirVect.y,-dirVect.x))*direction*halfWidth;longVertex=f;shortProjVertex=h*vec4(d,0.0,1.0);}else{shortOffset=tmpNormal*direction*halfWidth;longOffset=normalize(vec2(dirVect.y,-dirVect.x))*direction*halfWidth;longVertex=d;shortProjVertex=h*vec4(f,0.0,1.0);}vec4 p1=h*vec4(longVertex,0.0,1.0)+offsetMatrix*vec4(longOffset,0.0,0.0);vec4 p2=projPos+offsetMatrix*vec4(longOffset,0.0,0.0);vec4 p3=shortProjVertex+offsetMatrix*vec4(-shortOffset,0.0,0.0);vec4 p4=shortProjVertex+offsetMatrix*vec4(shortOffset,0.0,0.0);float denom=(p4.y-p3.y)*(p2.x-p1.x)-(p4.x-p3.x)*(p2.y-p1.y);float firstU=((p4.x-p3.x)*(p1.y-p3.y)-(p4.y-p3.y)*(p1.x-p3.x))/denom;float secondU=((p2.x-p1.x)*(p1.y-p3.y)-(p2.y-p1.y)*(p1.x-p3.x))/denom;float epsilon=0.000000000001;if(firstU>epsilon&&firstU<1.0-epsilon&&secondU>epsilon&&secondU<1.0-epsilon){shortProjVertex.x=p1.x+firstU*(p2.x-p1.x);shortProjVertex.y=p1.y+firstU*(p2.y-p1.y);offset=shortProjVertex.xy;degenerate=true;}else{float miterLength=abs(halfWidth/dot(normal,tmpNormal));offset=normal*direction*miterLength;}return degenerate;}void squareCap(out vec2 offset,out float round,in bool isRound,in vec2 nextP,in float turnDir,in float direction){round=0.0;vec2 dirVect=e-nextP;vec2 firstNormal=normalize(dirVect);vec2 secondNormal=vec2(turnDir*firstNormal.y*direction,-turnDir*firstNormal.x*direction);vec2 hypotenuse=normalize(firstNormal-secondNormal);vec2 normal=vec2(turnDir*hypotenuse.y*direction,-turnDir*hypotenuse.x*direction);float length=sqrt(c*c*2.0);offset=normal*length;if(isRound){round=1.0;}} void main(void){bool degenerate=false;float direction=float(sign(g));mat4 offsetMatrix=i*j;vec2 offset;vec4 projPos=h*vec4(e,0.0,1.0);bool round=nearlyEquals(mod(g,2.0),0.0);a=0.0;c=k/2.0;aVertex=projPos.xy;if(nearlyEquals(mod(g,3.0),0.0)||nearlyEquals(mod(g,17.0),0.0)){alongNormal(offset,f,1.0,direction);}else if(nearlyEquals(mod(g,5.0),0.0)||nearlyEquals(mod(g,13.0),0.0)){alongNormal(offset,d,-1.0,direction);}else if(nearlyEquals(mod(g,23.0),0.0)){miterUp(offset,a,round,direction);}else if(nearlyEquals(mod(g,19.0),0.0)){degenerate=miterDown(offset,projPos,offsetMatrix,direction);}else if(nearlyEquals(mod(g,7.0),0.0)){squareCap(offset,a,round,f,1.0,direction);}else if(nearlyEquals(mod(g,11.0),0.0)){squareCap(offset,a,round,d,-1.0,direction);}if(!degenerate){vec4 offsets=offsetMatrix*vec4(offset,0.0,0.0);gl_Position=projPos+offsets;}else{gl_Position=vec4(offset,0.0,1.0);}}');

// CONCATENATED MODULE: ../src/ol/render/webgl/linestringreplay/defaultshader/Locations.js
/**
 * @module ol/render/webgl/linestringreplay/defaultshader/Locations
 */
// This file is automatically generated, do not edit
// Run `make shaders` to generate, and commit the result.



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
const defaultshader_Locations_Locations = function(gl, program) {

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_projectionMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_projectionMatrix' : 'h');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_offsetScaleMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_offsetScaleMatrix' : 'i');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_offsetRotateMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_offsetRotateMatrix' : 'j');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_lineWidth = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_lineWidth' : 'k');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_miterLimit = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_miterLimit' : 'l');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_opacity = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_opacity' : 'm');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_color = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_color' : 'n');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_size = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_size' : 'o');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_pixelRatio = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_pixelRatio' : 'p');

  /**
   * @type {number}
   */
  this.a_lastPos = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_lastPos' : 'd');

  /**
   * @type {number}
   */
  this.a_position = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_position' : 'e');

  /**
   * @type {number}
   */
  this.a_nextPos = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_nextPos' : 'f');

  /**
   * @type {number}
   */
  this.a_direction = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_direction' : 'g');
};

/* harmony default export */ var linestringreplay_defaultshader_Locations = (defaultshader_Locations_Locations);

// CONCATENATED MODULE: ../src/ol/render/webgl/LineStringReplay.js
/**
 * @module ol/render/webgl/LineStringReplay
 */
















/**
 * @enum {number}
 */
const Instruction = {
  ROUND: 2,
  BEGIN_LINE: 3,
  END_LINE: 5,
  BEGIN_LINE_CAP: 7,
  END_LINE_CAP: 11,
  BEVEL_FIRST: 13,
  BEVEL_SECOND: 17,
  MITER_BOTTOM: 19,
  MITER_TOP: 23
};


/**
 * @constructor
 * @extends {module:ol/render/webgl/Replay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Max extent.
 * @struct
 */
const WebGLLineStringReplay = function(tolerance, maxExtent) {
  Replay.call(this, tolerance, maxExtent);

  /**
   * @private
   * @type {module:ol/render/webgl/linestringreplay/defaultshader/Locations}
   */
  this.defaultLocations_ = null;

  /**
   * @private
   * @type {Array.<Array.<?>>}
   */
  this.styles_ = [];

  /**
   * @private
   * @type {Array.<number>}
   */
  this.styleIndices_ = [];

  /**
   * @private
   * @type {{strokeColor: (Array.<number>|null),
   *         lineCap: (string|undefined),
   *         lineDash: Array.<number>,
   *         lineDashOffset: (number|undefined),
   *         lineJoin: (string|undefined),
   *         lineWidth: (number|undefined),
   *         miterLimit: (number|undefined),
   *         changed: boolean}|null}
   */
  this.state_ = {
    strokeColor: null,
    lineCap: undefined,
    lineDash: null,
    lineDashOffset: undefined,
    lineJoin: undefined,
    lineWidth: undefined,
    miterLimit: undefined,
    changed: false
  };

};

Object(util["c" /* inherits */])(WebGLLineStringReplay, Replay);


/**
 * Draw one segment.
 * @private
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 */
WebGLLineStringReplay.prototype.drawCoordinates_ = function(flatCoordinates, offset, end, stride) {

  let i, ii;
  let numVertices = this.vertices.length;
  let numIndices = this.indices.length;
  //To save a vertex, the direction of a point is a product of the sign (1 or -1), a prime from
  //Instruction, and a rounding factor (1 or 2). If the product is even,
  //we round it. If it is odd, we don't.
  const lineJoin = this.state_.lineJoin === 'bevel' ? 0 :
    this.state_.lineJoin === 'miter' ? 1 : 2;
  const lineCap = this.state_.lineCap === 'butt' ? 0 :
    this.state_.lineCap === 'square' ? 1 : 2;
  const closed = lineStringIsClosed(flatCoordinates, offset, end, stride);
  let startCoords, sign, n;
  let lastIndex = numIndices;
  let lastSign = 1;
  //We need the adjacent vertices to define normals in joins. p0 = last, p1 = current, p2 = next.
  let p0, p1, p2;

  for (i = offset, ii = end; i < ii; i += stride) {

    n = numVertices / 7;

    p0 = p1;
    p1 = p2 || [flatCoordinates[i], flatCoordinates[i + 1]];
    //First vertex.
    if (i === offset) {
      p2 = [flatCoordinates[i + stride], flatCoordinates[i + stride + 1]];
      if (end - offset === stride * 2 && Object(array["b" /* equals */])(p1, p2)) {
        break;
      }
      if (closed) {
        //A closed line! Complete the circle.
        p0 = [flatCoordinates[end - stride * 2],
          flatCoordinates[end - stride * 2 + 1]];

        startCoords = p2;
      } else {
        //Add the first two/four vertices.

        if (lineCap) {
          numVertices = this.addVertices_([0, 0], p1, p2,
            lastSign * Instruction.BEGIN_LINE_CAP * lineCap, numVertices);

          numVertices = this.addVertices_([0, 0], p1, p2,
            -lastSign * Instruction.BEGIN_LINE_CAP * lineCap, numVertices);

          this.indices[numIndices++] = n + 2;
          this.indices[numIndices++] = n;
          this.indices[numIndices++] = n + 1;

          this.indices[numIndices++] = n + 1;
          this.indices[numIndices++] = n + 3;
          this.indices[numIndices++] = n + 2;

        }

        numVertices = this.addVertices_([0, 0], p1, p2,
          lastSign * Instruction.BEGIN_LINE * (lineCap || 1), numVertices);

        numVertices = this.addVertices_([0, 0], p1, p2,
          -lastSign * Instruction.BEGIN_LINE * (lineCap || 1), numVertices);

        lastIndex = numVertices / 7 - 1;

        continue;
      }
    } else if (i === end - stride) {
      //Last vertex.
      if (closed) {
        //Same as the first vertex.
        p2 = startCoords;
        break;
      } else {
        p0 = p0 || [0, 0];

        numVertices = this.addVertices_(p0, p1, [0, 0],
          lastSign * Instruction.END_LINE * (lineCap || 1), numVertices);

        numVertices = this.addVertices_(p0, p1, [0, 0],
          -lastSign * Instruction.END_LINE * (lineCap || 1), numVertices);

        this.indices[numIndices++] = n;
        this.indices[numIndices++] = lastIndex - 1;
        this.indices[numIndices++] = lastIndex;

        this.indices[numIndices++] = lastIndex;
        this.indices[numIndices++] = n + 1;
        this.indices[numIndices++] = n;

        if (lineCap) {
          numVertices = this.addVertices_(p0, p1, [0, 0],
            lastSign * Instruction.END_LINE_CAP * lineCap, numVertices);

          numVertices = this.addVertices_(p0, p1, [0, 0],
            -lastSign * Instruction.END_LINE_CAP * lineCap, numVertices);

          this.indices[numIndices++] = n + 2;
          this.indices[numIndices++] = n;
          this.indices[numIndices++] = n + 1;

          this.indices[numIndices++] = n + 1;
          this.indices[numIndices++] = n + 3;
          this.indices[numIndices++] = n + 2;

        }

        break;
      }
    } else {
      p2 = [flatCoordinates[i + stride], flatCoordinates[i + stride + 1]];
    }

    // We group CW and straight lines, thus the not so inituitive CCW checking function.
    sign = triangleIsCounterClockwise(p0[0], p0[1], p1[0], p1[1], p2[0], p2[1])
      ? -1 : 1;

    numVertices = this.addVertices_(p0, p1, p2,
      sign * Instruction.BEVEL_FIRST * (lineJoin || 1), numVertices);

    numVertices = this.addVertices_(p0, p1, p2,
      sign * Instruction.BEVEL_SECOND * (lineJoin || 1), numVertices);

    numVertices = this.addVertices_(p0, p1, p2,
      -sign * Instruction.MITER_BOTTOM * (lineJoin || 1), numVertices);

    if (i > offset) {
      this.indices[numIndices++] = n;
      this.indices[numIndices++] = lastIndex - 1;
      this.indices[numIndices++] = lastIndex;

      this.indices[numIndices++] = n + 2;
      this.indices[numIndices++] = n;
      this.indices[numIndices++] = lastSign * sign > 0 ? lastIndex : lastIndex - 1;
    }

    this.indices[numIndices++] = n;
    this.indices[numIndices++] = n + 2;
    this.indices[numIndices++] = n + 1;

    lastIndex = n + 2;
    lastSign = sign;

    //Add miter
    if (lineJoin) {
      numVertices = this.addVertices_(p0, p1, p2,
        sign * Instruction.MITER_TOP * lineJoin, numVertices);

      this.indices[numIndices++] = n + 1;
      this.indices[numIndices++] = n + 3;
      this.indices[numIndices++] = n;
    }
  }

  if (closed) {
    n = n || numVertices / 7;
    sign = Object(orient["a" /* linearRingIsClockwise */])([p0[0], p0[1], p1[0], p1[1], p2[0], p2[1]], 0, 6, 2)
      ? 1 : -1;

    numVertices = this.addVertices_(p0, p1, p2,
      sign * Instruction.BEVEL_FIRST * (lineJoin || 1), numVertices);

    numVertices = this.addVertices_(p0, p1, p2,
      -sign * Instruction.MITER_BOTTOM * (lineJoin || 1), numVertices);

    this.indices[numIndices++] = n;
    this.indices[numIndices++] = lastIndex - 1;
    this.indices[numIndices++] = lastIndex;

    this.indices[numIndices++] = n + 1;
    this.indices[numIndices++] = n;
    this.indices[numIndices++] = lastSign * sign > 0 ? lastIndex : lastIndex - 1;
  }
};

/**
 * @param {Array.<number>} p0 Last coordinates.
 * @param {Array.<number>} p1 Current coordinates.
 * @param {Array.<number>} p2 Next coordinates.
 * @param {number} product Sign, instruction, and rounding product.
 * @param {number} numVertices Vertex counter.
 * @return {number} Vertex counter.
 * @private
 */
WebGLLineStringReplay.prototype.addVertices_ = function(p0, p1, p2, product, numVertices) {
  this.vertices[numVertices++] = p0[0];
  this.vertices[numVertices++] = p0[1];
  this.vertices[numVertices++] = p1[0];
  this.vertices[numVertices++] = p1[1];
  this.vertices[numVertices++] = p2[0];
  this.vertices[numVertices++] = p2[1];
  this.vertices[numVertices++] = product;

  return numVertices;
};

/**
 * Check if the linestring can be drawn (i. e. valid).
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {boolean} The linestring can be drawn.
 * @private
 */
WebGLLineStringReplay.prototype.isValid_ = function(flatCoordinates, offset, end, stride) {
  const range = end - offset;
  if (range < stride * 2) {
    return false;
  } else if (range === stride * 2) {
    const firstP = [flatCoordinates[offset], flatCoordinates[offset + 1]];
    const lastP = [flatCoordinates[offset + stride], flatCoordinates[offset + stride + 1]];
    return !Object(array["b" /* equals */])(firstP, lastP);
  }

  return true;
};


/**
 * @inheritDoc
 */
WebGLLineStringReplay.prototype.drawLineString = function(lineStringGeometry, feature) {
  let flatCoordinates = lineStringGeometry.getFlatCoordinates();
  const stride = lineStringGeometry.getStride();
  if (this.isValid_(flatCoordinates, 0, flatCoordinates.length, stride)) {
    flatCoordinates = Object(flat_transform["d" /* translate */])(flatCoordinates, 0, flatCoordinates.length,
      stride, -this.origin[0], -this.origin[1]);
    if (this.state_.changed) {
      this.styleIndices_.push(this.indices.length);
      this.state_.changed = false;
    }
    this.startIndices.push(this.indices.length);
    this.startIndicesFeature.push(feature);
    this.drawCoordinates_(
      flatCoordinates, 0, flatCoordinates.length, stride);
  }
};


/**
 * @inheritDoc
 */
WebGLLineStringReplay.prototype.drawMultiLineString = function(multiLineStringGeometry, feature) {
  const indexCount = this.indices.length;
  const ends = multiLineStringGeometry.getEnds();
  ends.unshift(0);
  const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
  const stride = multiLineStringGeometry.getStride();
  let i, ii;
  if (ends.length > 1) {
    for (i = 1, ii = ends.length; i < ii; ++i) {
      if (this.isValid_(flatCoordinates, ends[i - 1], ends[i], stride)) {
        const lineString = Object(flat_transform["d" /* translate */])(flatCoordinates, ends[i - 1], ends[i],
          stride, -this.origin[0], -this.origin[1]);
        this.drawCoordinates_(
          lineString, 0, lineString.length, stride);
      }
    }
  }
  if (this.indices.length > indexCount) {
    this.startIndices.push(indexCount);
    this.startIndicesFeature.push(feature);
    if (this.state_.changed) {
      this.styleIndices_.push(indexCount);
      this.state_.changed = false;
    }
  }
};


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {Array.<Array.<number>>} holeFlatCoordinates Hole flat coordinates.
 * @param {number} stride Stride.
 */
WebGLLineStringReplay.prototype.drawPolygonCoordinates = function(
  flatCoordinates, holeFlatCoordinates, stride) {
  if (!lineStringIsClosed(flatCoordinates, 0, flatCoordinates.length, stride)) {
    flatCoordinates.push(flatCoordinates[0]);
    flatCoordinates.push(flatCoordinates[1]);
  }
  this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
  if (holeFlatCoordinates.length) {
    let i, ii;
    for (i = 0, ii = holeFlatCoordinates.length; i < ii; ++i) {
      if (!lineStringIsClosed(holeFlatCoordinates[i], 0, holeFlatCoordinates[i].length, stride)) {
        holeFlatCoordinates[i].push(holeFlatCoordinates[i][0]);
        holeFlatCoordinates[i].push(holeFlatCoordinates[i][1]);
      }
      this.drawCoordinates_(holeFlatCoordinates[i], 0,
        holeFlatCoordinates[i].length, stride);
    }
  }
};


/**
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 * @param {number=} opt_index Index count.
 */
WebGLLineStringReplay.prototype.setPolygonStyle = function(feature, opt_index) {
  const index = opt_index === undefined ? this.indices.length : opt_index;
  this.startIndices.push(index);
  this.startIndicesFeature.push(feature);
  if (this.state_.changed) {
    this.styleIndices_.push(index);
    this.state_.changed = false;
  }
};


/**
 * @return {number} Current index.
 */
WebGLLineStringReplay.prototype.getCurrentIndex = function() {
  return this.indices.length;
};


/**
 * @inheritDoc
 **/
WebGLLineStringReplay.prototype.finish = function(context) {
  // create, bind, and populate the vertices buffer
  this.verticesBuffer = new Buffer(this.vertices);

  // create, bind, and populate the indices buffer
  this.indicesBuffer = new Buffer(this.indices);

  this.startIndices.push(this.indices.length);

  //Clean up, if there is nothing to draw
  if (this.styleIndices_.length === 0 && this.styles_.length > 0) {
    this.styles_ = [];
  }

  this.vertices = null;
  this.indices = null;
};


/**
 * @inheritDoc
 */
WebGLLineStringReplay.prototype.getDeleteResourcesFunction = function(context) {
  const verticesBuffer = this.verticesBuffer;
  const indicesBuffer = this.indicesBuffer;
  return function() {
    context.deleteBuffer(verticesBuffer);
    context.deleteBuffer(indicesBuffer);
  };
};


/**
 * @inheritDoc
 */
WebGLLineStringReplay.prototype.setUpProgram = function(gl, context, size, pixelRatio) {
  // get the program
  const program = context.getProgram(linestringreplay_defaultshader_fragment, linestringreplay_defaultshader_vertex);

  // get the locations
  let locations;
  if (!this.defaultLocations_) {
    locations = new linestringreplay_defaultshader_Locations(gl, program);
    this.defaultLocations_ = locations;
  } else {
    locations = this.defaultLocations_;
  }

  context.useProgram(program);

  // enable the vertex attrib arrays
  gl.enableVertexAttribArray(locations.a_lastPos);
  gl.vertexAttribPointer(locations.a_lastPos, 2, webgl["l" /* FLOAT */],
    false, 28, 0);

  gl.enableVertexAttribArray(locations.a_position);
  gl.vertexAttribPointer(locations.a_position, 2, webgl["l" /* FLOAT */],
    false, 28, 8);

  gl.enableVertexAttribArray(locations.a_nextPos);
  gl.vertexAttribPointer(locations.a_nextPos, 2, webgl["l" /* FLOAT */],
    false, 28, 16);

  gl.enableVertexAttribArray(locations.a_direction);
  gl.vertexAttribPointer(locations.a_direction, 1, webgl["l" /* FLOAT */],
    false, 28, 24);

  // Enable renderer specific uniforms.
  gl.uniform2fv(locations.u_size, size);
  gl.uniform1f(locations.u_pixelRatio, pixelRatio);

  return locations;
};


/**
 * @inheritDoc
 */
WebGLLineStringReplay.prototype.shutDownProgram = function(gl, locations) {
  gl.disableVertexAttribArray(locations.a_lastPos);
  gl.disableVertexAttribArray(locations.a_position);
  gl.disableVertexAttribArray(locations.a_nextPos);
  gl.disableVertexAttribArray(locations.a_direction);
};


/**
 * @inheritDoc
 */
WebGLLineStringReplay.prototype.drawReplay = function(gl, context, skippedFeaturesHash, hitDetection) {
  //Save GL parameters.
  const tmpDepthFunc = /** @type {number} */ (gl.getParameter(gl.DEPTH_FUNC));
  const tmpDepthMask = /** @type {boolean} */ (gl.getParameter(gl.DEPTH_WRITEMASK));

  if (!hitDetection) {
    gl.enable(gl.DEPTH_TEST);
    gl.depthMask(true);
    gl.depthFunc(gl.NOTEQUAL);
  }

  if (!Object(obj["d" /* isEmpty */])(skippedFeaturesHash)) {
    this.drawReplaySkipping_(gl, context, skippedFeaturesHash);
  } else {
    //Draw by style groups to minimize drawElements() calls.
    let i, start, end, nextStyle;
    end = this.startIndices[this.startIndices.length - 1];
    for (i = this.styleIndices_.length - 1; i >= 0; --i) {
      start = this.styleIndices_[i];
      nextStyle = this.styles_[i];
      this.setStrokeStyle_(gl, nextStyle[0], nextStyle[1], nextStyle[2]);
      this.drawElements(gl, context, start, end);
      gl.clear(gl.DEPTH_BUFFER_BIT);
      end = start;
    }
  }
  if (!hitDetection) {
    gl.disable(gl.DEPTH_TEST);
    gl.clear(gl.DEPTH_BUFFER_BIT);
    //Restore GL parameters.
    gl.depthMask(tmpDepthMask);
    gl.depthFunc(tmpDepthFunc);
  }
};


/**
 * @private
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {Object} skippedFeaturesHash Ids of features to skip.
 */
WebGLLineStringReplay.prototype.drawReplaySkipping_ = function(gl, context, skippedFeaturesHash) {
  let i, start, end, nextStyle, groupStart, feature, featureUid, featureIndex, featureStart;
  featureIndex = this.startIndices.length - 2;
  end = start = this.startIndices[featureIndex + 1];
  for (i = this.styleIndices_.length - 1; i >= 0; --i) {
    nextStyle = this.styles_[i];
    this.setStrokeStyle_(gl, nextStyle[0], nextStyle[1], nextStyle[2]);
    groupStart = this.styleIndices_[i];

    while (featureIndex >= 0 &&
        this.startIndices[featureIndex] >= groupStart) {
      featureStart = this.startIndices[featureIndex];
      feature = this.startIndicesFeature[featureIndex];
      featureUid = Object(util["b" /* getUid */])(feature).toString();

      if (skippedFeaturesHash[featureUid]) {
        if (start !== end) {
          this.drawElements(gl, context, start, end);
          gl.clear(gl.DEPTH_BUFFER_BIT);
        }
        end = featureStart;
      }
      featureIndex--;
      start = featureStart;
    }
    if (start !== end) {
      this.drawElements(gl, context, start, end);
      gl.clear(gl.DEPTH_BUFFER_BIT);
    }
    start = end = groupStart;
  }
};


/**
 * @inheritDoc
 */
WebGLLineStringReplay.prototype.drawHitDetectionReplayOneByOne = function(gl, context, skippedFeaturesHash,
  featureCallback, opt_hitExtent) {
  let i, start, end, nextStyle, groupStart, feature, featureUid, featureIndex;
  featureIndex = this.startIndices.length - 2;
  end = this.startIndices[featureIndex + 1];
  for (i = this.styleIndices_.length - 1; i >= 0; --i) {
    nextStyle = this.styles_[i];
    this.setStrokeStyle_(gl, nextStyle[0], nextStyle[1], nextStyle[2]);
    groupStart = this.styleIndices_[i];

    while (featureIndex >= 0 &&
        this.startIndices[featureIndex] >= groupStart) {
      start = this.startIndices[featureIndex];
      feature = this.startIndicesFeature[featureIndex];
      featureUid = Object(util["b" /* getUid */])(feature).toString();

      if (skippedFeaturesHash[featureUid] === undefined &&
          feature.getGeometry() &&
          (opt_hitExtent === undefined || Object(ol_extent["F" /* intersects */])(
            /** @type {Array<number>} */ (opt_hitExtent),
            feature.getGeometry().getExtent()))) {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        this.drawElements(gl, context, start, end);

        const result = featureCallback(feature);

        if (result) {
          return result;
        }

      }
      featureIndex--;
      end = start;
    }
  }
  return undefined;
};


/**
 * @private
 * @param {WebGLRenderingContext} gl gl.
 * @param {Array.<number>} color Color.
 * @param {number} lineWidth Line width.
 * @param {number} miterLimit Miter limit.
 */
WebGLLineStringReplay.prototype.setStrokeStyle_ = function(gl, color, lineWidth, miterLimit) {
  gl.uniform4fv(this.defaultLocations_.u_color, color);
  gl.uniform1f(this.defaultLocations_.u_lineWidth, lineWidth);
  gl.uniform1f(this.defaultLocations_.u_miterLimit, miterLimit);
};


/**
 * @inheritDoc
 */
WebGLLineStringReplay.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {
  const strokeStyleLineCap = strokeStyle.getLineCap();
  this.state_.lineCap = strokeStyleLineCap !== undefined ?
    strokeStyleLineCap : DEFAULT_LINECAP;
  const strokeStyleLineDash = strokeStyle.getLineDash();
  this.state_.lineDash = strokeStyleLineDash ?
    strokeStyleLineDash : DEFAULT_LINEDASH;
  const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
  this.state_.lineDashOffset = strokeStyleLineDashOffset ?
    strokeStyleLineDashOffset : DEFAULT_LINEDASHOFFSET;
  const strokeStyleLineJoin = strokeStyle.getLineJoin();
  this.state_.lineJoin = strokeStyleLineJoin !== undefined ?
    strokeStyleLineJoin : DEFAULT_LINEJOIN;
  let strokeStyleColor = strokeStyle.getColor();
  if (!(strokeStyleColor instanceof CanvasGradient) &&
      !(strokeStyleColor instanceof CanvasPattern)) {
    strokeStyleColor = Object(color["a" /* asArray */])(strokeStyleColor).map(function(c, i) {
      return i != 3 ? c / 255 : c;
    }) || DEFAULT_STROKESTYLE;
  } else {
    strokeStyleColor = DEFAULT_STROKESTYLE;
  }
  let strokeStyleWidth = strokeStyle.getWidth();
  strokeStyleWidth = strokeStyleWidth !== undefined ?
    strokeStyleWidth : DEFAULT_LINEWIDTH;
  let strokeStyleMiterLimit = strokeStyle.getMiterLimit();
  strokeStyleMiterLimit = strokeStyleMiterLimit !== undefined ?
    strokeStyleMiterLimit : DEFAULT_MITERLIMIT;
  if (!this.state_.strokeColor || !Object(array["b" /* equals */])(this.state_.strokeColor, strokeStyleColor) ||
      this.state_.lineWidth !== strokeStyleWidth || this.state_.miterLimit !== strokeStyleMiterLimit) {
    this.state_.changed = true;
    this.state_.strokeColor = strokeStyleColor;
    this.state_.lineWidth = strokeStyleWidth;
    this.state_.miterLimit = strokeStyleMiterLimit;
    this.styles_.push([strokeStyleColor, strokeStyleWidth, strokeStyleMiterLimit]);
  }
};

/* harmony default export */ var LineStringReplay = (WebGLLineStringReplay);

// EXTERNAL MODULE: ../src/ol/geom/flat/contains.js
var contains = __webpack_require__(112);

// CONCATENATED MODULE: ../src/ol/render/webgl/polygonreplay/defaultshader.js
/**
 * @module ol/render/webgl/polygonreplay/defaultshader
 */
// This file is automatically generated, do not edit.
// Run `make shaders` to generate, and commit the result.





const polygonreplay_defaultshader_fragment = new Fragment(webgl["g" /* DEBUG */] ?
  'precision mediump float;\n\n\n\nuniform vec4 u_color;\nuniform float u_opacity;\n\nvoid main(void) {\n  gl_FragColor = u_color;\n  float alpha = u_color.a * u_opacity;\n  if (alpha == 0.0) {\n    discard;\n  }\n  gl_FragColor.a = alpha;\n}\n' :
  'precision mediump float;uniform vec4 e;uniform float f;void main(void){gl_FragColor=e;float alpha=e.a*f;if(alpha==0.0){discard;}gl_FragColor.a=alpha;}');

const polygonreplay_defaultshader_vertex = new Vertex(webgl["g" /* DEBUG */] ?
  '\n\nattribute vec2 a_position;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\n\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n}\n\n\n' :
  'attribute vec2 a;uniform mat4 b;uniform mat4 c;uniform mat4 d;void main(void){gl_Position=b*vec4(a,0.0,1.0);}');

// CONCATENATED MODULE: ../src/ol/render/webgl/polygonreplay/defaultshader/Locations.js
/**
 * @module ol/render/webgl/polygonreplay/defaultshader/Locations
 */
// This file is automatically generated, do not edit
// Run `make shaders` to generate, and commit the result.



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
const polygonreplay_defaultshader_Locations_Locations = function(gl, program) {

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_projectionMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_projectionMatrix' : 'b');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_offsetScaleMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_offsetScaleMatrix' : 'c');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_offsetRotateMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_offsetRotateMatrix' : 'd');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_color = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_color' : 'e');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_opacity = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_opacity' : 'f');

  /**
   * @type {number}
   */
  this.a_position = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_position' : 'a');
};

/* harmony default export */ var polygonreplay_defaultshader_Locations = (polygonreplay_defaultshader_Locations_Locations);

// EXTERNAL MODULE: ../src/ol/style/Stroke.js
var Stroke = __webpack_require__(89);

// CONCATENATED MODULE: ../src/ol/structs/LinkedList.js
/**
 * @module ol/structs/LinkedList
 */


/**
 * @typedef {Object} Item
 * @property {module:ol/structs/LinkedList~Item} [prev]
 * @property {module:ol/structs/LinkedList~Item} [next]
 * @property {?} data
 */


/**
 * Creates an empty linked list structure.
 *
 * @constructor
 * @struct
 * @param {boolean=} opt_circular The last item is connected to the first one,
 * and the first item to the last one. Default is true.
 */
const LinkedList = function(opt_circular) {

  /**
   * @private
   * @type {module:ol/structs/LinkedList~Item|undefined}
   */
  this.first_;

  /**
   * @private
   * @type {module:ol/structs/LinkedList~Item|undefined}
   */
  this.last_;

  /**
   * @private
   * @type {module:ol/structs/LinkedList~Item|undefined}
   */
  this.head_;

  /**
   * @private
   * @type {boolean}
   */
  this.circular_ = opt_circular === undefined ? true : opt_circular;

  /**
   * @private
   * @type {number}
   */
  this.length_ = 0;
};

/**
 * Inserts an item into the linked list right after the current one.
 *
 * @param {?} data Item data.
 */
LinkedList.prototype.insertItem = function(data) {

  /** @type {module:ol/structs/LinkedList~Item} */
  const item = {
    prev: undefined,
    next: undefined,
    data: data
  };

  const head = this.head_;

  //Initialize the list.
  if (!head) {
    this.first_ = item;
    this.last_ = item;
    if (this.circular_) {
      item.next = item;
      item.prev = item;
    }
  } else {
    //Link the new item to the adjacent ones.
    const next = head.next;
    item.prev = head;
    item.next = next;
    head.next = item;
    if (next) {
      next.prev = item;
    }

    if (head === this.last_) {
      this.last_ = item;
    }
  }
  this.head_ = item;
  this.length_++;
};

/**
 * Removes the current item from the list. Sets the cursor to the next item,
 * if possible.
 */
LinkedList.prototype.removeItem = function() {
  const head = this.head_;
  if (head) {
    const next = head.next;
    const prev = head.prev;
    if (next) {
      next.prev = prev;
    }
    if (prev) {
      prev.next = next;
    }
    this.head_ = next || prev;

    if (this.first_ === this.last_) {
      this.head_ = undefined;
      this.first_ = undefined;
      this.last_ = undefined;
    } else if (this.first_ === head) {
      this.first_ = this.head_;
    } else if (this.last_ === head) {
      this.last_ = prev ? this.head_.prev : this.head_;
    }
    this.length_--;
  }
};

/**
 * Sets the cursor to the first item, and returns the associated data.
 *
 * @return {?} Item data.
 */
LinkedList.prototype.firstItem = function() {
  this.head_ = this.first_;
  if (this.head_) {
    return this.head_.data;
  }
  return undefined;
};

/**
* Sets the cursor to the last item, and returns the associated data.
*
* @return {?} Item data.
*/
LinkedList.prototype.lastItem = function() {
  this.head_ = this.last_;
  if (this.head_) {
    return this.head_.data;
  }
  return undefined;
};

/**
 * Sets the cursor to the next item, and returns the associated data.
 *
 * @return {?} Item data.
 */
LinkedList.prototype.nextItem = function() {
  if (this.head_ && this.head_.next) {
    this.head_ = this.head_.next;
    return this.head_.data;
  }
  return undefined;
};

/**
 * Returns the next item's data without moving the cursor.
 *
 * @return {?} Item data.
 */
LinkedList.prototype.getNextItem = function() {
  if (this.head_ && this.head_.next) {
    return this.head_.next.data;
  }
  return undefined;
};

/**
 * Sets the cursor to the previous item, and returns the associated data.
 *
 * @return {?} Item data.
 */
LinkedList.prototype.prevItem = function() {
  if (this.head_ && this.head_.prev) {
    this.head_ = this.head_.prev;
    return this.head_.data;
  }
  return undefined;
};

/**
 * Returns the previous item's data without moving the cursor.
 *
 * @return {?} Item data.
 */
LinkedList.prototype.getPrevItem = function() {
  if (this.head_ && this.head_.prev) {
    return this.head_.prev.data;
  }
  return undefined;
};

/**
 * Returns the current item's data.
 *
 * @return {?} Item data.
 */
LinkedList.prototype.getCurrItem = function() {
  if (this.head_) {
    return this.head_.data;
  }
  return undefined;
};

/**
 * Sets the first item of the list. This only works for circular lists, and sets
 * the last item accordingly.
 */
LinkedList.prototype.setFirstItem = function() {
  if (this.circular_ && this.head_) {
    this.first_ = this.head_;
    this.last_ = this.head_.prev;
  }
};

/**
 * Concatenates two lists.
 * @param {module:ol/structs/LinkedList} list List to merge into the current list.
 */
LinkedList.prototype.concat = function(list) {
  if (list.head_) {
    if (this.head_) {
      const end = this.head_.next;
      this.head_.next = list.first_;
      list.first_.prev = this.head_;
      end.prev = list.last_;
      list.last_.next = end;
      this.length_ += list.length_;
    } else {
      this.head_ = list.head_;
      this.first_ = list.first_;
      this.last_ = list.last_;
      this.length_ = list.length_;
    }
    list.head_ = undefined;
    list.first_ = undefined;
    list.last_ = undefined;
    list.length_ = 0;
  }
};

/**
 * Returns the current length of the list.
 *
 * @return {number} Length.
 */
LinkedList.prototype.getLength = function() {
  return this.length_;
};
/* harmony default export */ var structs_LinkedList = (LinkedList);

// EXTERNAL MODULE: ../src/ol/structs/RBush.js
var RBush = __webpack_require__(132);

// CONCATENATED MODULE: ../src/ol/render/webgl/PolygonReplay.js
/**
 * @module ol/render/webgl/PolygonReplay
 */




















/**
 * @typedef {Object} PolygonVertex
 * @property {number} x
 * @property {number} y
 * @property {number} i
 * @property {boolean} [reflex]
 */

/**
 * @typedef {Object} PolygonSegment
 * @property {module:ol/render/webgl/PolygonReplay~PolygonVertex} p0
 * @property {module:ol/render/webgl/PolygonReplay~PolygonVertex} p1
 */


/**
 * @constructor
 * @extends {module:ol/render/webgl/Replay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Max extent.
 * @struct
 */
const WebGLPolygonReplay = function(tolerance, maxExtent) {
  Replay.call(this, tolerance, maxExtent);

  this.lineStringReplay = new LineStringReplay(
    tolerance, maxExtent);

  /**
   * @private
   * @type {module:ol/render/webgl/polygonreplay/defaultshader/Locations}
   */
  this.defaultLocations_ = null;

  /**
   * @private
   * @type {Array.<Array.<number>>}
   */
  this.styles_ = [];

  /**
   * @private
   * @type {Array.<number>}
   */
  this.styleIndices_ = [];

  /**
   * @private
   * @type {{fillColor: (Array.<number>|null),
   *         changed: boolean}|null}
   */
  this.state_ = {
    fillColor: null,
    changed: false
  };

};

Object(util["c" /* inherits */])(WebGLPolygonReplay, Replay);


/**
 * Draw one polygon.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {Array.<Array.<number>>} holeFlatCoordinates Hole flat coordinates.
 * @param {number} stride Stride.
 * @private
 */
WebGLPolygonReplay.prototype.drawCoordinates_ = function(
  flatCoordinates, holeFlatCoordinates, stride) {
  // Triangulate the polygon
  const outerRing = new structs_LinkedList();
  const rtree = new RBush["a" /* default */]();
  // Initialize the outer ring
  this.processFlatCoordinates_(flatCoordinates, stride, outerRing, rtree, true);
  const maxCoords = this.getMaxCoords_(outerRing);

  // Eliminate holes, if there are any
  if (holeFlatCoordinates.length) {
    let i, ii;
    const holeLists = [];
    for (i = 0, ii = holeFlatCoordinates.length; i < ii; ++i) {
      const holeList = {
        list: new structs_LinkedList(),
        maxCoords: undefined,
        rtree: new RBush["a" /* default */]()
      };
      holeLists.push(holeList);
      this.processFlatCoordinates_(holeFlatCoordinates[i],
        stride, holeList.list, holeList.rtree, false);
      this.classifyPoints_(holeList.list, holeList.rtree, true);
      holeList.maxCoords = this.getMaxCoords_(holeList.list);
    }
    holeLists.sort(function(a, b) {
      return b.maxCoords[0] === a.maxCoords[0] ?
        a.maxCoords[1] - b.maxCoords[1] : b.maxCoords[0] - a.maxCoords[0];
    });
    for (i = 0; i < holeLists.length; ++i) {
      const currList = holeLists[i].list;
      const start = currList.firstItem();
      let currItem = start;
      let intersection;
      do {
        //TODO: Triangulate holes when they intersect the outer ring.
        if (this.getIntersections_(currItem, rtree).length) {
          intersection = true;
          break;
        }
        currItem = currList.nextItem();
      } while (start !== currItem);
      if (!intersection) {
        if (this.bridgeHole_(currList, holeLists[i].maxCoords[0], outerRing, maxCoords[0], rtree)) {
          rtree.concat(holeLists[i].rtree);
          this.classifyPoints_(outerRing, rtree, false);
        }
      }
    }
  } else {
    this.classifyPoints_(outerRing, rtree, false);
  }
  this.triangulate_(outerRing, rtree);
};


/**
 * Inserts flat coordinates in a linked list and adds them to the vertex buffer.
 * @private
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} stride Stride.
 * @param {module:ol/structs/LinkedList} list Linked list.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 * @param {boolean} clockwise Coordinate order should be clockwise.
 */
WebGLPolygonReplay.prototype.processFlatCoordinates_ = function(
  flatCoordinates, stride, list, rtree, clockwise) {
  const isClockwise = Object(orient["a" /* linearRingIsClockwise */])(flatCoordinates,
    0, flatCoordinates.length, stride);
  let i, ii;
  let n = this.vertices.length / 2;
  /** @type {module:ol/render/webgl/PolygonReplay~PolygonVertex} */
  let start;
  /** @type {module:ol/render/webgl/PolygonReplay~PolygonVertex} */
  let p0;
  /** @type {module:ol/render/webgl/PolygonReplay~PolygonVertex} */
  let p1;
  const extents = [];
  const segments = [];
  if (clockwise === isClockwise) {
    start = this.createPoint_(flatCoordinates[0], flatCoordinates[1], n++);
    p0 = start;
    for (i = stride, ii = flatCoordinates.length; i < ii; i += stride) {
      p1 = this.createPoint_(flatCoordinates[i], flatCoordinates[i + 1], n++);
      segments.push(this.insertItem_(p0, p1, list));
      extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
        Math.max(p0.y, p1.y)]);
      p0 = p1;
    }
    segments.push(this.insertItem_(p1, start, list));
    extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
      Math.max(p0.y, p1.y)]);
  } else {
    const end = flatCoordinates.length - stride;
    start = this.createPoint_(flatCoordinates[end], flatCoordinates[end + 1], n++);
    p0 = start;
    for (i = end - stride, ii = 0; i >= ii; i -= stride) {
      p1 = this.createPoint_(flatCoordinates[i], flatCoordinates[i + 1], n++);
      segments.push(this.insertItem_(p0, p1, list));
      extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
        Math.max(p0.y, p1.y)]);
      p0 = p1;
    }
    segments.push(this.insertItem_(p1, start, list));
    extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
      Math.max(p0.y, p1.y)]);
  }
  rtree.load(extents, segments);
};


/**
 * Returns the rightmost coordinates of a polygon on the X axis.
 * @private
 * @param {module:ol/structs/LinkedList} list Polygons ring.
 * @return {Array.<number>} Max X coordinates.
 */
WebGLPolygonReplay.prototype.getMaxCoords_ = function(list) {
  const start = list.firstItem();
  let seg = start;
  let maxCoords = [seg.p0.x, seg.p0.y];

  do {
    seg = list.nextItem();
    if (seg.p0.x > maxCoords[0]) {
      maxCoords = [seg.p0.x, seg.p0.y];
    }
  } while (seg !== start);

  return maxCoords;
};


/**
 * Classifies the points of a polygon list as convex, reflex. Removes collinear vertices.
 * @private
 * @param {module:ol/structs/LinkedList} list Polygon ring.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 * @param {boolean} ccw The orientation of the polygon is counter-clockwise.
 * @return {boolean} There were reclassified points.
 */
WebGLPolygonReplay.prototype.classifyPoints_ = function(list, rtree, ccw) {
  let start = list.firstItem();
  let s0 = start;
  let s1 = list.nextItem();
  let pointsReclassified = false;
  do {
    const reflex = ccw ? triangleIsCounterClockwise(s1.p1.x,
      s1.p1.y, s0.p1.x, s0.p1.y, s0.p0.x, s0.p0.y) :
      triangleIsCounterClockwise(s0.p0.x, s0.p0.y, s0.p1.x,
        s0.p1.y, s1.p1.x, s1.p1.y);
    if (reflex === undefined) {
      this.removeItem_(s0, s1, list, rtree);
      pointsReclassified = true;
      if (s1 === start) {
        start = list.getNextItem();
      }
      s1 = s0;
      list.prevItem();
    } else if (s0.p1.reflex !== reflex) {
      s0.p1.reflex = reflex;
      pointsReclassified = true;
    }
    s0 = s1;
    s1 = list.nextItem();
  } while (s0 !== start);
  return pointsReclassified;
};


/**
 * @private
 * @param {module:ol/structs/LinkedList} hole Linked list of the hole.
 * @param {number} holeMaxX Maximum X value of the hole.
 * @param {module:ol/structs/LinkedList} list Linked list of the polygon.
 * @param {number} listMaxX Maximum X value of the polygon.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 * @return {boolean} Bridging was successful.
 */
WebGLPolygonReplay.prototype.bridgeHole_ = function(hole, holeMaxX,
  list, listMaxX, rtree) {
  let seg = hole.firstItem();
  while (seg.p1.x !== holeMaxX) {
    seg = hole.nextItem();
  }

  const p1 = seg.p1;
  /** @type {module:ol/render/webgl/PolygonReplay~PolygonVertex} */
  const p2 = {x: listMaxX, y: p1.y, i: -1};
  let minDist = Infinity;
  let i, ii, bestPoint;
  /** @type {module:ol/render/webgl/PolygonReplay~PolygonVertex} */
  let p5;

  const intersectingSegments = this.getIntersections_({p0: p1, p1: p2}, rtree, true);
  for (i = 0, ii = intersectingSegments.length; i < ii; ++i) {
    const currSeg = intersectingSegments[i];
    const intersection = this.calculateIntersection_(p1, p2, currSeg.p0,
      currSeg.p1, true);
    const dist = Math.abs(p1.x - intersection[0]);
    if (dist < minDist && triangleIsCounterClockwise(p1.x, p1.y,
      currSeg.p0.x, currSeg.p0.y, currSeg.p1.x, currSeg.p1.y) !== undefined) {
      minDist = dist;
      p5 = {x: intersection[0], y: intersection[1], i: -1};
      seg = currSeg;
    }
  }
  if (minDist === Infinity) {
    return false;
  }
  bestPoint = seg.p1;

  if (minDist > 0) {
    const pointsInTriangle = this.getPointsInTriangle_(p1, p5, seg.p1, rtree);
    if (pointsInTriangle.length) {
      let theta = Infinity;
      for (i = 0, ii = pointsInTriangle.length; i < ii; ++i) {
        const currPoint = pointsInTriangle[i];
        const currTheta = Math.atan2(p1.y - currPoint.y, p2.x - currPoint.x);
        if (currTheta < theta || (currTheta === theta && currPoint.x < bestPoint.x)) {
          theta = currTheta;
          bestPoint = currPoint;
        }
      }
    }
  }

  seg = list.firstItem();
  while (seg.p1.x !== bestPoint.x || seg.p1.y !== bestPoint.y) {
    seg = list.nextItem();
  }

  //We clone the bridge points as they can have different convexity.
  const p0Bridge = {x: p1.x, y: p1.y, i: p1.i, reflex: undefined};
  const p1Bridge = {x: seg.p1.x, y: seg.p1.y, i: seg.p1.i, reflex: undefined};

  hole.getNextItem().p0 = p0Bridge;
  this.insertItem_(p1, seg.p1, hole, rtree);
  this.insertItem_(p1Bridge, p0Bridge, hole, rtree);
  seg.p1 = p1Bridge;
  hole.setFirstItem();
  list.concat(hole);

  return true;
};


/**
 * @private
 * @param {module:ol/structs/LinkedList} list Linked list of the polygon.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 */
WebGLPolygonReplay.prototype.triangulate_ = function(list, rtree) {
  let ccw = false;
  let simple = this.isSimple_(list, rtree);

  // Start clipping ears
  while (list.getLength() > 3) {
    if (simple) {
      if (!this.clipEars_(list, rtree, simple, ccw)) {
        if (!this.classifyPoints_(list, rtree, ccw)) {
          // Due to the behavior of OL's PIP algorithm, the ear clipping cannot
          // introduce touching segments. However, the original data may have some.
          if (!this.resolveSelfIntersections_(list, rtree, true)) {
            break;
          }
        }
      }
    } else {
      if (!this.clipEars_(list, rtree, simple, ccw)) {
        // We ran out of ears, try to reclassify.
        if (!this.classifyPoints_(list, rtree, ccw)) {
          // We have a bad polygon, try to resolve local self-intersections.
          if (!this.resolveSelfIntersections_(list, rtree)) {
            simple = this.isSimple_(list, rtree);
            if (!simple) {
              // We have a really bad polygon, try more time consuming methods.
              this.splitPolygon_(list, rtree);
              break;
            } else {
              ccw = !this.isClockwise_(list);
              this.classifyPoints_(list, rtree, ccw);
            }
          }
        }
      }
    }
  }
  if (list.getLength() === 3) {
    let numIndices = this.indices.length;
    this.indices[numIndices++] = list.getPrevItem().p0.i;
    this.indices[numIndices++] = list.getCurrItem().p0.i;
    this.indices[numIndices++] = list.getNextItem().p0.i;
  }
};


/**
 * @private
 * @param {module:ol/structs/LinkedList} list Linked list of the polygon.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 * @param {boolean} simple The polygon is simple.
 * @param {boolean} ccw Orientation of the polygon is counter-clockwise.
 * @return {boolean} There were processed ears.
 */
WebGLPolygonReplay.prototype.clipEars_ = function(list, rtree, simple, ccw) {
  let numIndices = this.indices.length;
  let start = list.firstItem();
  let s0 = list.getPrevItem();
  let s1 = start;
  let s2 = list.nextItem();
  let s3 = list.getNextItem();
  let p0, p1, p2;
  let processedEars = false;
  do {
    p0 = s1.p0;
    p1 = s1.p1;
    p2 = s2.p1;
    if (p1.reflex === false) {
      // We might have a valid ear
      let variableCriterion;
      if (simple) {
        variableCriterion = this.getPointsInTriangle_(p0, p1, p2, rtree, true).length === 0;
      } else {
        variableCriterion = ccw ? this.diagonalIsInside_(s3.p1, p2, p1, p0,
          s0.p0) : this.diagonalIsInside_(s0.p0, p0, p1, p2, s3.p1);
      }
      if ((simple || this.getIntersections_({p0: p0, p1: p2}, rtree).length === 0) &&
          variableCriterion) {
        //The diagonal is completely inside the polygon
        if (simple || p0.reflex === false || p2.reflex === false ||
            Object(orient["a" /* linearRingIsClockwise */])([s0.p0.x, s0.p0.y, p0.x,
              p0.y, p1.x, p1.y, p2.x, p2.y, s3.p1.x, s3.p1.y], 0, 10, 2) === !ccw) {
          //The diagonal is persumably valid, we have an ear
          this.indices[numIndices++] = p0.i;
          this.indices[numIndices++] = p1.i;
          this.indices[numIndices++] = p2.i;
          this.removeItem_(s1, s2, list, rtree);
          if (s2 === start) {
            start = s3;
          }
          processedEars = true;
        }
      }
    }
    // Else we have a reflex point.
    s0 = list.getPrevItem();
    s1 = list.getCurrItem();
    s2 = list.nextItem();
    s3 = list.getNextItem();
  } while (s1 !== start && list.getLength() > 3);

  return processedEars;
};


/**
 * @private
 * @param {module:ol/structs/LinkedList} list Linked list of the polygon.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 * @param {boolean=} opt_touch Resolve touching segments.
 * @return {boolean} There were resolved intersections.
*/
WebGLPolygonReplay.prototype.resolveSelfIntersections_ = function(
  list, rtree, opt_touch) {
  const start = list.firstItem();
  list.nextItem();
  let s0 = start;
  let s1 = list.nextItem();
  let resolvedIntersections = false;

  do {
    const intersection = this.calculateIntersection_(s0.p0, s0.p1, s1.p0, s1.p1,
      opt_touch);
    if (intersection) {
      let breakCond = false;
      const numVertices = this.vertices.length;
      let numIndices = this.indices.length;
      const n = numVertices / 2;
      const seg = list.prevItem();
      list.removeItem();
      rtree.remove(seg);
      breakCond = (seg === start);
      let p;
      if (opt_touch) {
        if (intersection[0] === s0.p0.x && intersection[1] === s0.p0.y) {
          list.prevItem();
          p = s0.p0;
          s1.p0 = p;
          rtree.remove(s0);
          breakCond = breakCond || (s0 === start);
        } else {
          p = s1.p1;
          s0.p1 = p;
          rtree.remove(s1);
          breakCond = breakCond || (s1 === start);
        }
        list.removeItem();
      } else {
        p = this.createPoint_(intersection[0], intersection[1], n);
        s0.p1 = p;
        s1.p0 = p;
        rtree.update([Math.min(s0.p0.x, s0.p1.x), Math.min(s0.p0.y, s0.p1.y),
          Math.max(s0.p0.x, s0.p1.x), Math.max(s0.p0.y, s0.p1.y)], s0);
        rtree.update([Math.min(s1.p0.x, s1.p1.x), Math.min(s1.p0.y, s1.p1.y),
          Math.max(s1.p0.x, s1.p1.x), Math.max(s1.p0.y, s1.p1.y)], s1);
      }

      this.indices[numIndices++] = seg.p0.i;
      this.indices[numIndices++] = seg.p1.i;
      this.indices[numIndices++] = p.i;

      resolvedIntersections = true;
      if (breakCond) {
        break;
      }
    }

    s0 = list.getPrevItem();
    s1 = list.nextItem();
  } while (s0 !== start);
  return resolvedIntersections;
};


/**
 * @private
 * @param {module:ol/structs/LinkedList} list Linked list of the polygon.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 * @return {boolean} The polygon is simple.
 */
WebGLPolygonReplay.prototype.isSimple_ = function(list, rtree) {
  const start = list.firstItem();
  let seg = start;
  do {
    if (this.getIntersections_(seg, rtree).length) {
      return false;
    }
    seg = list.nextItem();
  } while (seg !== start);
  return true;
};


/**
 * @private
 * @param {module:ol/structs/LinkedList} list Linked list of the polygon.
 * @return {boolean} Orientation is clockwise.
 */
WebGLPolygonReplay.prototype.isClockwise_ = function(list) {
  const length = list.getLength() * 2;
  const flatCoordinates = new Array(length);
  const start = list.firstItem();
  let seg = start;
  let i = 0;
  do {
    flatCoordinates[i++] = seg.p0.x;
    flatCoordinates[i++] = seg.p0.y;
    seg = list.nextItem();
  } while (seg !== start);
  return Object(orient["a" /* linearRingIsClockwise */])(flatCoordinates, 0, length, 2);
};


/**
 * @private
 * @param {module:ol/structs/LinkedList} list Linked list of the polygon.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 */
WebGLPolygonReplay.prototype.splitPolygon_ = function(list, rtree) {
  const start = list.firstItem();
  let s0 = start;
  do {
    const intersections = this.getIntersections_(s0, rtree);
    if (intersections.length) {
      const s1 = intersections[0];
      const n = this.vertices.length / 2;
      const intersection = this.calculateIntersection_(s0.p0,
        s0.p1, s1.p0, s1.p1);
      const p = this.createPoint_(intersection[0], intersection[1], n);
      const newPolygon = new structs_LinkedList();
      const newRtree = new RBush["a" /* default */]();
      this.insertItem_(p, s0.p1, newPolygon, newRtree);
      s0.p1 = p;
      rtree.update([Math.min(s0.p0.x, p.x), Math.min(s0.p0.y, p.y),
        Math.max(s0.p0.x, p.x), Math.max(s0.p0.y, p.y)], s0);
      let currItem = list.nextItem();
      while (currItem !== s1) {
        this.insertItem_(currItem.p0, currItem.p1, newPolygon, newRtree);
        rtree.remove(currItem);
        list.removeItem();
        currItem = list.getCurrItem();
      }
      this.insertItem_(s1.p0, p, newPolygon, newRtree);
      s1.p0 = p;
      rtree.update([Math.min(s1.p1.x, p.x), Math.min(s1.p1.y, p.y),
        Math.max(s1.p1.x, p.x), Math.max(s1.p1.y, p.y)], s1);
      this.classifyPoints_(list, rtree, false);
      this.triangulate_(list, rtree);
      this.classifyPoints_(newPolygon, newRtree, false);
      this.triangulate_(newPolygon, newRtree);
      break;
    }
    s0 = list.nextItem();
  } while (s0 !== start);
};


/**
 * @private
 * @param {number} x X coordinate.
 * @param {number} y Y coordinate.
 * @param {number} i Index.
 * @return {module:ol/render/webgl/PolygonReplay~PolygonVertex} List item.
 */
WebGLPolygonReplay.prototype.createPoint_ = function(x, y, i) {
  let numVertices = this.vertices.length;
  this.vertices[numVertices++] = x;
  this.vertices[numVertices++] = y;
  /** @type {module:ol/render/webgl/PolygonReplay~PolygonVertex} */
  const p = {
    x: x,
    y: y,
    i: i,
    reflex: undefined
  };
  return p;
};


/**
 * @private
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p0 First point of segment.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p1 Second point of segment.
 * @param {module:ol/structs/LinkedList} list Polygon ring.
 * @param {module:ol/structs/RBush=} opt_rtree Insert the segment into the R-Tree.
 * @return {module:ol/render/webgl/PolygonReplay~PolygonSegment} segment.
 */
WebGLPolygonReplay.prototype.insertItem_ = function(p0, p1, list, opt_rtree) {
  const seg = {
    p0: p0,
    p1: p1
  };
  list.insertItem(seg);
  if (opt_rtree) {
    opt_rtree.insert([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y),
      Math.max(p0.x, p1.x), Math.max(p0.y, p1.y)], seg);
  }
  return seg;
};


/**
  * @private
  * @param {module:ol/render/webgl/PolygonReplay~PolygonSegment} s0 Segment before the remove candidate.
  * @param {module:ol/render/webgl/PolygonReplay~PolygonSegment} s1 Remove candidate segment.
  * @param {module:ol/structs/LinkedList} list Polygon ring.
  * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
  */
WebGLPolygonReplay.prototype.removeItem_ = function(s0, s1, list, rtree) {
  if (list.getCurrItem() === s1) {
    list.removeItem();
    s0.p1 = s1.p1;
    rtree.remove(s1);
    rtree.update([Math.min(s0.p0.x, s0.p1.x), Math.min(s0.p0.y, s0.p1.y),
      Math.max(s0.p0.x, s0.p1.x), Math.max(s0.p0.y, s0.p1.y)], s0);
  }
};


/**
 * @private
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p0 First point.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p1 Second point.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p2 Third point.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 * @param {boolean=} opt_reflex Only include reflex points.
 * @return {Array.<module:ol/render/webgl/PolygonReplay~PolygonVertex>} Points in the triangle.
 */
WebGLPolygonReplay.prototype.getPointsInTriangle_ = function(p0, p1, p2, rtree, opt_reflex) {
  const result = [];
  const segmentsInExtent = rtree.getInExtent([Math.min(p0.x, p1.x, p2.x),
    Math.min(p0.y, p1.y, p2.y), Math.max(p0.x, p1.x, p2.x), Math.max(p0.y,
      p1.y, p2.y)]);
  for (let i = 0, ii = segmentsInExtent.length; i < ii; ++i) {
    for (const j in segmentsInExtent[i]) {
      const p = segmentsInExtent[i][j];
      if (typeof p === 'object' && (!opt_reflex || p.reflex)) {
        if ((p.x !== p0.x || p.y !== p0.y) && (p.x !== p1.x || p.y !== p1.y) &&
            (p.x !== p2.x || p.y !== p2.y) && result.indexOf(p) === -1 &&
            Object(contains["b" /* linearRingContainsXY */])([p0.x, p0.y, p1.x, p1.y, p2.x, p2.y], 0, 6, 2, p.x, p.y)) {
          result.push(p);
        }
      }
    }
  }
  return result;
};


/**
 * @private
 * @param {module:ol/render/webgl/PolygonReplay~PolygonSegment} segment Segment.
 * @param {module:ol/structs/RBush} rtree R-Tree of the polygon.
 * @param {boolean=} opt_touch Touching segments should be considered an intersection.
 * @return {Array.<module:ol/render/webgl/PolygonReplay~PolygonSegment>} Intersecting segments.
 */
WebGLPolygonReplay.prototype.getIntersections_ = function(segment, rtree, opt_touch) {
  const p0 = segment.p0;
  const p1 = segment.p1;
  const segmentsInExtent = rtree.getInExtent([Math.min(p0.x, p1.x),
    Math.min(p0.y, p1.y), Math.max(p0.x, p1.x), Math.max(p0.y, p1.y)]);
  const result = [];
  for (let i = 0, ii = segmentsInExtent.length; i < ii; ++i) {
    const currSeg = segmentsInExtent[i];
    if (segment !== currSeg && (opt_touch || currSeg.p0 !== p1 || currSeg.p1 !== p0) &&
        this.calculateIntersection_(p0, p1, currSeg.p0, currSeg.p1, opt_touch)) {
      result.push(currSeg);
    }
  }
  return result;
};


/**
 * Line intersection algorithm by Paul Bourke.
 * @see http://paulbourke.net/geometry/pointlineplane/
 *
 * @private
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p0 First point.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p1 Second point.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p2 Third point.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p3 Fourth point.
 * @param {boolean=} opt_touch Touching segments should be considered an intersection.
 * @return {Array.<number>|undefined} Intersection coordinates.
 */
WebGLPolygonReplay.prototype.calculateIntersection_ = function(p0, p1, p2, p3, opt_touch) {
  const denom = (p3.y - p2.y) * (p1.x - p0.x) - (p3.x - p2.x) * (p1.y - p0.y);
  if (denom !== 0) {
    const ua = ((p3.x - p2.x) * (p0.y - p2.y) - (p3.y - p2.y) * (p0.x - p2.x)) / denom;
    const ub = ((p1.x - p0.x) * (p0.y - p2.y) - (p1.y - p0.y) * (p0.x - p2.x)) / denom;
    if ((!opt_touch && ua > EPSILON && ua < 1 - EPSILON &&
        ub > EPSILON && ub < 1 - EPSILON) || (opt_touch &&
        ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1)) {
      return [p0.x + ua * (p1.x - p0.x), p0.y + ua * (p1.y - p0.y)];
    }
  }
  return undefined;
};


/**
 * @private
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p0 Point before the start of the diagonal.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p1 Start point of the diagonal.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p2 Ear candidate.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p3 End point of the diagonal.
 * @param {module:ol/render/webgl/PolygonReplay~PolygonVertex} p4 Point after the end of the diagonal.
 * @return {boolean} Diagonal is inside the polygon.
 */
WebGLPolygonReplay.prototype.diagonalIsInside_ = function(p0, p1, p2, p3, p4) {
  if (p1.reflex === undefined || p3.reflex === undefined) {
    return false;
  }
  const p1IsLeftOf = (p2.x - p3.x) * (p1.y - p3.y) > (p2.y - p3.y) * (p1.x - p3.x);
  const p1IsRightOf = (p4.x - p3.x) * (p1.y - p3.y) < (p4.y - p3.y) * (p1.x - p3.x);
  const p3IsLeftOf = (p0.x - p1.x) * (p3.y - p1.y) > (p0.y - p1.y) * (p3.x - p1.x);
  const p3IsRightOf = (p2.x - p1.x) * (p3.y - p1.y) < (p2.y - p1.y) * (p3.x - p1.x);
  const p1InCone = p3.reflex ? p1IsRightOf || p1IsLeftOf : p1IsRightOf && p1IsLeftOf;
  const p3InCone = p1.reflex ? p3IsRightOf || p3IsLeftOf : p3IsRightOf && p3IsLeftOf;
  return p1InCone && p3InCone;
};


/**
 * @inheritDoc
 */
WebGLPolygonReplay.prototype.drawMultiPolygon = function(multiPolygonGeometry, feature) {
  const endss = multiPolygonGeometry.getEndss();
  const stride = multiPolygonGeometry.getStride();
  const currIndex = this.indices.length;
  const currLineIndex = this.lineStringReplay.getCurrentIndex();
  const flatCoordinates = multiPolygonGeometry.getFlatCoordinates();
  let i, ii, j, jj;
  let start = 0;
  for (i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    if (ends.length > 0) {
      const outerRing = Object(flat_transform["d" /* translate */])(flatCoordinates, start, ends[0],
        stride, -this.origin[0], -this.origin[1]);
      if (outerRing.length) {
        const holes = [];
        let holeFlatCoords;
        for (j = 1, jj = ends.length; j < jj; ++j) {
          if (ends[j] !== ends[j - 1]) {
            holeFlatCoords = Object(flat_transform["d" /* translate */])(flatCoordinates, ends[j - 1],
              ends[j], stride, -this.origin[0], -this.origin[1]);
            holes.push(holeFlatCoords);
          }
        }
        this.lineStringReplay.drawPolygonCoordinates(outerRing, holes, stride);
        this.drawCoordinates_(outerRing, holes, stride);
      }
    }
    start = ends[ends.length - 1];
  }
  if (this.indices.length > currIndex) {
    this.startIndices.push(currIndex);
    this.startIndicesFeature.push(feature);
    if (this.state_.changed) {
      this.styleIndices_.push(currIndex);
      this.state_.changed = false;
    }
  }
  if (this.lineStringReplay.getCurrentIndex() > currLineIndex) {
    this.lineStringReplay.setPolygonStyle(feature, currLineIndex);
  }
};


/**
 * @inheritDoc
 */
WebGLPolygonReplay.prototype.drawPolygon = function(polygonGeometry, feature) {
  const ends = polygonGeometry.getEnds();
  const stride = polygonGeometry.getStride();
  if (ends.length > 0) {
    const flatCoordinates = polygonGeometry.getFlatCoordinates().map(Number);
    const outerRing = Object(flat_transform["d" /* translate */])(flatCoordinates, 0, ends[0],
      stride, -this.origin[0], -this.origin[1]);
    if (outerRing.length) {
      const holes = [];
      let i, ii, holeFlatCoords;
      for (i = 1, ii = ends.length; i < ii; ++i) {
        if (ends[i] !== ends[i - 1]) {
          holeFlatCoords = Object(flat_transform["d" /* translate */])(flatCoordinates, ends[i - 1],
            ends[i], stride, -this.origin[0], -this.origin[1]);
          holes.push(holeFlatCoords);
        }
      }

      this.startIndices.push(this.indices.length);
      this.startIndicesFeature.push(feature);
      if (this.state_.changed) {
        this.styleIndices_.push(this.indices.length);
        this.state_.changed = false;
      }
      this.lineStringReplay.setPolygonStyle(feature);

      this.lineStringReplay.drawPolygonCoordinates(outerRing, holes, stride);
      this.drawCoordinates_(outerRing, holes, stride);
    }
  }
};


/**
 * @inheritDoc
 **/
WebGLPolygonReplay.prototype.finish = function(context) {
  // create, bind, and populate the vertices buffer
  this.verticesBuffer = new Buffer(this.vertices);

  // create, bind, and populate the indices buffer
  this.indicesBuffer = new Buffer(this.indices);

  this.startIndices.push(this.indices.length);

  this.lineStringReplay.finish(context);

  //Clean up, if there is nothing to draw
  if (this.styleIndices_.length === 0 && this.styles_.length > 0) {
    this.styles_ = [];
  }

  this.vertices = null;
  this.indices = null;
};


/**
 * @inheritDoc
 */
WebGLPolygonReplay.prototype.getDeleteResourcesFunction = function(context) {
  const verticesBuffer = this.verticesBuffer;
  const indicesBuffer = this.indicesBuffer;
  const lineDeleter = this.lineStringReplay.getDeleteResourcesFunction(context);
  return function() {
    context.deleteBuffer(verticesBuffer);
    context.deleteBuffer(indicesBuffer);
    lineDeleter();
  };
};


/**
 * @inheritDoc
 */
WebGLPolygonReplay.prototype.setUpProgram = function(gl, context, size, pixelRatio) {
  // get the program
  const program = context.getProgram(polygonreplay_defaultshader_fragment, polygonreplay_defaultshader_vertex);

  // get the locations
  let locations;
  if (!this.defaultLocations_) {
    locations = new polygonreplay_defaultshader_Locations(gl, program);
    this.defaultLocations_ = locations;
  } else {
    locations = this.defaultLocations_;
  }

  context.useProgram(program);

  // enable the vertex attrib arrays
  gl.enableVertexAttribArray(locations.a_position);
  gl.vertexAttribPointer(locations.a_position, 2, webgl["l" /* FLOAT */],
    false, 8, 0);

  return locations;
};


/**
 * @inheritDoc
 */
WebGLPolygonReplay.prototype.shutDownProgram = function(gl, locations) {
  gl.disableVertexAttribArray(locations.a_position);
};


/**
 * @inheritDoc
 */
WebGLPolygonReplay.prototype.drawReplay = function(gl, context, skippedFeaturesHash, hitDetection) {
  //Save GL parameters.
  const tmpDepthFunc = /** @type {number} */ (gl.getParameter(gl.DEPTH_FUNC));
  const tmpDepthMask = /** @type {boolean} */ (gl.getParameter(gl.DEPTH_WRITEMASK));

  if (!hitDetection) {
    gl.enable(gl.DEPTH_TEST);
    gl.depthMask(true);
    gl.depthFunc(gl.NOTEQUAL);
  }

  if (!Object(obj["d" /* isEmpty */])(skippedFeaturesHash)) {
    this.drawReplaySkipping_(gl, context, skippedFeaturesHash);
  } else {
    //Draw by style groups to minimize drawElements() calls.
    let i, start, end, nextStyle;
    end = this.startIndices[this.startIndices.length - 1];
    for (i = this.styleIndices_.length - 1; i >= 0; --i) {
      start = this.styleIndices_[i];
      nextStyle = this.styles_[i];
      this.setFillStyle_(gl, nextStyle);
      this.drawElements(gl, context, start, end);
      end = start;
    }
  }
  if (!hitDetection) {
    gl.disable(gl.DEPTH_TEST);
    gl.clear(gl.DEPTH_BUFFER_BIT);
    //Restore GL parameters.
    gl.depthMask(tmpDepthMask);
    gl.depthFunc(tmpDepthFunc);
  }
};


/**
 * @inheritDoc
 */
WebGLPolygonReplay.prototype.drawHitDetectionReplayOneByOne = function(gl, context, skippedFeaturesHash,
  featureCallback, opt_hitExtent) {
  let i, start, end, nextStyle, groupStart, feature, featureUid, featureIndex;
  featureIndex = this.startIndices.length - 2;
  end = this.startIndices[featureIndex + 1];
  for (i = this.styleIndices_.length - 1; i >= 0; --i) {
    nextStyle = this.styles_[i];
    this.setFillStyle_(gl, nextStyle);
    groupStart = this.styleIndices_[i];

    while (featureIndex >= 0 &&
        this.startIndices[featureIndex] >= groupStart) {
      start = this.startIndices[featureIndex];
      feature = this.startIndicesFeature[featureIndex];
      featureUid = Object(util["b" /* getUid */])(feature).toString();

      if (skippedFeaturesHash[featureUid] === undefined &&
          feature.getGeometry() &&
          (opt_hitExtent === undefined || Object(ol_extent["F" /* intersects */])(
            /** @type {Array<number>} */ (opt_hitExtent),
            feature.getGeometry().getExtent()))) {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        this.drawElements(gl, context, start, end);

        const result = featureCallback(feature);

        if (result) {
          return result;
        }

      }
      featureIndex--;
      end = start;
    }
  }
  return undefined;
};


/**
 * @private
 * @param {WebGLRenderingContext} gl gl.
 * @param {module:ol/webgl/Context} context Context.
 * @param {Object} skippedFeaturesHash Ids of features to skip.
 */
WebGLPolygonReplay.prototype.drawReplaySkipping_ = function(gl, context, skippedFeaturesHash) {
  let i, start, end, nextStyle, groupStart, feature, featureUid, featureIndex, featureStart;
  featureIndex = this.startIndices.length - 2;
  end = start = this.startIndices[featureIndex + 1];
  for (i = this.styleIndices_.length - 1; i >= 0; --i) {
    nextStyle = this.styles_[i];
    this.setFillStyle_(gl, nextStyle);
    groupStart = this.styleIndices_[i];

    while (featureIndex >= 0 &&
        this.startIndices[featureIndex] >= groupStart) {
      featureStart = this.startIndices[featureIndex];
      feature = this.startIndicesFeature[featureIndex];
      featureUid = Object(util["b" /* getUid */])(feature).toString();

      if (skippedFeaturesHash[featureUid]) {
        if (start !== end) {
          this.drawElements(gl, context, start, end);
          gl.clear(gl.DEPTH_BUFFER_BIT);
        }
        end = featureStart;
      }
      featureIndex--;
      start = featureStart;
    }
    if (start !== end) {
      this.drawElements(gl, context, start, end);
      gl.clear(gl.DEPTH_BUFFER_BIT);
    }
    start = end = groupStart;
  }
};


/**
 * @private
 * @param {WebGLRenderingContext} gl gl.
 * @param {Array.<number>} color Color.
 */
WebGLPolygonReplay.prototype.setFillStyle_ = function(gl, color) {
  gl.uniform4fv(this.defaultLocations_.u_color, color);
};


/**
 * @inheritDoc
 */
WebGLPolygonReplay.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {
  let fillStyleColor = fillStyle ? fillStyle.getColor() : [0, 0, 0, 0];
  if (!(fillStyleColor instanceof CanvasGradient) &&
      !(fillStyleColor instanceof CanvasPattern)) {
    fillStyleColor = Object(color["a" /* asArray */])(fillStyleColor).map(function(c, i) {
      return i != 3 ? c / 255 : c;
    }) || DEFAULT_FILLSTYLE;
  } else {
    fillStyleColor = DEFAULT_FILLSTYLE;
  }
  if (!this.state_.fillColor || !Object(array["b" /* equals */])(fillStyleColor, this.state_.fillColor)) {
    this.state_.fillColor = fillStyleColor;
    this.state_.changed = true;
    this.styles_.push(fillStyleColor);
  }
  //Provide a null stroke style, if no strokeStyle is provided. Required for the draw interaction to work.
  if (strokeStyle) {
    this.lineStringReplay.setFillStrokeStyle(null, strokeStyle);
  } else {
    const nullStrokeStyle = new Stroke["a" /* default */]({
      color: [0, 0, 0, 0],
      lineWidth: 0
    });
    this.lineStringReplay.setFillStrokeStyle(null, nullStrokeStyle);
  }
};
/* harmony default export */ var PolygonReplay = (WebGLPolygonReplay);

// EXTERNAL MODULE: ../src/ol/colorlike.js
var colorlike = __webpack_require__(99);

// EXTERNAL MODULE: ../src/ol/has.js
var has = __webpack_require__(48);

// EXTERNAL MODULE: ../src/ol/style/AtlasManager.js
var AtlasManager = __webpack_require__(211);

// CONCATENATED MODULE: ../src/ol/render/webgl/TextReplay.js
/**
 * @module ol/render/webgl/TextReplay
 */











/**
 * @typedef {Object} GlyphAtlas
 * @property {module:ol/style/AtlasManager} atlas
 * @property {Object.<string, number>} width
 * @property {number} height
 */


/**
 * @constructor
 * @extends {module:ol/render/webgl/TextureReplay}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Max extent.
 * @struct
 */
const WebGLTextReplay = function(tolerance, maxExtent) {
  TextureReplay.call(this, tolerance, maxExtent);

  /**
   * @private
   * @type {Array.<HTMLCanvasElement>}
   */
  this.images_ = [];

  /**
   * @private
   * @type {Array.<WebGLTexture>}
   */
  this.textures_ = [];

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.measureCanvas_ = Object(dom["a" /* createCanvasContext2D */])(0, 0).canvas;

  /**
   * @private
   * @type {{strokeColor: (module:ol/colorlike~ColorLike|null),
   *         lineCap: (string|undefined),
   *         lineDash: Array.<number>,
   *         lineDashOffset: (number|undefined),
   *         lineJoin: (string|undefined),
   *         lineWidth: number,
   *         miterLimit: (number|undefined),
   *         fillColor: (module:ol/colorlike~ColorLike|null),
   *         font: (string|undefined),
   *         scale: (number|undefined)}}
   */
  this.state_ = {
    strokeColor: null,
    lineCap: undefined,
    lineDash: null,
    lineDashOffset: undefined,
    lineJoin: undefined,
    lineWidth: 0,
    miterLimit: undefined,
    fillColor: null,
    font: undefined,
    scale: undefined
  };

  /**
   * @private
   * @type {string}
   */
  this.text_ = '';

  /**
   * @private
   * @type {number|undefined}
   */
  this.textAlign_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.textBaseline_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.offsetX_ = undefined;

  /**
   * @private
   * @type {number|undefined}
   */
  this.offsetY_ = undefined;

  /**
   * @private
   * @type {Object.<string, module:ol/render/webgl/TextReplay~GlyphAtlas>}
   */
  this.atlases_ = {};

  /**
   * @private
   * @type {module:ol/render/webgl/TextReplay~GlyphAtlas|undefined}
   */
  this.currAtlas_ = undefined;

  this.scale = 1;

  this.opacity = 1;

};

Object(util["c" /* inherits */])(WebGLTextReplay, TextureReplay);


/**
 * @inheritDoc
 */
WebGLTextReplay.prototype.drawText = function(geometry, feature) {
  if (this.text_) {
    let flatCoordinates = null;
    const offset = 0;
    let end = 2;
    let stride = 2;
    switch (geometry.getType()) {
      case GeometryType["a" /* default */].POINT:
      case GeometryType["a" /* default */].MULTI_POINT:
        flatCoordinates = geometry.getFlatCoordinates();
        end = flatCoordinates.length;
        stride = geometry.getStride();
        break;
      case GeometryType["a" /* default */].CIRCLE:
        flatCoordinates = /** @type {module:ol/geom/Circle} */ (geometry).getCenter();
        break;
      case GeometryType["a" /* default */].LINE_STRING:
        flatCoordinates = /** @type {module:ol/geom/LineString} */ (geometry).getFlatMidpoint();
        break;
      case GeometryType["a" /* default */].MULTI_LINE_STRING:
        flatCoordinates = /** @type {module:ol/geom/MultiLineString} */ (geometry).getFlatMidpoints();
        end = flatCoordinates.length;
        break;
      case GeometryType["a" /* default */].POLYGON:
        flatCoordinates = /** @type {module:ol/geom/Polygon} */ (geometry).getFlatInteriorPoint();
        break;
      case GeometryType["a" /* default */].MULTI_POLYGON:
        flatCoordinates = /** @type {module:ol/geom/MultiPolygon} */ (geometry).getFlatInteriorPoints();
        end = flatCoordinates.length;
        break;
      default:
    }
    this.startIndices.push(this.indices.length);
    this.startIndicesFeature.push(feature);

    const glyphAtlas = this.currAtlas_;
    const lines = this.text_.split('\n');
    const textSize = this.getTextSize_(lines);
    let i, ii, j, jj, currX, currY, charArr, charInfo;
    const anchorX = Math.round(textSize[0] * this.textAlign_ - this.offsetX_);
    const anchorY = Math.round(textSize[1] * this.textBaseline_ - this.offsetY_);
    const lineWidth = (this.state_.lineWidth / 2) * this.state_.scale;

    for (i = 0, ii = lines.length; i < ii; ++i) {
      currX = 0;
      currY = glyphAtlas.height * i;
      charArr = lines[i].split('');

      for (j = 0, jj = charArr.length; j < jj; ++j) {
        charInfo = glyphAtlas.atlas.getInfo(charArr[j]);

        if (charInfo) {
          const image = charInfo.image;

          this.anchorX = anchorX - currX;
          this.anchorY = anchorY - currY;
          this.originX = j === 0 ? charInfo.offsetX - lineWidth : charInfo.offsetX;
          this.originY = charInfo.offsetY;
          this.height = glyphAtlas.height;
          this.width = j === 0 || j === charArr.length - 1 ?
            glyphAtlas.width[charArr[j]] + lineWidth : glyphAtlas.width[charArr[j]];
          this.imageHeight = image.height;
          this.imageWidth = image.width;

          if (this.images_.length === 0) {
            this.images_.push(image);
          } else {
            const currentImage = this.images_[this.images_.length - 1];
            if (Object(util["b" /* getUid */])(currentImage) != Object(util["b" /* getUid */])(image)) {
              this.groupIndices.push(this.indices.length);
              this.images_.push(image);
            }
          }

          this.drawText_(flatCoordinates, offset, end, stride);
        }
        currX += this.width;
      }
    }
  }
};


/**
 * @private
 * @param {Array.<string>} lines Label to draw split to lines.
 * @return {Array.<number>} Size of the label in pixels.
 */
WebGLTextReplay.prototype.getTextSize_ = function(lines) {
  const self = this;
  const glyphAtlas = this.currAtlas_;
  const textHeight = lines.length * glyphAtlas.height;
  //Split every line to an array of chars, sum up their width, and select the longest.
  const textWidth = lines.map(function(str) {
    let sum = 0;
    for (let i = 0, ii = str.length; i < ii; ++i) {
      const curr = str[i];
      if (!glyphAtlas.width[curr]) {
        self.addCharToAtlas_(curr);
      }
      sum += glyphAtlas.width[curr] ? glyphAtlas.width[curr] : 0;
    }
    return sum;
  }).reduce(function(max, curr) {
    return Math.max(max, curr);
  });

  return [textWidth, textHeight];
};


/**
 * @private
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 */
WebGLTextReplay.prototype.drawText_ = function(flatCoordinates, offset, end, stride) {
  for (let i = offset, ii = end; i < ii; i += stride) {
    this.drawCoordinates(flatCoordinates, offset, end, stride);
  }
};


/**
 * @private
 * @param {string} char Character.
 */
WebGLTextReplay.prototype.addCharToAtlas_ = function(char) {
  if (char.length === 1) {
    const glyphAtlas = this.currAtlas_;
    const state = this.state_;
    const mCtx = this.measureCanvas_.getContext('2d');
    mCtx.font = state.font;
    const width = Math.ceil(mCtx.measureText(char).width * state.scale);

    const info = glyphAtlas.atlas.add(char, width, glyphAtlas.height,
      function(ctx, x, y) {
        //Parameterize the canvas
        ctx.font = /** @type {string} */ (state.font);
        ctx.fillStyle = state.fillColor;
        ctx.strokeStyle = state.strokeColor;
        ctx.lineWidth = state.lineWidth;
        ctx.lineCap = /*** @type {string} */ (state.lineCap);
        ctx.lineJoin = /** @type {string} */ (state.lineJoin);
        ctx.miterLimit = /** @type {number} */ (state.miterLimit);
        ctx.textAlign = 'left';
        ctx.textBaseline = 'top';
        if (has["a" /* CANVAS_LINE_DASH */] && state.lineDash) {
          //FIXME: use pixelRatio
          ctx.setLineDash(state.lineDash);
          ctx.lineDashOffset = /** @type {number} */ (state.lineDashOffset);
        }
        if (state.scale !== 1) {
          //FIXME: use pixelRatio
          ctx.setTransform(/** @type {number} */ (state.scale), 0, 0,
            /** @type {number} */ (state.scale), 0, 0);
        }

        //Draw the character on the canvas
        if (state.strokeColor) {
          ctx.strokeText(char, x, y);
        }
        if (state.fillColor) {
          ctx.fillText(char, x, y);
        }
      });

    if (info) {
      glyphAtlas.width[char] = width;
    }
  }
};


/**
 * @inheritDoc
 */
WebGLTextReplay.prototype.finish = function(context) {
  const gl = context.getGL();

  this.groupIndices.push(this.indices.length);
  this.hitDetectionGroupIndices = this.groupIndices;

  // create, bind, and populate the vertices buffer
  this.verticesBuffer = new Buffer(this.vertices);

  // create, bind, and populate the indices buffer
  this.indicesBuffer = new Buffer(this.indices);

  // create textures
  /** @type {Object.<string, WebGLTexture>} */
  const texturePerImage = {};

  this.createTextures(this.textures_, this.images_, texturePerImage, gl);

  this.state_ = {
    strokeColor: null,
    lineCap: undefined,
    lineDash: null,
    lineDashOffset: undefined,
    lineJoin: undefined,
    lineWidth: 0,
    miterLimit: undefined,
    fillColor: null,
    font: undefined,
    scale: undefined
  };
  this.text_ = '';
  this.textAlign_ = undefined;
  this.textBaseline_ = undefined;
  this.offsetX_ = undefined;
  this.offsetY_ = undefined;
  this.images_ = null;
  this.atlases_ = {};
  this.currAtlas_ = undefined;
  TextureReplay.prototype.finish.call(this, context);
};


/**
 * @inheritDoc
 */
WebGLTextReplay.prototype.setTextStyle = function(textStyle) {
  const state = this.state_;
  const textFillStyle = textStyle.getFill();
  const textStrokeStyle = textStyle.getStroke();
  if (!textStyle || !textStyle.getText() || (!textFillStyle && !textStrokeStyle)) {
    this.text_ = '';
  } else {
    if (!textFillStyle) {
      state.fillColor = null;
    } else {
      const textFillStyleColor = textFillStyle.getColor();
      state.fillColor = Object(colorlike["a" /* asColorLike */])(textFillStyleColor ?
        textFillStyleColor : DEFAULT_FILLSTYLE);
    }
    if (!textStrokeStyle) {
      state.strokeColor = null;
      state.lineWidth = 0;
    } else {
      const textStrokeStyleColor = textStrokeStyle.getColor();
      state.strokeColor = Object(colorlike["a" /* asColorLike */])(textStrokeStyleColor ?
        textStrokeStyleColor : DEFAULT_STROKESTYLE);
      state.lineWidth = textStrokeStyle.getWidth() || DEFAULT_LINEWIDTH;
      state.lineCap = textStrokeStyle.getLineCap() || DEFAULT_LINECAP;
      state.lineDashOffset = textStrokeStyle.getLineDashOffset() || DEFAULT_LINEDASHOFFSET;
      state.lineJoin = textStrokeStyle.getLineJoin() || DEFAULT_LINEJOIN;
      state.miterLimit = textStrokeStyle.getMiterLimit() || DEFAULT_MITERLIMIT;
      const lineDash = textStrokeStyle.getLineDash();
      state.lineDash = lineDash ? lineDash.slice() : DEFAULT_LINEDASH;
    }
    state.font = textStyle.getFont() || DEFAULT_FONT;
    state.scale = textStyle.getScale() || 1;
    this.text_ = /** @type {string} */ (textStyle.getText());
    const textAlign = render_replay["b" /* TEXT_ALIGN */][textStyle.getTextAlign()];
    const textBaseline = render_replay["b" /* TEXT_ALIGN */][textStyle.getTextBaseline()];
    this.textAlign_ = textAlign === undefined ?
      DEFAULT_TEXTALIGN : textAlign;
    this.textBaseline_ = textBaseline === undefined ?
      DEFAULT_TEXTBASELINE : textBaseline;
    this.offsetX_ = textStyle.getOffsetX() || 0;
    this.offsetY_ = textStyle.getOffsetY() || 0;
    this.rotateWithView = !!textStyle.getRotateWithView();
    this.rotation = textStyle.getRotation() || 0;

    this.currAtlas_ = this.getAtlas_(state);
  }
};


/**
 * @private
 * @param {Object} state Font attributes.
 * @return {module:ol/render/webgl/TextReplay~GlyphAtlas} Glyph atlas.
 */
WebGLTextReplay.prototype.getAtlas_ = function(state) {
  let params = [];
  for (const i in state) {
    if (state[i] || state[i] === 0) {
      if (Array.isArray(state[i])) {
        params = params.concat(state[i]);
      } else {
        params.push(state[i]);
      }
    }
  }
  const hash = this.calculateHash_(params);
  if (!this.atlases_[hash]) {
    const mCtx = this.measureCanvas_.getContext('2d');
    mCtx.font = state.font;
    const height = Math.ceil((mCtx.measureText('M').width * 1.5 +
        state.lineWidth / 2) * state.scale);

    this.atlases_[hash] = {
      atlas: new AtlasManager["a" /* default */]({
        space: state.lineWidth + 1
      }),
      width: {},
      height: height
    };
  }
  return this.atlases_[hash];
};


/**
 * @private
 * @param {Array.<string|number>} params Array of parameters.
 * @return {string} Hash string.
 */
WebGLTextReplay.prototype.calculateHash_ = function(params) {
  //TODO: Create a more performant, reliable, general hash function.
  let hash = '';
  for (let i = 0, ii = params.length; i < ii; ++i) {
    hash += params[i];
  }
  return hash;
};


/**
 * @inheritDoc
 */
WebGLTextReplay.prototype.getTextures = function(opt_all) {
  return this.textures_;
};


/**
 * @inheritDoc
 */
WebGLTextReplay.prototype.getHitDetectionTextures = function() {
  return this.textures_;
};
/* harmony default export */ var TextReplay = (WebGLTextReplay);

// CONCATENATED MODULE: ../src/ol/render/webgl/ReplayGroup.js
/**
 * @module ol/render/webgl/ReplayGroup
 */












/**
 * @type {Array.<number>}
 */
const HIT_DETECTION_SIZE = [1, 1];

/**
 * @type {Object.<module:ol/render/ReplayType,
 *                function(new: module:ol/render/webgl/Replay, number,
 *                module:ol/extent~Extent)>}
 */
const BATCH_CONSTRUCTORS = {
  'Circle': CircleReplay,
  'Image': ImageReplay,
  'LineString': LineStringReplay,
  'Polygon': PolygonReplay,
  'Text': TextReplay
};


/**
 * @constructor
 * @extends {module:ol/render/ReplayGroup}
 * @param {number} tolerance Tolerance.
 * @param {module:ol/extent~Extent} maxExtent Max extent.
 * @param {number=} opt_renderBuffer Render buffer.
 * @struct
 */
const WebGLReplayGroup = function(tolerance, maxExtent, opt_renderBuffer) {
  ReplayGroup["a" /* default */].call(this);

  /**
   * @type {module:ol/extent~Extent}
   * @private
   */
  this.maxExtent_ = maxExtent;

  /**
   * @type {number}
   * @private
   */
  this.tolerance_ = tolerance;

  /**
   * @type {number|undefined}
   * @private
   */
  this.renderBuffer_ = opt_renderBuffer;

  /**
   * @private
   * @type {!Object.<string,
   *        Object.<module:ol/render/ReplayType, module:ol/render/webgl/Replay>>}
   */
  this.replaysByZIndex_ = {};

};

Object(util["c" /* inherits */])(WebGLReplayGroup, ReplayGroup["a" /* default */]);


/**
 * @param {module:ol/style/Style} style Style.
 * @param {boolean} group Group with previous replay.
 */
WebGLReplayGroup.prototype.addDeclutter = function(style, group) {};


/**
 * @param {module:ol/webgl/Context} context WebGL context.
 * @return {function()} Delete resources function.
 */
WebGLReplayGroup.prototype.getDeleteResourcesFunction = function(context) {
  const functions = [];
  let zKey;
  for (zKey in this.replaysByZIndex_) {
    const replays = this.replaysByZIndex_[zKey];
    for (const replayKey in replays) {
      functions.push(
        replays[replayKey].getDeleteResourcesFunction(context));
    }
  }
  return function() {
    const length = functions.length;
    let result;
    for (let i = 0; i < length; i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};


/**
 * @param {module:ol/webgl/Context} context Context.
 */
WebGLReplayGroup.prototype.finish = function(context) {
  let zKey;
  for (zKey in this.replaysByZIndex_) {
    const replays = this.replaysByZIndex_[zKey];
    for (const replayKey in replays) {
      replays[replayKey].finish(context);
    }
  }
};


/**
 * @inheritDoc
 */
WebGLReplayGroup.prototype.getReplay = function(zIndex, replayType) {
  const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
  let replays = this.replaysByZIndex_[zIndexKey];
  if (replays === undefined) {
    replays = {};
    this.replaysByZIndex_[zIndexKey] = replays;
  }
  let replay = replays[replayType];
  if (replay === undefined) {
    /**
     * @type {Function}
     */
    const Constructor = BATCH_CONSTRUCTORS[replayType];
    replay = new Constructor(this.tolerance_, this.maxExtent_);
    replays[replayType] = replay;
  }
  return replay;
};


/**
 * @inheritDoc
 */
WebGLReplayGroup.prototype.isEmpty = function() {
  return Object(obj["d" /* isEmpty */])(this.replaysByZIndex_);
};


/**
 * @param {module:ol/webgl/Context} context Context.
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {module:ol/size~Size} size Size.
 * @param {number} pixelRatio Pixel ratio.
 * @param {number} opacity Global opacity.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 */
WebGLReplayGroup.prototype.replay = function(context,
  center, resolution, rotation, size, pixelRatio,
  opacity, skippedFeaturesHash) {
  /** @type {Array.<number>} */
  const zs = Object.keys(this.replaysByZIndex_).map(Number);
  zs.sort(array["i" /* numberSafeCompareFunction */]);

  let i, ii, j, jj, replays, replay;
  for (i = 0, ii = zs.length; i < ii; ++i) {
    replays = this.replaysByZIndex_[zs[i].toString()];
    for (j = 0, jj = render_replay["a" /* ORDER */].length; j < jj; ++j) {
      replay = replays[render_replay["a" /* ORDER */][j]];
      if (replay !== undefined) {
        replay.replay(context,
          center, resolution, rotation, size, pixelRatio,
          opacity, skippedFeaturesHash,
          undefined, false);
      }
    }
  }
};


/**
 * @private
 * @param {module:ol/webgl/Context} context Context.
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {module:ol/size~Size} size Size.
 * @param {number} pixelRatio Pixel ratio.
 * @param {number} opacity Global opacity.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T|undefined} featureCallback Feature callback.
 * @param {boolean} oneByOne Draw features one-by-one for the hit-detecion.
 * @param {module:ol/extent~Extent=} opt_hitExtent Hit extent: Only features intersecting
 *  this extent are checked.
 * @return {T|undefined} Callback result.
 * @template T
 */
WebGLReplayGroup.prototype.replayHitDetection_ = function(context,
  center, resolution, rotation, size, pixelRatio, opacity,
  skippedFeaturesHash, featureCallback, oneByOne, opt_hitExtent) {
  /** @type {Array.<number>} */
  const zs = Object.keys(this.replaysByZIndex_).map(Number);
  zs.sort(function(a, b) {
    return b - a;
  });

  let i, ii, j, replays, replay, result;
  for (i = 0, ii = zs.length; i < ii; ++i) {
    replays = this.replaysByZIndex_[zs[i].toString()];
    for (j = render_replay["a" /* ORDER */].length - 1; j >= 0; --j) {
      replay = replays[render_replay["a" /* ORDER */][j]];
      if (replay !== undefined) {
        result = replay.replay(context,
          center, resolution, rotation, size, pixelRatio, opacity,
          skippedFeaturesHash, featureCallback, oneByOne, opt_hitExtent);
        if (result) {
          return result;
        }
      }
    }
  }
  return undefined;
};


/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/webgl/Context} context Context.
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {module:ol/size~Size} size Size.
 * @param {number} pixelRatio Pixel ratio.
 * @param {number} opacity Global opacity.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @param {function((module:ol/Feature|module:ol/render/Feature)): T|undefined} callback Feature callback.
 * @return {T|undefined} Callback result.
 * @template T
 */
WebGLReplayGroup.prototype.forEachFeatureAtCoordinate = function(
  coordinate, context, center, resolution, rotation, size, pixelRatio,
  opacity, skippedFeaturesHash,
  callback) {
  const gl = context.getGL();
  gl.bindFramebuffer(
    gl.FRAMEBUFFER, context.getHitDetectionFramebuffer());


  /**
   * @type {module:ol/extent~Extent}
   */
  let hitExtent;
  if (this.renderBuffer_ !== undefined) {
    // build an extent around the coordinate, so that only features that
    // intersect this extent are checked
    hitExtent = Object(ol_extent["c" /* buffer */])(Object(ol_extent["m" /* createOrUpdateFromCoordinate */])(coordinate), resolution * this.renderBuffer_);
  }

  return this.replayHitDetection_(context,
    coordinate, resolution, rotation, HIT_DETECTION_SIZE,
    pixelRatio, opacity, skippedFeaturesHash,
    /**
     * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
     * @return {?} Callback result.
     */
    function(feature) {
      const imageData = new Uint8Array(4);
      gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, imageData);

      if (imageData[3] > 0) {
        const result = callback(feature);
        if (result) {
          return result;
        }
      }
    }, true, hitExtent);
};


/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/webgl/Context} context Context.
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {module:ol/size~Size} size Size.
 * @param {number} pixelRatio Pixel ratio.
 * @param {number} opacity Global opacity.
 * @param {Object.<string, boolean>} skippedFeaturesHash Ids of features to skip.
 * @return {boolean} Is there a feature at the given coordinate?
 */
WebGLReplayGroup.prototype.hasFeatureAtCoordinate = function(
  coordinate, context, center, resolution, rotation, size, pixelRatio,
  opacity, skippedFeaturesHash) {
  const gl = context.getGL();
  gl.bindFramebuffer(
    gl.FRAMEBUFFER, context.getHitDetectionFramebuffer());

  const hasFeature = this.replayHitDetection_(context,
    coordinate, resolution, rotation, HIT_DETECTION_SIZE,
    pixelRatio, opacity, skippedFeaturesHash,
    /**
     * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
     * @return {boolean} Is there a feature?
     */
    function(feature) {
      const imageData = new Uint8Array(4);
      gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, imageData);
      return imageData[3] > 0;
    }, false);

  return hasFeature !== undefined;
};

/* harmony default export */ var webgl_ReplayGroup = (WebGLReplayGroup);

// CONCATENATED MODULE: ../src/ol/render/webgl/Immediate.js
/**
 * @module ol/render/webgl/Immediate
 */







/**
 * @constructor
 * @extends {module:ol/render/VectorContext}
 * @param {module:ol/webgl/Context} context Context.
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {module:ol/size~Size} size Size.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} pixelRatio Pixel ratio.
 * @struct
 */
const WebGLImmediateRenderer = function(context, center, resolution, rotation, size, extent, pixelRatio) {
  VectorContext["a" /* default */].call(this);

  /**
   * @private
   */
  this.context_ = context;

  /**
   * @private
   */
  this.center_ = center;

  /**
   * @private
   */
  this.extent_ = extent;

  /**
   * @private
   */
  this.pixelRatio_ = pixelRatio;

  /**
   * @private
   */
  this.size_ = size;

  /**
   * @private
   */
  this.rotation_ = rotation;

  /**
   * @private
   */
  this.resolution_ = resolution;

  /**
   * @private
   * @type {module:ol/style/Image}
   */
  this.imageStyle_ = null;

  /**
   * @private
   * @type {module:ol/style/Fill}
   */
  this.fillStyle_ = null;

  /**
   * @private
   * @type {module:ol/style/Stroke}
   */
  this.strokeStyle_ = null;

  /**
   * @private
   * @type {module:ol/style/Text}
   */
  this.textStyle_ = null;

};

Object(util["c" /* inherits */])(WebGLImmediateRenderer, VectorContext["a" /* default */]);


/**
 * @param {module:ol/render/webgl/ReplayGroup} replayGroup Replay group.
 * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry Geometry.
 * @private
 */
WebGLImmediateRenderer.prototype.drawText_ = function(replayGroup, geometry) {
  const context = this.context_;
  const replay = /** @type {module:ol/render/webgl/TextReplay} */ (
    replayGroup.getReplay(0, ReplayType["a" /* default */].TEXT));
  replay.setTextStyle(this.textStyle_);
  replay.drawText(geometry, null);
  replay.finish(context);
  // default colors
  const opacity = 1;
  const skippedFeatures = {};
  let featureCallback;
  const oneByOne = false;
  replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
    this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
    oneByOne);
  replay.getDeleteResourcesFunction(context)();
};


/**
 * Set the rendering style.  Note that since this is an immediate rendering API,
 * any `zIndex` on the provided style will be ignored.
 *
 * @param {module:ol/style/Style} style The rendering style.
 * @override
 * @api
 */
WebGLImmediateRenderer.prototype.setStyle = function(style) {
  this.setFillStrokeStyle(style.getFill(), style.getStroke());
  this.setImageStyle(style.getImage());
  this.setTextStyle(style.getText());
};


/**
 * Render a geometry into the canvas.  Call
 * {@link ol/render/webgl/Immediate#setStyle} first to set the rendering style.
 *
 * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry The geometry to render.
 * @override
 * @api
 */
WebGLImmediateRenderer.prototype.drawGeometry = function(geometry) {
  const type = geometry.getType();
  switch (type) {
    case GeometryType["a" /* default */].POINT:
      this.drawPoint(/** @type {module:ol/geom/Point} */ (geometry), null);
      break;
    case GeometryType["a" /* default */].LINE_STRING:
      this.drawLineString(/** @type {module:ol/geom/LineString} */ (geometry), null);
      break;
    case GeometryType["a" /* default */].POLYGON:
      this.drawPolygon(/** @type {module:ol/geom/Polygon} */ (geometry), null);
      break;
    case GeometryType["a" /* default */].MULTI_POINT:
      this.drawMultiPoint(/** @type {module:ol/geom/MultiPoint} */ (geometry), null);
      break;
    case GeometryType["a" /* default */].MULTI_LINE_STRING:
      this.drawMultiLineString(/** @type {module:ol/geom/MultiLineString} */ (geometry), null);
      break;
    case GeometryType["a" /* default */].MULTI_POLYGON:
      this.drawMultiPolygon(/** @type {module:ol/geom/MultiPolygon} */ (geometry), null);
      break;
    case GeometryType["a" /* default */].GEOMETRY_COLLECTION:
      this.drawGeometryCollection(/** @type {module:ol/geom/GeometryCollection} */ (geometry), null);
      break;
    case GeometryType["a" /* default */].CIRCLE:
      this.drawCircle(/** @type {module:ol/geom/Circle} */ (geometry), null);
      break;
    default:
      // pass
  }
};


/**
 * @inheritDoc
 * @api
 */
WebGLImmediateRenderer.prototype.drawFeature = function(feature, style) {
  const geometry = style.getGeometryFunction()(feature);
  if (!geometry || !Object(ol_extent["F" /* intersects */])(this.extent_, geometry.getExtent())) {
    return;
  }
  this.setStyle(style);
  this.drawGeometry(geometry);
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.drawGeometryCollection = function(geometry, data) {
  const geometries = geometry.getGeometriesArray();
  let i, ii;
  for (i = 0, ii = geometries.length; i < ii; ++i) {
    this.drawGeometry(geometries[i]);
  }
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.drawPoint = function(geometry, data) {
  const context = this.context_;
  const replayGroup = new webgl_ReplayGroup(1, this.extent_);
  const replay = /** @type {module:ol/render/webgl/ImageReplay} */ (
    replayGroup.getReplay(0, ReplayType["a" /* default */].IMAGE));
  replay.setImageStyle(this.imageStyle_);
  replay.drawPoint(geometry, data);
  replay.finish(context);
  // default colors
  const opacity = 1;
  const skippedFeatures = {};
  let featureCallback;
  const oneByOne = false;
  replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
    this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
    oneByOne);
  replay.getDeleteResourcesFunction(context)();

  if (this.textStyle_) {
    this.drawText_(replayGroup, geometry);
  }
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.drawMultiPoint = function(geometry, data) {
  const context = this.context_;
  const replayGroup = new webgl_ReplayGroup(1, this.extent_);
  const replay = /** @type {module:ol/render/webgl/ImageReplay} */ (
    replayGroup.getReplay(0, ReplayType["a" /* default */].IMAGE));
  replay.setImageStyle(this.imageStyle_);
  replay.drawMultiPoint(geometry, data);
  replay.finish(context);
  const opacity = 1;
  const skippedFeatures = {};
  let featureCallback;
  const oneByOne = false;
  replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
    this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
    oneByOne);
  replay.getDeleteResourcesFunction(context)();

  if (this.textStyle_) {
    this.drawText_(replayGroup, geometry);
  }
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.drawLineString = function(geometry, data) {
  const context = this.context_;
  const replayGroup = new webgl_ReplayGroup(1, this.extent_);
  const replay = /** @type {module:ol/render/webgl/LineStringReplay} */ (
    replayGroup.getReplay(0, ReplayType["a" /* default */].LINE_STRING));
  replay.setFillStrokeStyle(null, this.strokeStyle_);
  replay.drawLineString(geometry, data);
  replay.finish(context);
  const opacity = 1;
  const skippedFeatures = {};
  let featureCallback;
  const oneByOne = false;
  replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
    this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
    oneByOne);
  replay.getDeleteResourcesFunction(context)();

  if (this.textStyle_) {
    this.drawText_(replayGroup, geometry);
  }
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.drawMultiLineString = function(geometry, data) {
  const context = this.context_;
  const replayGroup = new webgl_ReplayGroup(1, this.extent_);
  const replay = /** @type {module:ol/render/webgl/LineStringReplay} */ (
    replayGroup.getReplay(0, ReplayType["a" /* default */].LINE_STRING));
  replay.setFillStrokeStyle(null, this.strokeStyle_);
  replay.drawMultiLineString(geometry, data);
  replay.finish(context);
  const opacity = 1;
  const skippedFeatures = {};
  let featureCallback;
  const oneByOne = false;
  replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
    this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
    oneByOne);
  replay.getDeleteResourcesFunction(context)();

  if (this.textStyle_) {
    this.drawText_(replayGroup, geometry);
  }
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.drawPolygon = function(geometry, data) {
  const context = this.context_;
  const replayGroup = new webgl_ReplayGroup(1, this.extent_);
  const replay = /** @type {module:ol/render/webgl/PolygonReplay} */ (
    replayGroup.getReplay(0, ReplayType["a" /* default */].POLYGON));
  replay.setFillStrokeStyle(this.fillStyle_, this.strokeStyle_);
  replay.drawPolygon(geometry, data);
  replay.finish(context);
  const opacity = 1;
  const skippedFeatures = {};
  let featureCallback;
  const oneByOne = false;
  replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
    this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
    oneByOne);
  replay.getDeleteResourcesFunction(context)();

  if (this.textStyle_) {
    this.drawText_(replayGroup, geometry);
  }
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.drawMultiPolygon = function(geometry, data) {
  const context = this.context_;
  const replayGroup = new webgl_ReplayGroup(1, this.extent_);
  const replay = /** @type {module:ol/render/webgl/PolygonReplay} */ (
    replayGroup.getReplay(0, ReplayType["a" /* default */].POLYGON));
  replay.setFillStrokeStyle(this.fillStyle_, this.strokeStyle_);
  replay.drawMultiPolygon(geometry, data);
  replay.finish(context);
  const opacity = 1;
  const skippedFeatures = {};
  let featureCallback;
  const oneByOne = false;
  replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
    this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
    oneByOne);
  replay.getDeleteResourcesFunction(context)();

  if (this.textStyle_) {
    this.drawText_(replayGroup, geometry);
  }
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.drawCircle = function(geometry, data) {
  const context = this.context_;
  const replayGroup = new webgl_ReplayGroup(1, this.extent_);
  const replay = /** @type {module:ol/render/webgl/CircleReplay} */ (
    replayGroup.getReplay(0, ReplayType["a" /* default */].CIRCLE));
  replay.setFillStrokeStyle(this.fillStyle_, this.strokeStyle_);
  replay.drawCircle(geometry, data);
  replay.finish(context);
  const opacity = 1;
  const skippedFeatures = {};
  let featureCallback;
  const oneByOne = false;
  replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
    this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
    oneByOne);
  replay.getDeleteResourcesFunction(context)();

  if (this.textStyle_) {
    this.drawText_(replayGroup, geometry);
  }
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.setImageStyle = function(imageStyle) {
  this.imageStyle_ = imageStyle;
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {
  this.fillStyle_ = fillStyle;
  this.strokeStyle_ = strokeStyle;
};


/**
 * @inheritDoc
 */
WebGLImmediateRenderer.prototype.setTextStyle = function(textStyle) {
  this.textStyle_ = textStyle;
};
/* harmony default export */ var Immediate = (WebGLImmediateRenderer);

// EXTERNAL MODULE: ../src/ol/renderer/Layer.js
var Layer = __webpack_require__(194);

// CONCATENATED MODULE: ../src/ol/renderer/webgl/defaultmapshader.js
/**
 * @module ol/renderer/webgl/defaultmapshader
 */
// This file is automatically generated, do not edit.
// Run `make shaders` to generate, and commit the result.





const defaultmapshader_fragment = new Fragment(webgl["g" /* DEBUG */] ?
  'precision mediump float;\nvarying vec2 v_texCoord;\n\n\nuniform float u_opacity;\nuniform sampler2D u_texture;\n\nvoid main(void) {\n  vec4 texColor = texture2D(u_texture, v_texCoord);\n  gl_FragColor.rgb = texColor.rgb;\n  gl_FragColor.a = texColor.a * u_opacity;\n}\n' :
  'precision mediump float;varying vec2 a;uniform float f;uniform sampler2D g;void main(void){vec4 texColor=texture2D(g,a);gl_FragColor.rgb=texColor.rgb;gl_FragColor.a=texColor.a*f;}');

const defaultmapshader_vertex = new Vertex(webgl["g" /* DEBUG */] ?
  'varying vec2 v_texCoord;\n\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\n\nuniform mat4 u_texCoordMatrix;\nuniform mat4 u_projectionMatrix;\n\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, 0., 1.);\n  v_texCoord = (u_texCoordMatrix * vec4(a_texCoord, 0., 1.)).st;\n}\n\n\n' :
  'varying vec2 a;attribute vec2 b;attribute vec2 c;uniform mat4 d;uniform mat4 e;void main(void){gl_Position=e*vec4(b,0.,1.);a=(d*vec4(c,0.,1.)).st;}');

// CONCATENATED MODULE: ../src/ol/renderer/webgl/defaultmapshader/Locations.js
/**
 * @module ol/renderer/webgl/defaultmapshader/Locations
 */
// This file is automatically generated, do not edit
// Run `make shaders` to generate, and commit the result.



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
const defaultmapshader_Locations_Locations = function(gl, program) {

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_texCoordMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_texCoordMatrix' : 'd');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_projectionMatrix = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_projectionMatrix' : 'e');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_opacity = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_opacity' : 'f');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_texture = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_texture' : 'g');

  /**
   * @type {number}
   */
  this.a_position = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_position' : 'b');

  /**
   * @type {number}
   */
  this.a_texCoord = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_texCoord' : 'c');
};

/* harmony default export */ var defaultmapshader_Locations = (defaultmapshader_Locations_Locations);

// CONCATENATED MODULE: ../src/ol/renderer/webgl/Layer.js
/**
 * @module ol/renderer/webgl/Layer
 */













/**
 * @constructor
 * @abstract
 * @extends {module:ol/renderer/Layer}
 * @param {module:ol/renderer/webgl/Map} mapRenderer Map renderer.
 * @param {module:ol/layer/Layer} layer Layer.
 */
const WebGLLayerRenderer = function(mapRenderer, layer) {

  Layer["a" /* default */].call(this, layer);

  /**
   * @protected
   * @type {module:ol/renderer/webgl/Map}
   */
  this.mapRenderer = mapRenderer;

  /**
   * @private
   * @type {module:ol/webgl/Buffer}
   */
  this.arrayBuffer_ = new Buffer([
    -1, -1, 0, 0,
    1, -1, 1, 0,
    -1, 1, 0, 1,
    1, 1, 1, 1
  ]);

  /**
   * @protected
   * @type {WebGLTexture}
   */
  this.texture = null;

  /**
   * @protected
   * @type {WebGLFramebuffer}
   */
  this.framebuffer = null;

  /**
   * @protected
   * @type {number|undefined}
   */
  this.framebufferDimension = undefined;

  /**
   * @protected
   * @type {module:ol/transform~Transform}
   */
  this.texCoordMatrix = Object(ol_transform["c" /* create */])();

  /**
   * @protected
   * @type {module:ol/transform~Transform}
   */
  this.projectionMatrix = Object(ol_transform["c" /* create */])();

  /**
   * @type {Array.<number>}
   * @private
   */
  this.tmpMat4_ = create();

  /**
   * @private
   * @type {module:ol/renderer/webgl/defaultmapshader/Locations}
   */
  this.defaultLocations_ = null;

};

Object(util["c" /* inherits */])(WebGLLayerRenderer, Layer["a" /* default */]);


/**
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {number} framebufferDimension Framebuffer dimension.
 * @protected
 */
WebGLLayerRenderer.prototype.bindFramebuffer = function(frameState, framebufferDimension) {

  const gl = this.mapRenderer.getGL();

  if (this.framebufferDimension === undefined ||
      this.framebufferDimension != framebufferDimension) {
    /**
     * @param {WebGLRenderingContext} gl GL.
     * @param {WebGLFramebuffer} framebuffer Framebuffer.
     * @param {WebGLTexture} texture Texture.
     */
    const postRenderFunction = function(gl, framebuffer, texture) {
      if (!gl.isContextLost()) {
        gl.deleteFramebuffer(framebuffer);
        gl.deleteTexture(texture);
      }
    }.bind(null, gl, this.framebuffer, this.texture);

    frameState.postRenderFunctions.push(
      /** @type {module:ol/PluggableMap~PostRenderFunction} */ (postRenderFunction)
    );

    const texture = createEmptyTexture(
      gl, framebufferDimension, framebufferDimension);

    const framebuffer = gl.createFramebuffer();
    gl.bindFramebuffer(webgl["n" /* FRAMEBUFFER */], framebuffer);
    gl.framebufferTexture2D(webgl["n" /* FRAMEBUFFER */],
      webgl["d" /* COLOR_ATTACHMENT0 */], webgl["A" /* TEXTURE_2D */], texture, 0);

    this.texture = texture;
    this.framebuffer = framebuffer;
    this.framebufferDimension = framebufferDimension;

  } else {
    gl.bindFramebuffer(webgl["n" /* FRAMEBUFFER */], this.framebuffer);
  }

};


/**
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/layer/Layer~State} layerState Layer state.
 * @param {module:ol/webgl/Context} context Context.
 */
WebGLLayerRenderer.prototype.composeFrame = function(frameState, layerState, context) {

  this.dispatchComposeEvent_(EventType["a" /* default */].PRECOMPOSE, context, frameState);

  context.bindBuffer(webgl["a" /* ARRAY_BUFFER */], this.arrayBuffer_);

  const gl = context.getGL();

  const program = context.getProgram(defaultmapshader_fragment, defaultmapshader_vertex);

  let locations;
  if (!this.defaultLocations_) {
    locations = new defaultmapshader_Locations(gl, program);
    this.defaultLocations_ = locations;
  } else {
    locations = this.defaultLocations_;
  }

  if (context.useProgram(program)) {
    gl.enableVertexAttribArray(locations.a_position);
    gl.vertexAttribPointer(
      locations.a_position, 2, webgl["l" /* FLOAT */], false, 16, 0);
    gl.enableVertexAttribArray(locations.a_texCoord);
    gl.vertexAttribPointer(
      locations.a_texCoord, 2, webgl["l" /* FLOAT */], false, 16, 8);
    gl.uniform1i(locations.u_texture, 0);
  }

  gl.uniformMatrix4fv(locations.u_texCoordMatrix, false,
    fromTransform(this.tmpMat4_, this.getTexCoordMatrix()));
  gl.uniformMatrix4fv(locations.u_projectionMatrix, false,
    fromTransform(this.tmpMat4_, this.getProjectionMatrix()));
  gl.uniform1f(locations.u_opacity, layerState.opacity);
  gl.bindTexture(webgl["A" /* TEXTURE_2D */], this.getTexture());
  gl.drawArrays(webgl["G" /* TRIANGLE_STRIP */], 0, 4);

  this.dispatchComposeEvent_(EventType["a" /* default */].POSTCOMPOSE, context, frameState);
};


/**
 * @param {module:ol/render/EventType} type Event type.
 * @param {module:ol/webgl/Context} context WebGL context.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @private
 */
WebGLLayerRenderer.prototype.dispatchComposeEvent_ = function(type, context, frameState) {
  const layer = this.getLayer();
  if (layer.hasListener(type)) {
    const viewState = frameState.viewState;
    const resolution = viewState.resolution;
    const pixelRatio = frameState.pixelRatio;
    const extent = frameState.extent;
    const center = viewState.center;
    const rotation = viewState.rotation;
    const size = frameState.size;

    const render = new Immediate(
      context, center, resolution, rotation, size, extent, pixelRatio);
    const composeEvent = new Event["a" /* default */](
      type, render, frameState, null, context);
    layer.dispatchEvent(composeEvent);
  }
};


/**
 * @return {!module:ol/transform~Transform} Matrix.
 */
WebGLLayerRenderer.prototype.getTexCoordMatrix = function() {
  return this.texCoordMatrix;
};


/**
 * @return {WebGLTexture} Texture.
 */
WebGLLayerRenderer.prototype.getTexture = function() {
  return this.texture;
};


/**
 * @return {!module:ol/transform~Transform} Matrix.
 */
WebGLLayerRenderer.prototype.getProjectionMatrix = function() {
  return this.projectionMatrix;
};


/**
 * Handle webglcontextlost.
 */
WebGLLayerRenderer.prototype.handleWebGLContextLost = function() {
  this.texture = null;
  this.framebuffer = null;
  this.framebufferDimension = undefined;
};


/**
 * @abstract
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/layer/Layer~State} layerState Layer state.
 * @param {module:ol/webgl/Context} context Context.
 * @return {boolean} whether composeFrame should be called.
 */
WebGLLayerRenderer.prototype.prepareFrame = function(frameState, layerState, context) {};


/**
 * @abstract
 * @param {module:ol~Pixel} pixel Pixel.
 * @param {module:ol/PluggableMap~FrameState} frameState FrameState.
 * @param {function(this: S, module:ol/layer/Layer, (Uint8ClampedArray|Uint8Array)): T} callback Layer
 *     callback.
 * @param {S} thisArg Value to use as `this` when executing `callback`.
 * @return {T|undefined} Callback result.
 * @template S,T,U
 */
WebGLLayerRenderer.prototype.forEachLayerAtPixel = function(pixel, frameState, callback, thisArg) {};
/* harmony default export */ var webgl_Layer = (WebGLLayerRenderer);

// CONCATENATED MODULE: ../src/ol/renderer/webgl/ImageLayer.js
/**
 * @module ol/renderer/webgl/ImageLayer
 */












/**
 * @constructor
 * @extends {module:ol/renderer/webgl/Layer}
 * @param {module:ol/renderer/webgl/Map} mapRenderer Map renderer.
 * @param {module:ol/layer/Image} imageLayer Tile layer.
 * @api
 */
const WebGLImageLayerRenderer = function(mapRenderer, imageLayer) {

  webgl_Layer.call(this, mapRenderer, imageLayer);

  /**
   * The last rendered image.
   * @private
   * @type {?module:ol/ImageBase}
   */
  this.image_ = null;

  /**
   * @private
   * @type {CanvasRenderingContext2D}
   */
  this.hitCanvasContext_ = null;

  /**
   * @private
   * @type {?module:ol/transform~Transform}
   */
  this.hitTransformationMatrix_ = null;

};

Object(util["c" /* inherits */])(WebGLImageLayerRenderer, webgl_Layer);


/**
 * Determine if this renderer handles the provided layer.
 * @param {module:ol/layer/Layer} layer The candidate layer.
 * @return {boolean} The renderer can render the layer.
 */
WebGLImageLayerRenderer['handles'] = function(layer) {
  return layer.getType() === LayerType["a" /* default */].IMAGE;
};


/**
 * Create a layer renderer.
 * @param {module:ol/renderer/Map} mapRenderer The map renderer.
 * @param {module:ol/layer/Layer} layer The layer to be rendererd.
 * @return {module:ol/renderer/webgl/ImageLayer} The layer renderer.
 */
WebGLImageLayerRenderer['create'] = function(mapRenderer, layer) {
  return new WebGLImageLayerRenderer(
    /** @type {module:ol/renderer/webgl/Map} */ (mapRenderer),
    /** @type {module:ol/layer/Image} */ (layer)
  );
};


/**
 * @param {module:ol/ImageBase} image Image.
 * @private
 * @return {WebGLTexture} Texture.
 */
WebGLImageLayerRenderer.prototype.createTexture_ = function(image) {

  // We meet the conditions to work with non-power of two textures.
  // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences#Non-Power_of_Two_Texture_Support
  // http://learningwebgl.com/blog/?p=2101

  const imageElement = image.getImage();
  const gl = this.mapRenderer.getGL();

  return createTexture(
    gl, imageElement, webgl["c" /* CLAMP_TO_EDGE */], webgl["c" /* CLAMP_TO_EDGE */]);
};


/**
 * @inheritDoc
 */
WebGLImageLayerRenderer.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg) {
  const layer = this.getLayer();
  const source = layer.getSource();
  const resolution = frameState.viewState.resolution;
  const rotation = frameState.viewState.rotation;
  const skippedFeatureUids = frameState.skippedFeatureUids;
  return source.forEachFeatureAtCoordinate(
    coordinate, resolution, rotation, hitTolerance, skippedFeatureUids,

    /**
     * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
     * @return {?} Callback result.
     */
    function(feature) {
      return callback.call(thisArg, feature, layer);
    });
};


/**
 * @inheritDoc
 */
WebGLImageLayerRenderer.prototype.prepareFrame = function(frameState, layerState, context) {

  const gl = this.mapRenderer.getGL();

  const pixelRatio = frameState.pixelRatio;
  const viewState = frameState.viewState;
  const viewCenter = viewState.center;
  const viewResolution = viewState.resolution;
  const viewRotation = viewState.rotation;

  let image = this.image_;
  let texture = this.texture;
  const imageLayer = /** @type {module:ol/layer/Image} */ (this.getLayer());
  const imageSource = imageLayer.getSource();

  const hints = frameState.viewHints;

  let renderedExtent = frameState.extent;
  if (layerState.extent !== undefined) {
    renderedExtent = Object(ol_extent["B" /* getIntersection */])(renderedExtent, layerState.extent);
  }
  if (!hints[ViewHint["a" /* default */].ANIMATING] && !hints[ViewHint["a" /* default */].INTERACTING] &&
      !Object(ol_extent["H" /* isEmpty */])(renderedExtent)) {
    let projection = viewState.projection;
    if (!common["a" /* ENABLE_RASTER_REPROJECTION */]) {
      const sourceProjection = imageSource.getProjection();
      if (sourceProjection) {
        projection = sourceProjection;
      }
    }
    const image_ = imageSource.getImage(renderedExtent, viewResolution,
      pixelRatio, projection);
    if (image_) {
      const loaded = this.loadImage(image_);
      if (loaded) {
        image = image_;
        texture = this.createTexture_(image_);
        if (this.texture) {
          /**
           * @param {WebGLRenderingContext} gl GL.
           * @param {WebGLTexture} texture Texture.
           */
          const postRenderFunction = function(gl, texture) {
            if (!gl.isContextLost()) {
              gl.deleteTexture(texture);
            }
          }.bind(null, gl, this.texture);
          frameState.postRenderFunctions.push(
            /** @type {module:ol/PluggableMap~PostRenderFunction} */ (postRenderFunction)
          );
        }
      }
    }
  }

  if (image) {
    const canvas = this.mapRenderer.getContext().getCanvas();

    this.updateProjectionMatrix_(canvas.width, canvas.height,
      pixelRatio, viewCenter, viewResolution, viewRotation,
      image.getExtent());
    this.hitTransformationMatrix_ = null;

    // Translate and scale to flip the Y coord.
    const texCoordMatrix = this.texCoordMatrix;
    Object(ol_transform["f" /* reset */])(texCoordMatrix);
    Object(ol_transform["h" /* scale */])(texCoordMatrix, 1, -1);
    Object(ol_transform["j" /* translate */])(texCoordMatrix, 0, -1);

    this.image_ = image;
    this.texture = texture;
  }

  return !!image;
};


/**
 * @param {number} canvasWidth Canvas width.
 * @param {number} canvasHeight Canvas height.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/coordinate~Coordinate} viewCenter View center.
 * @param {number} viewResolution View resolution.
 * @param {number} viewRotation View rotation.
 * @param {module:ol/extent~Extent} imageExtent Image extent.
 * @private
 */
WebGLImageLayerRenderer.prototype.updateProjectionMatrix_ = function(canvasWidth, canvasHeight, pixelRatio,
  viewCenter, viewResolution, viewRotation, imageExtent) {

  const canvasExtentWidth = canvasWidth * viewResolution;
  const canvasExtentHeight = canvasHeight * viewResolution;

  const projectionMatrix = this.projectionMatrix;
  Object(ol_transform["f" /* reset */])(projectionMatrix);
  Object(ol_transform["h" /* scale */])(projectionMatrix,
    pixelRatio * 2 / canvasExtentWidth,
    pixelRatio * 2 / canvasExtentHeight);
  Object(ol_transform["g" /* rotate */])(projectionMatrix, -viewRotation);
  Object(ol_transform["j" /* translate */])(projectionMatrix,
    imageExtent[0] - viewCenter[0],
    imageExtent[1] - viewCenter[1]);
  Object(ol_transform["h" /* scale */])(projectionMatrix,
    (imageExtent[2] - imageExtent[0]) / 2,
    (imageExtent[3] - imageExtent[1]) / 2);
  Object(ol_transform["j" /* translate */])(projectionMatrix, 1, 1);

};


/**
 * @inheritDoc
 */
WebGLImageLayerRenderer.prototype.hasFeatureAtCoordinate = function(coordinate, frameState) {
  const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, 0, functions["b" /* TRUE */], this);
  return hasFeature !== undefined;
};


/**
 * @inheritDoc
 */
WebGLImageLayerRenderer.prototype.forEachLayerAtPixel = function(pixel, frameState, callback, thisArg) {
  if (!this.image_ || !this.image_.getImage()) {
    return undefined;
  }

  if (this.getLayer().getSource().forEachFeatureAtCoordinate !== functions["c" /* UNDEFINED */]) {
    // for ImageCanvas sources use the original hit-detection logic,
    // so that for example also transparent polygons are detected
    const coordinate = Object(ol_transform["a" /* apply */])(
      frameState.pixelToCoordinateTransform, pixel.slice());
    const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, 0, functions["b" /* TRUE */], this);

    if (hasFeature) {
      return callback.call(thisArg, this.getLayer(), null);
    } else {
      return undefined;
    }
  } else {
    const imageSize =
        [this.image_.getImage().width, this.image_.getImage().height];

    if (!this.hitTransformationMatrix_) {
      this.hitTransformationMatrix_ = this.getHitTransformationMatrix_(
        frameState.size, imageSize);
    }

    const pixelOnFrameBuffer = Object(ol_transform["a" /* apply */])(
      this.hitTransformationMatrix_, pixel.slice());

    if (pixelOnFrameBuffer[0] < 0 || pixelOnFrameBuffer[0] > imageSize[0] ||
        pixelOnFrameBuffer[1] < 0 || pixelOnFrameBuffer[1] > imageSize[1]) {
      // outside the image, no need to check
      return undefined;
    }

    if (!this.hitCanvasContext_) {
      this.hitCanvasContext_ = Object(dom["a" /* createCanvasContext2D */])(1, 1);
    }

    this.hitCanvasContext_.clearRect(0, 0, 1, 1);
    this.hitCanvasContext_.drawImage(this.image_.getImage(),
      pixelOnFrameBuffer[0], pixelOnFrameBuffer[1], 1, 1, 0, 0, 1, 1);

    const imageData = this.hitCanvasContext_.getImageData(0, 0, 1, 1).data;
    if (imageData[3] > 0) {
      return callback.call(thisArg, this.getLayer(),  imageData);
    } else {
      return undefined;
    }
  }
};


/**
 * The transformation matrix to get the pixel on the image for a
 * pixel on the map.
 * @param {module:ol/size~Size} mapSize The map size.
 * @param {module:ol/size~Size} imageSize The image size.
 * @return {module:ol/transform~Transform} The transformation matrix.
 * @private
 */
WebGLImageLayerRenderer.prototype.getHitTransformationMatrix_ = function(mapSize, imageSize) {
  // the first matrix takes a map pixel, flips the y-axis and scales to
  // a range between -1 ... 1
  const mapCoordTransform = Object(ol_transform["c" /* create */])();
  Object(ol_transform["j" /* translate */])(mapCoordTransform, -1, -1);
  Object(ol_transform["h" /* scale */])(mapCoordTransform, 2 / mapSize[0], 2 / mapSize[1]);
  Object(ol_transform["j" /* translate */])(mapCoordTransform, 0, mapSize[1]);
  Object(ol_transform["h" /* scale */])(mapCoordTransform, 1, -1);

  // the second matrix is the inverse of the projection matrix used in the
  // shader for drawing
  const projectionMatrixInv = Object(ol_transform["d" /* invert */])(this.projectionMatrix.slice());

  // the third matrix scales to the image dimensions and flips the y-axis again
  const transform = Object(ol_transform["c" /* create */])();
  Object(ol_transform["j" /* translate */])(transform, 0, imageSize[1]);
  Object(ol_transform["h" /* scale */])(transform, 1, -1);
  Object(ol_transform["h" /* scale */])(transform, imageSize[0] / 2, imageSize[1] / 2);
  Object(ol_transform["j" /* translate */])(transform, 1, 1);

  Object(ol_transform["e" /* multiply */])(transform, projectionMatrixInv);
  Object(ol_transform["e" /* multiply */])(transform, mapCoordTransform);

  return transform;
};
/* harmony default export */ var ImageLayer = (WebGLImageLayerRenderer);

// EXTERNAL MODULE: ../src/ol/css.js
var css = __webpack_require__(47);

// EXTERNAL MODULE: ../src/ol/layer/Layer.js
var layer_Layer = __webpack_require__(66);

// EXTERNAL MODULE: ../src/ol/renderer/Map.js
var Map = __webpack_require__(145);

// EXTERNAL MODULE: ../src/ol/source/State.js
var State = __webpack_require__(50);

// EXTERNAL MODULE: ../src/ol/structs/LRUCache.js
var LRUCache = __webpack_require__(175);

// EXTERNAL MODULE: ../src/ol/structs/PriorityQueue.js
var PriorityQueue = __webpack_require__(154);

// CONCATENATED MODULE: ../src/ol/renderer/webgl/Map.js
/**
 * @module ol/renderer/webgl/Map
 */



















/**
 * @typedef {Object} TextureCacheEntry
 * @property {number} magFilter
 * @property {number} minFilter
 * @property {WebGLTexture} texture
 */


/**
 * Texture cache high water mark.
 * @type {number}
 */
const WEBGL_TEXTURE_CACHE_HIGH_WATER_MARK = 1024;


/**
 * @constructor
 * @extends {module:ol/renderer/Map}
 * @param {module:ol/PluggableMap} map Map.
 * @api
 */
const WebGLMapRenderer = function(map) {
  Map["a" /* default */].call(this, map);

  const container = map.getViewport();

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = /** @type {HTMLCanvasElement} */
    (document.createElement('CANVAS'));
  this.canvas_.style.width = '100%';
  this.canvas_.style.height = '100%';
  this.canvas_.style.display = 'block';
  this.canvas_.className = css["e" /* CLASS_UNSELECTABLE */];
  container.insertBefore(this.canvas_, container.childNodes[0] || null);

  /**
   * @private
   * @type {number}
   */
  this.clipTileCanvasWidth_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.clipTileCanvasHeight_ = 0;

  /**
   * @private
   * @type {CanvasRenderingContext2D}
   */
  this.clipTileContext_ = Object(dom["a" /* createCanvasContext2D */])();

  /**
   * @private
   * @type {boolean}
   */
  this.renderedVisible_ = true;

  /**
   * @private
   * @type {WebGLRenderingContext}
   */
  this.gl_ = Object(webgl["L" /* getContext */])(this.canvas_, {
    antialias: true,
    depth: true,
    failIfMajorPerformanceCaveat: true,
    preserveDrawingBuffer: false,
    stencil: true
  });

  /**
   * @private
   * @type {module:ol/webgl/Context}
   */
  this.context_ = new Context(this.canvas_, this.gl_);

  Object(events["a" /* listen */])(this.canvas_, ContextEventType.LOST,
    this.handleWebGLContextLost, this);
  Object(events["a" /* listen */])(this.canvas_, ContextEventType.RESTORED,
    this.handleWebGLContextRestored, this);

  /**
   * @private
   * @type {module:ol/structs/LRUCache.<module:ol/renderer/webgl/Map~TextureCacheEntry|null>}
   */
  this.textureCache_ = new LRUCache["a" /* default */]();

  /**
   * @private
   * @type {module:ol/coordinate~Coordinate}
   */
  this.focus_ = null;

  /**
   * @private
   * @type {module:ol/structs/PriorityQueue.<Array>}
   */
  this.tileTextureQueue_ = new PriorityQueue["b" /* default */](
    /**
     * @param {Array.<*>} element Element.
     * @return {number} Priority.
     * @this {module:ol/renderer/webgl/Map}
     */
    (function(element) {
      const tileCenter = /** @type {module:ol/coordinate~Coordinate} */ (element[1]);
      const tileResolution = /** @type {number} */ (element[2]);
      const deltaX = tileCenter[0] - this.focus_[0];
      const deltaY = tileCenter[1] - this.focus_[1];
      return 65536 * Math.log(tileResolution) +
            Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
    }).bind(this),
    /**
     * @param {Array.<*>} element Element.
     * @return {string} Key.
     */
    function(element) {
      return (
        /** @type {module:ol/Tile} */ (element[0]).getKey()
      );
    });


  /**
   * @param {module:ol/PluggableMap} map Map.
   * @param {?module:ol/PluggableMap~FrameState} frameState Frame state.
   * @return {boolean} false.
   * @this {module:ol/renderer/webgl/Map}
   */
  this.loadNextTileTexture_ =
      function(map, frameState) {
        if (!this.tileTextureQueue_.isEmpty()) {
          this.tileTextureQueue_.reprioritize();
          const element = this.tileTextureQueue_.dequeue();
          const tile = /** @type {module:ol/Tile} */ (element[0]);
          const tileSize = /** @type {module:ol/size~Size} */ (element[3]);
          const tileGutter = /** @type {number} */ (element[4]);
          this.bindTileTexture(
            tile, tileSize, tileGutter, webgl["p" /* LINEAR */], webgl["p" /* LINEAR */]);
        }
        return false;
      }.bind(this);


  /**
   * @private
   * @type {number}
   */
  this.textureCacheFrameMarkerCount_ = 0;

  this.initializeGL_();
};

Object(util["c" /* inherits */])(WebGLMapRenderer, Map["a" /* default */]);


/**
 * @param {module:ol/Tile} tile Tile.
 * @param {module:ol/size~Size} tileSize Tile size.
 * @param {number} tileGutter Tile gutter.
 * @param {number} magFilter Mag filter.
 * @param {number} minFilter Min filter.
 */
WebGLMapRenderer.prototype.bindTileTexture = function(tile, tileSize, tileGutter, magFilter, minFilter) {
  const gl = this.getGL();
  const tileKey = tile.getKey();
  if (this.textureCache_.containsKey(tileKey)) {
    const textureCacheEntry = this.textureCache_.get(tileKey);
    gl.bindTexture(webgl["A" /* TEXTURE_2D */], textureCacheEntry.texture);
    if (textureCacheEntry.magFilter != magFilter) {
      gl.texParameteri(
        webgl["A" /* TEXTURE_2D */], webgl["B" /* TEXTURE_MAG_FILTER */], magFilter);
      textureCacheEntry.magFilter = magFilter;
    }
    if (textureCacheEntry.minFilter != minFilter) {
      gl.texParameteri(
        webgl["A" /* TEXTURE_2D */], webgl["C" /* TEXTURE_MIN_FILTER */], minFilter);
      textureCacheEntry.minFilter = minFilter;
    }
  } else {
    const texture = gl.createTexture();
    gl.bindTexture(webgl["A" /* TEXTURE_2D */], texture);
    if (tileGutter > 0) {
      const clipTileCanvas = this.clipTileContext_.canvas;
      const clipTileContext = this.clipTileContext_;
      if (this.clipTileCanvasWidth_ !== tileSize[0] ||
          this.clipTileCanvasHeight_ !== tileSize[1]) {
        clipTileCanvas.width = tileSize[0];
        clipTileCanvas.height = tileSize[1];
        this.clipTileCanvasWidth_ = tileSize[0];
        this.clipTileCanvasHeight_ = tileSize[1];
      } else {
        clipTileContext.clearRect(0, 0, tileSize[0], tileSize[1]);
      }
      clipTileContext.drawImage(tile.getImage(), tileGutter, tileGutter,
        tileSize[0], tileSize[1], 0, 0, tileSize[0], tileSize[1]);
      gl.texImage2D(webgl["A" /* TEXTURE_2D */], 0,
        webgl["t" /* RGBA */], webgl["t" /* RGBA */],
        webgl["H" /* UNSIGNED_BYTE */], clipTileCanvas);
    } else {
      gl.texImage2D(webgl["A" /* TEXTURE_2D */], 0,
        webgl["t" /* RGBA */], webgl["t" /* RGBA */],
        webgl["H" /* UNSIGNED_BYTE */], tile.getImage());
    }
    gl.texParameteri(
      webgl["A" /* TEXTURE_2D */], webgl["B" /* TEXTURE_MAG_FILTER */], magFilter);
    gl.texParameteri(
      webgl["A" /* TEXTURE_2D */], webgl["C" /* TEXTURE_MIN_FILTER */], minFilter);
    gl.texParameteri(webgl["A" /* TEXTURE_2D */], webgl["D" /* TEXTURE_WRAP_S */],
      webgl["c" /* CLAMP_TO_EDGE */]);
    gl.texParameteri(webgl["A" /* TEXTURE_2D */], webgl["E" /* TEXTURE_WRAP_T */],
      webgl["c" /* CLAMP_TO_EDGE */]);
    this.textureCache_.set(tileKey, {
      texture: texture,
      magFilter: magFilter,
      minFilter: minFilter
    });
  }
};


/**
 * @param {module:ol/render/EventType} type Event type.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @private
 */
WebGLMapRenderer.prototype.dispatchComposeEvent_ = function(type, frameState) {
  const map = this.getMap();
  if (map.hasListener(type)) {
    const context = this.context_;

    const extent = frameState.extent;
    const size = frameState.size;
    const viewState = frameState.viewState;
    const pixelRatio = frameState.pixelRatio;

    const resolution = viewState.resolution;
    const center = viewState.center;
    const rotation = viewState.rotation;

    const vectorContext = new Immediate(context,
      center, resolution, rotation, size, extent, pixelRatio);
    const composeEvent = new Event["a" /* default */](type, vectorContext,
      frameState, null, context);
    map.dispatchEvent(composeEvent);
  }
};


/**
 * @inheritDoc
 */
WebGLMapRenderer.prototype.disposeInternal = function() {
  const gl = this.getGL();
  if (!gl.isContextLost()) {
    this.textureCache_.forEach(
      /**
       * @param {?module:ol/renderer/webgl/Map~TextureCacheEntry} textureCacheEntry
       *     Texture cache entry.
       */
      function(textureCacheEntry) {
        if (textureCacheEntry) {
          gl.deleteTexture(textureCacheEntry.texture);
        }
      });
  }
  this.context_.dispose();
  Map["a" /* default */].prototype.disposeInternal.call(this);
};


/**
 * @param {module:ol/PluggableMap} map Map.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @private
 */
WebGLMapRenderer.prototype.expireCache_ = function(map, frameState) {
  const gl = this.getGL();
  let textureCacheEntry;
  while (this.textureCache_.getCount() - this.textureCacheFrameMarkerCount_ >
      WEBGL_TEXTURE_CACHE_HIGH_WATER_MARK) {
    textureCacheEntry = this.textureCache_.peekLast();
    if (!textureCacheEntry) {
      if (+this.textureCache_.peekLastKey() == frameState.index) {
        break;
      } else {
        --this.textureCacheFrameMarkerCount_;
      }
    } else {
      gl.deleteTexture(textureCacheEntry.texture);
    }
    this.textureCache_.pop();
  }
};


/**
 * @return {module:ol/webgl/Context} The context.
 */
WebGLMapRenderer.prototype.getContext = function() {
  return this.context_;
};


/**
 * @return {WebGLRenderingContext} GL.
 */
WebGLMapRenderer.prototype.getGL = function() {
  return this.gl_;
};


/**
 * @return {module:ol/structs/PriorityQueue.<Array>} Tile texture queue.
 */
WebGLMapRenderer.prototype.getTileTextureQueue = function() {
  return this.tileTextureQueue_;
};


/**
 * @param {module:ol/events/Event} event Event.
 * @protected
 */
WebGLMapRenderer.prototype.handleWebGLContextLost = function(event) {
  event.preventDefault();
  this.textureCache_.clear();
  this.textureCacheFrameMarkerCount_ = 0;

  const renderers = this.getLayerRenderers();
  for (const id in renderers) {
    const renderer = /** @type {module:ol/renderer/webgl/Layer} */ (renderers[id]);
    renderer.handleWebGLContextLost();
  }
};


/**
 * @protected
 */
WebGLMapRenderer.prototype.handleWebGLContextRestored = function() {
  this.initializeGL_();
  this.getMap().render();
};


/**
 * @private
 */
WebGLMapRenderer.prototype.initializeGL_ = function() {
  const gl = this.gl_;
  gl.activeTexture(webgl["z" /* TEXTURE0 */]);
  gl.blendFuncSeparate(
    webgl["v" /* SRC_ALPHA */], webgl["s" /* ONE_MINUS_SRC_ALPHA */],
    webgl["r" /* ONE */], webgl["s" /* ONE_MINUS_SRC_ALPHA */]);
  gl.disable(webgl["f" /* CULL_FACE */]);
  gl.disable(webgl["h" /* DEPTH_TEST */]);
  gl.disable(webgl["u" /* SCISSOR_TEST */]);
  gl.disable(webgl["x" /* STENCIL_TEST */]);
};


/**
 * @param {module:ol/Tile} tile Tile.
 * @return {boolean} Is tile texture loaded.
 */
WebGLMapRenderer.prototype.isTileTextureLoaded = function(tile) {
  return this.textureCache_.containsKey(tile.getKey());
};


/**
 * @inheritDoc
 */
WebGLMapRenderer.prototype.renderFrame = function(frameState) {

  const context = this.getContext();
  const gl = this.getGL();

  if (gl.isContextLost()) {
    return false;
  }

  if (!frameState) {
    if (this.renderedVisible_) {
      this.canvas_.style.display = 'none';
      this.renderedVisible_ = false;
    }
    return false;
  }

  this.focus_ = frameState.focus;

  this.textureCache_.set((-frameState.index).toString(), null);
  ++this.textureCacheFrameMarkerCount_;

  this.dispatchComposeEvent_(EventType["a" /* default */].PRECOMPOSE, frameState);

  /** @type {Array.<module:ol/layer/Layer~State>} */
  const layerStatesToDraw = [];
  const layerStatesArray = frameState.layerStatesArray;
  Object(array["l" /* stableSort */])(layerStatesArray, Map["b" /* sortByZIndex */]);

  const viewResolution = frameState.viewState.resolution;
  let i, ii, layerRenderer, layerState;
  for (i = 0, ii = layerStatesArray.length; i < ii; ++i) {
    layerState = layerStatesArray[i];
    if (Object(layer_Layer["b" /* visibleAtResolution */])(layerState, viewResolution) &&
        layerState.sourceState == State["a" /* default */].READY) {
      layerRenderer = /** @type {module:ol/renderer/webgl/Layer} */ (this.getLayerRenderer(layerState.layer));
      if (layerRenderer.prepareFrame(frameState, layerState, context)) {
        layerStatesToDraw.push(layerState);
      }
    }
  }

  const width = frameState.size[0] * frameState.pixelRatio;
  const height = frameState.size[1] * frameState.pixelRatio;
  if (this.canvas_.width != width || this.canvas_.height != height) {
    this.canvas_.width = width;
    this.canvas_.height = height;
  }

  gl.bindFramebuffer(webgl["n" /* FRAMEBUFFER */], null);

  gl.clearColor(0, 0, 0, 0);
  gl.clear(webgl["e" /* COLOR_BUFFER_BIT */]);
  gl.enable(webgl["b" /* BLEND */]);
  gl.viewport(0, 0, this.canvas_.width, this.canvas_.height);

  for (i = 0, ii = layerStatesToDraw.length; i < ii; ++i) {
    layerState = layerStatesToDraw[i];
    layerRenderer = /** @type {module:ol/renderer/webgl/Layer} */ (this.getLayerRenderer(layerState.layer));
    layerRenderer.composeFrame(frameState, layerState, context);
  }

  if (!this.renderedVisible_) {
    this.canvas_.style.display = '';
    this.renderedVisible_ = true;
  }

  this.calculateMatrices2D(frameState);

  if (this.textureCache_.getCount() - this.textureCacheFrameMarkerCount_ >
      WEBGL_TEXTURE_CACHE_HIGH_WATER_MARK) {
    frameState.postRenderFunctions.push(
      /** @type {module:ol/PluggableMap~PostRenderFunction} */ (this.expireCache_.bind(this))
    );
  }

  if (!this.tileTextureQueue_.isEmpty()) {
    frameState.postRenderFunctions.push(this.loadNextTileTexture_);
    frameState.animate = true;
  }

  this.dispatchComposeEvent_(EventType["a" /* default */].POSTCOMPOSE, frameState);

  this.scheduleRemoveUnusedLayerRenderers(frameState);
  this.scheduleExpireIconCache(frameState);

};


/**
 * @inheritDoc
 */
WebGLMapRenderer.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg,
  layerFilter, thisArg2) {
  let result;

  if (this.getGL().isContextLost()) {
    return false;
  }

  const viewState = frameState.viewState;

  const layerStates = frameState.layerStatesArray;
  const numLayers = layerStates.length;
  let i;
  for (i = numLayers - 1; i >= 0; --i) {
    const layerState = layerStates[i];
    const layer = layerState.layer;
    if (Object(layer_Layer["b" /* visibleAtResolution */])(layerState, viewState.resolution) &&
        layerFilter.call(thisArg2, layer)) {
      const layerRenderer = this.getLayerRenderer(layer);
      result = layerRenderer.forEachFeatureAtCoordinate(
        coordinate, frameState, hitTolerance, callback, thisArg);
      if (result) {
        return result;
      }
    }
  }
  return undefined;
};


/**
 * @inheritDoc
 */
WebGLMapRenderer.prototype.hasFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, layerFilter, thisArg) {
  let hasFeature = false;

  if (this.getGL().isContextLost()) {
    return false;
  }

  const viewState = frameState.viewState;

  const layerStates = frameState.layerStatesArray;
  const numLayers = layerStates.length;
  let i;
  for (i = numLayers - 1; i >= 0; --i) {
    const layerState = layerStates[i];
    const layer = layerState.layer;
    if (Object(layer_Layer["b" /* visibleAtResolution */])(layerState, viewState.resolution) &&
        layerFilter.call(thisArg, layer)) {
      const layerRenderer = this.getLayerRenderer(layer);
      hasFeature =
          layerRenderer.hasFeatureAtCoordinate(coordinate, frameState);
      if (hasFeature) {
        return true;
      }
    }
  }
  return hasFeature;
};


/**
 * @inheritDoc
 */
WebGLMapRenderer.prototype.forEachLayerAtPixel = function(pixel, frameState, hitTolerance, callback, thisArg,
  layerFilter, thisArg2) {
  if (this.getGL().isContextLost()) {
    return false;
  }

  const viewState = frameState.viewState;
  let result;

  const layerStates = frameState.layerStatesArray;
  const numLayers = layerStates.length;
  let i;
  for (i = numLayers - 1; i >= 0; --i) {
    const layerState = layerStates[i];
    const layer = layerState.layer;
    if (Object(layer_Layer["b" /* visibleAtResolution */])(layerState, viewState.resolution) &&
        layerFilter.call(thisArg, layer)) {
      const layerRenderer = /** @type {module:ol/renderer/webgl/Layer} */ (this.getLayerRenderer(layer));
      result = layerRenderer.forEachLayerAtPixel(
        pixel, frameState, callback, thisArg);
      if (result) {
        return result;
      }
    }
  }
  return undefined;
};

/* harmony default export */ var webgl_Map = (WebGLMapRenderer);

// EXTERNAL MODULE: ../src/ol/TileRange.js
var TileRange = __webpack_require__(130);

// EXTERNAL MODULE: ../src/ol/TileState.js
var TileState = __webpack_require__(19);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// CONCATENATED MODULE: ../src/ol/renderer/webgl/tilelayershader.js
/**
 * @module ol/renderer/webgl/tilelayershader
 */
// This file is automatically generated, do not edit.
// Run `make shaders` to generate, and commit the result.





const tilelayershader_fragment = new Fragment(webgl["g" /* DEBUG */] ?
  'precision mediump float;\nvarying vec2 v_texCoord;\n\n\nuniform sampler2D u_texture;\n\nvoid main(void) {\n  gl_FragColor = texture2D(u_texture, v_texCoord);\n}\n' :
  'precision mediump float;varying vec2 a;uniform sampler2D e;void main(void){gl_FragColor=texture2D(e,a);}');

const tilelayershader_vertex = new Vertex(webgl["g" /* DEBUG */] ?
  'varying vec2 v_texCoord;\n\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nuniform vec4 u_tileOffset;\n\nvoid main(void) {\n  gl_Position = vec4(a_position * u_tileOffset.xy + u_tileOffset.zw, 0., 1.);\n  v_texCoord = a_texCoord;\n}\n\n\n' :
  'varying vec2 a;attribute vec2 b;attribute vec2 c;uniform vec4 d;void main(void){gl_Position=vec4(b*d.xy+d.zw,0.,1.);a=c;}');

// CONCATENATED MODULE: ../src/ol/renderer/webgl/tilelayershader/Locations.js
/**
 * @module ol/renderer/webgl/tilelayershader/Locations
 */
// This file is automatically generated, do not edit
// Run `make shaders` to generate, and commit the result.



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
const tilelayershader_Locations_Locations = function(gl, program) {

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_tileOffset = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_tileOffset' : 'd');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_texture = gl.getUniformLocation(
    program, webgl["g" /* DEBUG */] ? 'u_texture' : 'e');

  /**
   * @type {number}
   */
  this.a_position = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_position' : 'b');

  /**
   * @type {number}
   */
  this.a_texCoord = gl.getAttribLocation(
    program, webgl["g" /* DEBUG */] ? 'a_texCoord' : 'c');
};

/* harmony default export */ var tilelayershader_Locations = (tilelayershader_Locations_Locations);

// EXTERNAL MODULE: ../src/ol/size.js
var ol_size = __webpack_require__(58);

// CONCATENATED MODULE: ../src/ol/renderer/webgl/TileLayer.js
/**
 * @module ol/renderer/webgl/TileLayer
 */
// FIXME large resolutions lead to too large framebuffers :-(
// FIXME animated shaders! check in redraw
















/**
 * @constructor
 * @extends {module:ol/renderer/webgl/Layer}
 * @param {module:ol/renderer/webgl/Map} mapRenderer Map renderer.
 * @param {module:ol/layer/Tile} tileLayer Tile layer.
 * @api
 */
const WebGLTileLayerRenderer = function(mapRenderer, tileLayer) {

  webgl_Layer.call(this, mapRenderer, tileLayer);

  /**
   * @private
   * @type {module:ol/webgl/Fragment}
   */
  this.fragmentShader_ = tilelayershader_fragment;

  /**
   * @private
   * @type {module:ol/webgl/Vertex}
   */
  this.vertexShader_ = tilelayershader_vertex;

  /**
   * @private
   * @type {module:ol/renderer/webgl/tilelayershader/Locations}
   */
  this.locations_ = null;

  /**
   * @private
   * @type {module:ol/webgl/Buffer}
   */
  this.renderArrayBuffer_ = new Buffer([
    0, 0, 0, 1,
    1, 0, 1, 1,
    0, 1, 0, 0,
    1, 1, 1, 0
  ]);

  /**
   * @private
   * @type {module:ol/TileRange}
   */
  this.renderedTileRange_ = null;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.renderedFramebufferExtent_ = null;

  /**
   * @private
   * @type {number}
   */
  this.renderedRevision_ = -1;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.tmpSize_ = [0, 0];

};

Object(util["c" /* inherits */])(WebGLTileLayerRenderer, webgl_Layer);


/**
 * Determine if this renderer handles the provided layer.
 * @param {module:ol/layer/Layer} layer The candidate layer.
 * @return {boolean} The renderer can render the layer.
 */
WebGLTileLayerRenderer['handles'] = function(layer) {
  return layer.getType() === LayerType["a" /* default */].TILE;
};


/**
 * Create a layer renderer.
 * @param {module:ol/renderer/Map} mapRenderer The map renderer.
 * @param {module:ol/layer/Layer} layer The layer to be rendererd.
 * @return {module:ol/renderer/webgl/TileLayer} The layer renderer.
 */
WebGLTileLayerRenderer['create'] = function(mapRenderer, layer) {
  return new WebGLTileLayerRenderer(
    /** @type {module:ol/renderer/webgl/Map} */ (mapRenderer),
    /** @type {module:ol/layer/Tile} */ (layer)
  );
};


/**
 * @inheritDoc
 */
WebGLTileLayerRenderer.prototype.disposeInternal = function() {
  const context = this.mapRenderer.getContext();
  context.deleteBuffer(this.renderArrayBuffer_);
  webgl_Layer.prototype.disposeInternal.call(this);
};


/**
 * @inheritDoc
 */
WebGLTileLayerRenderer.prototype.createLoadedTileFinder = function(source, projection, tiles) {
  const mapRenderer = this.mapRenderer;

  return (
    /**
     * @param {number} zoom Zoom level.
     * @param {module:ol/TileRange} tileRange Tile range.
     * @return {boolean} The tile range is fully loaded.
     */
    function(zoom, tileRange) {
      function callback(tile) {
        const loaded = mapRenderer.isTileTextureLoaded(tile);
        if (loaded) {
          if (!tiles[zoom]) {
            tiles[zoom] = {};
          }
          tiles[zoom][tile.tileCoord.toString()] = tile;
        }
        return loaded;
      }
      return source.forEachLoadedTile(projection, zoom, tileRange, callback);
    }
  );
};


/**
 * @inheritDoc
 */
WebGLTileLayerRenderer.prototype.handleWebGLContextLost = function() {
  webgl_Layer.prototype.handleWebGLContextLost.call(this);
  this.locations_ = null;
};


/**
 * @inheritDoc
 */
WebGLTileLayerRenderer.prototype.prepareFrame = function(frameState, layerState, context) {

  const mapRenderer = this.mapRenderer;
  const gl = context.getGL();

  const viewState = frameState.viewState;
  const projection = viewState.projection;

  const tileLayer = /** @type {module:ol/layer/Tile} */ (this.getLayer());
  const tileSource = tileLayer.getSource();
  const tileGrid = tileSource.getTileGridForProjection(projection);
  const z = tileGrid.getZForResolution(viewState.resolution);
  const tileResolution = tileGrid.getResolution(z);

  const tilePixelSize =
      tileSource.getTilePixelSize(z, frameState.pixelRatio, projection);
  const pixelRatio = tilePixelSize[0] /
      Object(ol_size["d" /* toSize */])(tileGrid.getTileSize(z), this.tmpSize_)[0];
  const tilePixelResolution = tileResolution / pixelRatio;
  const tileGutter = tileSource.getTilePixelRatio(pixelRatio) * tileSource.getGutter(projection);

  const center = viewState.center;
  const extent = frameState.extent;
  const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);

  let framebufferExtent;
  if (this.renderedTileRange_ &&
      this.renderedTileRange_.equals(tileRange) &&
      this.renderedRevision_ == tileSource.getRevision()) {
    framebufferExtent = this.renderedFramebufferExtent_;
  } else {

    const tileRangeSize = tileRange.getSize();

    const maxDimension = Math.max(
      tileRangeSize[0] * tilePixelSize[0],
      tileRangeSize[1] * tilePixelSize[1]);
    const framebufferDimension = Object(math["e" /* roundUpToPowerOfTwo */])(maxDimension);
    const framebufferExtentDimension = tilePixelResolution * framebufferDimension;
    const origin = tileGrid.getOrigin(z);
    const minX = origin[0] +
        tileRange.minX * tilePixelSize[0] * tilePixelResolution;
    const minY = origin[1] +
        tileRange.minY * tilePixelSize[1] * tilePixelResolution;
    framebufferExtent = [
      minX, minY,
      minX + framebufferExtentDimension, minY + framebufferExtentDimension
    ];

    this.bindFramebuffer(frameState, framebufferDimension);
    gl.viewport(0, 0, framebufferDimension, framebufferDimension);

    gl.clearColor(0, 0, 0, 0);
    gl.clear(webgl["e" /* COLOR_BUFFER_BIT */]);
    gl.disable(webgl["b" /* BLEND */]);

    const program = context.getProgram(this.fragmentShader_, this.vertexShader_);
    context.useProgram(program);
    if (!this.locations_) {
      this.locations_ = new tilelayershader_Locations(gl, program);
    }

    context.bindBuffer(webgl["a" /* ARRAY_BUFFER */], this.renderArrayBuffer_);
    gl.enableVertexAttribArray(this.locations_.a_position);
    gl.vertexAttribPointer(
      this.locations_.a_position, 2, webgl["l" /* FLOAT */], false, 16, 0);
    gl.enableVertexAttribArray(this.locations_.a_texCoord);
    gl.vertexAttribPointer(
      this.locations_.a_texCoord, 2, webgl["l" /* FLOAT */], false, 16, 8);
    gl.uniform1i(this.locations_.u_texture, 0);

    /**
     * @type {Object.<number, Object.<string, module:ol/Tile>>}
     */
    const tilesToDrawByZ = {};
    tilesToDrawByZ[z] = {};

    const findLoadedTiles = this.createLoadedTileFinder(
      tileSource, projection, tilesToDrawByZ);

    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
    let allTilesLoaded = true;
    const tmpExtent = Object(ol_extent["j" /* createEmpty */])();
    const tmpTileRange = new TileRange["b" /* default */](0, 0, 0, 0);
    let childTileRange, drawable, fullyLoaded, tile, tileState;
    let x, y, tileExtent;
    for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
      for (y = tileRange.minY; y <= tileRange.maxY; ++y) {

        tile = tileSource.getTile(z, x, y, pixelRatio, projection);
        if (layerState.extent !== undefined) {
          // ignore tiles outside layer extent
          tileExtent = tileGrid.getTileCoordExtent(tile.tileCoord, tmpExtent);
          if (!Object(ol_extent["F" /* intersects */])(tileExtent, layerState.extent)) {
            continue;
          }
        }
        tileState = tile.getState();
        drawable = tileState == TileState["a" /* default */].LOADED ||
            tileState == TileState["a" /* default */].EMPTY ||
            tileState == TileState["a" /* default */].ERROR && !useInterimTilesOnError;
        if (!drawable) {
          tile = tile.getInterimTile();
        }
        tileState = tile.getState();
        if (tileState == TileState["a" /* default */].LOADED) {
          if (mapRenderer.isTileTextureLoaded(tile)) {
            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
            continue;
          }
        } else if (tileState == TileState["a" /* default */].EMPTY ||
                   (tileState == TileState["a" /* default */].ERROR &&
                    !useInterimTilesOnError)) {
          continue;
        }

        allTilesLoaded = false;
        fullyLoaded = tileGrid.forEachTileCoordParentTileRange(
          tile.tileCoord, findLoadedTiles, null, tmpTileRange, tmpExtent);
        if (!fullyLoaded) {
          childTileRange = tileGrid.getTileCoordChildTileRange(
            tile.tileCoord, tmpTileRange, tmpExtent);
          if (childTileRange) {
            findLoadedTiles(z + 1, childTileRange);
          }
        }

      }

    }

    /** @type {Array.<number>} */
    const zs = Object.keys(tilesToDrawByZ).map(Number);
    zs.sort(array["i" /* numberSafeCompareFunction */]);
    const u_tileOffset = new Float32Array(4);
    for (let i = 0, ii = zs.length; i < ii; ++i) {
      const tilesToDraw = tilesToDrawByZ[zs[i]];
      for (const tileKey in tilesToDraw) {
        tile = tilesToDraw[tileKey];
        tileExtent = tileGrid.getTileCoordExtent(tile.tileCoord, tmpExtent);
        u_tileOffset[0] = 2 * (tileExtent[2] - tileExtent[0]) /
            framebufferExtentDimension;
        u_tileOffset[1] = 2 * (tileExtent[3] - tileExtent[1]) /
            framebufferExtentDimension;
        u_tileOffset[2] = 2 * (tileExtent[0] - framebufferExtent[0]) /
            framebufferExtentDimension - 1;
        u_tileOffset[3] = 2 * (tileExtent[1] - framebufferExtent[1]) /
            framebufferExtentDimension - 1;
        gl.uniform4fv(this.locations_.u_tileOffset, u_tileOffset);
        mapRenderer.bindTileTexture(tile, tilePixelSize,
          tileGutter * pixelRatio, webgl["p" /* LINEAR */], webgl["p" /* LINEAR */]);
        gl.drawArrays(webgl["G" /* TRIANGLE_STRIP */], 0, 4);
      }
    }

    if (allTilesLoaded) {
      this.renderedTileRange_ = tileRange;
      this.renderedFramebufferExtent_ = framebufferExtent;
      this.renderedRevision_ = tileSource.getRevision();
    } else {
      this.renderedTileRange_ = null;
      this.renderedFramebufferExtent_ = null;
      this.renderedRevision_ = -1;
      frameState.animate = true;
    }

  }

  this.updateUsedTiles(frameState.usedTiles, tileSource, z, tileRange);
  const tileTextureQueue = mapRenderer.getTileTextureQueue();
  this.manageTilePyramid(
    frameState, tileSource, tileGrid, pixelRatio, projection, extent, z,
    tileLayer.getPreload(),
    /**
     * @param {module:ol/Tile} tile Tile.
     */
    function(tile) {
      if (tile.getState() == TileState["a" /* default */].LOADED &&
            !mapRenderer.isTileTextureLoaded(tile) &&
            !tileTextureQueue.isKeyQueued(tile.getKey())) {
        tileTextureQueue.enqueue([
          tile,
          tileGrid.getTileCoordCenter(tile.tileCoord),
          tileGrid.getResolution(tile.tileCoord[0]),
          tilePixelSize, tileGutter * pixelRatio
        ]);
      }
    }, this);
  this.scheduleExpireCache(frameState, tileSource);

  const texCoordMatrix = this.texCoordMatrix;
  Object(ol_transform["f" /* reset */])(texCoordMatrix);
  Object(ol_transform["j" /* translate */])(texCoordMatrix,
    (Math.round(center[0] / tileResolution) * tileResolution - framebufferExtent[0]) /
          (framebufferExtent[2] - framebufferExtent[0]),
    (Math.round(center[1] / tileResolution) * tileResolution - framebufferExtent[1]) /
          (framebufferExtent[3] - framebufferExtent[1]));
  if (viewState.rotation !== 0) {
    Object(ol_transform["g" /* rotate */])(texCoordMatrix, viewState.rotation);
  }
  Object(ol_transform["h" /* scale */])(texCoordMatrix,
    frameState.size[0] * viewState.resolution /
          (framebufferExtent[2] - framebufferExtent[0]),
    frameState.size[1] * viewState.resolution /
          (framebufferExtent[3] - framebufferExtent[1]));
  Object(ol_transform["j" /* translate */])(texCoordMatrix, -0.5, -0.5);

  return true;
};


/**
 * @inheritDoc
 */
WebGLTileLayerRenderer.prototype.forEachLayerAtPixel = function(pixel, frameState, callback, thisArg) {
  if (!this.framebuffer) {
    return undefined;
  }

  const pixelOnMapScaled = [
    pixel[0] / frameState.size[0],
    (frameState.size[1] - pixel[1]) / frameState.size[1]];

  const pixelOnFrameBufferScaled = Object(ol_transform["a" /* apply */])(
    this.texCoordMatrix, pixelOnMapScaled.slice());
  const pixelOnFrameBuffer = [
    pixelOnFrameBufferScaled[0] * this.framebufferDimension,
    pixelOnFrameBufferScaled[1] * this.framebufferDimension];

  const gl = this.mapRenderer.getContext().getGL();
  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
  const imageData = new Uint8Array(4);
  gl.readPixels(pixelOnFrameBuffer[0], pixelOnFrameBuffer[1], 1, 1,
    gl.RGBA, gl.UNSIGNED_BYTE, imageData);

  if (imageData[3] > 0) {
    return callback.call(thisArg, this.getLayer(), imageData);
  } else {
    return undefined;
  }
};
/* harmony default export */ var TileLayer = (WebGLTileLayerRenderer);

// EXTERNAL MODULE: ../src/ol/renderer/vector.js
var vector = __webpack_require__(95);

// CONCATENATED MODULE: ../src/ol/renderer/webgl/VectorLayer.js
/**
 * @module ol/renderer/webgl/VectorLayer
 */









/**
 * @constructor
 * @extends {module:ol/renderer/webgl/Layer}
 * @param {module:ol/renderer/webgl/Map} mapRenderer Map renderer.
 * @param {module:ol/layer/Vector} vectorLayer Vector layer.
 * @api
 */
const WebGLVectorLayerRenderer = function(mapRenderer, vectorLayer) {

  webgl_Layer.call(this, mapRenderer, vectorLayer);

  /**
   * @private
   * @type {boolean}
   */
  this.dirty_ = false;

  /**
   * @private
   * @type {number}
   */
  this.renderedRevision_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.renderedResolution_ = NaN;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.renderedExtent_ = Object(ol_extent["j" /* createEmpty */])();

  /**
   * @private
   * @type {function(module:ol/Feature, module:ol/Feature): number|null}
   */
  this.renderedRenderOrder_ = null;

  /**
   * @private
   * @type {module:ol/render/webgl/ReplayGroup}
   */
  this.replayGroup_ = null;

  /**
   * The last layer state.
   * @private
   * @type {?module:ol/layer/Layer~State}
   */
  this.layerState_ = null;

};

Object(util["c" /* inherits */])(WebGLVectorLayerRenderer, webgl_Layer);


/**
 * Determine if this renderer handles the provided layer.
 * @param {module:ol/layer/Layer} layer The candidate layer.
 * @return {boolean} The renderer can render the layer.
 */
WebGLVectorLayerRenderer['handles'] = function(layer) {
  return layer.getType() === LayerType["a" /* default */].VECTOR;
};


/**
 * Create a layer renderer.
 * @param {module:ol/renderer/Map} mapRenderer The map renderer.
 * @param {module:ol/layer/Layer} layer The layer to be rendererd.
 * @return {module:ol/renderer/webgl/VectorLayer} The layer renderer.
 */
WebGLVectorLayerRenderer['create'] = function(mapRenderer, layer) {
  return new WebGLVectorLayerRenderer(
    /** @type {module:ol/renderer/webgl/Map} */ (mapRenderer),
    /** @type {module:ol/layer/Vector} */ (layer)
  );
};


/**
 * @inheritDoc
 */
WebGLVectorLayerRenderer.prototype.composeFrame = function(frameState, layerState, context) {
  this.layerState_ = layerState;
  const viewState = frameState.viewState;
  const replayGroup = this.replayGroup_;
  const size = frameState.size;
  const pixelRatio = frameState.pixelRatio;
  const gl = this.mapRenderer.getGL();
  if (replayGroup && !replayGroup.isEmpty()) {
    gl.enable(gl.SCISSOR_TEST);
    gl.scissor(0, 0, size[0] * pixelRatio, size[1] * pixelRatio);
    replayGroup.replay(context,
      viewState.center, viewState.resolution, viewState.rotation,
      size, pixelRatio, layerState.opacity,
      layerState.managed ? frameState.skippedFeatureUids : {});
    gl.disable(gl.SCISSOR_TEST);
  }

};


/**
 * @inheritDoc
 */
WebGLVectorLayerRenderer.prototype.disposeInternal = function() {
  const replayGroup = this.replayGroup_;
  if (replayGroup) {
    const context = this.mapRenderer.getContext();
    replayGroup.getDeleteResourcesFunction(context)();
    this.replayGroup_ = null;
  }
  webgl_Layer.prototype.disposeInternal.call(this);
};


/**
 * @inheritDoc
 */
WebGLVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg) {
  if (!this.replayGroup_ || !this.layerState_) {
    return undefined;
  } else {
    const context = this.mapRenderer.getContext();
    const viewState = frameState.viewState;
    const layer = this.getLayer();
    const layerState = this.layerState_;
    /** @type {!Object.<string, boolean>} */
    const features = {};
    return this.replayGroup_.forEachFeatureAtCoordinate(coordinate,
      context, viewState.center, viewState.resolution, viewState.rotation,
      frameState.size, frameState.pixelRatio, layerState.opacity,
      {},
      /**
       * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
       * @return {?} Callback result.
       */
      function(feature) {
        const key = Object(util["b" /* getUid */])(feature).toString();
        if (!(key in features)) {
          features[key] = true;
          return callback.call(thisArg, feature, layer);
        }
      });
  }
};


/**
 * @inheritDoc
 */
WebGLVectorLayerRenderer.prototype.hasFeatureAtCoordinate = function(coordinate, frameState) {
  if (!this.replayGroup_ || !this.layerState_) {
    return false;
  } else {
    const context = this.mapRenderer.getContext();
    const viewState = frameState.viewState;
    const layerState = this.layerState_;
    return this.replayGroup_.hasFeatureAtCoordinate(coordinate,
      context, viewState.center, viewState.resolution, viewState.rotation,
      frameState.size, frameState.pixelRatio, layerState.opacity,
      frameState.skippedFeatureUids);
  }
};


/**
 * @inheritDoc
 */
WebGLVectorLayerRenderer.prototype.forEachLayerAtPixel = function(pixel, frameState, callback, thisArg) {
  const coordinate = Object(ol_transform["a" /* apply */])(
    frameState.pixelToCoordinateTransform, pixel.slice());
  const hasFeature = this.hasFeatureAtCoordinate(coordinate, frameState);

  if (hasFeature) {
    return callback.call(thisArg, this.getLayer(), null);
  } else {
    return undefined;
  }
};


/**
 * Handle changes in image style state.
 * @param {module:ol/events/Event} event Image style change event.
 * @private
 */
WebGLVectorLayerRenderer.prototype.handleStyleImageChange_ = function(event) {
  this.renderIfReadyAndVisible();
};


/**
 * @inheritDoc
 */
WebGLVectorLayerRenderer.prototype.prepareFrame = function(frameState, layerState, context) {
  const vectorLayer = /** @type {module:ol/layer/Vector} */ (this.getLayer());
  const vectorSource = vectorLayer.getSource();

  const animating = frameState.viewHints[ViewHint["a" /* default */].ANIMATING];
  const interacting = frameState.viewHints[ViewHint["a" /* default */].INTERACTING];
  const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
  const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();

  if (!this.dirty_ && (!updateWhileAnimating && animating) ||
      (!updateWhileInteracting && interacting)) {
    return true;
  }

  const frameStateExtent = frameState.extent;
  const viewState = frameState.viewState;
  const projection = viewState.projection;
  const resolution = viewState.resolution;
  const pixelRatio = frameState.pixelRatio;
  const vectorLayerRevision = vectorLayer.getRevision();
  const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
  let vectorLayerRenderOrder = vectorLayer.getRenderOrder();

  if (vectorLayerRenderOrder === undefined) {
    vectorLayerRenderOrder = vector["a" /* defaultOrder */];
  }

  const extent = Object(ol_extent["c" /* buffer */])(frameStateExtent,
    vectorLayerRenderBuffer * resolution);

  if (!this.dirty_ &&
      this.renderedResolution_ == resolution &&
      this.renderedRevision_ == vectorLayerRevision &&
      this.renderedRenderOrder_ == vectorLayerRenderOrder &&
      Object(ol_extent["g" /* containsExtent */])(this.renderedExtent_, extent)) {
    return true;
  }

  if (this.replayGroup_) {
    frameState.postRenderFunctions.push(
      this.replayGroup_.getDeleteResourcesFunction(context));
  }

  this.dirty_ = false;

  const replayGroup = new webgl_ReplayGroup(
    Object(vector["c" /* getTolerance */])(resolution, pixelRatio),
    extent, vectorLayer.getRenderBuffer());
  vectorSource.loadFeatures(extent, resolution, projection);
  /**
   * @param {module:ol/Feature} feature Feature.
   * @this {module:ol/renderer/webgl/VectorLayer}
   */
  const render = function(feature) {
    let styles;
    const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
    if (styleFunction) {
      styles = styleFunction(feature, resolution);
    }
    if (styles) {
      const dirty = this.renderFeature(
        feature, resolution, pixelRatio, styles, replayGroup);
      this.dirty_ = this.dirty_ || dirty;
    }
  };
  if (vectorLayerRenderOrder) {
    /** @type {Array.<module:ol/Feature>} */
    const features = [];
    vectorSource.forEachFeatureInExtent(extent,
      /**
       * @param {module:ol/Feature} feature Feature.
       */
      function(feature) {
        features.push(feature);
      }, this);
    features.sort(vectorLayerRenderOrder);
    features.forEach(render.bind(this));
  } else {
    vectorSource.forEachFeatureInExtent(extent, render, this);
  }
  replayGroup.finish(context);

  this.renderedResolution_ = resolution;
  this.renderedRevision_ = vectorLayerRevision;
  this.renderedRenderOrder_ = vectorLayerRenderOrder;
  this.renderedExtent_ = extent;
  this.replayGroup_ = replayGroup;

  return true;
};


/**
 * @param {module:ol/Feature} feature Feature.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {(module:ol/style/Style|Array.<module:ol/style/Style>)} styles The style or array of
 *     styles.
 * @param {module:ol/render/webgl/ReplayGroup} replayGroup Replay group.
 * @return {boolean} `true` if an image is loading.
 */
WebGLVectorLayerRenderer.prototype.renderFeature = function(feature, resolution, pixelRatio, styles, replayGroup) {
  if (!styles) {
    return false;
  }
  let loading = false;
  if (Array.isArray(styles)) {
    for (let i = styles.length - 1, ii = 0; i >= ii; --i) {
      loading = Object(vector["d" /* renderFeature */])(
        replayGroup, feature, styles[i],
        Object(vector["b" /* getSquaredTolerance */])(resolution, pixelRatio),
        this.handleStyleImageChange_, this) || loading;
    }
  } else {
    loading = Object(vector["d" /* renderFeature */])(
      replayGroup, feature, styles,
      Object(vector["b" /* getSquaredTolerance */])(resolution, pixelRatio),
      this.handleStyleImageChange_, this) || loading;
  }
  return loading;
};
/* harmony default export */ var VectorLayer = (WebGLVectorLayerRenderer);

// CONCATENATED MODULE: ../src/ol/WebGLMap.js
/**
 * @module ol/WebGLMap
 */











/**
 * @classdesc
 * The WebGLMap uses WebGL for rendering map layers.  This renderer has limited
 * support for vector data and no support for vector tiles.
 *
 *     import WebGLMap from 'ol/WebGLMap';
 *     import TileLayer from 'ol/layer/Tile';
 *     import OSM from 'ol/source/OSM';
 *     import View from 'ol/View';
 *
 *     var map = new WebGLMap({
 *       view: new View({
 *         center: [0, 0],
 *         zoom: 1
 *       }),
 *       layers: [
 *         new TileLayer({
 *           source: new OSM()
 *         })
 *       ],
 *       target: 'map'
 *     });
 *
 * The above snippet creates a map using a {@link module:ol/layer/Tile~Tile} to
 * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
 * element with the id `map`.
 *
 * The constructor places a viewport container (with CSS class name
 * `ol-viewport`) in the target element (see `getViewport()`), and then two
 * further elements within the viewport: one with CSS class name
 * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
 * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
 * option of {@link module:ol/Overlay~Overlay} for the difference). The map
 * itself is placed in a further element within the viewport.
 *
 * Layers are stored as a {@link module:ol/Collection~Collection} in
 * layerGroups. A top-level group is provided by the library. This is what is
 * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
 * options are added to this group, and `addLayer` and `removeLayer` change the
 * layer collection in the group. `getLayers` is a convenience function for
 * `getLayerGroup().getLayers()`.
 * Note that {@link module:ol/layer/Group~Group} is a subclass of
 * {@link module:ol/layer/Base}, so layers entered in the options or added
 * with `addLayer` can be groups, which can contain further groups, and so on.
 *
 * @constructor
 * @extends {module:ol/PluggableMap}
 * @param {module:ol/PluggableMap~MapOptions} options Map options.
 * @fires module:ol/MapBrowserEvent~MapBrowserEvent
 * @fires module:ol/MapEvent~MapEvent
 * @fires module:ol/render/Event~RenderEvent#postcompose
 * @fires module:ol/render/Event~RenderEvent#precompose
 * @api
 */
const WebGLMap = function(options) {
  options = Object(obj["a" /* assign */])({}, options);
  if (!options.controls) {
    options.controls = Object(control["h" /* defaults */])();
  }
  if (!options.interactions) {
    options.interactions = Object(interaction["l" /* defaults */])();
  }

  PluggableMap["a" /* default */].call(this, options);
};

Object(util["c" /* inherits */])(WebGLMap, PluggableMap["a" /* default */]);


WebGLMap.prototype.createRenderer = function() {
  const renderer = new webgl_Map(this);
  renderer.registerLayerRenderers([
    ImageLayer,
    TileLayer,
    VectorLayer
  ]);
  return renderer;
};

/* harmony default export */ var ol_WebGLMap = __webpack_exports__["a"] = (WebGLMap);


/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _format_OWS_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(207);
/* harmony import */ var _format_XLink_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(149);
/* harmony import */ var _format_XML_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(148);
/* harmony import */ var _format_xsd_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/**
 * @module ol/format/WMTSCapabilities
 */








/**
 * @classdesc
 * Format for reading WMTS capabilities data.
 *
 * @constructor
 * @extends {module:ol/format/XML}
 * @api
 */
const WMTSCapabilities = function() {
  _format_XML_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this);

  /**
   * @type {module:ol/format/OWS}
   * @private
   */
  this.owsParser_ = new _format_OWS_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]();
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(WMTSCapabilities, _format_XML_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * @const
 * @type {Array.<null|string>}
 */
const NAMESPACE_URIS = [
  null,
  'http://www.opengis.net/wmts/1.0'
];


/**
 * @const
 * @type {Array.<null|string>}
 */
const OWS_NAMESPACE_URIS = [
  null,
  'http://www.opengis.net/ows/1.1'
];


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Contents': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(readContents)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const CONTENTS_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Layer': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(readLayer),
    'TileMatrixSet': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(readTileMatrixSet)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const LAYER_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Style': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(readStyle),
    'Format': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'TileMatrixSetLink': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(readTileMatrixSetLink),
    'Dimension': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(readDimensions),
    'ResourceURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(readResourceUrl)
  }, Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(OWS_NAMESPACE_URIS, {
    'Title': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'Abstract': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'WGS84BoundingBox': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(readWgs84BoundingBox),
    'Identifier': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"])
  }));


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const STYLE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'LegendURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(readLegendUrl)
  }, Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(OWS_NAMESPACE_URIS, {
    'Title': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'Identifier': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"])
  }));


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TMS_LINKS_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'TileMatrixSet': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'TileMatrixSetLimits': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(readTileMatrixLimitsList)
  });

/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TMS_LIMITS_LIST_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'TileMatrixLimits': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeArrayPusher */ "j"])(readTileMatrixLimits)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TMS_LIMITS_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'TileMatrix': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'MinTileRow': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'MaxTileRow': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'MinTileCol': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'MaxTileCol': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const DIMENSION_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Default': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'Value': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"])
  }, Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(OWS_NAMESPACE_URIS, {
    'Identifier': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"])
  }));


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const WGS84_BBOX_READERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  OWS_NAMESPACE_URIS, {
    'LowerCorner': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeArrayPusher */ "j"])(readCoordinates),
    'UpperCorner': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeArrayPusher */ "j"])(readCoordinates)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TMS_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'WellKnownScaleSet': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'TileMatrix': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertyPusher */ "m"])(readTileMatrix)
  }, Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(OWS_NAMESPACE_URIS, {
    'SupportedCRS': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'Identifier': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"])
  }));


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TM_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'TopLeftCorner': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(readCoordinates),
    'ScaleDenominator': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'TileWidth': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'TileHeight': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'MatrixWidth': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'MatrixHeight': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"])
  }, Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeStructureNS */ "r"])(OWS_NAMESPACE_URIS, {
    'Identifier': Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"])
  }));


/**
 * Read a WMTS capabilities document.
 *
 * @function
 * @param {Document|Node|string} source The XML source.
 * @return {Object} An object representing the WMTS capabilities.
 * @api
 */
WMTSCapabilities.prototype.read;


/**
 * @inheritDoc
 */
WMTSCapabilities.prototype.readFromDocument = function(doc) {
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      return this.readFromNode(n);
    }
  }
  return null;
};


/**
 * @inheritDoc
 */
WMTSCapabilities.prototype.readFromNode = function(node) {
  const version = node.getAttribute('version').trim();
  let WMTSCapabilityObject = this.owsParser_.readFromNode(node);
  if (!WMTSCapabilityObject) {
    return null;
  }
  WMTSCapabilityObject['version'] = version;
  WMTSCapabilityObject = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])(WMTSCapabilityObject, PARSERS, node, []);
  return WMTSCapabilityObject ? WMTSCapabilityObject : null;
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Attribution object.
 */
function readContents(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])({}, CONTENTS_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Layers object.
 */
function readLayer(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])({}, LAYER_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Tile Matrix Set object.
 */
function readTileMatrixSet(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])({}, TMS_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Style object.
 */
function readStyle(node, objectStack) {
  const style = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])({}, STYLE_PARSERS, node, objectStack);
  if (!style) {
    return undefined;
  }
  const isDefault = node.getAttribute('isDefault') === 'true';
  style['isDefault'] = isDefault;
  return style;

}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Tile Matrix Set Link object.
 */
function readTileMatrixSetLink(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])({}, TMS_LINKS_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Dimension object.
 */
function readDimensions(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])({}, DIMENSION_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Resource URL object.
 */
function readResourceUrl(node, objectStack) {
  const format = node.getAttribute('format');
  const template = node.getAttribute('template');
  const resourceType = node.getAttribute('resourceType');
  const resource = {};
  if (format) {
    resource['format'] = format;
  }
  if (template) {
    resource['template'] = template;
  }
  if (resourceType) {
    resource['resourceType'] = resourceType;
  }
  return resource;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} WGS84 BBox object.
 */
function readWgs84BoundingBox(node, objectStack) {
  const coordinates = Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])([], WGS84_BBOX_READERS, node, objectStack);
  if (coordinates.length != 2) {
    return undefined;
  }
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* boundingExtent */ "b"])(coordinates);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Legend object.
 */
function readLegendUrl(node, objectStack) {
  const legend = {};
  legend['format'] = node.getAttribute('format');
  legend['href'] = Object(_format_XLink_js__WEBPACK_IMPORTED_MODULE_3__[/* readHref */ "a"])(node);
  return legend;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Coordinates object.
 */
function readCoordinates(node, objectStack) {
  const coordinates = Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"])(node).split(' ');
  if (!coordinates || coordinates.length != 2) {
    return undefined;
  }
  const x = +coordinates[0];
  const y = +coordinates[1];
  if (isNaN(x) || isNaN(y)) {
    return undefined;
  }
  return [x, y];
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} TileMatrix object.
 */
function readTileMatrix(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])({}, TM_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} TileMatrixSetLimits Object.
 */
function readTileMatrixLimitsList(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])([], TMS_LIMITS_LIST_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} TileMatrixLimits Array.
 */
function readTileMatrixLimits(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_6__[/* pushParseAndPop */ "u"])({}, TMS_LIMITS_PARSERS, node, objectStack);
}


/* harmony default export */ __webpack_exports__["a"] = (WMTSCapabilities);


/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _ImageBase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(124);
/* harmony import */ var _ImageState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(35);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3);
/**
 * @module ol/Image
 */








/**
 * A function that takes an {@link module:ol/Image~Image} for the image and a
 * `{string}` for the src as arguments. It is supposed to make it so the
 * underlying image {@link module:ol/Image~Image#getImage} is assigned the
 * content specified by the src. If not specified, the default is
 *
 *     function(image, src) {
 *       image.getImage().src = src;
 *     }
 *
 * Providing a custom `imageLoadFunction` can be useful to load images with
 * post requests or - in general - through XHR requests, where the src of the
 * image element would be set to a data URI when the content is loaded.
 *
 * @typedef {function(module:ol/Image, string)} LoadFunction
 * @api
 */


/**
 * @constructor
 * @extends {module:ol/ImageBase}
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number|undefined} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {string} src Image source URI.
 * @param {?string} crossOrigin Cross origin.
 * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.
 */
const ImageWrapper = function(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {

  _ImageBase_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, extent, resolution, pixelRatio, _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE);

  /**
   * @private
   * @type {string}
   */
  this.src_ = src;

  /**
   * @private
   * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
   */
  this.image_ = new Image();
  if (crossOrigin !== null) {
    this.image_.crossOrigin = crossOrigin;
  }

  /**
   * @private
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.imageListenerKeys_ = null;

  /**
   * @protected
   * @type {module:ol/ImageState}
   */
  this.state = _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE;

  /**
   * @private
   * @type {module:ol/Image~LoadFunction}
   */
  this.imageLoadFunction_ = imageLoadFunction;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(ImageWrapper, _ImageBase_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @inheritDoc
 * @api
 */
ImageWrapper.prototype.getImage = function() {
  return this.image_;
};


/**
 * Tracks loading or read errors.
 *
 * @private
 */
ImageWrapper.prototype.handleImageError_ = function() {
  this.state = _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR;
  this.unlistenImage_();
  this.changed();
};


/**
 * Tracks successful image load.
 *
 * @private
 */
ImageWrapper.prototype.handleImageLoad_ = function() {
  if (this.resolution === undefined) {
    this.resolution = Object(_extent_js__WEBPACK_IMPORTED_MODULE_5__[/* getHeight */ "A"])(this.extent) / this.image_.height;
  }
  this.state = _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED;
  this.unlistenImage_();
  this.changed();
};


/**
 * Load the image or retry if loading previously failed.
 * Loading is taken care of by the tile queue, and calling this method is
 * only needed for preloading or for reloading in case of an error.
 * @override
 * @api
 */
ImageWrapper.prototype.load = function() {
  if (this.state == _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE || this.state == _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR) {
    this.state = _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADING;
    this.changed();
    this.imageListenerKeys_ = [
      Object(_events_js__WEBPACK_IMPORTED_MODULE_3__[/* listenOnce */ "b"])(this.image_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].ERROR,
        this.handleImageError_, this),
      Object(_events_js__WEBPACK_IMPORTED_MODULE_3__[/* listenOnce */ "b"])(this.image_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].LOAD,
        this.handleImageLoad_, this)
    ];
    this.imageLoadFunction_(this, this.src_);
  }
};


/**
 * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
 */
ImageWrapper.prototype.setImage = function(image) {
  this.image_ = image;
};


/**
 * Discards event handlers which listen for load completion or errors.
 *
 * @private
 */
ImageWrapper.prototype.unlistenImage_ = function() {
  this.imageListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_3__[/* unlistenByKey */ "e"]);
  this.imageListenerKeys_ = null;
};

/* harmony default export */ __webpack_exports__["a"] = (ImageWrapper);


/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return all; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return bbox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return tile; });
/**
 * @module ol/loadingstrategy
 */


/**
 * Strategy function for loading all features with a single request.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @return {Array.<module:ol/extent~Extent>} Extents.
 * @api
 */
function all(extent, resolution) {
  return [[-Infinity, -Infinity, Infinity, Infinity]];
}


/**
 * Strategy function for loading features based on the view's extent and
 * resolution.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @return {Array.<module:ol/extent~Extent>} Extents.
 * @api
 */
function bbox(extent, resolution) {
  return [extent];
}


/**
 * Creates a strategy function for loading features based on a tile grid.
 * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.
 * @return {function(module:ol/extent~Extent, number): Array.<module:ol/extent~Extent>} Loading strategy.
 * @api
 */
function tile(tileGrid) {
  return (
    /**
     * @param {module:ol/extent~Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @return {Array.<module:ol/extent~Extent>} Extents.
     */
    function(extent, resolution) {
      const z = tileGrid.getZForResolution(resolution);
      const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
      /** @type {Array.<module:ol/extent~Extent>} */
      const extents = [];
      /** @type {module:ol/tilecoord~TileCoord} */
      const tileCoord = [z, 0, 0];
      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {
        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {
          extents.push(tileGrid.getTileCoordExtent(tileCoord));
        }
      }
      return extents;
    }
  );
}


/***/ }),
/* 140 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return calculateSourceResolution; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return render; });
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(21);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7);
/**
 * @module ol/reproj
 */






/**
 * Calculates ideal resolution to use from the source in order to achieve
 * pixel mapping as close as possible to 1:1 during reprojection.
 * The resolution is calculated regardless of what resolutions
 * are actually available in the dataset (TileGrid, Image, ...).
 *
 * @param {module:ol/proj/Projection} sourceProj Source projection.
 * @param {module:ol/proj/Projection} targetProj Target projection.
 * @param {module:ol/coordinate~Coordinate} targetCenter Target center.
 * @param {number} targetResolution Target resolution.
 * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
 */
function calculateSourceResolution(sourceProj, targetProj,
  targetCenter, targetResolution) {

  const sourceCenter = Object(_proj_js__WEBPACK_IMPORTED_MODULE_3__[/* transform */ "n"])(targetCenter, targetProj, sourceProj);

  // calculate the ideal resolution of the source data
  let sourceResolution = Object(_proj_js__WEBPACK_IMPORTED_MODULE_3__[/* getPointResolution */ "i"])(targetProj, targetResolution, targetCenter);

  const targetMetersPerUnit = targetProj.getMetersPerUnit();
  if (targetMetersPerUnit !== undefined) {
    sourceResolution *= targetMetersPerUnit;
  }
  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();
  if (sourceMetersPerUnit !== undefined) {
    sourceResolution /= sourceMetersPerUnit;
  }

  // Based on the projection properties, the point resolution at the specified
  // coordinates may be slightly different. We need to reverse-compensate this
  // in order to achieve optimal results.

  const sourceExtent = sourceProj.getExtent();
  if (!sourceExtent || Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* containsCoordinate */ "f"])(sourceExtent, sourceCenter)) {
    const compensationFactor = Object(_proj_js__WEBPACK_IMPORTED_MODULE_3__[/* getPointResolution */ "i"])(sourceProj, sourceResolution, sourceCenter) /
        sourceResolution;
    if (isFinite(compensationFactor) && compensationFactor > 0) {
      sourceResolution /= compensationFactor;
    }
  }

  return sourceResolution;
}


/**
 * Enlarge the clipping triangle point by 1 pixel to ensure the edges overlap
 * in order to mask gaps caused by antialiasing.
 *
 * @param {number} centroidX Centroid of the triangle (x coordinate in pixels).
 * @param {number} centroidY Centroid of the triangle (y coordinate in pixels).
 * @param {number} x X coordinate of the point (in pixels).
 * @param {number} y Y coordinate of the point (in pixels).
 * @return {module:ol/coordinate~Coordinate} New point 1 px farther from the centroid.
 */
function enlargeClipPoint(centroidX, centroidY, x, y) {
  const dX = x - centroidX;
  const dY = y - centroidY;
  const distance = Math.sqrt(dX * dX + dY * dY);
  return [Math.round(x + dX / distance), Math.round(y + dY / distance)];
}


/**
 * Renders the source data into new canvas based on the triangulation.
 *
 * @param {number} width Width of the canvas.
 * @param {number} height Height of the canvas.
 * @param {number} pixelRatio Pixel ratio.
 * @param {number} sourceResolution Source resolution.
 * @param {module:ol/extent~Extent} sourceExtent Extent of the data source.
 * @param {number} targetResolution Target resolution.
 * @param {module:ol/extent~Extent} targetExtent Target extent.
 * @param {module:ol/reproj/Triangulation} triangulation
 * Calculated triangulation.
 * @param {Array.<{extent: module:ol/extent~Extent,
 *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources
 * Array of sources.
 * @param {number} gutter Gutter of the sources.
 * @param {boolean=} opt_renderEdges Render reprojection edges.
 * @return {HTMLCanvasElement} Canvas with reprojected data.
 */
function render(width, height, pixelRatio,
  sourceResolution, sourceExtent, targetResolution, targetExtent,
  triangulation, sources, gutter, opt_renderEdges) {

  const context = Object(_dom_js__WEBPACK_IMPORTED_MODULE_0__[/* createCanvasContext2D */ "a"])(Math.round(pixelRatio * width),
    Math.round(pixelRatio * height));

  if (sources.length === 0) {
    return context.canvas;
  }

  context.scale(pixelRatio, pixelRatio);

  const sourceDataExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* createEmpty */ "j"])();
  sources.forEach(function(src, i, arr) {
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "q"])(sourceDataExtent, src.extent);
  });

  const canvasWidthInUnits = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* getWidth */ "E"])(sourceDataExtent);
  const canvasHeightInUnits = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* getHeight */ "A"])(sourceDataExtent);
  const stitchContext = Object(_dom_js__WEBPACK_IMPORTED_MODULE_0__[/* createCanvasContext2D */ "a"])(
    Math.round(pixelRatio * canvasWidthInUnits / sourceResolution),
    Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));

  const stitchScale = pixelRatio / sourceResolution;

  sources.forEach(function(src, i, arr) {
    const xPos = src.extent[0] - sourceDataExtent[0];
    const yPos = -(src.extent[3] - sourceDataExtent[3]);
    const srcWidth = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* getWidth */ "E"])(src.extent);
    const srcHeight = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* getHeight */ "A"])(src.extent);

    stitchContext.drawImage(
      src.image,
      gutter, gutter,
      src.image.width - 2 * gutter, src.image.height - 2 * gutter,
      xPos * stitchScale, yPos * stitchScale,
      srcWidth * stitchScale, srcHeight * stitchScale);
  });

  const targetTopLeft = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* getTopLeft */ "C"])(targetExtent);

  triangulation.getTriangles().forEach(function(triangle, i, arr) {
    /* Calculate affine transform (src -> dst)
     * Resulting matrix can be used to transform coordinate
     * from `sourceProjection` to destination pixels.
     *
     * To optimize number of context calls and increase numerical stability,
     * we also do the following operations:
     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
     * here before solving the linear system so [ui, vi] are pixel coordinates.
     *
     * Src points: xi, yi
     * Dst points: ui, vi
     * Affine coefficients: aij
     *
     * | x0 y0 1  0  0 0 |   |a00|   |u0|
     * | x1 y1 1  0  0 0 |   |a01|   |u1|
     * | x2 y2 1  0  0 0 | x |a02| = |u2|
     * |  0  0 0 x0 y0 1 |   |a10|   |v0|
     * |  0  0 0 x1 y1 1 |   |a11|   |v1|
     * |  0  0 0 x2 y2 1 |   |a12|   |v2|
     */
    const source = triangle.source;
    const target = triangle.target;
    let x0 = source[0][0], y0 = source[0][1];
    let x1 = source[1][0], y1 = source[1][1];
    let x2 = source[2][0], y2 = source[2][1];
    const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
    const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
    const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
    const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
    const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
    const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;

    // Shift all the source points to improve numerical stability
    // of all the subsequent calculations. The [x0, y0] is used here.
    // This is also used to simplify the linear system.
    const sourceNumericalShiftX = x0;
    const sourceNumericalShiftY = y0;
    x0 = 0;
    y0 = 0;
    x1 -= sourceNumericalShiftX;
    y1 -= sourceNumericalShiftY;
    x2 -= sourceNumericalShiftX;
    y2 -= sourceNumericalShiftY;

    const augmentedMatrix = [
      [x1, y1, 0, 0, u1 - u0],
      [x2, y2, 0, 0, u2 - u0],
      [0, 0, x1, y1, v1 - v0],
      [0, 0, x2, y2, v2 - v0]
    ];
    const affineCoefs = Object(_math_js__WEBPACK_IMPORTED_MODULE_2__[/* solveLinearSystem */ "f"])(augmentedMatrix);
    if (!affineCoefs) {
      return;
    }

    context.save();
    context.beginPath();
    const centroidX = (u0 + u1 + u2) / 3;
    const centroidY = (v0 + v1 + v2) / 3;
    const p0 = enlargeClipPoint(centroidX, centroidY, u0, v0);
    const p1 = enlargeClipPoint(centroidX, centroidY, u1, v1);
    const p2 = enlargeClipPoint(centroidX, centroidY, u2, v2);

    context.moveTo(p1[0], p1[1]);
    context.lineTo(p0[0], p0[1]);
    context.lineTo(p2[0], p2[1]);
    context.clip();

    context.transform(
      affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);

    context.translate(sourceDataExtent[0] - sourceNumericalShiftX,
      sourceDataExtent[3] - sourceNumericalShiftY);

    context.scale(sourceResolution / pixelRatio,
      -sourceResolution / pixelRatio);

    context.drawImage(stitchContext.canvas, 0, 0);
    context.restore();
  });

  if (opt_renderEdges) {
    context.save();

    context.strokeStyle = 'black';
    context.lineWidth = 1;

    triangulation.getTriangles().forEach(function(triangle, i, arr) {
      const target = triangle.target;
      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;

      context.beginPath();
      context.moveTo(u1, v1);
      context.lineTo(u0, v0);
      context.lineTo(u2, v2);
      context.closePath();
      context.stroke();
    });

    context.restore();
  }
  return context.canvas;
}


/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(55);
/* harmony import */ var _geom_flat_area_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(165);
/* harmony import */ var _geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(105);
/* harmony import */ var _geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(90);
/* harmony import */ var _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(91);
/* harmony import */ var _geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(122);
/**
 * @module ol/geom/LinearRing
 */











/**
 * @classdesc
 * Linear ring geometry. Only used as part of polygon; cannot be rendered
 * on its own.
 *
 * @constructor
 * @extends {module:ol/geom/SimpleGeometry}
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @api
 */
const LinearRing = function(coordinates, opt_layout) {

  _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {number}
   */
  this.maxDelta_ = -1;

  /**
   * @private
   * @type {number}
   */
  this.maxDeltaRevision_ = -1;

  this.setCoordinates(coordinates, opt_layout);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(LinearRing, _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * Make a complete copy of the geometry.
 * @return {!module:ol/geom/LinearRing} Clone.
 * @override
 * @api
 */
LinearRing.prototype.clone = function() {
  const linearRing = new LinearRing(null);
  linearRing.setFlatCoordinates(this.layout, this.flatCoordinates.slice());
  return linearRing;
};


/**
 * @inheritDoc
 */
LinearRing.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
  if (minSquaredDistance < Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* closestSquaredDistanceXY */ "e"])(this.getExtent(), x, y)) {
    return minSquaredDistance;
  }
  if (this.maxDeltaRevision_ != this.getRevision()) {
    this.maxDelta_ = Math.sqrt(Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_6__[/* maxSquaredDelta */ "e"])(
      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
    this.maxDeltaRevision_ = this.getRevision();
  }
  return Object(_geom_flat_closest_js__WEBPACK_IMPORTED_MODULE_6__[/* assignClosestPoint */ "d"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
    this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
};


/**
 * Return the area of the linear ring on projected plane.
 * @return {number} Area (on projected plane).
 * @api
 */
LinearRing.prototype.getArea = function() {
  return Object(_geom_flat_area_js__WEBPACK_IMPORTED_MODULE_5__[/* linearRing */ "a"])(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
};


/**
 * Return the coordinates of the linear ring.
 * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.
 * @override
 * @api
 */
LinearRing.prototype.getCoordinates = function() {
  return Object(_geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_8__[/* inflateCoordinates */ "a"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
};


/**
 * @inheritDoc
 */
LinearRing.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
  const simplifiedFlatCoordinates = [];
  simplifiedFlatCoordinates.length = Object(_geom_flat_simplify_js__WEBPACK_IMPORTED_MODULE_9__[/* douglasPeucker */ "a"])(
    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
    squaredTolerance, simplifiedFlatCoordinates, 0);
  const simplifiedLinearRing = new LinearRing(null);
  simplifiedLinearRing.setFlatCoordinates(
    _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].XY, simplifiedFlatCoordinates);
  return simplifiedLinearRing;
};


/**
 * @inheritDoc
 * @api
 */
LinearRing.prototype.getType = function() {
  return _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].LINEAR_RING;
};


/**
 * @inheritDoc
 */
LinearRing.prototype.intersectsExtent = function(extent) {};


/**
 * Set the coordinates of the linear ring.
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @override
 * @api
 */
LinearRing.prototype.setCoordinates = function(coordinates, opt_layout) {
  if (!coordinates) {
    this.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].XY, null);
  } else {
    this.setLayout(opt_layout, coordinates, 1);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    this.flatCoordinates.length = Object(_geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_7__[/* deflateCoordinates */ "b"])(
      this.flatCoordinates, 0, coordinates, this.stride);
    this.changed();
  }
};


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 */
LinearRing.prototype.setFlatCoordinates = function(layout, flatCoordinates) {
  this.setFlatCoordinatesInternal(layout, flatCoordinates);
  this.changed();
};
/* harmony default export */ __webpack_exports__["a"] = (LinearRing);


/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/MapEventType
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({

  /**
   * Triggered after a map frame is rendered.
   * @event module:ol/MapEvent~MapEvent#postrender
   * @api
   */
  POSTRENDER: 'postrender',

  /**
   * Triggered when the map starts moving.
   * @event module:ol/MapEvent~MapEvent#movestart
   * @api
   */
  MOVESTART: 'movestart',

  /**
   * Triggered after the map is moved.
   * @event module:ol/MapEvent~MapEvent#moveend
   * @api
   */
  MOVEEND: 'moveend'

});


/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/source/WMSServerType
 */

/**
 * Available server types: `'carmentaserver'`, `'geoserver'`, `'mapserver'`,
 *     `'qgis'`. These are servers that have vendor parameters beyond the WMS
 *     specification that OpenLayers can make use of.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  CARMENTA_SERVER: 'carmentaserver',
  GEOSERVER: 'geoserver',
  MAPSERVER: 'mapserver',
  QGIS: 'qgis'
});


/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/layer/TileProperty
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  PRELOAD: 'preload',
  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError'
});


/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return sortByZIndex; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Disposable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(123);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(29);
/* harmony import */ var _layer_Layer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(66);
/* harmony import */ var _style_IconImageCache_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(202);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(18);
/**
 * @module ol/renderer/Map
 */











/**
 * @constructor
 * @abstract
 * @extends {module:ol/Disposable}
 * @param {module:ol/PluggableMap} map Map.
 * @struct
 */
const MapRenderer = function(map) {
  _Disposable_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {module:ol/PluggableMap}
   */
  this.map_ = map;

  /**
   * @private
   * @type {!Object.<string, module:ol/renderer/Layer>}
   */
  this.layerRenderers_ = {};

  /**
   * @private
   * @type {Object.<string, module:ol/events~EventsKey>}
   */
  this.layerRendererListeners_ = {};

  /**
   * @private
   * @type {Array.<module:ol/renderer/Layer>}
   */
  this.layerRendererConstructors_ = [];

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MapRenderer, _Disposable_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * Register layer renderer constructors.
 * @param {Array.<module:ol/renderer/Layer>} constructors Layer renderers.
 */
MapRenderer.prototype.registerLayerRenderers = function(constructors) {
  this.layerRendererConstructors_.push.apply(this.layerRendererConstructors_, constructors);
};


/**
 * Get the registered layer renderer constructors.
 * @return {Array.<module:ol/renderer/Layer>} Registered layer renderers.
 */
MapRenderer.prototype.getLayerRendererConstructors = function() {
  return this.layerRendererConstructors_;
};


/**
 * @param {module:ol/PluggableMap~FrameState} frameState FrameState.
 * @protected
 */
MapRenderer.prototype.calculateMatrices2D = function(frameState) {
  const viewState = frameState.viewState;
  const coordinateToPixelTransform = frameState.coordinateToPixelTransform;
  const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;

  Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* compose */ "b"])(coordinateToPixelTransform,
    frameState.size[0] / 2, frameState.size[1] / 2,
    1 / viewState.resolution, -1 / viewState.resolution,
    -viewState.rotation,
    -viewState.center[0], -viewState.center[1]);

  Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* invert */ "d"])(
    Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* setFromArray */ "i"])(pixelToCoordinateTransform, coordinateToPixelTransform));
};


/**
 * Removes all layer renderers.
 */
MapRenderer.prototype.removeLayerRenderers = function() {
  for (const key in this.layerRenderers_) {
    this.removeLayerRendererByKey_(key).dispose();
  }
};


/**
 * @param {module:ol/PluggableMap} map Map.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 */
function expireIconCache(map, frameState) {
  _style_IconImageCache_js__WEBPACK_IMPORTED_MODULE_7__[/* shared */ "a"].expire();
}


/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/PluggableMap~FrameState} frameState FrameState.
 * @param {number} hitTolerance Hit tolerance in pixels.
 * @param {function(this: S, (module:ol/Feature|module:ol/render/Feature),
 *     module:ol/layer/Layer): T} callback Feature callback.
 * @param {S} thisArg Value to use as `this` when executing `callback`.
 * @param {function(this: U, module:ol/layer/Layer): boolean} layerFilter Layer filter
 *     function, only layers which are visible and for which this function
 *     returns `true` will be tested for features.  By default, all visible
 *     layers will be tested.
 * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
 * @return {T|undefined} Callback result.
 * @template S,T,U
 */
MapRenderer.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg,
  layerFilter, thisArg2) {
  let result;
  const viewState = frameState.viewState;
  const viewResolution = viewState.resolution;

  /**
   * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
   * @param {module:ol/layer/Layer} layer Layer.
   * @return {?} Callback result.
   */
  function forEachFeatureAtCoordinate(feature, layer) {
    const key = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();
    const managed = frameState.layerStates[Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layer)].managed;
    if (!(key in frameState.skippedFeatureUids && !managed)) {
      return callback.call(thisArg, feature, managed ? layer : null);
    }
  }

  const projection = viewState.projection;

  let translatedCoordinate = coordinate;
  if (projection.canWrapX()) {
    const projectionExtent = projection.getExtent();
    const worldWidth = Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* getWidth */ "E"])(projectionExtent);
    const x = coordinate[0];
    if (x < projectionExtent[0] || x > projectionExtent[2]) {
      const worldsAway = Math.ceil((projectionExtent[0] - x) / worldWidth);
      translatedCoordinate = [x + worldWidth * worldsAway, coordinate[1]];
    }
  }

  const layerStates = frameState.layerStatesArray;
  const numLayers = layerStates.length;
  let i;
  for (i = numLayers - 1; i >= 0; --i) {
    const layerState = layerStates[i];
    const layer = layerState.layer;
    if (Object(_layer_Layer_js__WEBPACK_IMPORTED_MODULE_6__[/* visibleAtResolution */ "b"])(layerState, viewResolution) && layerFilter.call(thisArg2, layer)) {
      const layerRenderer = this.getLayerRenderer(layer);
      if (layer.getSource()) {
        result = layerRenderer.forEachFeatureAtCoordinate(
          layer.getSource().getWrapX() ? translatedCoordinate : coordinate,
          frameState, hitTolerance, forEachFeatureAtCoordinate, thisArg);
      }
      if (result) {
        return result;
      }
    }
  }
  return undefined;
};


/**
 * @abstract
 * @param {module:ol~Pixel} pixel Pixel.
 * @param {module:ol/PluggableMap~FrameState} frameState FrameState.
 * @param {number} hitTolerance Hit tolerance in pixels.
 * @param {function(this: S, module:ol/layer/Layer, (Uint8ClampedArray|Uint8Array)): T} callback Layer
 *     callback.
 * @param {S} thisArg Value to use as `this` when executing `callback`.
 * @param {function(this: U, module:ol/layer/Layer): boolean} layerFilter Layer filter
 *     function, only layers which are visible and for which this function
 *     returns `true` will be tested for features.  By default, all visible
 *     layers will be tested.
 * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
 * @return {T|undefined} Callback result.
 * @template S,T,U
 */
MapRenderer.prototype.forEachLayerAtPixel = function(pixel, frameState, hitTolerance, callback, thisArg,
  layerFilter, thisArg2) {};


/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/PluggableMap~FrameState} frameState FrameState.
 * @param {number} hitTolerance Hit tolerance in pixels.
 * @param {function(this: U, module:ol/layer/Layer): boolean} layerFilter Layer filter
 *     function, only layers which are visible and for which this function
 *     returns `true` will be tested for features.  By default, all visible
 *     layers will be tested.
 * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
 * @return {boolean} Is there a feature at the given coordinate?
 * @template U
 */
MapRenderer.prototype.hasFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, layerFilter, thisArg) {
  const hasFeature = this.forEachFeatureAtCoordinate(
    coordinate, frameState, hitTolerance, _functions_js__WEBPACK_IMPORTED_MODULE_5__[/* TRUE */ "b"], this, layerFilter, thisArg);

  return hasFeature !== undefined;
};


/**
 * @param {module:ol/layer/Layer} layer Layer.
 * @protected
 * @return {module:ol/renderer/Layer} Layer renderer.
 */
MapRenderer.prototype.getLayerRenderer = function(layer) {
  const layerKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layer).toString();
  if (layerKey in this.layerRenderers_) {
    return this.layerRenderers_[layerKey];
  } else {
    let renderer;
    for (let i = 0, ii = this.layerRendererConstructors_.length; i < ii; ++i) {
      const candidate = this.layerRendererConstructors_[i];
      if (candidate['handles'](layer)) {
        renderer = candidate['create'](this, layer);
        break;
      }
    }
    if (renderer) {
      this.layerRenderers_[layerKey] = renderer;
      this.layerRendererListeners_[layerKey] = Object(_events_js__WEBPACK_IMPORTED_MODULE_2__[/* listen */ "a"])(renderer,
        _events_EventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CHANGE, this.handleLayerRendererChange_, this);
    } else {
      throw new Error('Unable to create renderer for layer: ' + layer.getType());
    }
    return renderer;
  }
};


/**
 * @param {string} layerKey Layer key.
 * @protected
 * @return {module:ol/renderer/Layer} Layer renderer.
 */
MapRenderer.prototype.getLayerRendererByKey = function(layerKey) {
  return this.layerRenderers_[layerKey];
};


/**
 * @protected
 * @return {Object.<string, module:ol/renderer/Layer>} Layer renderers.
 */
MapRenderer.prototype.getLayerRenderers = function() {
  return this.layerRenderers_;
};


/**
 * @return {module:ol/PluggableMap} Map.
 */
MapRenderer.prototype.getMap = function() {
  return this.map_;
};


/**
 * Handle changes in a layer renderer.
 * @private
 */
MapRenderer.prototype.handleLayerRendererChange_ = function() {
  this.map_.render();
};


/**
 * @param {string} layerKey Layer key.
 * @return {module:ol/renderer/Layer} Layer renderer.
 * @private
 */
MapRenderer.prototype.removeLayerRendererByKey_ = function(layerKey) {
  const layerRenderer = this.layerRenderers_[layerKey];
  delete this.layerRenderers_[layerKey];

  Object(_events_js__WEBPACK_IMPORTED_MODULE_2__[/* unlistenByKey */ "e"])(this.layerRendererListeners_[layerKey]);
  delete this.layerRendererListeners_[layerKey];

  return layerRenderer;
};


/**
 * Render.
 * @param {?module:ol/PluggableMap~FrameState} frameState Frame state.
 */
MapRenderer.prototype.renderFrame = _functions_js__WEBPACK_IMPORTED_MODULE_5__[/* UNDEFINED */ "c"];


/**
 * @param {module:ol/PluggableMap} map Map.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @private
 */
MapRenderer.prototype.removeUnusedLayerRenderers_ = function(map, frameState) {
  for (const layerKey in this.layerRenderers_) {
    if (!frameState || !(layerKey in frameState.layerStates)) {
      this.removeLayerRendererByKey_(layerKey).dispose();
    }
  }
};


/**
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @protected
 */
MapRenderer.prototype.scheduleExpireIconCache = function(frameState) {
  frameState.postRenderFunctions.push(/** @type {module:ol/PluggableMap~PostRenderFunction} */ (expireIconCache));
};


/**
 * @param {!module:ol/PluggableMap~FrameState} frameState Frame state.
 * @protected
 */
MapRenderer.prototype.scheduleRemoveUnusedLayerRenderers = function(frameState) {
  for (const layerKey in this.layerRenderers_) {
    if (!(layerKey in frameState.layerStates)) {
      frameState.postRenderFunctions.push(
        /** @type {module:ol/PluggableMap~PostRenderFunction} */ (this.removeUnusedLayerRenderers_.bind(this))
      );
      return;
    }
  }
};


/**
 * @param {module:ol/layer/Layer~State} state1 First layer state.
 * @param {module:ol/layer/Layer~State} state2 Second layer state.
 * @return {number} The zIndex difference.
 */
function sortByZIndex(state1, state2) {
  return state1.zIndex - state2.zIndex;
}
/* harmony default export */ __webpack_exports__["a"] = (MapRenderer);


/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(36);
/* harmony import */ var _events_condition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(37);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(29);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var _interaction_Interaction_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(45);
/* harmony import */ var _layer_Vector_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(24);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(15);
/* harmony import */ var _source_Vector_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(13);
/* harmony import */ var _style_Style_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(75);
/**
 * @module ol/interaction/Select
 */















/**
 * @enum {string}
 */
const SelectEventType = {
  /**
   * Triggered when feature(s) has been (de)selected.
   * @event SelectEvent#select
   * @api
   */
  SELECT: 'select'
};


/**
 * A function that takes an {@link module:ol/Feature} or
 * {@link module:ol/render/Feature} and an
 * {@link module:ol/layer/Layer} and returns `true` if the feature may be
 * selected or `false` otherwise.
 * @typedef {function((module:ol/Feature|module:ol/render/Feature), module:ol/layer/Layer):
 *     boolean} FilterFunction
 */


/**
 * @typedef {Object} Options
 * @property {module:ol/events/condition~Condition} [addCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * By default, this is {@link module:ol/events/condition~never}. Use this if you
 * want to use different events for add and remove instead of `toggle`.
 * @property {module:ol/events/condition~Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. This is the event
 * for the selected features as a whole. By default, this is
 * {@link module:ol/events/condition~singleClick}. Clicking on a feature selects that
 * feature and removes any that were in the selection. Clicking outside any
 * feature removes all from the selection.
 * See `toggle`, `add`, `remove` options for adding/removing extra features to/
 * from the selection.
 * @property {Array.<module:ol/layer/Layer>|function(module:ol/layer/Layer): boolean} [layers]
 * A list of layers from which features should be selected. Alternatively, a
 * filter function can be provided. The function will be called for each layer
 * in the map and should return `true` for layers that you want to be
 * selectable. If the option is absent, all visible layers will be considered
 * selectable.
 * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style]
 * Style for the selected features. By default the default edit style is used
 * (see {@link module:ol/style}).
 * @property {module:ol/events/condition~Condition} [removeCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * By default, this is {@link module:ol/events/condition~never}. Use this if you
 * want to use different events for add and remove instead of `toggle`.
 * @property {module:ol/events/condition~Condition} [toggleCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. This is in addition
 * to the `condition` event. By default,
 * {@link module:ol/events/condition~shiftKeyOnly}, i.e. pressing `shift` as
 * well as the `condition` event, adds that feature to the current selection if
 * it is not currently selected, and removes it if it is. See `add` and `remove`
 * if you want to use different events instead of a toggle.
 * @property {boolean} [multi=false] A boolean that determines if the default
 * behaviour should select only single features or all (overlapping) features at
 * the clicked map position. The default of `false` means single select.
 * @property {module:ol/Collection.<module:ol/Feature>} [features]
 * Collection where the interaction will place selected features. Optional. If
 * not set the interaction will create a collection. In any case the collection
 * used by the interaction is returned by
 * {@link module:ol/interaction/Select~Select#getFeatures}.
 * @property {module:ol/interaction/Select~FilterFunction} [filter] A function
 * that takes an {@link module:ol/Feature} and an
 * {@link module:ol/layer/Layer} and returns `true` if the feature may be
 * selected or `false` otherwise.
 * @property {boolean} [wrapX=true] Wrap the world horizontally on the selection
 * overlay.
 * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside
 * the radius around the given position will be checked for features. This only
 * works for the canvas renderer and not for WebGL.
 */


/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of
 * this type.
 *
 * @param {SelectEventType} type The event type.
 * @param {Array.<module:ol/Feature>} selected Selected features.
 * @param {Array.<module:ol/Feature>} deselected Deselected features.
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Associated
 *     {@link module:ol/MapBrowserEvent}.
 * @extends {module:ol/events/Event}
 * @constructor
 */
const SelectEvent = function(type, selected, deselected, mapBrowserEvent) {
  _events_Event_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this, type);

  /**
   * Selected features array.
   * @type {Array.<module:ol/Feature>}
   * @api
   */
  this.selected = selected;

  /**
   * Deselected features array.
   * @type {Array.<module:ol/Feature>}
   * @api
   */
  this.deselected = deselected;

  /**
   * Associated {@link module:ol/MapBrowserEvent}.
   * @type {module:ol/MapBrowserEvent}
   * @api
   */
  this.mapBrowserEvent = mapBrowserEvent;
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(SelectEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * @classdesc
 * Interaction for selecting vector features. By default, selected features are
 * styled differently, so this interaction can be used for visual highlighting,
 * as well as selecting features for other actions, such as modification or
 * output. There are three ways of controlling which features are selected:
 * using the browser event as defined by the `condition` and optionally the
 * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a
 * further feature filter using the `filter` option.
 *
 * Selected features are added to an internal unmanaged layer.
 *
 * @constructor
 * @extends {module:ol/interaction/Interaction}
 * @param {module:ol/interaction/Select~Options=} opt_options Options.
 * @fires SelectEvent
 * @api
 */
const Select = function(opt_options) {

  _interaction_Interaction_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].call(this, {
    handleEvent: handleEvent
  });

  const options = opt_options ? opt_options : {};

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.condition_ = options.condition ? options.condition : _events_condition_js__WEBPACK_IMPORTED_MODULE_5__[/* singleClick */ "n"];

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.addCondition_ = options.addCondition ? options.addCondition : _events_condition_js__WEBPACK_IMPORTED_MODULE_5__[/* never */ "h"];

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.removeCondition_ = options.removeCondition ? options.removeCondition : _events_condition_js__WEBPACK_IMPORTED_MODULE_5__[/* never */ "h"];

  /**
   * @private
   * @type {module:ol/events/condition~Condition}
   */
  this.toggleCondition_ = options.toggleCondition ? options.toggleCondition : _events_condition_js__WEBPACK_IMPORTED_MODULE_5__[/* shiftKeyOnly */ "m"];

  /**
   * @private
   * @type {boolean}
   */
  this.multi_ = options.multi ? options.multi : false;

  /**
   * @private
   * @type {module:ol/interaction/Select~FilterFunction}
   */
  this.filter_ = options.filter ? options.filter : _functions_js__WEBPACK_IMPORTED_MODULE_6__[/* TRUE */ "b"];

  /**
   * @private
   * @type {number}
   */
  this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

  const featureOverlay = new _layer_Vector_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]({
    source: new _source_Vector_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "b"]({
      useSpatialIndex: false,
      features: options.features,
      wrapX: options.wrapX
    }),
    style: options.style ? options.style :
      getDefaultStyleFunction(),
    updateWhileAnimating: true,
    updateWhileInteracting: true
  });

  /**
   * @private
   * @type {module:ol/layer/Vector}
   */
  this.featureOverlay_ = featureOverlay;

  /** @type {function(module:ol/layer/Layer): boolean} */
  let layerFilter;
  if (options.layers) {
    if (typeof options.layers === 'function') {
      layerFilter = options.layers;
    } else {
      const layers = options.layers;
      layerFilter = function(layer) {
        return Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(layers, layer);
      };
    }
  } else {
    layerFilter = _functions_js__WEBPACK_IMPORTED_MODULE_6__[/* TRUE */ "b"];
  }

  /**
   * @private
   * @type {function(module:ol/layer/Layer): boolean}
   */
  this.layerFilter_ = layerFilter;

  /**
   * An association between selected feature (key)
   * and layer (value)
   * @private
   * @type {Object.<number, module:ol/layer/Layer>}
   */
  this.featureLayerAssociation_ = {};

  const features = this.featureOverlay_.getSource().getFeaturesCollection();
  Object(_events_js__WEBPACK_IMPORTED_MODULE_3__[/* listen */ "a"])(features, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].ADD,
    this.addFeature_, this);
  Object(_events_js__WEBPACK_IMPORTED_MODULE_3__[/* listen */ "a"])(features, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].REMOVE,
    this.removeFeature_, this);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Select, _interaction_Interaction_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"]);


/**
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 * @param {module:ol/layer/Layer} layer Layer.
 * @private
 */
Select.prototype.addFeatureLayerAssociation_ = function(feature, layer) {
  const key = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature);
  this.featureLayerAssociation_[key] = layer;
};


/**
 * Get the selected features.
 * @return {module:ol/Collection.<module:ol/Feature>} Features collection.
 * @api
 */
Select.prototype.getFeatures = function() {
  return this.featureOverlay_.getSource().getFeaturesCollection();
};


/**
 * Returns the Hit-detection tolerance.
 * @returns {number} Hit tolerance in pixels.
 * @api
 */
Select.prototype.getHitTolerance = function() {
  return this.hitTolerance_;
};


/**
 * Returns the associated {@link module:ol/layer/Vector~Vector vectorlayer} of
 * the (last) selected feature. Note that this will not work with any
 * programmatic method like pushing features to
 * {@link module:ol/interaction/Select~Select#getFeatures collection}.
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature
 * @return {module:ol/layer/Vector} Layer.
 * @api
 */
Select.prototype.getLayer = function(feature) {
  const key = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature);
  return (
    /** @type {module:ol/layer/Vector} */ (this.featureLayerAssociation_[key])
  );
};


/**
 * Handles the {@link module:ol/MapBrowserEvent map browser event} and may change the
 * selected state of features.
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.
 * @return {boolean} `false` to stop event propagation.
 * @this {module:ol/interaction/Select}
 */
function handleEvent(mapBrowserEvent) {
  if (!this.condition_(mapBrowserEvent)) {
    return true;
  }
  const add = this.addCondition_(mapBrowserEvent);
  const remove = this.removeCondition_(mapBrowserEvent);
  const toggle = this.toggleCondition_(mapBrowserEvent);
  const set = !add && !remove && !toggle;
  const map = mapBrowserEvent.map;
  const features = this.featureOverlay_.getSource().getFeaturesCollection();
  const deselected = [];
  const selected = [];
  if (set) {
    // Replace the currently selected feature(s) with the feature(s) at the
    // pixel, or clear the selected feature(s) if there is no feature at
    // the pixel.
    Object(_obj_js__WEBPACK_IMPORTED_MODULE_10__[/* clear */ "b"])(this.featureLayerAssociation_);
    map.forEachFeatureAtPixel(mapBrowserEvent.pixel,
      (
        /**
         * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
         * @param {module:ol/layer/Layer} layer Layer.
         * @return {boolean|undefined} Continue to iterate over the features.
         */
        function(feature, layer) {
          if (this.filter_(feature, layer)) {
            selected.push(feature);
            this.addFeatureLayerAssociation_(feature, layer);
            return !this.multi_;
          }
        }).bind(this), {
        layerFilter: this.layerFilter_,
        hitTolerance: this.hitTolerance_
      });
    for (let i = features.getLength() - 1; i >= 0; --i) {
      const feature = features.item(i);
      const index = selected.indexOf(feature);
      if (index > -1) {
        // feature is already selected
        selected.splice(index, 1);
      } else {
        features.remove(feature);
        deselected.push(feature);
      }
    }
    if (selected.length !== 0) {
      features.extend(selected);
    }
  } else {
    // Modify the currently selected feature(s).
    map.forEachFeatureAtPixel(mapBrowserEvent.pixel,
      (
        /**
         * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
         * @param {module:ol/layer/Layer} layer Layer.
         * @return {boolean|undefined} Continue to iterate over the features.
         */
        function(feature, layer) {
          if (this.filter_(feature, layer)) {
            if ((add || toggle) && !Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(features.getArray(), feature)) {
              selected.push(feature);
              this.addFeatureLayerAssociation_(feature, layer);
            } else if ((remove || toggle) && Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(features.getArray(), feature)) {
              deselected.push(feature);
              this.removeFeatureLayerAssociation_(feature);
            }
            return !this.multi_;
          }
        }).bind(this), {
        layerFilter: this.layerFilter_,
        hitTolerance: this.hitTolerance_
      });
    for (let j = deselected.length - 1; j >= 0; --j) {
      features.remove(deselected[j]);
    }
    features.extend(selected);
  }
  if (selected.length > 0 || deselected.length > 0) {
    this.dispatchEvent(
      new SelectEvent(SelectEventType.SELECT,
        selected, deselected, mapBrowserEvent));
  }
  return Object(_events_condition_js__WEBPACK_IMPORTED_MODULE_5__[/* pointerMove */ "k"])(mapBrowserEvent);
}


/**
 * Hit-detection tolerance. Pixels inside the radius around the given position
 * will be checked for features. This only works for the canvas renderer and
 * not for WebGL.
 * @param {number} hitTolerance Hit tolerance in pixels.
 * @api
 */
Select.prototype.setHitTolerance = function(hitTolerance) {
  this.hitTolerance_ = hitTolerance;
};


/**
 * Remove the interaction from its current map, if any,  and attach it to a new
 * map, if any. Pass `null` to just remove the interaction from the current map.
 * @param {module:ol/PluggableMap} map Map.
 * @override
 * @api
 */
Select.prototype.setMap = function(map) {
  const currentMap = this.getMap();
  const selectedFeatures =
      this.featureOverlay_.getSource().getFeaturesCollection();
  if (currentMap) {
    selectedFeatures.forEach(currentMap.unskipFeature.bind(currentMap));
  }
  _interaction_Interaction_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].prototype.setMap.call(this, map);
  this.featureOverlay_.setMap(map);
  if (map) {
    selectedFeatures.forEach(map.skipFeature.bind(map));
  }
};


/**
 * @return {module:ol/style/Style~StyleFunction} Styles.
 */
function getDefaultStyleFunction() {
  const styles = Object(_style_Style_js__WEBPACK_IMPORTED_MODULE_12__[/* createEditingStyle */ "b"])();
  Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POLYGON], styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].LINE_STRING]);
  Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* extend */ "c"])(styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].GEOMETRY_COLLECTION], styles[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].LINE_STRING]);

  return function(feature, resolution) {
    if (!feature.getGeometry()) {
      return null;
    }
    return styles[feature.getGeometry().getType()];
  };
}


/**
 * @param {module:ol/Collection~CollectionEvent} evt Event.
 * @private
 */
Select.prototype.addFeature_ = function(evt) {
  const map = this.getMap();
  if (map) {
    map.skipFeature(/** @type {module:ol/Feature} */ (evt.element));
  }
};


/**
 * @param {module:ol/Collection~CollectionEvent} evt Event.
 * @private
 */
Select.prototype.removeFeature_ = function(evt) {
  const map = this.getMap();
  if (map) {
    map.unskipFeature(/** @type {module:ol/Feature} */ (evt.element));
  }
};


/**
 * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
 * @private
 */
Select.prototype.removeFeatureLayerAssociation_ = function(feature) {
  const key = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature);
  delete this.featureLayerAssociation_[key];
};


/* harmony default export */ __webpack_exports__["a"] = (Select);


/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DEFAULT_MAX_ZOOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DEFAULT_TILE_SIZE; });
/**
 * @module ol/tilegrid/common
 */

/**
 * Default maximum zoom for default tile grids.
 * @type {number}
 */
const DEFAULT_MAX_ZOOM = 42;

/**
 * Default tile size.
 * @type {number}
 */
const DEFAULT_TILE_SIZE = 256;


/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/**
 * @module ol/format/XML
 */


/**
 * @classdesc
 * Generic format for reading non-feature XML data
 *
 * @constructor
 * @abstract
 * @struct
 */
const XML = function() {
};


/**
 * @param {Document|Node|string} source Source.
 * @return {Object} The parsed result.
 */
XML.prototype.read = function(source) {
  if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* isDocument */ "g"])(source)) {
    return this.readFromDocument(/** @type {Document} */ (source));
  } else if (Object(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* isNode */ "h"])(source)) {
    return this.readFromNode(/** @type {Node} */ (source));
  } else if (typeof source === 'string') {
    const doc = Object(_xml_js__WEBPACK_IMPORTED_MODULE_0__[/* parse */ "s"])(source);
    return this.readFromDocument(doc);
  } else {
    return null;
  }
};


/**
 * @abstract
 * @param {Document} doc Document.
 * @return {Object} Object
 */
XML.prototype.readFromDocument = function(doc) {};


/**
 * @abstract
 * @param {Node} node Node.
 * @return {Object} Object
 */
XML.prototype.readFromNode = function(node) {};
/* harmony default export */ __webpack_exports__["a"] = (XML);


/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return readHref; });
/**
 * @module ol/format/XLink
 */


/**
 * @const
 * @type {string}
 */
const NAMESPACE_URI = 'http://www.w3.org/1999/xlink';


/**
 * @param {Node} node Node.
 * @return {string|undefined} href.
 */
function readHref(node) {
  return node.getAttributeNS(NAMESPACE_URI, 'href');
}


/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42);
/* harmony import */ var _format_FormatType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(111);
/**
 * @module ol/format/TextFeature
 */




/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for text feature formats.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/format/Feature}
 */
const TextFeature = function() {
  _format_Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(TextFeature, _format_Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @param {Document|Node|Object|string} source Source.
 * @return {string} Text.
 */
function getText(source) {
  if (typeof source === 'string') {
    return source;
  } else {
    return '';
  }
}


/**
 * @inheritDoc
 */
TextFeature.prototype.getType = function() {
  return _format_FormatType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].TEXT;
};


/**
 * @inheritDoc
 */
TextFeature.prototype.readFeature = function(source, opt_options) {
  return this.readFeatureFromText(getText(source), this.adaptOptions(opt_options));
};


/**
 * @abstract
 * @param {string} text Text.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @protected
 * @return {module:ol/Feature} Feature.
 */
TextFeature.prototype.readFeatureFromText = function(text, opt_options) {};


/**
 * @inheritDoc
 */
TextFeature.prototype.readFeatures = function(source, opt_options) {
  return this.readFeaturesFromText(getText(source), this.adaptOptions(opt_options));
};


/**
 * @abstract
 * @param {string} text Text.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @protected
 * @return {Array.<module:ol/Feature>} Features.
 */
TextFeature.prototype.readFeaturesFromText = function(text, opt_options) {};


/**
 * @inheritDoc
 */
TextFeature.prototype.readGeometry = function(source, opt_options) {
  return this.readGeometryFromText(getText(source), this.adaptOptions(opt_options));
};


/**
 * @abstract
 * @param {string} text Text.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @protected
 * @return {module:ol/geom/Geometry} Geometry.
 */
TextFeature.prototype.readGeometryFromText = function(text, opt_options) {};


/**
 * @inheritDoc
 */
TextFeature.prototype.readProjection = function(source) {
  return this.readProjectionFromText(getText(source));
};


/**
 * @param {string} text Text.
 * @protected
 * @return {module:ol/proj/Projection} Projection.
 */
TextFeature.prototype.readProjectionFromText = function(text) {
  return this.dataProjection;
};


/**
 * @inheritDoc
 */
TextFeature.prototype.writeFeature = function(feature, opt_options) {
  return this.writeFeatureText(feature, this.adaptOptions(opt_options));
};


/**
 * @abstract
 * @param {module:ol/Feature} feature Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @protected
 * @return {string} Text.
 */
TextFeature.prototype.writeFeatureText = function(feature, opt_options) {};


/**
 * @inheritDoc
 */
TextFeature.prototype.writeFeatures = function(features, opt_options) {
  return this.writeFeaturesText(features, this.adaptOptions(opt_options));
};


/**
 * @abstract
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @protected
 * @return {string} Text.
 */
TextFeature.prototype.writeFeaturesText = function(features, opt_options) {};


/**
 * @inheritDoc
 */
TextFeature.prototype.writeGeometry = function(geometry, opt_options) {
  return this.writeGeometryText(geometry, this.adaptOptions(opt_options));
};


/**
 * @abstract
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @protected
 * @return {string} Text.
 */
TextFeature.prototype.writeGeometryText = function(geometry, opt_options) {};
/* harmony default export */ __webpack_exports__["a"] = (TextFeature);


/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(83);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(15);
/**
 * @module ol/geom/GeometryCollection
 */








/**
 * @classdesc
 * An array of {@link module:ol/geom/Geometry} objects.
 *
 * @constructor
 * @extends {module:ol/geom/Geometry}
 * @param {Array.<module:ol/geom/Geometry>=} opt_geometries Geometries.
 * @api
 */
const GeometryCollection = function(opt_geometries) {

  _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {Array.<module:ol/geom/Geometry>}
   */
  this.geometries_ = opt_geometries ? opt_geometries : null;

  this.listenGeometriesChange_();
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(GeometryCollection, _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * @param {Array.<module:ol/geom/Geometry>} geometries Geometries.
 * @return {Array.<module:ol/geom/Geometry>} Cloned geometries.
 */
function cloneGeometries(geometries) {
  const clonedGeometries = [];
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    clonedGeometries.push(geometries[i].clone());
  }
  return clonedGeometries;
}


/**
 * @private
 */
GeometryCollection.prototype.unlistenGeometriesChange_ = function() {
  if (!this.geometries_) {
    return;
  }
  for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* unlisten */ "c"])(
      this.geometries_[i], _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].CHANGE,
      this.changed, this);
  }
};


/**
 * @private
 */
GeometryCollection.prototype.listenGeometriesChange_ = function() {
  if (!this.geometries_) {
    return;
  }
  for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(
      this.geometries_[i], _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].CHANGE,
      this.changed, this);
  }
};


/**
 * Make a complete copy of the geometry.
 * @return {!module:ol/geom/GeometryCollection} Clone.
 * @override
 * @api
 */
GeometryCollection.prototype.clone = function() {
  const geometryCollection = new GeometryCollection(null);
  geometryCollection.setGeometries(this.geometries_);
  return geometryCollection;
};


/**
 * @inheritDoc
 */
GeometryCollection.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
  if (minSquaredDistance < Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* closestSquaredDistanceXY */ "e"])(this.getExtent(), x, y)) {
    return minSquaredDistance;
  }
  const geometries = this.geometries_;
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    minSquaredDistance = geometries[i].closestPointXY(
      x, y, closestPoint, minSquaredDistance);
  }
  return minSquaredDistance;
};


/**
 * @inheritDoc
 */
GeometryCollection.prototype.containsXY = function(x, y) {
  const geometries = this.geometries_;
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    if (geometries[i].containsXY(x, y)) {
      return true;
    }
  }
  return false;
};


/**
 * @inheritDoc
 */
GeometryCollection.prototype.computeExtent = function(extent) {
  Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* createOrUpdateEmpty */ "l"])(extent);
  const geometries = this.geometries_;
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* extend */ "q"])(extent, geometries[i].getExtent());
  }
  return extent;
};


/**
 * Return the geometries that make up this geometry collection.
 * @return {Array.<module:ol/geom/Geometry>} Geometries.
 * @api
 */
GeometryCollection.prototype.getGeometries = function() {
  return cloneGeometries(this.geometries_);
};


/**
 * @return {Array.<module:ol/geom/Geometry>} Geometries.
 */
GeometryCollection.prototype.getGeometriesArray = function() {
  return this.geometries_;
};


/**
 * @inheritDoc
 */
GeometryCollection.prototype.getSimplifiedGeometry = function(squaredTolerance) {
  if (this.simplifiedGeometryRevision != this.getRevision()) {
    Object(_obj_js__WEBPACK_IMPORTED_MODULE_6__[/* clear */ "b"])(this.simplifiedGeometryCache);
    this.simplifiedGeometryMaxMinSquaredTolerance = 0;
    this.simplifiedGeometryRevision = this.getRevision();
  }
  if (squaredTolerance < 0 ||
      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
       squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {
    return this;
  }
  const key = squaredTolerance.toString();
  if (this.simplifiedGeometryCache.hasOwnProperty(key)) {
    return this.simplifiedGeometryCache[key];
  } else {
    const simplifiedGeometries = [];
    const geometries = this.geometries_;
    let simplified = false;
    for (let i = 0, ii = geometries.length; i < ii; ++i) {
      const geometry = geometries[i];
      const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
      simplifiedGeometries.push(simplifiedGeometry);
      if (simplifiedGeometry !== geometry) {
        simplified = true;
      }
    }
    if (simplified) {
      const simplifiedGeometryCollection = new GeometryCollection(null);
      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);
      this.simplifiedGeometryCache[key] = simplifiedGeometryCollection;
      return simplifiedGeometryCollection;
    } else {
      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
      return this;
    }
  }
};


/**
 * @inheritDoc
 * @api
 */
GeometryCollection.prototype.getType = function() {
  return _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].GEOMETRY_COLLECTION;
};


/**
 * @inheritDoc
 * @api
 */
GeometryCollection.prototype.intersectsExtent = function(extent) {
  const geometries = this.geometries_;
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    if (geometries[i].intersectsExtent(extent)) {
      return true;
    }
  }
  return false;
};


/**
 * @return {boolean} Is empty.
 */
GeometryCollection.prototype.isEmpty = function() {
  return this.geometries_.length === 0;
};


/**
 * @inheritDoc
 * @api
 */
GeometryCollection.prototype.rotate = function(angle, anchor) {
  const geometries = this.geometries_;
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    geometries[i].rotate(angle, anchor);
  }
  this.changed();
};


/**
 * @inheritDoc
 * @api
 */
GeometryCollection.prototype.scale = function(sx, opt_sy, opt_anchor) {
  let anchor = opt_anchor;
  if (!anchor) {
    anchor = Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* getCenter */ "x"])(this.getExtent());
  }
  const geometries = this.geometries_;
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    geometries[i].scale(sx, opt_sy, anchor);
  }
  this.changed();
};


/**
 * Set the geometries that make up this geometry collection.
 * @param {Array.<module:ol/geom/Geometry>} geometries Geometries.
 * @api
 */
GeometryCollection.prototype.setGeometries = function(geometries) {
  this.setGeometriesArray(cloneGeometries(geometries));
};


/**
 * @param {Array.<module:ol/geom/Geometry>} geometries Geometries.
 */
GeometryCollection.prototype.setGeometriesArray = function(geometries) {
  this.unlistenGeometriesChange_();
  this.geometries_ = geometries;
  this.listenGeometriesChange_();
  this.changed();
};


/**
 * @inheritDoc
 * @api
 */
GeometryCollection.prototype.applyTransform = function(transformFn) {
  const geometries = this.geometries_;
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    geometries[i].applyTransform(transformFn);
  }
  this.changed();
};


/**
 * Translate the geometry.
 * @param {number} deltaX Delta X.
 * @param {number} deltaY Delta Y.
 * @override
 * @api
 */
GeometryCollection.prototype.translate = function(deltaX, deltaY) {
  const geometries = this.geometries_;
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    geometries[i].translate(deltaX, deltaY);
  }
  this.changed();
};


/**
 * @inheritDoc
 */
GeometryCollection.prototype.disposeInternal = function() {
  this.unlistenGeometriesChange_();
  _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].prototype.disposeInternal.call(this);
};
/* harmony default export */ __webpack_exports__["a"] = (GeometryCollection);


/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42);
/* harmony import */ var _format_FormatType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(111);
/**
 * @module ol/format/JSONFeature
 */




/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for JSON feature formats.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/format/Feature}
 */
const JSONFeature = function() {
  _format_Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(JSONFeature, _format_Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @param {Document|Node|Object|string} source Source.
 * @return {Object} Object.
 */
function getObject(source) {
  if (typeof source === 'string') {
    const object = JSON.parse(source);
    return object ? /** @type {Object} */ (object) : null;
  } else if (source !== null) {
    return source;
  } else {
    return null;
  }
}


/**
 * @inheritDoc
 */
JSONFeature.prototype.getType = function() {
  return _format_FormatType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].JSON;
};


/**
 * @inheritDoc
 */
JSONFeature.prototype.readFeature = function(source, opt_options) {
  return this.readFeatureFromObject(
    getObject(source), this.getReadOptions(source, opt_options));
};


/**
 * @inheritDoc
 */
JSONFeature.prototype.readFeatures = function(source, opt_options) {
  return this.readFeaturesFromObject(
    getObject(source), this.getReadOptions(source, opt_options));
};


/**
 * @abstract
 * @param {Object} object Object.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @protected
 * @return {module:ol/Feature} Feature.
 */
JSONFeature.prototype.readFeatureFromObject = function(object, opt_options) {};


/**
 * @abstract
 * @param {Object} object Object.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @protected
 * @return {Array.<module:ol/Feature>} Features.
 */
JSONFeature.prototype.readFeaturesFromObject = function(object, opt_options) {};


/**
 * @inheritDoc
 */
JSONFeature.prototype.readGeometry = function(source, opt_options) {
  return this.readGeometryFromObject(
    getObject(source), this.getReadOptions(source, opt_options));
};


/**
 * @abstract
 * @param {Object} object Object.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @protected
 * @return {module:ol/geom/Geometry} Geometry.
 */
JSONFeature.prototype.readGeometryFromObject = function(object, opt_options) {};


/**
 * @inheritDoc
 */
JSONFeature.prototype.readProjection = function(source) {
  return this.readProjectionFromObject(getObject(source));
};


/**
 * @abstract
 * @param {Object} object Object.
 * @protected
 * @return {module:ol/proj/Projection} Projection.
 */
JSONFeature.prototype.readProjectionFromObject = function(object) {};


/**
 * @inheritDoc
 */
JSONFeature.prototype.writeFeature = function(feature, opt_options) {
  return JSON.stringify(this.writeFeatureObject(feature, opt_options));
};


/**
 * @abstract
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {Object} Object.
 */
JSONFeature.prototype.writeFeatureObject = function(feature, opt_options) {};


/**
 * @inheritDoc
 */
JSONFeature.prototype.writeFeatures = function(features, opt_options) {
  return JSON.stringify(this.writeFeaturesObject(features, opt_options));
};


/**
 * @abstract
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {Object} Object.
 */
JSONFeature.prototype.writeFeaturesObject = function(features, opt_options) {};


/**
 * @inheritDoc
 */
JSONFeature.prototype.writeGeometry = function(geometry, opt_options) {
  return JSON.stringify(this.writeGeometryObject(geometry, opt_options));
};


/**
 * @abstract
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {Object} Object.
 */
JSONFeature.prototype.writeGeometryObject = function(geometry, opt_options) {};
/* harmony default export */ __webpack_exports__["a"] = (JSONFeature);


/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return interpolatePoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return lineStringCoordinateAtM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return lineStringsCoordinateAtM; });
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21);
/**
 * @module ol/geom/flat/interpolate
 */




/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} fraction Fraction.
 * @param {Array.<number>=} opt_dest Destination.
 * @return {Array.<number>} Destination.
 */
function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {
  let pointX = NaN;
  let pointY = NaN;
  const n = (end - offset) / stride;
  if (n === 1) {
    pointX = flatCoordinates[offset];
    pointY = flatCoordinates[offset + 1];
  } else if (n == 2) {
    pointX = (1 - fraction) * flatCoordinates[offset] +
        fraction * flatCoordinates[offset + stride];
    pointY = (1 - fraction) * flatCoordinates[offset + 1] +
        fraction * flatCoordinates[offset + stride + 1];
  } else if (n !== 0) {
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    let length = 0;
    const cumulativeLengths = [0];
    for (let i = offset + stride; i < end; i += stride) {
      const x2 = flatCoordinates[i];
      const y2 = flatCoordinates[i + 1];
      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      cumulativeLengths.push(length);
      x1 = x2;
      y1 = y2;
    }
    const target = fraction * length;
    const index = Object(_array_js__WEBPACK_IMPORTED_MODULE_0__[/* binarySearch */ "a"])(cumulativeLengths, target);
    if (index < 0) {
      const t = (target - cumulativeLengths[-index - 2]) /
          (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
      const o = offset + (-index - 2) * stride;
      pointX = Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* lerp */ "c"])(
        flatCoordinates[o], flatCoordinates[o + stride], t);
      pointY = Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* lerp */ "c"])(
        flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);
    } else {
      pointX = flatCoordinates[offset + index * stride];
      pointY = flatCoordinates[offset + index * stride + 1];
    }
  }
  if (opt_dest) {
    opt_dest[0] = pointX;
    opt_dest[1] = pointY;
    return opt_dest;
  } else {
    return [pointX, pointY];
  }
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} m M.
 * @param {boolean} extrapolate Extrapolate.
 * @return {module:ol/coordinate~Coordinate} Coordinate.
 */
function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {
  if (end == offset) {
    return null;
  }
  let coordinate;
  if (m < flatCoordinates[offset + stride - 1]) {
    if (extrapolate) {
      coordinate = flatCoordinates.slice(offset, offset + stride);
      coordinate[stride - 1] = m;
      return coordinate;
    } else {
      return null;
    }
  } else if (flatCoordinates[end - 1] < m) {
    if (extrapolate) {
      coordinate = flatCoordinates.slice(end - stride, end);
      coordinate[stride - 1] = m;
      return coordinate;
    } else {
      return null;
    }
  }
  // FIXME use O(1) search
  if (m == flatCoordinates[offset + stride - 1]) {
    return flatCoordinates.slice(offset, offset + stride);
  }
  let lo = offset / stride;
  let hi = end / stride;
  while (lo < hi) {
    const mid = (lo + hi) >> 1;
    if (m < flatCoordinates[(mid + 1) * stride - 1]) {
      hi = mid;
    } else {
      lo = mid + 1;
    }
  }
  const m0 = flatCoordinates[lo * stride - 1];
  if (m == m0) {
    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
  }
  const m1 = flatCoordinates[(lo + 1) * stride - 1];
  const t = (m - m0) / (m1 - m0);
  coordinate = [];
  for (let i = 0; i < stride - 1; ++i) {
    coordinate.push(Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* lerp */ "c"])(flatCoordinates[(lo - 1) * stride + i],
      flatCoordinates[lo * stride + i], t));
  }
  coordinate.push(m);
  return coordinate;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} m M.
 * @param {boolean} extrapolate Extrapolate.
 * @param {boolean} interpolate Interpolate.
 * @return {module:ol/coordinate~Coordinate} Coordinate.
 */
function lineStringsCoordinateAtM(
  flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {
  if (interpolate) {
    return lineStringCoordinateAtM(
      flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);
  }
  let coordinate;
  if (m < flatCoordinates[stride - 1]) {
    if (extrapolate) {
      coordinate = flatCoordinates.slice(0, stride);
      coordinate[stride - 1] = m;
      return coordinate;
    } else {
      return null;
    }
  }
  if (flatCoordinates[flatCoordinates.length - 1] < m) {
    if (extrapolate) {
      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
      coordinate[stride - 1] = m;
      return coordinate;
    } else {
      return null;
    }
  }
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    if (offset == end) {
      continue;
    }
    if (m < flatCoordinates[offset + stride - 1]) {
      return null;
    } else if (m <= flatCoordinates[end - 1]) {
      return lineStringCoordinateAtM(
        flatCoordinates, offset, end, stride, m, false);
    }
    offset = end;
  }
  return null;
}


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DROP; });
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
/**
 * @module ol/structs/PriorityQueue
 */



/**
 * Priority queue.
 *
 * The implementation is inspired from the Closure Library's Heap class and
 * Python's heapq module.
 *
 * @see http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html
 * @see http://hg.python.org/cpython/file/2.7/Lib/heapq.py
 *
 * @constructor
 * @param {function(T): number} priorityFunction Priority function.
 * @param {function(T): string} keyFunction Key function.
 * @struct
 * @template T
 */
const PriorityQueue = function(priorityFunction, keyFunction) {

  /**
   * @type {function(T): number}
   * @private
   */
  this.priorityFunction_ = priorityFunction;

  /**
   * @type {function(T): string}
   * @private
   */
  this.keyFunction_ = keyFunction;

  /**
   * @type {Array.<T>}
   * @private
   */
  this.elements_ = [];

  /**
   * @type {Array.<number>}
   * @private
   */
  this.priorities_ = [];

  /**
   * @type {!Object.<string, boolean>}
   * @private
   */
  this.queuedElements_ = {};

};


/**
 * @type {number}
 */
const DROP = Infinity;


/**
 * FIXME empty description for jsdoc
 */
PriorityQueue.prototype.clear = function() {
  this.elements_.length = 0;
  this.priorities_.length = 0;
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_1__[/* clear */ "b"])(this.queuedElements_);
};


/**
 * Remove and return the highest-priority element. O(log N).
 * @return {T} Element.
 */
PriorityQueue.prototype.dequeue = function() {
  const elements = this.elements_;
  const priorities = this.priorities_;
  const element = elements[0];
  if (elements.length == 1) {
    elements.length = 0;
    priorities.length = 0;
  } else {
    elements[0] = elements.pop();
    priorities[0] = priorities.pop();
    this.siftUp_(0);
  }
  const elementKey = this.keyFunction_(element);
  delete this.queuedElements_[elementKey];
  return element;
};


/**
 * Enqueue an element. O(log N).
 * @param {T} element Element.
 * @return {boolean} The element was added to the queue.
 */
PriorityQueue.prototype.enqueue = function(element) {
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_0__[/* assert */ "a"])(!(this.keyFunction_(element) in this.queuedElements_),
    31); // Tried to enqueue an `element` that was already added to the queue
  const priority = this.priorityFunction_(element);
  if (priority != DROP) {
    this.elements_.push(element);
    this.priorities_.push(priority);
    this.queuedElements_[this.keyFunction_(element)] = true;
    this.siftDown_(0, this.elements_.length - 1);
    return true;
  }
  return false;
};


/**
 * @return {number} Count.
 */
PriorityQueue.prototype.getCount = function() {
  return this.elements_.length;
};


/**
 * Gets the index of the left child of the node at the given index.
 * @param {number} index The index of the node to get the left child for.
 * @return {number} The index of the left child.
 * @private
 */
PriorityQueue.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};


/**
 * Gets the index of the right child of the node at the given index.
 * @param {number} index The index of the node to get the right child for.
 * @return {number} The index of the right child.
 * @private
 */
PriorityQueue.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};


/**
 * Gets the index of the parent of the node at the given index.
 * @param {number} index The index of the node to get the parent for.
 * @return {number} The index of the parent.
 * @private
 */
PriorityQueue.prototype.getParentIndex_ = function(index) {
  return (index - 1) >> 1;
};


/**
 * Make this a heap. O(N).
 * @private
 */
PriorityQueue.prototype.heapify_ = function() {
  let i;
  for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
    this.siftUp_(i);
  }
};


/**
 * @return {boolean} Is empty.
 */
PriorityQueue.prototype.isEmpty = function() {
  return this.elements_.length === 0;
};


/**
 * @param {string} key Key.
 * @return {boolean} Is key queued.
 */
PriorityQueue.prototype.isKeyQueued = function(key) {
  return key in this.queuedElements_;
};


/**
 * @param {T} element Element.
 * @return {boolean} Is queued.
 */
PriorityQueue.prototype.isQueued = function(element) {
  return this.isKeyQueued(this.keyFunction_(element));
};


/**
 * @param {number} index The index of the node to move down.
 * @private
 */
PriorityQueue.prototype.siftUp_ = function(index) {
  const elements = this.elements_;
  const priorities = this.priorities_;
  const count = elements.length;
  const element = elements[index];
  const priority = priorities[index];
  const startIndex = index;

  while (index < (count >> 1)) {
    const lIndex = this.getLeftChildIndex_(index);
    const rIndex = this.getRightChildIndex_(index);

    const smallerChildIndex = rIndex < count &&
        priorities[rIndex] < priorities[lIndex] ?
      rIndex : lIndex;

    elements[index] = elements[smallerChildIndex];
    priorities[index] = priorities[smallerChildIndex];
    index = smallerChildIndex;
  }

  elements[index] = element;
  priorities[index] = priority;
  this.siftDown_(startIndex, index);
};


/**
 * @param {number} startIndex The index of the root.
 * @param {number} index The index of the node to move up.
 * @private
 */
PriorityQueue.prototype.siftDown_ = function(startIndex, index) {
  const elements = this.elements_;
  const priorities = this.priorities_;
  const element = elements[index];
  const priority = priorities[index];

  while (index > startIndex) {
    const parentIndex = this.getParentIndex_(index);
    if (priorities[parentIndex] > priority) {
      elements[index] = elements[parentIndex];
      priorities[index] = priorities[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  elements[index] = element;
  priorities[index] = priority;
};


/**
 * FIXME empty description for jsdoc
 */
PriorityQueue.prototype.reprioritize = function() {
  const priorityFunction = this.priorityFunction_;
  const elements = this.elements_;
  const priorities = this.priorities_;
  let index = 0;
  const n = elements.length;
  let element, i, priority;
  for (i = 0; i < n; ++i) {
    element = elements[i];
    priority = priorityFunction(element);
    if (priority == DROP) {
      delete this.queuedElements_[this.keyFunction_(element)];
    } else {
      priorities[index] = priority;
      elements[index++] = element;
    }
  }
  elements.length = index;
  priorities.length = index;
  this.heapify_();
};
/* harmony default export */ __webpack_exports__["b"] = (PriorityQueue);


/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// CONCATENATED MODULE: ../src/ol/GeolocationProperty.js
/**
 * @module ol/GeolocationProperty
 */

/**
 * @enum {string}
 */
/* harmony default export */ var GeolocationProperty = ({
  ACCURACY: 'accuracy',
  ACCURACY_GEOMETRY: 'accuracyGeometry',
  ALTITUDE: 'altitude',
  ALTITUDE_ACCURACY: 'altitudeAccuracy',
  HEADING: 'heading',
  POSITION: 'position',
  PROJECTION: 'projection',
  SPEED: 'speed',
  TRACKING: 'tracking',
  TRACKING_OPTIONS: 'trackingOptions'
});

// EXTERNAL MODULE: ../src/ol/Object.js
var ol_Object = __webpack_require__(31);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/events/EventType.js
var EventType = __webpack_require__(14);

// EXTERNAL MODULE: ../src/ol/geom/Polygon.js
var Polygon = __webpack_require__(39);

// EXTERNAL MODULE: ../src/ol/has.js
var has = __webpack_require__(48);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// CONCATENATED MODULE: ../src/ol/Geolocation.js
/**
 * @module ol/Geolocation
 */











/**
 * @typedef {Object} Options
 * @property {boolean} [tracking=false] Start Tracking right after
 * instantiation.
 * @property {GeolocationPositionOptions} [trackingOptions] Tracking options.
 * See {@link http://www.w3.org/TR/geolocation-API/#position_options_interface}.
 * @property {module:ol/proj~ProjectionLike} [projection] The projection the position
 * is reported in.
 */


/**
 * @classdesc
 * Helper class for providing HTML5 Geolocation capabilities.
 * The [Geolocation API](http://www.w3.org/TR/geolocation-API/)
 * is used to locate a user's position.
 *
 * To get notified of position changes, register a listener for the generic
 * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.
 *
 * Example:
 *
 *     var geolocation = new Geolocation({
 *       // take the projection to use from the map's view
 *       projection: view.getProjection()
 *     });
 *     // listen to changes in position
 *     geolocation.on('change', function(evt) {
 *       window.console.log(geolocation.getPosition());
 *     });
 *
 * @fires error
 * @constructor
 * @extends {module:ol/Object}
 * @param {module:ol/Geolocation~Options=} opt_options Options.
 * @api
 */
const Geolocation = function(opt_options) {

  ol_Object["a" /* default */].call(this);

  const options = opt_options || {};

  /**
   * The unprojected (EPSG:4326) device position.
   * @private
   * @type {module:ol/coordinate~Coordinate}
   */
  this.position_ = null;

  /**
   * @private
   * @type {module:ol/proj~TransformFunction}
   */
  this.transform_ = proj["l" /* identityTransform */];

  /**
   * @private
   * @type {number|undefined}
   */
  this.watchId_ = undefined;

  Object(events["a" /* listen */])(
    this, Object(ol_Object["b" /* getChangeEventType */])(GeolocationProperty.PROJECTION),
    this.handleProjectionChanged_, this);
  Object(events["a" /* listen */])(
    this, Object(ol_Object["b" /* getChangeEventType */])(GeolocationProperty.TRACKING),
    this.handleTrackingChanged_, this);

  if (options.projection !== undefined) {
    this.setProjection(options.projection);
  }
  if (options.trackingOptions !== undefined) {
    this.setTrackingOptions(options.trackingOptions);
  }

  this.setTracking(options.tracking !== undefined ? options.tracking : false);

};

Object(util["c" /* inherits */])(Geolocation, ol_Object["a" /* default */]);


/**
 * @inheritDoc
 */
Geolocation.prototype.disposeInternal = function() {
  this.setTracking(false);
  ol_Object["a" /* default */].prototype.disposeInternal.call(this);
};


/**
 * @private
 */
Geolocation.prototype.handleProjectionChanged_ = function() {
  const projection = this.getProjection();
  if (projection) {
    this.transform_ = Object(proj["k" /* getTransformFromProjections */])(
      Object(proj["h" /* get */])('EPSG:4326'), projection);
    if (this.position_) {
      this.set(GeolocationProperty.POSITION, this.transform_(this.position_));
    }
  }
};


/**
 * @private
 */
Geolocation.prototype.handleTrackingChanged_ = function() {
  if (has["d" /* GEOLOCATION */]) {
    const tracking = this.getTracking();
    if (tracking && this.watchId_ === undefined) {
      this.watchId_ = navigator.geolocation.watchPosition(
        this.positionChange_.bind(this),
        this.positionError_.bind(this),
        this.getTrackingOptions());
    } else if (!tracking && this.watchId_ !== undefined) {
      navigator.geolocation.clearWatch(this.watchId_);
      this.watchId_ = undefined;
    }
  }
};


/**
 * @private
 * @param {GeolocationPosition} position position event.
 */
Geolocation.prototype.positionChange_ = function(position) {
  const coords = position.coords;
  this.set(GeolocationProperty.ACCURACY, coords.accuracy);
  this.set(GeolocationProperty.ALTITUDE,
    coords.altitude === null ? undefined : coords.altitude);
  this.set(GeolocationProperty.ALTITUDE_ACCURACY,
    coords.altitudeAccuracy === null ?
      undefined : coords.altitudeAccuracy);
  this.set(GeolocationProperty.HEADING, coords.heading === null ?
    undefined : Object(math["j" /* toRadians */])(coords.heading));
  if (!this.position_) {
    this.position_ = [coords.longitude, coords.latitude];
  } else {
    this.position_[0] = coords.longitude;
    this.position_[1] = coords.latitude;
  }
  const projectedPosition = this.transform_(this.position_);
  this.set(GeolocationProperty.POSITION, projectedPosition);
  this.set(GeolocationProperty.SPEED,
    coords.speed === null ? undefined : coords.speed);
  const geometry = Object(Polygon["a" /* circular */])(this.position_, coords.accuracy);
  geometry.applyTransform(this.transform_);
  this.set(GeolocationProperty.ACCURACY_GEOMETRY, geometry);
  this.changed();
};

/**
 * Triggered when the Geolocation returns an error.
 * @event error
 * @api
 */

/**
 * @private
 * @param {GeolocationPositionError} error error object.
 */
Geolocation.prototype.positionError_ = function(error) {
  error.type = EventType["a" /* default */].ERROR;
  this.setTracking(false);
  this.dispatchEvent(/** @type {{type: string, target: undefined}} */ (error));
};


/**
 * Get the accuracy of the position in meters.
 * @return {number|undefined} The accuracy of the position measurement in
 *     meters.
 * @observable
 * @api
 */
Geolocation.prototype.getAccuracy = function() {
  return /** @type {number|undefined} */ (this.get(GeolocationProperty.ACCURACY));
};


/**
 * Get a geometry of the position accuracy.
 * @return {?module:ol/geom/Polygon} A geometry of the position accuracy.
 * @observable
 * @api
 */
Geolocation.prototype.getAccuracyGeometry = function() {
  return (
    /** @type {?module:ol/geom/Polygon} */ (this.get(GeolocationProperty.ACCURACY_GEOMETRY) || null)
  );
};


/**
 * Get the altitude associated with the position.
 * @return {number|undefined} The altitude of the position in meters above mean
 *     sea level.
 * @observable
 * @api
 */
Geolocation.prototype.getAltitude = function() {
  return /** @type {number|undefined} */ (this.get(GeolocationProperty.ALTITUDE));
};


/**
 * Get the altitude accuracy of the position.
 * @return {number|undefined} The accuracy of the altitude measurement in
 *     meters.
 * @observable
 * @api
 */
Geolocation.prototype.getAltitudeAccuracy = function() {
  return /** @type {number|undefined} */ (this.get(GeolocationProperty.ALTITUDE_ACCURACY));
};


/**
 * Get the heading as radians clockwise from North.
 * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`
 * is set to `true` in the tracking options.
 * @return {number|undefined} The heading of the device in radians from north.
 * @observable
 * @api
 */
Geolocation.prototype.getHeading = function() {
  return /** @type {number|undefined} */ (this.get(GeolocationProperty.HEADING));
};


/**
 * Get the position of the device.
 * @return {module:ol/coordinate~Coordinate|undefined} The current position of the device reported
 *     in the current projection.
 * @observable
 * @api
 */
Geolocation.prototype.getPosition = function() {
  return (
    /** @type {module:ol/coordinate~Coordinate|undefined} */ (this.get(GeolocationProperty.POSITION))
  );
};


/**
 * Get the projection associated with the position.
 * @return {module:ol/proj/Projection|undefined} The projection the position is
 *     reported in.
 * @observable
 * @api
 */
Geolocation.prototype.getProjection = function() {
  return (
    /** @type {module:ol/proj/Projection|undefined} */ (this.get(GeolocationProperty.PROJECTION))
  );
};


/**
 * Get the speed in meters per second.
 * @return {number|undefined} The instantaneous speed of the device in meters
 *     per second.
 * @observable
 * @api
 */
Geolocation.prototype.getSpeed = function() {
  return /** @type {number|undefined} */ (this.get(GeolocationProperty.SPEED));
};


/**
 * Determine if the device location is being tracked.
 * @return {boolean} The device location is being tracked.
 * @observable
 * @api
 */
Geolocation.prototype.getTracking = function() {
  return /** @type {boolean} */ (this.get(GeolocationProperty.TRACKING));
};


/**
 * Get the tracking options.
 * @see http://www.w3.org/TR/geolocation-API/#position-options
 * @return {GeolocationPositionOptions|undefined} PositionOptions as defined by
 *     the [HTML5 Geolocation spec
 *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
 * @observable
 * @api
 */
Geolocation.prototype.getTrackingOptions = function() {
  return /** @type {GeolocationPositionOptions|undefined} */ (this.get(GeolocationProperty.TRACKING_OPTIONS));
};


/**
 * Set the projection to use for transforming the coordinates.
 * @param {module:ol/proj~ProjectionLike} projection The projection the position is
 *     reported in.
 * @observable
 * @api
 */
Geolocation.prototype.setProjection = function(projection) {
  this.set(GeolocationProperty.PROJECTION, Object(proj["h" /* get */])(projection));
};


/**
 * Enable or disable tracking.
 * @param {boolean} tracking Enable tracking.
 * @observable
 * @api
 */
Geolocation.prototype.setTracking = function(tracking) {
  this.set(GeolocationProperty.TRACKING, tracking);
};


/**
 * Set the tracking options.
 * @see http://www.w3.org/TR/geolocation-API/#position-options
 * @param {GeolocationPositionOptions} options PositionOptions as defined by the
 *     [HTML5 Geolocation spec
 *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
 * @observable
 * @api
 */
Geolocation.prototype.setTrackingOptions = function(options) {
  this.set(GeolocationProperty.TRACKING_OPTIONS, options);
};
/* harmony default export */ var ol_Geolocation = __webpack_exports__["a"] = (Geolocation);


/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _ImageCanvas_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(157);
/* harmony import */ var _TileQueue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(186);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(32);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(36);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);
/* harmony import */ var pixelworks_lib_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(235);
/* harmony import */ var pixelworks_lib_index__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(pixelworks_lib_index__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3);
/* harmony import */ var _LayerType_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(60);
/* harmony import */ var _layer_Layer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(66);
/* harmony import */ var _layer_Image_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(97);
/* harmony import */ var _layer_Tile_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(11);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(15);
/* harmony import */ var _renderer_canvas_ImageLayer_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(204);
/* harmony import */ var _renderer_canvas_TileLayer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(129);
/* harmony import */ var _source_Image_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(64);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(50);
/* harmony import */ var _source_Tile_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(110);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(18);
/**
 * @module ol/source/Raster
 */






















/**
 * A function that takes an array of input data, performs some operation, and
 * returns an array of output data.
 * For `pixel` type operations, the function will be called with an array of
 * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the
 * range of 0 - 255. It should return a single pixel array.
 * For `'image'` type operations, functions will be called with an array of
 * {@link ImageData https://developer.mozilla.org/en-US/docs/Web/API/ImageData}
 * and should return a single {@link ImageData
 * https://developer.mozilla.org/en-US/docs/Web/API/ImageData}.  The operations
 * are called with a second "data" argument, which can be used for storage.  The
 * data object is accessible from raster events, where it can be initialized in
 * "beforeoperations" and accessed again in "afteroperations".
 *
 * @typedef {function((Array.<Array.<number>>|Array.<ImageData>), Object):
 *     (Array.<number>|ImageData)} Operation
 */


/**
 * @enum {string}
 */
const RasterEventType = {
  /**
   * Triggered before operations are run.
   * @event ol/source/Raster~RasterSourceEvent#beforeoperations
   * @api
   */
  BEFOREOPERATIONS: 'beforeoperations',

  /**
   * Triggered after operations are run.
   * @event ol/source/Raster~RasterSourceEvent#afteroperations
   * @api
   */
  AFTEROPERATIONS: 'afteroperations'
};


/**
 * Raster operation type. Supported values are `'pixel'` and `'image'`.
 * @enum {string}
 */
const RasterOperationType = {
  PIXEL: 'pixel',
  IMAGE: 'image'
};


/**
 * @classdesc
 * Events emitted by {@link module:ol/source/Raster} instances are instances of this
 * type.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {string} type Type.
 * @param {module:ol/PluggableMap~FrameState} frameState The frame state.
 * @param {Object} data An object made available to operations.
 */
const RasterSourceEvent = function(type, frameState, data) {
  _events_Event_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].call(this, type);

  /**
   * The raster extent.
   * @type {module:ol/extent~Extent}
   * @api
   */
  this.extent = frameState.extent;

  /**
   * The pixel resolution (map units per pixel).
   * @type {number}
   * @api
   */
  this.resolution = frameState.viewState.resolution / frameState.pixelRatio;

  /**
   * An object made available to all operations.  This can be used by operations
   * as a storage object (e.g. for calculating statistics).
   * @type {Object}
   * @api
   */
  this.data = data;

};
Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(RasterSourceEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]);

/**
 * @typedef {Object} Options
 * @property {Array.<module:ol/source/Source|module:ol/layer/Layer>} sources Input
 * sources or layers. Vector layers must be configured with `renderMode: 'image'`.
 * @property {module:ol/source/Raster~Operation} [operation] Raster operation.
 * The operation will be called with data from input sources
 * and the output will be assigned to the raster source.
 * @property {Object} [lib] Functions that will be made available to operations run in a worker.
 * @property {number} [threads] By default, operations will be run in a single worker thread.
 * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can
 * be run in multiple worker threads.  Note that there is additional overhead in
 * transferring data to multiple workers, and that depending on the user's
 * system, it may not be possible to parallelize the work.
 * @property {module:ol/source/Raster~RasterOperationType} [operationType='pixel'] Operation type.
 * Supported values are `'pixel'` and `'image'`.  By default,
 * `'pixel'` operations are assumed, and operations will be called with an
 * array of pixels from input sources.  If set to `'image'`, operations will
 * be called with an array of ImageData objects from input sources.
 */


/**
 * @classdesc
 * A source that transforms data from any number of input sources using an
 * {@link module:ol/source/Raster~Operation} function to transform input pixel values into
 * output pixel values.
 *
 * @constructor
 * @extends {module:ol/source/Image}
 * @fires ol/source/Raster~RasterSourceEvent
 * @param {module:ol/source/Raster~Options=} options Options.
 * @api
 */
const RasterSource = function(options) {

  /**
   * @private
   * @type {*}
   */
  this.worker_ = null;

  /**
   * @private
   * @type {module:ol/source/Raster~RasterOperationType}
   */
  this.operationType_ = options.operationType !== undefined ?
    options.operationType : RasterOperationType.PIXEL;

  /**
   * @private
   * @type {number}
   */
  this.threads_ = options.threads !== undefined ? options.threads : 1;

  /**
   * @private
   * @type {Array.<module:ol/renderer/canvas/Layer>}
   */
  this.renderers_ = createRenderers(options.sources);

  for (let r = 0, rr = this.renderers_.length; r < rr; ++r) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(this.renderers_[r], _events_EventType_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].CHANGE,
      this.changed, this);
  }

  /**
   * @private
   * @type {module:ol/TileQueue}
   */
  this.tileQueue_ = new _TileQueue_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](
    function() {
      return 1;
    },
    this.changed.bind(this));

  const layerStatesArray = getLayerStatesArray(this.renderers_);
  const layerStates = {};
  for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
    layerStates[Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layerStatesArray[i].layer)] = layerStatesArray[i];
  }

  /**
   * The most recently requested frame state.
   * @type {module:ol/PluggableMap~FrameState}
   * @private
   */
  this.requestedFrameState_;

  /**
   * The most recently rendered image canvas.
   * @type {module:ol/ImageCanvas}
   * @private
   */
  this.renderedImageCanvas_ = null;

  /**
   * The most recently rendered revision.
   * @type {number}
   */
  this.renderedRevision_;

  /**
   * @private
   * @type {module:ol/PluggableMap~FrameState}
   */
  this.frameState_ = {
    animate: false,
    coordinateToPixelTransform: Object(_transform_js__WEBPACK_IMPORTED_MODULE_19__[/* create */ "c"])(),
    extent: null,
    focus: null,
    index: 0,
    layerStates: layerStates,
    layerStatesArray: layerStatesArray,
    pixelRatio: 1,
    pixelToCoordinateTransform: Object(_transform_js__WEBPACK_IMPORTED_MODULE_19__[/* create */ "c"])(),
    postRenderFunctions: [],
    size: [0, 0],
    skippedFeatureUids: {},
    tileQueue: this.tileQueue_,
    time: Date.now(),
    usedTiles: {},
    viewState: /** @type {module:ol/View~State} */ ({
      rotation: 0
    }),
    viewHints: [],
    wantedTiles: {}
  };

  _source_Image_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"].call(this, {});

  if (options.operation !== undefined) {
    this.setOperation(options.operation, options.lib);
  }

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(RasterSource, _source_Image_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"]);


/**
 * Set the operation.
 * @param {module:ol/source/Raster~Operation} operation New operation.
 * @param {Object=} opt_lib Functions that will be available to operations run
 *     in a worker.
 * @api
 */
RasterSource.prototype.setOperation = function(operation, opt_lib) {
  this.worker_ = new pixelworks_lib_index__WEBPACK_IMPORTED_MODULE_7__["Processor"]({
    operation: operation,
    imageOps: this.operationType_ === RasterOperationType.IMAGE,
    queue: 1,
    lib: opt_lib,
    threads: this.threads_
  });
  this.changed();
};


/**
 * Update the stored frame state.
 * @param {module:ol/extent~Extent} extent The view extent (in map units).
 * @param {number} resolution The view resolution.
 * @param {module:ol/proj/Projection} projection The view projection.
 * @return {module:ol/PluggableMap~FrameState} The updated frame state.
 * @private
 */
RasterSource.prototype.updateFrameState_ = function(extent, resolution, projection) {

  const frameState = /** @type {module:ol/PluggableMap~FrameState} */ (Object(_obj_js__WEBPACK_IMPORTED_MODULE_13__[/* assign */ "a"])({}, this.frameState_));

  frameState.viewState = /** @type {module:ol/View~State} */ (Object(_obj_js__WEBPACK_IMPORTED_MODULE_13__[/* assign */ "a"])({}, frameState.viewState));

  const center = Object(_extent_js__WEBPACK_IMPORTED_MODULE_8__[/* getCenter */ "x"])(extent);

  frameState.extent = extent.slice();
  frameState.focus = center;
  frameState.size[0] = Math.round(Object(_extent_js__WEBPACK_IMPORTED_MODULE_8__[/* getWidth */ "E"])(extent) / resolution);
  frameState.size[1] = Math.round(Object(_extent_js__WEBPACK_IMPORTED_MODULE_8__[/* getHeight */ "A"])(extent) / resolution);
  frameState.time = Date.now();
  frameState.animate = false;

  const viewState = frameState.viewState;
  viewState.center = center;
  viewState.projection = projection;
  viewState.resolution = resolution;
  return frameState;
};


/**
 * Determine if all sources are ready.
 * @return {boolean} All sources are ready.
 * @private
 */
RasterSource.prototype.allSourcesReady_ = function() {
  let ready = true;
  let source;
  for (let i = 0, ii = this.renderers_.length; i < ii; ++i) {
    source = this.renderers_[i].getLayer().getSource();
    if (source.getState() !== _source_State_js__WEBPACK_IMPORTED_MODULE_17__[/* default */ "a"].READY) {
      ready = false;
      break;
    }
  }
  return ready;
};


/**
 * @inheritDoc
 */
RasterSource.prototype.getImage = function(extent, resolution, pixelRatio, projection) {
  if (!this.allSourcesReady_()) {
    return null;
  }

  const frameState = this.updateFrameState_(extent, resolution, projection);
  this.requestedFrameState_ = frameState;

  // check if we can't reuse the existing ol/ImageCanvas
  if (this.renderedImageCanvas_) {
    const renderedResolution = this.renderedImageCanvas_.getResolution();
    const renderedExtent = this.renderedImageCanvas_.getExtent();
    if (resolution !== renderedResolution || !Object(_extent_js__WEBPACK_IMPORTED_MODULE_8__[/* equals */ "p"])(extent, renderedExtent)) {
      this.renderedImageCanvas_ = null;
    }
  }

  if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {
    this.processSources_();
  }

  frameState.tileQueue.loadMoreTiles(16, 16);

  if (frameState.animate) {
    requestAnimationFrame(this.changed.bind(this));
  }

  return this.renderedImageCanvas_;
};


/**
 * Start processing source data.
 * @private
 */
RasterSource.prototype.processSources_ = function() {
  const frameState = this.requestedFrameState_;
  const len = this.renderers_.length;
  const imageDatas = new Array(len);
  for (let i = 0; i < len; ++i) {
    const imageData = getImageData(
      this.renderers_[i], frameState, frameState.layerStatesArray[i]);
    if (imageData) {
      imageDatas[i] = imageData;
    } else {
      return;
    }
  }

  const data = {};
  this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));
  this.worker_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));
};


/**
 * Called when pixel processing is complete.
 * @param {module:ol/PluggableMap~FrameState} frameState The frame state.
 * @param {Error} err Any error during processing.
 * @param {ImageData} output The output image data.
 * @param {Object} data The user data.
 * @private
 */
RasterSource.prototype.onWorkerComplete_ = function(frameState, err, output, data) {
  if (err || !output) {
    return;
  }

  // do nothing if extent or resolution changed
  const extent = frameState.extent;
  const resolution = frameState.viewState.resolution;
  if (resolution !== this.requestedFrameState_.viewState.resolution ||
      !Object(_extent_js__WEBPACK_IMPORTED_MODULE_8__[/* equals */ "p"])(extent, this.requestedFrameState_.extent)) {
    return;
  }

  let context;
  if (this.renderedImageCanvas_) {
    context = this.renderedImageCanvas_.getImage().getContext('2d');
  } else {
    const width = Math.round(Object(_extent_js__WEBPACK_IMPORTED_MODULE_8__[/* getWidth */ "E"])(extent) / resolution);
    const height = Math.round(Object(_extent_js__WEBPACK_IMPORTED_MODULE_8__[/* getHeight */ "A"])(extent) / resolution);
    context = Object(_dom_js__WEBPACK_IMPORTED_MODULE_3__[/* createCanvasContext2D */ "a"])(width, height);
    this.renderedImageCanvas_ = new _ImageCanvas_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](extent, resolution, 1, context.canvas);
  }
  context.putImageData(output, 0, 0);

  this.changed();
  this.renderedRevision_ = this.getRevision();

  this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));
};


/**
 * A reusable canvas context.
 * @type {CanvasRenderingContext2D}
 * @private
 */
let sharedContext = null;


/**
 * Get image data from a renderer.
 * @param {module:ol/renderer/canvas/Layer} renderer Layer renderer.
 * @param {module:ol/PluggableMap~FrameState} frameState The frame state.
 * @param {module:ol/layer/Layer~State} layerState The layer state.
 * @return {ImageData} The image data.
 */
function getImageData(renderer, frameState, layerState) {
  if (!renderer.prepareFrame(frameState, layerState)) {
    return null;
  }
  const width = frameState.size[0];
  const height = frameState.size[1];
  if (!sharedContext) {
    sharedContext = Object(_dom_js__WEBPACK_IMPORTED_MODULE_3__[/* createCanvasContext2D */ "a"])(width, height);
  } else {
    const canvas = sharedContext.canvas;
    if (canvas.width !== width || canvas.height !== height) {
      sharedContext = Object(_dom_js__WEBPACK_IMPORTED_MODULE_3__[/* createCanvasContext2D */ "a"])(width, height);
    } else {
      sharedContext.clearRect(0, 0, width, height);
    }
  }
  renderer.composeFrame(frameState, layerState, sharedContext);
  return sharedContext.getImageData(0, 0, width, height);
}


/**
 * Get a list of layer states from a list of renderers.
 * @param {Array.<module:ol/renderer/canvas/Layer>} renderers Layer renderers.
 * @return {Array.<module:ol/layer/Layer~State>} The layer states.
 */
function getLayerStatesArray(renderers) {
  return renderers.map(function(renderer) {
    return renderer.getLayer().getLayerState();
  });
}


/**
 * Create renderers for all sources.
 * @param {Array.<module:ol/source/Source>} sources The sources.
 * @return {Array.<module:ol/renderer/canvas/Layer>} Array of layer renderers.
 */
function createRenderers(sources) {
  const len = sources.length;
  const renderers = new Array(len);
  for (let i = 0; i < len; ++i) {
    renderers[i] = createRenderer(sources[i]);
  }
  return renderers;
}


/**
 * Create a renderer for the provided source.
 * @param {module:ol/source/Source} source The source.
 * @return {module:ol/renderer/canvas/Layer} The renderer.
 */
function createRenderer(source) {
  let renderer = null;
  if (source instanceof _source_Tile_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "b"]) {
    renderer = createTileRenderer(source);
  } else if (source instanceof _source_Image_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"]) {
    renderer = createImageRenderer(source);
  } else if (source instanceof _layer_Tile_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"]) {
    renderer = new _renderer_canvas_TileLayer_js__WEBPACK_IMPORTED_MODULE_15__[/* default */ "a"](source);
  } else if (source instanceof _layer_Layer_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"] &&
      (source.getType() == _LayerType_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].IMAGE || source.getType() == _LayerType_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].VECTOR)) {
    renderer = new _renderer_canvas_ImageLayer_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"](source);
  }
  return renderer;
}


/**
 * Create an image renderer for the provided source.
 * @param {module:ol/source/Image} source The source.
 * @return {module:ol/renderer/canvas/Layer} The renderer.
 */
function createImageRenderer(source) {
  const layer = new _layer_Image_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"]({source: source});
  return new _renderer_canvas_ImageLayer_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"](layer);
}


/**
 * Create a tile renderer for the provided source.
 * @param {module:ol/source/Tile} source The source.
 * @return {module:ol/renderer/canvas/Layer} The renderer.
 */
function createTileRenderer(source) {
  const layer = new _layer_Tile_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"]({source: source});
  return new _renderer_canvas_TileLayer_js__WEBPACK_IMPORTED_MODULE_15__[/* default */ "a"](layer);
}


/**
 * @override
 */
RasterSource.prototype.getImageInternal = function() {
  return null; // not implemented
};


/* harmony default export */ __webpack_exports__["a"] = (RasterSource);


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _ImageBase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(124);
/* harmony import */ var _ImageState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(35);
/**
 * @module ol/ImageCanvas
 */





/**
 * A function that is called to trigger asynchronous canvas drawing.  It is
 * called with a "done" callback that should be called when drawing is done.
 * If any error occurs during drawing, the "done" callback should be called with
 * that error.
 *
 * @typedef {function(function(Error))} Loader
 */


/**
 * @constructor
 * @extends {module:ol/ImageBase}
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @param {HTMLCanvasElement} canvas Canvas.
 * @param {module:ol/ImageCanvas~Loader=} opt_loader Optional loader function to
 *     support asynchronous canvas drawing.
 */
const ImageCanvas = function(extent, resolution, pixelRatio, canvas, opt_loader) {

  /**
   * Optional canvas loader function.
   * @type {?module:ol/ImageCanvas~Loader}
   * @private
   */
  this.loader_ = opt_loader !== undefined ? opt_loader : null;

  const state = opt_loader !== undefined ? _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE : _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED;

  _ImageBase_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, extent, resolution, pixelRatio, state);

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = canvas;

  /**
   * @private
   * @type {Error}
   */
  this.error_ = null;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(ImageCanvas, _ImageBase_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * Get any error associated with asynchronous rendering.
 * @return {Error} Any error that occurred during rendering.
 */
ImageCanvas.prototype.getError = function() {
  return this.error_;
};


/**
 * Handle async drawing complete.
 * @param {Error} err Any error during drawing.
 * @private
 */
ImageCanvas.prototype.handleLoad_ = function(err) {
  if (err) {
    this.error_ = err;
    this.state = _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR;
  } else {
    this.state = _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED;
  }
  this.changed();
};


/**
 * @inheritDoc
 */
ImageCanvas.prototype.load = function() {
  if (this.state == _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE) {
    this.state = _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADING;
    this.changed();
    this.loader_(this.handleLoad_.bind(this));
  }
};


/**
 * @return {HTMLCanvasElement} Canvas element.
 */
ImageCanvas.prototype.getImage = function() {
  return this.canvas_;
};
/* harmony default export */ __webpack_exports__["a"] = (ImageCanvas);


/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _style_Fill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(104);
/* harmony import */ var _style_TextPlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(226);
/**
 * @module ol/style/Text
 */




/**
 * The default fill color to use if no fill was set at construction time; a
 * blackish `#333`.
 *
 * @const {string}
 */
const DEFAULT_FILL_COLOR = '#333';


/**
 * @typedef {Object} Options
 * @property {string} [font] Font style as CSS 'font' value, see:
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font}. Default is '10px sans-serif'
 * @property {number} [maxAngle] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.
 * The expected value is in radians, and the default is 45° (`Math.PI / 4`).
 * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.
 * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.
 * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed
 * the width of the polygon at the label position or the length of the path that it follows.
 * @property {module:ol/style/TextPlacement|string} [placement] Text placement.
 * @property {number} [scale] Scale.
 * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.
 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
 * @property {string} [text] Text content.
 * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.
 * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a
 * placement where `maxAngle` is not exceeded.
 * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',
 * 'hanging', 'ideographic'.
 * @property {module:ol/style/Fill} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).
 * @property {module:ol/style/Stroke} [stroke] Stroke style.
 * @property {module:ol/style/Fill} [backgroundFill] Fill style for the text background when `placement` is
 * `'point'`. Default is no fill.
 * @property {module:ol/style/Stroke} [backgroundStroke] Stroke style for the text background  when `placement`
 * is `'point'`. Default is no stroke.
 * @property {Array.<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of
 * values in the array is `[top, right, bottom, left]`.
 */


/**
 * @classdesc
 * Set text style for vector features.
 *
 * @constructor
 * @param {module:ol/style/Text~Options=} opt_options Options.
 * @api
 */
const Text = function(opt_options) {

  const options = opt_options || {};

  /**
   * @private
   * @type {string|undefined}
   */
  this.font_ = options.font;

  /**
   * @private
   * @type {number|undefined}
   */
  this.rotation_ = options.rotation;

  /**
   * @private
   * @type {boolean|undefined}
   */
  this.rotateWithView_ = options.rotateWithView;

  /**
   * @private
   * @type {number|undefined}
   */
  this.scale_ = options.scale;

  /**
   * @private
   * @type {string|undefined}
   */
  this.text_ = options.text;

  /**
   * @private
   * @type {string|undefined}
   */
  this.textAlign_ = options.textAlign;

  /**
   * @private
   * @type {string|undefined}
   */
  this.textBaseline_ = options.textBaseline;

  /**
   * @private
   * @type {module:ol/style/Fill}
   */
  this.fill_ = options.fill !== undefined ? options.fill :
    new _style_Fill_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]({color: DEFAULT_FILL_COLOR});

  /**
   * @private
   * @type {number}
   */
  this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;

  /**
   * @private
   * @type {module:ol/style/TextPlacement|string}
   */
  this.placement_ = options.placement !== undefined ? options.placement : _style_TextPlacement_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POINT;

  /**
   * @private
   * @type {boolean}
   */
  this.overflow_ = !!options.overflow;

  /**
   * @private
   * @type {module:ol/style/Stroke}
   */
  this.stroke_ = options.stroke !== undefined ? options.stroke : null;

  /**
   * @private
   * @type {number}
   */
  this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;

  /**
   * @private
   * @type {number}
   */
  this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;

  /**
   * @private
   * @type {module:ol/style/Fill}
   */
  this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;

  /**
   * @private
   * @type {module:ol/style/Stroke}
   */
  this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.padding_ = options.padding === undefined ? null : options.padding;
};


/**
 * Clones the style.
 * @return {module:ol/style/Text} The cloned style.
 * @api
 */
Text.prototype.clone = function() {
  return new Text({
    font: this.getFont(),
    placement: this.getPlacement(),
    maxAngle: this.getMaxAngle(),
    overflow: this.getOverflow(),
    rotation: this.getRotation(),
    rotateWithView: this.getRotateWithView(),
    scale: this.getScale(),
    text: this.getText(),
    textAlign: this.getTextAlign(),
    textBaseline: this.getTextBaseline(),
    fill: this.getFill() ? this.getFill().clone() : undefined,
    stroke: this.getStroke() ? this.getStroke().clone() : undefined,
    offsetX: this.getOffsetX(),
    offsetY: this.getOffsetY(),
    backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,
    backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined
  });
};


/**
 * Get the `overflow` configuration.
 * @return {boolean} Let text overflow the length of the path they follow.
 * @api
 */
Text.prototype.getOverflow = function() {
  return this.overflow_;
};


/**
 * Get the font name.
 * @return {string|undefined} Font.
 * @api
 */
Text.prototype.getFont = function() {
  return this.font_;
};


/**
 * Get the maximum angle between adjacent characters.
 * @return {number} Angle in radians.
 * @api
 */
Text.prototype.getMaxAngle = function() {
  return this.maxAngle_;
};


/**
 * Get the label placement.
 * @return {module:ol/style/TextPlacement|string} Text placement.
 * @api
 */
Text.prototype.getPlacement = function() {
  return this.placement_;
};


/**
 * Get the x-offset for the text.
 * @return {number} Horizontal text offset.
 * @api
 */
Text.prototype.getOffsetX = function() {
  return this.offsetX_;
};


/**
 * Get the y-offset for the text.
 * @return {number} Vertical text offset.
 * @api
 */
Text.prototype.getOffsetY = function() {
  return this.offsetY_;
};


/**
 * Get the fill style for the text.
 * @return {module:ol/style/Fill} Fill style.
 * @api
 */
Text.prototype.getFill = function() {
  return this.fill_;
};


/**
 * Determine whether the text rotates with the map.
 * @return {boolean|undefined} Rotate with map.
 * @api
 */
Text.prototype.getRotateWithView = function() {
  return this.rotateWithView_;
};


/**
 * Get the text rotation.
 * @return {number|undefined} Rotation.
 * @api
 */
Text.prototype.getRotation = function() {
  return this.rotation_;
};


/**
 * Get the text scale.
 * @return {number|undefined} Scale.
 * @api
 */
Text.prototype.getScale = function() {
  return this.scale_;
};


/**
 * Get the stroke style for the text.
 * @return {module:ol/style/Stroke} Stroke style.
 * @api
 */
Text.prototype.getStroke = function() {
  return this.stroke_;
};


/**
 * Get the text to be rendered.
 * @return {string|undefined} Text.
 * @api
 */
Text.prototype.getText = function() {
  return this.text_;
};


/**
 * Get the text alignment.
 * @return {string|undefined} Text align.
 * @api
 */
Text.prototype.getTextAlign = function() {
  return this.textAlign_;
};


/**
 * Get the text baseline.
 * @return {string|undefined} Text baseline.
 * @api
 */
Text.prototype.getTextBaseline = function() {
  return this.textBaseline_;
};


/**
 * Get the background fill style for the text.
 * @return {module:ol/style/Fill} Fill style.
 * @api
 */
Text.prototype.getBackgroundFill = function() {
  return this.backgroundFill_;
};


/**
 * Get the background stroke style for the text.
 * @return {module:ol/style/Stroke} Stroke style.
 * @api
 */
Text.prototype.getBackgroundStroke = function() {
  return this.backgroundStroke_;
};


/**
 * Get the padding for the text.
 * @return {Array.<number>} Padding.
 * @api
 */
Text.prototype.getPadding = function() {
  return this.padding_;
};


/**
 * Set the `overflow` property.
 *
 * @param {boolean} overflow Let text overflow the path that it follows.
 * @api
 */
Text.prototype.setOverflow = function(overflow) {
  this.overflow_ = overflow;
};


/**
 * Set the font.
 *
 * @param {string|undefined} font Font.
 * @api
 */
Text.prototype.setFont = function(font) {
  this.font_ = font;
};


/**
 * Set the maximum angle between adjacent characters.
 *
 * @param {number} maxAngle Angle in radians.
 * @api
 */
Text.prototype.setMaxAngle = function(maxAngle) {
  this.maxAngle_ = maxAngle;
};


/**
 * Set the x offset.
 *
 * @param {number} offsetX Horizontal text offset.
 * @api
 */
Text.prototype.setOffsetX = function(offsetX) {
  this.offsetX_ = offsetX;
};


/**
 * Set the y offset.
 *
 * @param {number} offsetY Vertical text offset.
 * @api
 */
Text.prototype.setOffsetY = function(offsetY) {
  this.offsetY_ = offsetY;
};


/**
 * Set the text placement.
 *
 * @param {module:ol/style/TextPlacement|string} placement Placement.
 * @api
 */
Text.prototype.setPlacement = function(placement) {
  this.placement_ = placement;
};


/**
 * Set the fill.
 *
 * @param {module:ol/style/Fill} fill Fill style.
 * @api
 */
Text.prototype.setFill = function(fill) {
  this.fill_ = fill;
};


/**
 * Set the rotation.
 *
 * @param {number|undefined} rotation Rotation.
 * @api
 */
Text.prototype.setRotation = function(rotation) {
  this.rotation_ = rotation;
};


/**
 * Set the scale.
 *
 * @param {number|undefined} scale Scale.
 * @api
 */
Text.prototype.setScale = function(scale) {
  this.scale_ = scale;
};


/**
 * Set the stroke.
 *
 * @param {module:ol/style/Stroke} stroke Stroke style.
 * @api
 */
Text.prototype.setStroke = function(stroke) {
  this.stroke_ = stroke;
};


/**
 * Set the text.
 *
 * @param {string|undefined} text Text.
 * @api
 */
Text.prototype.setText = function(text) {
  this.text_ = text;
};


/**
 * Set the text alignment.
 *
 * @param {string|undefined} textAlign Text align.
 * @api
 */
Text.prototype.setTextAlign = function(textAlign) {
  this.textAlign_ = textAlign;
};


/**
 * Set the text baseline.
 *
 * @param {string|undefined} textBaseline Text baseline.
 * @api
 */
Text.prototype.setTextBaseline = function(textBaseline) {
  this.textBaseline_ = textBaseline;
};


/**
 * Set the background fill.
 *
 * @param {module:ol/style/Fill} fill Fill style.
 * @api
 */
Text.prototype.setBackgroundFill = function(fill) {
  this.backgroundFill_ = fill;
};


/**
 * Set the background stroke.
 *
 * @param {module:ol/style/Stroke} stroke Stroke style.
 * @api
 */
Text.prototype.setBackgroundStroke = function(stroke) {
  this.backgroundStroke_ = stroke;
};


/**
 * Set the padding (`[top, right, bottom, left]`).
 *
 * @param {!Array.<number>} padding Padding.
 * @api
 */
Text.prototype.setPadding = function(padding) {
  this.padding_ = padding;
};
/* harmony default export */ __webpack_exports__["a"] = (Text);


/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createFromCapabilitiesMatrixSet; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/* harmony import */ var _tilegrid_TileGrid_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(109);
/**
 * @module ol/tilegrid/WMTS
 */






/**
 * @typedef {Object} Options
 * @property {module:ol/extent~Extent} [extent] Extent for the tile grid. No tiles
 * outside this extent will be requested by {@link module:ol/source/Tile} sources.
 * When no `origin` or `origins` are configured, the `origin` will be set to the
 * top-left corner of the extent.
 * @property {module:ol/coordinate~Coordinate} [origin] The tile grid origin, i.e.
 * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left
 * to right and upwards. If not specified, `extent` or `origins` must be provided.
 * @property {Array.<module:ol/coordinate~Coordinate>} [origins] Tile grid origins,
 * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If
 * given, the array length should match the length of the `resolutions` array, i.e.
 * each resolution can have a different origin. Tile coordinates increase left to
 * right and upwards. If not specified, `extent` or `origin` must be provided.
 * @property {!Array.<number>} resolutions Resolutions. The array index of each
 * resolution needs to match the zoom level. This means that even if a `minZoom`
 * is configured, the resolutions array will have a length of `maxZoom + 1`
 * @property {!Array.<string>} matrixIds matrix IDs. The length of this array needs
 * to match the length of the `resolutions` array.
 * @property {Array.<module:ol/size~Size>} [sizes] Number of tile rows and columns
 * of the grid for each zoom level. The values here are the `TileMatrixWidth` and
 * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and
 * define the grid's extent together with the `origin`.
 * An `extent` can be configured in addition, and will further limit the extent for
 * which tile requests are made by sources. Note that when the top-left corner of
 * the `extent` is used as `origin` or `origins`, then the `y` value must be
 * negative because OpenLayers tile coordinates increase upwards.
 * @property {number|module:ol/size~Size} [tileSize] Tile size.
 * @property {Array.<module:ol/size~Size>} [tileSizes] Tile sizes. The length of
 * this array needs to match the length of the `resolutions` array.
 * @property {Array.<number>} [widths] Number of tile columns that cover the grid's
 * extent for each zoom level. Only required when used with a source that has `wrapX`
 * set to `true`, and only when the grid's origin differs from the one of the
 * projection's extent. The array length has to match the length of the `resolutions`
 * array, i.e. each resolution will have a matching entry here.
 */


/**
 * @classdesc
 * Set the grid pattern for sources accessing WMTS tiled-image servers.
 *
 * @constructor
 * @extends {module:ol/tilegrid/TileGrid}
 * @param {module:ol/tilegrid/WMTS~Options} options WMTS options.
 * @struct
 * @api
 */
const WMTSTileGrid = function(options) {
  /**
   * @private
   * @type {!Array.<string>}
   */
  this.matrixIds_ = options.matrixIds;
  // FIXME: should the matrixIds become optional?

  _tilegrid_TileGrid_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this, {
    extent: options.extent,
    origin: options.origin,
    origins: options.origins,
    resolutions: options.resolutions,
    tileSize: options.tileSize,
    tileSizes: options.tileSizes,
    sizes: options.sizes
  });
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(WMTSTileGrid, _tilegrid_TileGrid_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @param {number} z Z.
 * @return {string} MatrixId..
 */
WMTSTileGrid.prototype.getMatrixId = function(z) {
  return this.matrixIds_[z];
};


/**
 * Get the list of matrix identifiers.
 * @return {Array.<string>} MatrixIds.
 * @api
 */
WMTSTileGrid.prototype.getMatrixIds = function() {
  return this.matrixIds_;
};

/* harmony default export */ __webpack_exports__["b"] = (WMTSTileGrid);

/**
 * Create a tile grid from a WMTS capabilities matrix set and an
 * optional TileMatrixSetLimits.
 * @param {Object} matrixSet An object representing a matrixSet in the
 *     capabilities document.
 * @param {module:ol/extent~Extent=} opt_extent An optional extent to restrict the tile
 *     ranges the server provides.
 * @param {Array.<Object>=} opt_matrixLimits An optional object representing
 *     the available matrices for tileGrid.
 * @return {module:ol/tilegrid/WMTS} WMTS tileGrid instance.
 * @api
 */
function createFromCapabilitiesMatrixSet(matrixSet, opt_extent, opt_matrixLimits) {

  /** @type {!Array.<number>} */
  const resolutions = [];
  /** @type {!Array.<string>} */
  const matrixIds = [];
  /** @type {!Array.<module:ol/coordinate~Coordinate>} */
  const origins = [];
  /** @type {!Array.<module:ol/size~Size>} */
  const tileSizes = [];
  /** @type {!Array.<module:ol/size~Size>} */
  const sizes = [];

  const matrixLimits = opt_matrixLimits !== undefined ? opt_matrixLimits : [];

  const supportedCRSPropName = 'SupportedCRS';
  const matrixIdsPropName = 'TileMatrix';
  const identifierPropName = 'Identifier';
  const scaleDenominatorPropName = 'ScaleDenominator';
  const topLeftCornerPropName = 'TopLeftCorner';
  const tileWidthPropName = 'TileWidth';
  const tileHeightPropName = 'TileHeight';

  const code = matrixSet[supportedCRSPropName];
  const projection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_2__[/* get */ "h"])(code.replace(/urn:ogc:def:crs:(\w+):(.*:)?(\w+)$/, '$1:$3')) ||
      Object(_proj_js__WEBPACK_IMPORTED_MODULE_2__[/* get */ "h"])(code);
  const metersPerUnit = projection.getMetersPerUnit();
  // swap origin x and y coordinates if axis orientation is lat/long
  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';

  matrixSet[matrixIdsPropName].sort(function(a, b) {
    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];
  });

  matrixSet[matrixIdsPropName].forEach(function(elt) {

    let matrixAvailable;
    // use of matrixLimits to filter TileMatrices from GetCapabilities
    // TileMatrixSet from unavailable matrix levels.
    if (matrixLimits.length > 0) {
      matrixAvailable = Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* find */ "d"])(matrixLimits, function(elt_ml) {
        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {
          return true;
        }
        // Fallback for tileMatrix identifiers that don't get prefixed
        // by their tileMatrixSet identifiers.
        if (elt[identifierPropName].indexOf(':') === -1) {
          return matrixSet[identifierPropName] + ':' + elt[identifierPropName] === elt_ml[matrixIdsPropName];
        }
        return false;
      });
    } else {
      matrixAvailable = true;
    }

    if (matrixAvailable) {
      matrixIds.push(elt[identifierPropName]);
      const resolution = elt[scaleDenominatorPropName] * 0.28E-3 / metersPerUnit;
      const tileWidth = elt[tileWidthPropName];
      const tileHeight = elt[tileHeightPropName];
      if (switchOriginXY) {
        origins.push([elt[topLeftCornerPropName][1],
          elt[topLeftCornerPropName][0]]);
      } else {
        origins.push(elt[topLeftCornerPropName]);
      }
      resolutions.push(resolution);
      tileSizes.push(tileWidth == tileHeight ?
        tileWidth : [tileWidth, tileHeight]);
      // top-left origin, so height is negative
      sizes.push([elt['MatrixWidth'], -elt['MatrixHeight']]);
    }
  });

  return new WMTSTileGrid({
    extent: opt_extent,
    origins: origins,
    resolutions: resolutions,
    matrixIds: matrixIds,
    tileSizes: tileSizes,
    sizes: sizes
  });
}


/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _ImageState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(35);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(77);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);
/* harmony import */ var _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(100);
/* harmony import */ var _style_IconImage_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(214);
/* harmony import */ var _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(80);
/* harmony import */ var _style_Image_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(163);
/**
 * @module ol/style/Icon
 */












/**
 * @typedef {Object} Options
 * @property {Array.<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
 * @property {module:ol/style/IconOrigin} [anchorOrigin] Origin of the anchor: `bottom-left`, `bottom-right`,
 * `top-left` or `top-right`. Default is `top-left`.
 * @property {module:ol/style/IconAnchorUnits} [anchorXUnits] Units in which the anchor x value is
 * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
 * the x value in pixels. Default is `'fraction'`.
 * @property {module:ol/style/IconAnchorUnits} [anchorYUnits] Units in which the anchor y value is
 * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
 * the y value in pixels. Default is `'fraction'`.
 * @property {module:ol/color~Color|string} [color] Color to tint the icon. If not specified,
 * the icon will be left as is.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
 * `crossOrigin` value if you are using the WebGL renderer or if you want to access pixel data with the Canvas renderer.
 * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the
 * provided image must already be loaded. And in that case, it is required
 * to provide the size of the image, with the `imgSize` option.
 * @property {Array.<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the
 * sub-rectangle to use from the original icon image.
 * @property {module:ol/style/IconOrigin} [offsetOrigin] Origin of the offset: `bottom-left`, `bottom-right`,
 * `top-left` or `top-right`. Default is `top-left`.
 * @property {number} [opacity=1] Opacity of the icon.
 * @property {number} [scale=1] Scale.
 * @property {boolean} [snapToPixel=true] If `true` integral numbers of pixels are used as the X and Y pixel coordinate
 * when drawing the icon in the output canvas. If `false` fractional numbers may be used. Using `true` allows for
 * "sharp" rendering (no blur), while using `false` allows for "accurate" rendering. Note that accuracy is important if
 * the icon's position is animated. Without it, the icon may jitter noticeably.
 * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
 * @property {module:ol/size~Size} [size] Icon size in pixel. Can be used together with `offset` to define the
 * sub-rectangle to use from the origin (sprite) icon image.
 * @property {module:ol/size~Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and
 * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.
 * @property {string} [src] Image source URI.
 */


/**
 * @classdesc
 * Set icon style for vector features.
 *
 * @constructor
 * @param {module:ol/style/Icon~Options=} opt_options Options.
 * @extends {module:ol/style/Image}
 * @api
 */
const Icon = function(opt_options) {

  const options = opt_options || {};

  /**
   * @private
   * @type {Array.<number>}
   */
  this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];

  /**
   * @private
   * @type {Array.<number>}
   */
  this.normalizedAnchor_ = null;

  /**
   * @private
   * @type {module:ol/style/IconOrigin}
   */
  this.anchorOrigin_ = options.anchorOrigin !== undefined ?
    options.anchorOrigin : _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TOP_LEFT;

  /**
   * @private
   * @type {module:ol/style/IconAnchorUnits}
   */
  this.anchorXUnits_ = options.anchorXUnits !== undefined ?
    options.anchorXUnits : _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].FRACTION;

  /**
   * @private
   * @type {module:ol/style/IconAnchorUnits}
   */
  this.anchorYUnits_ = options.anchorYUnits !== undefined ?
    options.anchorYUnits : _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].FRACTION;

  /**
   * @private
   * @type {?string}
   */
  this.crossOrigin_ =
      options.crossOrigin !== undefined ? options.crossOrigin : null;

  /**
   * @type {HTMLImageElement|HTMLCanvasElement}
   */
  const image = options.img !== undefined ? options.img : null;

  /**
   * @type {module:ol/size~Size}
   */
  const imgSize = options.imgSize !== undefined ? options.imgSize : null;

  /**
   * @type {string|undefined}
   */
  let src = options.src;

  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_2__[/* assert */ "a"])(!(src !== undefined && image),
    4); // `image` and `src` cannot be provided at the same time
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_2__[/* assert */ "a"])(!image || (image && imgSize),
    5); // `imgSize` must be set when `image` is provided

  if ((src === undefined || src.length === 0) && image) {
    src = image.src || Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(image).toString();
  }
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_2__[/* assert */ "a"])(src !== undefined && src.length > 0,
    6); // A defined and non-empty `src` or `image` must be provided

  /**
   * @type {module:ol/ImageState}
   */
  const imageState = options.src !== undefined ?
    _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].IDLE : _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED;

  /**
   * @private
   * @type {module:ol/color~Color}
   */
  this.color_ = options.color !== undefined ? Object(_color_js__WEBPACK_IMPORTED_MODULE_3__[/* asArray */ "a"])(options.color) : null;

  /**
   * @private
   * @type {module:ol/style/IconImage}
   */
  this.iconImage_ = Object(_style_IconImage_js__WEBPACK_IMPORTED_MODULE_7__[/* get */ "a"])(
    image, /** @type {string} */ (src), imgSize, this.crossOrigin_, imageState, this.color_);

  /**
   * @private
   * @type {Array.<number>}
   */
  this.offset_ = options.offset !== undefined ? options.offset : [0, 0];

  /**
   * @private
   * @type {module:ol/style/IconOrigin}
   */
  this.offsetOrigin_ = options.offsetOrigin !== undefined ?
    options.offsetOrigin : _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TOP_LEFT;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.origin_ = null;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.size_ = options.size !== undefined ? options.size : null;

  /**
   * @type {number}
   */
  const opacity = options.opacity !== undefined ? options.opacity : 1;

  /**
   * @type {boolean}
   */
  const rotateWithView = options.rotateWithView !== undefined ?
    options.rotateWithView : false;

  /**
   * @type {number}
   */
  const rotation = options.rotation !== undefined ? options.rotation : 0;

  /**
   * @type {number}
   */
  const scale = options.scale !== undefined ? options.scale : 1;

  /**
   * @type {boolean}
   */
  const snapToPixel = options.snapToPixel !== undefined ?
    options.snapToPixel : true;

  _style_Image_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].call(this, {
    opacity: opacity,
    rotation: rotation,
    scale: scale,
    snapToPixel: snapToPixel,
    rotateWithView: rotateWithView
  });

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Icon, _style_Image_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]);


/**
 * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
 * @return {module:ol/style/Icon} The cloned style.
 * @api
 */
Icon.prototype.clone = function() {
  return new Icon({
    anchor: this.anchor_.slice(),
    anchorOrigin: this.anchorOrigin_,
    anchorXUnits: this.anchorXUnits_,
    anchorYUnits: this.anchorYUnits_,
    crossOrigin: this.crossOrigin_,
    color: (this.color_ && this.color_.slice) ? this.color_.slice() : this.color_ || undefined,
    src: this.getSrc(),
    offset: this.offset_.slice(),
    offsetOrigin: this.offsetOrigin_,
    size: this.size_ !== null ? this.size_.slice() : undefined,
    opacity: this.getOpacity(),
    scale: this.getScale(),
    snapToPixel: this.getSnapToPixel(),
    rotation: this.getRotation(),
    rotateWithView: this.getRotateWithView()
  });
};


/**
 * @inheritDoc
 * @api
 */
Icon.prototype.getAnchor = function() {
  if (this.normalizedAnchor_) {
    return this.normalizedAnchor_;
  }
  let anchor = this.anchor_;
  const size = this.getSize();
  if (this.anchorXUnits_ == _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].FRACTION ||
      this.anchorYUnits_ == _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].FRACTION) {
    if (!size) {
      return null;
    }
    anchor = this.anchor_.slice();
    if (this.anchorXUnits_ == _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].FRACTION) {
      anchor[0] *= size[0];
    }
    if (this.anchorYUnits_ == _style_IconAnchorUnits_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].FRACTION) {
      anchor[1] *= size[1];
    }
  }

  if (this.anchorOrigin_ != _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TOP_LEFT) {
    if (!size) {
      return null;
    }
    if (anchor === this.anchor_) {
      anchor = this.anchor_.slice();
    }
    if (this.anchorOrigin_ == _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TOP_RIGHT ||
        this.anchorOrigin_ == _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].BOTTOM_RIGHT) {
      anchor[0] = -anchor[0] + size[0];
    }
    if (this.anchorOrigin_ == _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].BOTTOM_LEFT ||
        this.anchorOrigin_ == _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].BOTTOM_RIGHT) {
      anchor[1] = -anchor[1] + size[1];
    }
  }
  this.normalizedAnchor_ = anchor;
  return this.normalizedAnchor_;
};


/**
 * Get the icon color.
 * @return {module:ol/color~Color} Color.
 * @api
 */
Icon.prototype.getColor = function() {
  return this.color_;
};


/**
 * Get the image icon.
 * @param {number} pixelRatio Pixel ratio.
 * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
 * @override
 * @api
 */
Icon.prototype.getImage = function(pixelRatio) {
  return this.iconImage_.getImage(pixelRatio);
};


/**
 * @override
 */
Icon.prototype.getImageSize = function() {
  return this.iconImage_.getSize();
};


/**
 * @override
 */
Icon.prototype.getHitDetectionImageSize = function() {
  return this.getImageSize();
};


/**
 * @override
 */
Icon.prototype.getImageState = function() {
  return this.iconImage_.getImageState();
};


/**
 * @override
 */
Icon.prototype.getHitDetectionImage = function(pixelRatio) {
  return this.iconImage_.getHitDetectionImage(pixelRatio);
};


/**
 * @inheritDoc
 * @api
 */
Icon.prototype.getOrigin = function() {
  if (this.origin_) {
    return this.origin_;
  }
  let offset = this.offset_;

  if (this.offsetOrigin_ != _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TOP_LEFT) {
    const size = this.getSize();
    const iconImageSize = this.iconImage_.getSize();
    if (!size || !iconImageSize) {
      return null;
    }
    offset = offset.slice();
    if (this.offsetOrigin_ == _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TOP_RIGHT ||
        this.offsetOrigin_ == _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].BOTTOM_RIGHT) {
      offset[0] = iconImageSize[0] - size[0] - offset[0];
    }
    if (this.offsetOrigin_ == _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].BOTTOM_LEFT ||
        this.offsetOrigin_ == _style_IconOrigin_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].BOTTOM_RIGHT) {
      offset[1] = iconImageSize[1] - size[1] - offset[1];
    }
  }
  this.origin_ = offset;
  return this.origin_;
};


/**
 * Get the image URL.
 * @return {string|undefined} Image src.
 * @api
 */
Icon.prototype.getSrc = function() {
  return this.iconImage_.getSrc();
};


/**
 * @inheritDoc
 * @api
 */
Icon.prototype.getSize = function() {
  return !this.size_ ? this.iconImage_.getSize() : this.size_;
};


/**
 * @override
 */
Icon.prototype.listenImageChange = function(listener, thisArg) {
  return Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(this.iconImage_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].CHANGE,
    listener, thisArg);
};


/**
 * Load not yet loaded URI.
 * When rendering a feature with an icon style, the vector renderer will
 * automatically call this method. However, you might want to call this
 * method yourself for preloading or other purposes.
 * @override
 * @api
 */
Icon.prototype.load = function() {
  this.iconImage_.load();
};


/**
 * @override
 */
Icon.prototype.unlistenImageChange = function(listener, thisArg) {
  Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* unlisten */ "c"])(this.iconImage_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].CHANGE,
    listener, thisArg);
};
/* harmony default export */ __webpack_exports__["a"] = (Icon);


/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Tile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(32);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);
/**
 * @module ol/ImageTile
 */







/**
 * @typedef {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord,
 * module:ol/TileState, string, ?string, module:ol/Tile~LoadFunction)} TileClass
 * @api
 */

/**
 * @constructor
 * @extends {module:ol/Tile}
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/TileState} state State.
 * @param {string} src Image source URI.
 * @param {?string} crossOrigin Cross origin.
 * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.
 * @param {module:ol/Tile~Options=} opt_options Tile options.
 */
const ImageTile = function(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {

  _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, tileCoord, state, opt_options);

  /**
   * @private
   * @type {?string}
   */
  this.crossOrigin_ = crossOrigin;

  /**
   * Image URI
   *
   * @private
   * @type {string}
   */
  this.src_ = src;

  /**
   * @private
   * @type {HTMLImageElement|HTMLCanvasElement}
   */
  this.image_ = new Image();
  if (crossOrigin !== null) {
    this.image_.crossOrigin = crossOrigin;
  }

  /**
   * @private
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.imageListenerKeys_ = null;

  /**
   * @private
   * @type {module:ol/Tile~LoadFunction}
   */
  this.tileLoadFunction_ = tileLoadFunction;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(ImageTile, _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @inheritDoc
 */
ImageTile.prototype.disposeInternal = function() {
  if (this.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADING) {
    this.unlistenImage_();
    this.image_ = getBlankImage();
  }
  if (this.interimTile) {
    this.interimTile.dispose();
  }
  this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ABORT;
  this.changed();
  _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].prototype.disposeInternal.call(this);
};


/**
 * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
 * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
 * @api
 */
ImageTile.prototype.getImage = function() {
  return this.image_;
};


/**
 * @inheritDoc
 */
ImageTile.prototype.getKey = function() {
  return this.src_;
};


/**
 * Tracks loading or read errors.
 *
 * @private
 */
ImageTile.prototype.handleImageError_ = function() {
  this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR;
  this.unlistenImage_();
  this.image_ = getBlankImage();
  this.changed();
};


/**
 * Tracks successful image load.
 *
 * @private
 */
ImageTile.prototype.handleImageLoad_ = function() {
  if (this.image_.naturalWidth && this.image_.naturalHeight) {
    this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED;
  } else {
    this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EMPTY;
  }
  this.unlistenImage_();
  this.changed();
};


/**
 * @inheritDoc
 * @api
 */
ImageTile.prototype.load = function() {
  if (this.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR) {
    this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE;
    this.image_ = new Image();
    if (this.crossOrigin_ !== null) {
      this.image_.crossOrigin = this.crossOrigin_;
    }
  }
  if (this.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE) {
    this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADING;
    this.changed();
    this.imageListenerKeys_ = [
      Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listenOnce */ "b"])(this.image_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].ERROR,
        this.handleImageError_, this),
      Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listenOnce */ "b"])(this.image_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].LOAD,
        this.handleImageLoad_, this)
    ];
    this.tileLoadFunction_(this, this.src_);
  }
};


/**
 * Discards event handlers which listen for load completion or errors.
 *
 * @private
 */
ImageTile.prototype.unlistenImage_ = function() {
  this.imageListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* unlistenByKey */ "e"]);
  this.imageListenerKeys_ = null;
};


/**
 * Get a 1-pixel blank image.
 * @return {HTMLCanvasElement} Blank image.
 */
function getBlankImage() {
  const ctx = Object(_dom_js__WEBPACK_IMPORTED_MODULE_3__[/* createCanvasContext2D */ "a"])(1, 1);
  ctx.fillStyle = 'rgba(0,0,0,0)';
  ctx.fillRect(0, 0, 1, 1);
  return ctx.canvas;
}

/* harmony default export */ __webpack_exports__["a"] = (ImageTile);


/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36);
/**
 * @module ol/render/Event
 */



/**
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {module:ol/render/EventType} type Type.
 * @param {module:ol/render/VectorContext=} opt_vectorContext Vector context.
 * @param {module:ol/PluggableMap~FrameState=} opt_frameState Frame state.
 * @param {?CanvasRenderingContext2D=} opt_context Context.
 * @param {?module:ol/webgl/Context=} opt_glContext WebGL Context.
 */
const RenderEvent = function(
  type, opt_vectorContext, opt_frameState, opt_context,
  opt_glContext) {

  _events_Event_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, type);

  /**
   * For canvas, this is an instance of {@link module:ol/render/canvas/Immediate}.
   * @type {module:ol/render/VectorContext|undefined}
   * @api
   */
  this.vectorContext = opt_vectorContext;

  /**
   * An object representing the current render frame state.
   * @type {module:ol/PluggableMap~FrameState|undefined}
   * @api
   */
  this.frameState = opt_frameState;

  /**
   * Canvas context. Only available when a Canvas renderer is used, null
   * otherwise.
   * @type {CanvasRenderingContext2D|null|undefined}
   * @api
   */
  this.context = opt_context;

  /**
   * WebGL context. Only available when a WebGL renderer is used, null
   * otherwise.
   * @type {module:ol/webgl/Context|null|undefined}
   * @api
   */
  this.glContext = opt_glContext;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(RenderEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);
/* harmony default export */ __webpack_exports__["a"] = (RenderEvent);


/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/style/Image
 */


/**
 * @typedef {Object} Options
 * @property {number} opacity
 * @property {boolean} rotateWithView
 * @property {number} rotation
 * @property {number} scale
 * @property {boolean} snapToPixel
 */


/**
 * @classdesc
 * A base class used for creating subclasses and not instantiated in
 * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
 * {@link module:ol/style/RegularShape~RegularShape}.
 *
 * @constructor
 * @abstract
 * @param {module:ol/style/Image~Options} options Options.
 * @api
 */
const ImageStyle = function(options) {

  /**
   * @private
   * @type {number}
   */
  this.opacity_ = options.opacity;

  /**
   * @private
   * @type {boolean}
   */
  this.rotateWithView_ = options.rotateWithView;

  /**
   * @private
   * @type {number}
   */
  this.rotation_ = options.rotation;

  /**
   * @private
   * @type {number}
   */
  this.scale_ = options.scale;

  /**
   * @private
   * @type {boolean}
   */
  this.snapToPixel_ = options.snapToPixel;

};


/**
 * Get the symbolizer opacity.
 * @return {number} Opacity.
 * @api
 */
ImageStyle.prototype.getOpacity = function() {
  return this.opacity_;
};


/**
 * Determine whether the symbolizer rotates with the map.
 * @return {boolean} Rotate with map.
 * @api
 */
ImageStyle.prototype.getRotateWithView = function() {
  return this.rotateWithView_;
};


/**
 * Get the symoblizer rotation.
 * @return {number} Rotation.
 * @api
 */
ImageStyle.prototype.getRotation = function() {
  return this.rotation_;
};


/**
 * Get the symbolizer scale.
 * @return {number} Scale.
 * @api
 */
ImageStyle.prototype.getScale = function() {
  return this.scale_;
};


/**
 * Determine whether the symbolizer should be snapped to a pixel.
 * @return {boolean} The symbolizer should snap to a pixel.
 * @api
 */
ImageStyle.prototype.getSnapToPixel = function() {
  return this.snapToPixel_;
};


/**
 * Get the anchor point in pixels. The anchor determines the center point for the
 * symbolizer.
 * @abstract
 * @return {Array.<number>} Anchor.
 */
ImageStyle.prototype.getAnchor = function() {};


/**
 * Get the image element for the symbolizer.
 * @abstract
 * @param {number} pixelRatio Pixel ratio.
 * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
 */
ImageStyle.prototype.getImage = function(pixelRatio) {};


/**
 * @abstract
 * @param {number} pixelRatio Pixel ratio.
 * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
 */
ImageStyle.prototype.getHitDetectionImage = function(pixelRatio) {};


/**
 * @abstract
 * @return {module:ol/ImageState} Image state.
 */
ImageStyle.prototype.getImageState = function() {};


/**
 * @abstract
 * @return {module:ol/size~Size} Image size.
 */
ImageStyle.prototype.getImageSize = function() {};


/**
 * @abstract
 * @return {module:ol/size~Size} Size of the hit-detection image.
 */
ImageStyle.prototype.getHitDetectionImageSize = function() {};


/**
 * Get the origin of the symbolizer.
 * @abstract
 * @return {Array.<number>} Origin.
 */
ImageStyle.prototype.getOrigin = function() {};


/**
 * Get the size of the symbolizer (in pixels).
 * @abstract
 * @return {module:ol/size~Size} Size.
 */
ImageStyle.prototype.getSize = function() {};


/**
 * Set the opacity.
 *
 * @param {number} opacity Opacity.
 * @api
 */
ImageStyle.prototype.setOpacity = function(opacity) {
  this.opacity_ = opacity;
};


/**
 * Set whether to rotate the style with the view.
 *
 * @param {boolean} rotateWithView Rotate with map.
 * @api
 */
ImageStyle.prototype.setRotateWithView = function(rotateWithView) {
  this.rotateWithView_ = rotateWithView;
};


/**
 * Set the rotation.
 *
 * @param {number} rotation Rotation.
 * @api
 */
ImageStyle.prototype.setRotation = function(rotation) {
  this.rotation_ = rotation;
};


/**
 * Set the scale.
 *
 * @param {number} scale Scale.
 * @api
 */
ImageStyle.prototype.setScale = function(scale) {
  this.scale_ = scale;
};


/**
 * Set whether to snap the image to the closest pixel.
 *
 * @param {boolean} snapToPixel Snap to pixel?
 * @api
 */
ImageStyle.prototype.setSnapToPixel = function(snapToPixel) {
  this.snapToPixel_ = snapToPixel;
};


/**
 * @abstract
 * @param {function(this: T, module:ol/events/Event)} listener Listener function.
 * @param {T} thisArg Value to use as `this` when executing `listener`.
 * @return {module:ol/events~EventsKey|undefined} Listener key.
 * @template T
 */
ImageStyle.prototype.listenImageChange = function(listener, thisArg) {};


/**
 * Load not yet loaded URI.
 * @abstract
 */
ImageStyle.prototype.load = function() {};


/**
 * @abstract
 * @param {function(this: T, module:ol/events/Event)} listener Listener function.
 * @param {T} thisArg Value to use as `this` when executing `listener`.
 * @template T
 */
ImageStyle.prototype.unlistenImageChange = function(listener, thisArg) {};
/* harmony default export */ __webpack_exports__["a"] = (ImageStyle);


/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return intersectsLineString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return intersectsLineStringArray; });
/* unused harmony export intersectsLinearRing */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return intersectsLinearRingArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return intersectsLinearRingMultiArray; });
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _flat_contains_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(112);
/* harmony import */ var _flat_segments_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(231);
/**
 * @module ol/geom/flat/intersectsextent
 */





/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */
function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
  const coordinatesExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* extendFlatCoordinates */ "s"])(
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* createEmpty */ "j"])(), flatCoordinates, offset, end, stride);
  if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* intersects */ "F"])(extent, coordinatesExtent)) {
    return false;
  }
  if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* containsExtent */ "g"])(extent, coordinatesExtent)) {
    return true;
  }
  if (coordinatesExtent[0] >= extent[0] &&
      coordinatesExtent[2] <= extent[2]) {
    return true;
  }
  if (coordinatesExtent[1] >= extent[1] &&
      coordinatesExtent[3] <= extent[3]) {
    return true;
  }
  return Object(_flat_segments_js__WEBPACK_IMPORTED_MODULE_2__[/* forEach */ "a"])(flatCoordinates, offset, end, stride,
    /**
     * @param {module:ol/coordinate~Coordinate} point1 Start point.
     * @param {module:ol/coordinate~Coordinate} point2 End point.
     * @return {boolean} `true` if the segment and the extent intersect,
     *     `false` otherwise.
     */
    function(point1, point2) {
      return Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* intersectsSegment */ "G"])(extent, point1, point2);
    });
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */
function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    if (intersectsLineString(
      flatCoordinates, offset, ends[i], stride, extent)) {
      return true;
    }
    offset = ends[i];
  }
  return false;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */
function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
  if (intersectsLineString(
    flatCoordinates, offset, end, stride, extent)) {
    return true;
  }
  if (Object(_flat_contains_js__WEBPACK_IMPORTED_MODULE_1__[/* linearRingContainsXY */ "b"])(flatCoordinates, offset, end, stride, extent[0], extent[1])) {
    return true;
  }
  if (Object(_flat_contains_js__WEBPACK_IMPORTED_MODULE_1__[/* linearRingContainsXY */ "b"])(flatCoordinates, offset, end, stride, extent[0], extent[3])) {
    return true;
  }
  if (Object(_flat_contains_js__WEBPACK_IMPORTED_MODULE_1__[/* linearRingContainsXY */ "b"])(flatCoordinates, offset, end, stride, extent[2], extent[1])) {
    return true;
  }
  if (Object(_flat_contains_js__WEBPACK_IMPORTED_MODULE_1__[/* linearRingContainsXY */ "b"])(flatCoordinates, offset, end, stride, extent[2], extent[3])) {
    return true;
  }
  return false;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */
function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
  if (!intersectsLinearRing(
    flatCoordinates, offset, ends[0], stride, extent)) {
    return false;
  }
  if (ends.length === 1) {
    return true;
  }
  for (let i = 1, ii = ends.length; i < ii; ++i) {
    if (Object(_flat_contains_js__WEBPACK_IMPORTED_MODULE_1__[/* linearRingContainsExtent */ "a"])(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
      return false;
    }
  }
  return true;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {module:ol/extent~Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */
function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    if (intersectsLinearRingArray(
      flatCoordinates, offset, ends, stride, extent)) {
      return true;
    }
    offset = ends[ends.length - 1];
  }
  return false;
}


/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return linearRing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return linearRings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return linearRingss; });
/**
 * @module ol/geom/flat/area
 */


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {number} Area.
 */
function linearRing(flatCoordinates, offset, end, stride) {
  let twiceArea = 0;
  let x1 = flatCoordinates[end - stride];
  let y1 = flatCoordinates[end - stride + 1];
  for (; offset < end; offset += stride) {
    const x2 = flatCoordinates[offset];
    const y2 = flatCoordinates[offset + 1];
    twiceArea += y1 * x2 - x1 * y2;
    x1 = x2;
    y1 = y2;
  }
  return twiceArea / 2;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @return {number} Area.
 */
function linearRings(flatCoordinates, offset, ends, stride) {
  let area = 0;
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    const end = ends[i];
    area += linearRing(flatCoordinates, offset, end, stride);
    offset = end;
  }
  return area;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @return {number} Area.
 */
function linearRingss(flatCoordinates, offset, endss, stride) {
  let area = 0;
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    area += linearRings(flatCoordinates, offset, ends, stride);
    offset = ends[ends.length - 1];
  }
  return area;
}


/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51);
/* harmony import */ var _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62);
/* harmony import */ var _MapBrowserEvent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(173);
/* harmony import */ var _MapBrowserEventHandler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(221);
/* harmony import */ var _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40);
/* harmony import */ var _MapEvent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(133);
/* harmony import */ var _MapEventType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(142);
/* harmony import */ var _MapProperty_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(96);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(31);
/* harmony import */ var _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(125);
/* harmony import */ var _TileQueue_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(186);
/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(4);
/* harmony import */ var _ViewHint_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(43);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(27);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(32);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(8);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(36);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(3);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(29);
/* harmony import */ var _has_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(48);
/* harmony import */ var _layer_Group_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(199);
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(58);
/* harmony import */ var _structs_PriorityQueue_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(154);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(18);
/**
 * @module ol/PluggableMap
 */




























/**
 * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
 * be used in applications.
 * @typedef {Object} FrameState
 * @property {number} pixelRatio The pixel ratio of the frame.
 * @property {number} time The time when rendering of the frame was requested.
 * @property {module:ol/View~State} viewState The state of the current view.
 * @property {boolean} animate
 * @property {module:ol/transform~Transform} coordinateToPixelTransform
 * @property {null|module:ol/extent~Extent} extent
 * @property {module:ol/coordinate~Coordinate} focus
 * @property {number} index
 * @property {Object.<number, module:ol/layer/Layer~State>} layerStates
 * @property {Array.<module:ol/layer/Layer~State>} layerStatesArray
 * @property {module:ol/transform~Transform} pixelToCoordinateTransform
 * @property {Array.<module:ol/PluggableMap~PostRenderFunction>} postRenderFunctions
 * @property {module:ol/size~Size} size
 * @property {!Object.<string, boolean>} skippedFeatureUids
 * @property {module:ol/TileQueue} tileQueue
 * @property {Object.<string, Object.<string, module:ol/TileRange>>} usedTiles
 * @property {Array.<number>} viewHints
 * @property {!Object.<string, Object.<string, boolean>>} wantedTiles
 */


/**
 * @typedef {function(module:ol/PluggableMap, ?module:ol/PluggableMap~FrameState): boolean} PostRenderFunction
 */


/**
 * @typedef {Object} AtPixelOptions
 * @property {((function(module:ol/layer/Layer): boolean)|undefined)} layerFilter Layer filter
 * function. The filter function will receive one argument, the
 * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.
 * Only layers which are visible and for which this function returns `true`
 * will be tested for features. By default, all visible layers will be tested.
 * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels
 * inside the radius around the given position will be checked for features. This only
 * works for the canvas renderer and not for WebGL.
 */


/**
 * @typedef {Object} MapOptionsInternal
 * @property {module:ol/Collection.<module:ol/control/Control>} [controls]
 * @property {module:ol/Collection.<module:ol/interaction/Interaction>} [interactions]
 * @property {HTMLElement|Document} keyboardEventTarget
 * @property {module:ol/Collection.<module:ol/Overlay>} overlays
 * @property {Object.<string, *>} values
 */


/**
 * Object literal with config options for the map.
 * @typedef {Object} MapOptions
 * @property {module:ol/Collection.<module:ol/control/Control>|Array.<module:ol/control/Control>} [controls]
 * Controls initially added to the map. If not specified,
 * {@link module:ol/control/util~defaults} is used.
 * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
 * physical pixels and device-independent pixels (dips) on the device.
 * @property {module:ol/Collection.<module:ol/interaction/Interaction>|Array.<module:ol/interaction/Interaction>} [interactions]
 * Interactions that are initially added to the map. If not specified,
 * {@link module:ol/interaction~defaults} is used.
 * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
 * listen to keyboard events on. This determines when the `KeyboardPan` and
 * `KeyboardZoom` interactions trigger. For example, if this option is set to
 * `document` the keyboard interactions will always trigger. If this option is
 * not specified, the element the library listens to keyboard events on is the
 * map target (i.e. the user-provided div for the map). If this is not
 * `document`, the target element needs to be focused for key events to be
 * emitted, requiring that the target element has a `tabindex` attribute.
 * @property {Array.<module:ol/layer/Base>|module:ol/Collection.<module:ol/layer/Base>} [layers]
 * Layers. If this is not defined, a map with no layers will be rendered. Note
 * that layers are rendered in the order supplied, so if you want, for example,
 * a vector layer to appear on top of a tile layer, it must come after the tile
 * layer.
 * @property {number} [maxTilesLoading=16] Maximum number tiles to load
 * simultaneously.
 * @property {boolean} [loadTilesWhileAnimating=false] When set to `true`, tiles
 * will be loaded during animations. This may improve the user experience, but
 * can also make animations stutter on devices with slow memory.
 * @property {boolean} [loadTilesWhileInteracting=false] When set to `true`,
 * tiles will be loaded while interacting with the map. This may improve the
 * user experience, but can also make map panning and zooming choppy on devices
 * with slow memory.
 * @property {number} [moveTolerance=1] The minimum distance in pixels the
 * cursor must move to be detected as a map move event instead of a click.
 * Increasing this value can make it easier to click on the map.
 * @property {module:ol/Collection.<module:ol/Overlay>|Array.<module:ol/Overlay>} [overlays]
 * Overlays initially added to the map. By default, no overlays are added.
 * @property {HTMLElement|string} [target] The container for the map, either the
 * element itself or the `id` of the element. If not specified at construction
 * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
 * rendered.
 * @property {module:ol/View} [view] The map's view.  No layer sources will be
 * fetched unless this is specified at construction time or through
 * {@link module:ol/Map~Map#setView}.
 */


/**
 * @constructor
 * @extends {module:ol/Object}
 * @param {module:ol/PluggableMap~MapOptions} options Map options.
 * @fires module:ol/MapBrowserEvent~MapBrowserEvent
 * @fires module:ol/MapEvent~MapEvent
 * @fires module:ol/render/Event~RenderEvent#postcompose
 * @fires module:ol/render/Event~RenderEvent#precompose
 * @api
 */
const PluggableMap = function(options) {

  _Object_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].call(this);

  const optionsInternal = createOptionsInternal(options);

  /**
   * @type {number}
   * @private
   */
  this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;

  /**
   * @type {boolean}
   * @private
   */
  this.loadTilesWhileAnimating_ =
      options.loadTilesWhileAnimating !== undefined ?
        options.loadTilesWhileAnimating : false;

  /**
   * @type {boolean}
   * @private
   */
  this.loadTilesWhileInteracting_ =
      options.loadTilesWhileInteracting !== undefined ?
        options.loadTilesWhileInteracting : false;

  /**
   * @private
   * @type {number}
   */
  this.pixelRatio_ = options.pixelRatio !== undefined ?
    options.pixelRatio : _has_js__WEBPACK_IMPORTED_MODULE_21__[/* DEVICE_PIXEL_RATIO */ "b"];

  /**
   * @private
   * @type {number|undefined}
   */
  this.animationDelayKey_;

  /**
   * @private
   */
  this.animationDelay_ = function() {
    this.animationDelayKey_ = undefined;
    this.renderFrame_.call(this, Date.now());
  }.bind(this);

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.coordinateToPixelTransform_ = Object(_transform_js__WEBPACK_IMPORTED_MODULE_25__[/* create */ "c"])();

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.pixelToCoordinateTransform_ = Object(_transform_js__WEBPACK_IMPORTED_MODULE_25__[/* create */ "c"])();

  /**
   * @private
   * @type {number}
   */
  this.frameIndex_ = 0;

  /**
   * @private
   * @type {?module:ol/PluggableMap~FrameState}
   */
  this.frameState_ = null;

  /**
   * The extent at the previous 'moveend' event.
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.previousExtent_ = null;

  /**
   * @private
   * @type {?module:ol/events~EventsKey}
   */
  this.viewPropertyListenerKey_ = null;

  /**
   * @private
   * @type {?module:ol/events~EventsKey}
   */
  this.viewChangeListenerKey_ = null;

  /**
   * @private
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.layerGroupPropertyListenerKeys_ = null;

  /**
   * @private
   * @type {!HTMLElement}
   */
  this.viewport_ = document.createElement('DIV');
  this.viewport_.className = 'ol-viewport' + (_has_js__WEBPACK_IMPORTED_MODULE_21__[/* TOUCH */ "i"] ? ' ol-touch' : '');
  this.viewport_.style.position = 'relative';
  this.viewport_.style.overflow = 'hidden';
  this.viewport_.style.width = '100%';
  this.viewport_.style.height = '100%';
  // prevent page zoom on IE >= 10 browsers
  this.viewport_.style.msTouchAction = 'none';
  this.viewport_.style.touchAction = 'none';

  /**
   * @private
   * @type {!HTMLElement}
   */
  this.overlayContainer_ = document.createElement('DIV');
  this.overlayContainer_.className = 'ol-overlaycontainer';
  this.viewport_.appendChild(this.overlayContainer_);

  /**
   * @private
   * @type {!HTMLElement}
   */
  this.overlayContainerStopEvent_ = document.createElement('DIV');
  this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
  const overlayEvents = [
    _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].CLICK,
    _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].DBLCLICK,
    _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].MOUSEDOWN,
    _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].TOUCHSTART,
    _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].MSPOINTERDOWN,
    _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].POINTERDOWN,
    _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].MOUSEWHEEL,
    _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].WHEEL
  ];
  for (let i = 0, ii = overlayEvents.length; i < ii; ++i) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.overlayContainerStopEvent_, overlayEvents[i], _events_Event_js__WEBPACK_IMPORTED_MODULE_17__[/* stopPropagation */ "b"]);
  }
  this.viewport_.appendChild(this.overlayContainerStopEvent_);

  /**
   * @private
   * @type {module:ol/MapBrowserEventHandler}
   */
  this.mapBrowserEventHandler_ = new _MapBrowserEventHandler_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](this, options.moveTolerance);
  for (const key in _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.mapBrowserEventHandler_, _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"][key],
      this.handleMapBrowserEvent, this);
  }

  /**
   * @private
   * @type {HTMLElement|Document}
   */
  this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;

  /**
   * @private
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.keyHandlerKeys_ = null;

  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.viewport_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].CONTEXTMENU, this.handleBrowserEvent, this);
  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.viewport_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].WHEEL, this.handleBrowserEvent, this);
  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.viewport_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].MOUSEWHEEL, this.handleBrowserEvent, this);

  /**
   * @type {module:ol/Collection.<module:ol/control/Control>}
   * @protected
   */
  this.controls = optionsInternal.controls || new _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"]();

  /**
   * @type {module:ol/Collection.<module:ol/interaction/Interaction>}
   * @protected
   */
  this.interactions = optionsInternal.interactions || new _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"]();

  /**
   * @type {module:ol/Collection.<module:ol/Overlay>}
   * @private
   */
  this.overlays_ = optionsInternal.overlays;

  /**
   * A lookup of overlays by id.
   * @private
   * @type {Object.<string, module:ol/Overlay>}
   */
  this.overlayIdIndex_ = {};

  /**
   * @type {module:ol/renderer/Map}
   * @private
   */
  this.renderer_ = this.createRenderer();

  /**
   * @type {function(Event)|undefined}
   * @private
   */
  this.handleResize_;

  /**
   * @private
   * @type {module:ol/coordinate~Coordinate}
   */
  this.focus_ = null;

  /**
   * @private
   * @type {!Array.<module:ol/PluggableMap~PostRenderFunction>}
   */
  this.postRenderFunctions_ = [];

  /**
   * @private
   * @type {module:ol/TileQueue}
   */
  this.tileQueue_ = new _TileQueue_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"](
    this.getTilePriority.bind(this),
    this.handleTileChange_.bind(this));

  /**
   * Uids of features to skip at rendering time.
   * @type {Object.<string, boolean>}
   * @private
   */
  this.skippedFeatureUids_ = {};

  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(
    this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_9__[/* getChangeEventType */ "b"])(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].LAYERGROUP),
    this.handleLayerGroupChanged_, this);
  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_9__[/* getChangeEventType */ "b"])(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].VIEW),
    this.handleViewChanged_, this);
  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_9__[/* getChangeEventType */ "b"])(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].SIZE),
    this.handleSizeChanged_, this);
  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this, Object(_Object_js__WEBPACK_IMPORTED_MODULE_9__[/* getChangeEventType */ "b"])(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TARGET),
    this.handleTargetChanged_, this);

  // setProperties will trigger the rendering of the map if the map
  // is "defined" already.
  this.setProperties(optionsInternal.values);

  this.controls.forEach(
    /**
     * @param {module:ol/control/Control} control Control.
     * @this {module:ol/PluggableMap}
     */
    (function(control) {
      control.setMap(this);
    }).bind(this));

  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.controls, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ADD,
    /**
     * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.
     */
    function(event) {
      event.element.setMap(this);
    }, this);

  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.controls, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].REMOVE,
    /**
     * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.
     */
    function(event) {
      event.element.setMap(null);
    }, this);

  this.interactions.forEach(
    /**
     * @param {module:ol/interaction/Interaction} interaction Interaction.
     * @this {module:ol/PluggableMap}
     */
    (function(interaction) {
      interaction.setMap(this);
    }).bind(this));

  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.interactions, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ADD,
    /**
     * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.
     */
    function(event) {
      event.element.setMap(this);
    }, this);

  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.interactions, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].REMOVE,
    /**
     * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.
     */
    function(event) {
      event.element.setMap(null);
    }, this);

  this.overlays_.forEach(this.addOverlayInternal_.bind(this));

  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.overlays_, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ADD,
    /**
     * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.
     */
    function(event) {
      this.addOverlayInternal_(/** @type {module:ol/Overlay} */ (event.element));
    }, this);

  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(this.overlays_, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].REMOVE,
    /**
     * @param {module:ol/Collection~CollectionEvent} event CollectionEvent.
     */
    function(event) {
      const overlay = /** @type {module:ol/Overlay} */ (event.element);
      const id = overlay.getId();
      if (id !== undefined) {
        delete this.overlayIdIndex_[id.toString()];
      }
      event.element.setMap(null);
    }, this);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(PluggableMap, _Object_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]);


PluggableMap.prototype.createRenderer = function() {
  throw new Error('Use a map type that has a createRenderer method');
};


/**
 * Add the given control to the map.
 * @param {module:ol/control/Control} control Control.
 * @api
 */
PluggableMap.prototype.addControl = function(control) {
  this.getControls().push(control);
};


/**
 * Add the given interaction to the map.
 * @param {module:ol/interaction/Interaction} interaction Interaction to add.
 * @api
 */
PluggableMap.prototype.addInteraction = function(interaction) {
  this.getInteractions().push(interaction);
};


/**
 * Adds the given layer to the top of this map. If you want to add a layer
 * elsewhere in the stack, use `getLayers()` and the methods available on
 * {@link module:ol/Collection~Collection}.
 * @param {module:ol/layer/Base} layer Layer.
 * @api
 */
PluggableMap.prototype.addLayer = function(layer) {
  const layers = this.getLayerGroup().getLayers();
  layers.push(layer);
};


/**
 * Add the given overlay to the map.
 * @param {module:ol/Overlay} overlay Overlay.
 * @api
 */
PluggableMap.prototype.addOverlay = function(overlay) {
  this.getOverlays().push(overlay);
};


/**
 * This deals with map's overlay collection changes.
 * @param {module:ol/Overlay} overlay Overlay.
 * @private
 */
PluggableMap.prototype.addOverlayInternal_ = function(overlay) {
  const id = overlay.getId();
  if (id !== undefined) {
    this.overlayIdIndex_[id.toString()] = overlay;
  }
  overlay.setMap(this);
};


/**
 *
 * @inheritDoc
 */
PluggableMap.prototype.disposeInternal = function() {
  this.mapBrowserEventHandler_.dispose();
  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* unlisten */ "c"])(this.viewport_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].CONTEXTMENU, this.handleBrowserEvent, this);
  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* unlisten */ "c"])(this.viewport_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].WHEEL, this.handleBrowserEvent, this);
  Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* unlisten */ "c"])(this.viewport_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].MOUSEWHEEL, this.handleBrowserEvent, this);
  if (this.handleResize_ !== undefined) {
    removeEventListener(_events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].RESIZE, this.handleResize_, false);
    this.handleResize_ = undefined;
  }
  if (this.animationDelayKey_) {
    cancelAnimationFrame(this.animationDelayKey_);
    this.animationDelayKey_ = undefined;
  }
  this.setTarget(null);
  _Object_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].prototype.disposeInternal.call(this);
};


/**
 * Detect features that intersect a pixel on the viewport, and execute a
 * callback with each intersecting feature. Layers included in the detection can
 * be configured through the `layerFilter` option in `opt_options`.
 * @param {module:ol~Pixel} pixel Pixel.
 * @param {function(this: S, (module:ol/Feature|module:ol/render/Feature),
 *     module:ol/layer/Layer): T} callback Feature callback. The callback will be
 *     called with two arguments. The first argument is one
 *     {@link module:ol/Feature feature} or
 *     {@link module:ol/render/Feature render feature} at the pixel, the second is
 *     the {@link module:ol/layer/Layer layer} of the feature and will be null for
 *     unmanaged layers. To stop detection, callback functions can return a
 *     truthy value.
 * @param {module:ol/PluggableMap~AtPixelOptions=} opt_options Optional options.
 * @return {T|undefined} Callback result, i.e. the return value of last
 * callback execution, or the first truthy callback return value.
 * @template S,T
 * @api
 */
PluggableMap.prototype.forEachFeatureAtPixel = function(pixel, callback, opt_options) {
  if (!this.frameState_) {
    return;
  }
  const coordinate = this.getCoordinateFromPixel(pixel);
  opt_options = opt_options !== undefined ? opt_options : {};
  const hitTolerance = opt_options.hitTolerance !== undefined ?
    opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
  const layerFilter = opt_options.layerFilter !== undefined ?
    opt_options.layerFilter : _functions_js__WEBPACK_IMPORTED_MODULE_20__[/* TRUE */ "b"];
  return this.renderer_.forEachFeatureAtCoordinate(
    coordinate, this.frameState_, hitTolerance, callback, null,
    layerFilter, null);
};


/**
 * Get all features that intersect a pixel on the viewport.
 * @param {module:ol~Pixel} pixel Pixel.
 * @param {module:ol/PluggableMap~AtPixelOptions=} opt_options Optional options.
 * @return {Array.<module:ol/Feature|module:ol/render/Feature>} The detected features or
 * `null` if none were found.
 * @api
 */
PluggableMap.prototype.getFeaturesAtPixel = function(pixel, opt_options) {
  let features = null;
  this.forEachFeatureAtPixel(pixel, function(feature) {
    if (!features) {
      features = [];
    }
    features.push(feature);
  }, opt_options);
  return features;
};

/**
 * Detect layers that have a color value at a pixel on the viewport, and
 * execute a callback with each matching layer. Layers included in the
 * detection can be configured through `opt_layerFilter`.
 * @param {module:ol~Pixel} pixel Pixel.
 * @param {function(this: S, module:ol/layer/Layer, (Uint8ClampedArray|Uint8Array)): T} callback
 *     Layer callback. This callback will receive two arguments: first is the
 *     {@link module:ol/layer/Layer layer}, second argument is an array representing
 *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
 *     that do not currently support this argument. To stop detection, callback
 *     functions can return a truthy value.
 * @param {module:ol/PluggableMap~AtPixelOptions=} opt_options Configuration options.
 * @return {T|undefined} Callback result, i.e. the return value of last
 * callback execution, or the first truthy callback return value.
 * @template S,T
 * @api
 */
PluggableMap.prototype.forEachLayerAtPixel = function(pixel, callback, opt_options) {
  if (!this.frameState_) {
    return;
  }
  const options = opt_options || {};
  const hitTolerance = options.hitTolerance !== undefined ?
    opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
  const layerFilter = options.layerFilter || _functions_js__WEBPACK_IMPORTED_MODULE_20__[/* TRUE */ "b"];
  return this.renderer_.forEachLayerAtPixel(
    pixel, this.frameState_, hitTolerance, callback, null, layerFilter, null);
};


/**
 * Detect if features intersect a pixel on the viewport. Layers included in the
 * detection can be configured through `opt_layerFilter`.
 * @param {module:ol~Pixel} pixel Pixel.
 * @param {module:ol/PluggableMap~AtPixelOptions=} opt_options Optional options.
 * @return {boolean} Is there a feature at the given pixel?
 * @template U
 * @api
 */
PluggableMap.prototype.hasFeatureAtPixel = function(pixel, opt_options) {
  if (!this.frameState_) {
    return false;
  }
  const coordinate = this.getCoordinateFromPixel(pixel);
  opt_options = opt_options !== undefined ? opt_options : {};
  const layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : _functions_js__WEBPACK_IMPORTED_MODULE_20__[/* TRUE */ "b"];
  const hitTolerance = opt_options.hitTolerance !== undefined ?
    opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
  return this.renderer_.hasFeatureAtCoordinate(
    coordinate, this.frameState_, hitTolerance, layerFilter, null);
};


/**
 * Returns the coordinate in view projection for a browser event.
 * @param {Event} event Event.
 * @return {module:ol/coordinate~Coordinate} Coordinate.
 * @api
 */
PluggableMap.prototype.getEventCoordinate = function(event) {
  return this.getCoordinateFromPixel(this.getEventPixel(event));
};


/**
 * Returns the map pixel position for a browser event relative to the viewport.
 * @param {Event} event Event.
 * @return {module:ol~Pixel} Pixel.
 * @api
 */
PluggableMap.prototype.getEventPixel = function(event) {
  const viewportPosition = this.viewport_.getBoundingClientRect();
  const eventPosition = event.changedTouches ? event.changedTouches[0] : event;
  return [
    eventPosition.clientX - viewportPosition.left,
    eventPosition.clientY - viewportPosition.top
  ];
};


/**
 * Get the target in which this map is rendered.
 * Note that this returns what is entered as an option or in setTarget:
 * if that was an element, it returns an element; if a string, it returns that.
 * @return {HTMLElement|string|undefined} The Element or id of the Element that the
 *     map is rendered in.
 * @observable
 * @api
 */
PluggableMap.prototype.getTarget = function() {
  return /** @type {HTMLElement|string|undefined} */ (this.get(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TARGET));
};


/**
 * Get the DOM element into which this map is rendered. In contrast to
 * `getTarget` this method always return an `Element`, or `null` if the
 * map has no target.
 * @return {HTMLElement} The element that the map is rendered in.
 * @api
 */
PluggableMap.prototype.getTargetElement = function() {
  const target = this.getTarget();
  if (target !== undefined) {
    return typeof target === 'string' ? document.getElementById(target) : target;
  } else {
    return null;
  }
};


/**
 * Get the coordinate for a given pixel.  This returns a coordinate in the
 * map view projection.
 * @param {module:ol~Pixel} pixel Pixel position in the map viewport.
 * @return {module:ol/coordinate~Coordinate} The coordinate for the pixel position.
 * @api
 */
PluggableMap.prototype.getCoordinateFromPixel = function(pixel) {
  const frameState = this.frameState_;
  if (!frameState) {
    return null;
  } else {
    return Object(_transform_js__WEBPACK_IMPORTED_MODULE_25__[/* apply */ "a"])(frameState.pixelToCoordinateTransform, pixel.slice());
  }
};


/**
 * Get the map controls. Modifying this collection changes the controls
 * associated with the map.
 * @return {module:ol/Collection.<module:ol/control/Control>} Controls.
 * @api
 */
PluggableMap.prototype.getControls = function() {
  return this.controls;
};


/**
 * Get the map overlays. Modifying this collection changes the overlays
 * associated with the map.
 * @return {module:ol/Collection.<module:ol/Overlay>} Overlays.
 * @api
 */
PluggableMap.prototype.getOverlays = function() {
  return this.overlays_;
};


/**
 * Get an overlay by its identifier (the value returned by overlay.getId()).
 * Note that the index treats string and numeric identifiers as the same. So
 * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
 * @param {string|number} id Overlay identifier.
 * @return {module:ol/Overlay} Overlay.
 * @api
 */
PluggableMap.prototype.getOverlayById = function(id) {
  const overlay = this.overlayIdIndex_[id.toString()];
  return overlay !== undefined ? overlay : null;
};


/**
 * Get the map interactions. Modifying this collection changes the interactions
 * associated with the map.
 *
 * Interactions are used for e.g. pan, zoom and rotate.
 * @return {module:ol/Collection.<module:ol/interaction/Interaction>} Interactions.
 * @api
 */
PluggableMap.prototype.getInteractions = function() {
  return this.interactions;
};


/**
 * Get the layergroup associated with this map.
 * @return {module:ol/layer/Group} A layer group containing the layers in this map.
 * @observable
 * @api
 */
PluggableMap.prototype.getLayerGroup = function() {
  return (
    /** @type {module:ol/layer/Group} */ (this.get(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].LAYERGROUP))
  );
};


/**
 * Get the collection of layers associated with this map.
 * @return {!module:ol/Collection.<module:ol/layer/Base>} Layers.
 * @api
 */
PluggableMap.prototype.getLayers = function() {
  const layers = this.getLayerGroup().getLayers();
  return layers;
};


/**
 * Get the pixel for a coordinate.  This takes a coordinate in the map view
 * projection and returns the corresponding pixel.
 * @param {module:ol/coordinate~Coordinate} coordinate A map coordinate.
 * @return {module:ol~Pixel} A pixel position in the map viewport.
 * @api
 */
PluggableMap.prototype.getPixelFromCoordinate = function(coordinate) {
  const frameState = this.frameState_;
  if (!frameState) {
    return null;
  } else {
    return Object(_transform_js__WEBPACK_IMPORTED_MODULE_25__[/* apply */ "a"])(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
  }
};


/**
 * Get the map renderer.
 * @return {module:ol/renderer/Map} Renderer
 */
PluggableMap.prototype.getRenderer = function() {
  return this.renderer_;
};


/**
 * Get the size of this map.
 * @return {module:ol/size~Size|undefined} The size in pixels of the map in the DOM.
 * @observable
 * @api
 */
PluggableMap.prototype.getSize = function() {
  return (
    /** @type {module:ol/size~Size|undefined} */ (this.get(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].SIZE))
  );
};


/**
 * Get the view associated with this map. A view manages properties such as
 * center and resolution.
 * @return {module:ol/View} The view that controls this map.
 * @observable
 * @api
 */
PluggableMap.prototype.getView = function() {
  return (
    /** @type {module:ol/View} */ (this.get(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].VIEW))
  );
};


/**
 * Get the element that serves as the map viewport.
 * @return {HTMLElement} Viewport.
 * @api
 */
PluggableMap.prototype.getViewport = function() {
  return this.viewport_;
};


/**
 * Get the element that serves as the container for overlays.  Elements added to
 * this container will let mousedown and touchstart events through to the map,
 * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
 * events.
 * @return {!HTMLElement} The map's overlay container.
 */
PluggableMap.prototype.getOverlayContainer = function() {
  return this.overlayContainer_;
};


/**
 * Get the element that serves as a container for overlays that don't allow
 * event propagation. Elements added to this container won't let mousedown and
 * touchstart events through to the map, so clicks and gestures on an overlay
 * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
 * @return {!HTMLElement} The map's overlay container that stops events.
 */
PluggableMap.prototype.getOverlayContainerStopEvent = function() {
  return this.overlayContainerStopEvent_;
};


/**
 * @param {module:ol/Tile} tile Tile.
 * @param {string} tileSourceKey Tile source key.
 * @param {module:ol/coordinate~Coordinate} tileCenter Tile center.
 * @param {number} tileResolution Tile resolution.
 * @return {number} Tile priority.
 */
PluggableMap.prototype.getTilePriority = function(tile, tileSourceKey, tileCenter, tileResolution) {
  // Filter out tiles at higher zoom levels than the current zoom level, or that
  // are outside the visible extent.
  const frameState = this.frameState_;
  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
    return _structs_PriorityQueue_js__WEBPACK_IMPORTED_MODULE_24__[/* DROP */ "a"];
  }
  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
    return _structs_PriorityQueue_js__WEBPACK_IMPORTED_MODULE_24__[/* DROP */ "a"];
  }
  // Prioritize the highest zoom level tiles closest to the focus.
  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
  // Within a zoom level, tiles are prioritized by the distance in pixels
  // between the center of the tile and the focus.  The factor of 65536 means
  // that the prioritization should behave as desired for tiles up to
  // 65536 * Math.log(2) = 45426 pixels from the focus.
  const deltaX = tileCenter[0] - frameState.focus[0];
  const deltaY = tileCenter[1] - frameState.focus[1];
  return 65536 * Math.log(tileResolution) +
      Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
};


/**
 * @param {Event} browserEvent Browser event.
 * @param {string=} opt_type Type.
 */
PluggableMap.prototype.handleBrowserEvent = function(browserEvent, opt_type) {
  const type = opt_type || browserEvent.type;
  const mapBrowserEvent = new _MapBrowserEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](type, this, browserEvent);
  this.handleMapBrowserEvent(mapBrowserEvent);
};


/**
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent The event to handle.
 */
PluggableMap.prototype.handleMapBrowserEvent = function(mapBrowserEvent) {
  if (!this.frameState_) {
    // With no view defined, we cannot translate pixels into geographical
    // coordinates so interactions cannot be used.
    return;
  }
  this.focus_ = mapBrowserEvent.coordinate;
  mapBrowserEvent.frameState = this.frameState_;
  const interactionsArray = this.getInteractions().getArray();
  if (this.dispatchEvent(mapBrowserEvent) !== false) {
    for (let i = interactionsArray.length - 1; i >= 0; i--) {
      const interaction = interactionsArray[i];
      if (!interaction.getActive()) {
        continue;
      }
      const cont = interaction.handleEvent(mapBrowserEvent);
      if (!cont) {
        break;
      }
    }
  }
};


/**
 * @protected
 */
PluggableMap.prototype.handlePostRender = function() {

  const frameState = this.frameState_;

  // Manage the tile queue
  // Image loads are expensive and a limited resource, so try to use them
  // efficiently:
  // * When the view is static we allow a large number of parallel tile loads
  //   to complete the frame as quickly as possible.
  // * When animating or interacting, image loads can cause janks, so we reduce
  //   the maximum number of loads per frame and limit the number of parallel
  //   tile loads to remain reactive to view changes and to reduce the chance of
  //   loading tiles that will quickly disappear from view.
  const tileQueue = this.tileQueue_;
  if (!tileQueue.isEmpty()) {
    let maxTotalLoading = this.maxTilesLoading_;
    let maxNewLoads = maxTotalLoading;
    if (frameState) {
      const hints = frameState.viewHints;
      if (hints[_ViewHint_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].ANIMATING]) {
        maxTotalLoading = this.loadTilesWhileAnimating_ ? 8 : 0;
        maxNewLoads = 2;
      }
      if (hints[_ViewHint_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].INTERACTING]) {
        maxTotalLoading = this.loadTilesWhileInteracting_ ? 8 : 0;
        maxNewLoads = 2;
      }
    }
    if (tileQueue.getTilesLoading() < maxTotalLoading) {
      tileQueue.reprioritize(); // FIXME only call if view has changed
      tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
    }
  }

  const postRenderFunctions = this.postRenderFunctions_;
  for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
    postRenderFunctions[i](this, frameState);
  }
  postRenderFunctions.length = 0;
};


/**
 * @private
 */
PluggableMap.prototype.handleSizeChanged_ = function() {
  this.render();
};


/**
 * @private
 */
PluggableMap.prototype.handleTargetChanged_ = function() {
  // target may be undefined, null, a string or an Element.
  // If it's a string we convert it to an Element before proceeding.
  // If it's not now an Element we remove the viewport from the DOM.
  // If it's an Element we append the viewport element to it.

  let targetElement;
  if (this.getTarget()) {
    targetElement = this.getTargetElement();
  }

  if (this.keyHandlerKeys_) {
    for (let i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {
      Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* unlistenByKey */ "e"])(this.keyHandlerKeys_[i]);
    }
    this.keyHandlerKeys_ = null;
  }

  if (!targetElement) {
    this.renderer_.removeLayerRenderers();
    Object(_dom_js__WEBPACK_IMPORTED_MODULE_15__[/* removeNode */ "e"])(this.viewport_);
    if (this.handleResize_ !== undefined) {
      removeEventListener(_events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].RESIZE, this.handleResize_, false);
      this.handleResize_ = undefined;
    }
  } else {
    targetElement.appendChild(this.viewport_);

    const keyboardEventTarget = !this.keyboardEventTarget_ ?
      targetElement : this.keyboardEventTarget_;
    this.keyHandlerKeys_ = [
      Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(keyboardEventTarget, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].KEYDOWN, this.handleBrowserEvent, this),
      Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(keyboardEventTarget, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].KEYPRESS, this.handleBrowserEvent, this)
    ];

    if (!this.handleResize_) {
      this.handleResize_ = this.updateSize.bind(this);
      addEventListener(_events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].RESIZE, this.handleResize_, false);
    }
  }

  this.updateSize();
  // updateSize calls setSize, so no need to call this.render
  // ourselves here.
};


/**
 * @private
 */
PluggableMap.prototype.handleTileChange_ = function() {
  this.render();
};


/**
 * @private
 */
PluggableMap.prototype.handleViewPropertyChanged_ = function() {
  this.render();
};


/**
 * @private
 */
PluggableMap.prototype.handleViewChanged_ = function() {
  if (this.viewPropertyListenerKey_) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* unlistenByKey */ "e"])(this.viewPropertyListenerKey_);
    this.viewPropertyListenerKey_ = null;
  }
  if (this.viewChangeListenerKey_) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* unlistenByKey */ "e"])(this.viewChangeListenerKey_);
    this.viewChangeListenerKey_ = null;
  }
  const view = this.getView();
  if (view) {
    this.viewport_.setAttribute('data-view', Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(view));
    this.viewPropertyListenerKey_ = Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(
      view, _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].PROPERTYCHANGE,
      this.handleViewPropertyChanged_, this);
    this.viewChangeListenerKey_ = Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(
      view, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].CHANGE,
      this.handleViewPropertyChanged_, this);
  }
  this.render();
};


/**
 * @private
 */
PluggableMap.prototype.handleLayerGroupChanged_ = function() {
  if (this.layerGroupPropertyListenerKeys_) {
    this.layerGroupPropertyListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* unlistenByKey */ "e"]);
    this.layerGroupPropertyListenerKeys_ = null;
  }
  const layerGroup = this.getLayerGroup();
  if (layerGroup) {
    this.layerGroupPropertyListenerKeys_ = [
      Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(
        layerGroup, _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].PROPERTYCHANGE,
        this.render, this),
      Object(_events_js__WEBPACK_IMPORTED_MODULE_16__[/* listen */ "a"])(
        layerGroup, _events_EventType_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"].CHANGE,
        this.render, this)
    ];
  }
  this.render();
};


/**
 * @return {boolean} Is rendered.
 */
PluggableMap.prototype.isRendered = function() {
  return !!this.frameState_;
};


/**
 * Requests an immediate render in a synchronous manner.
 * @api
 */
PluggableMap.prototype.renderSync = function() {
  if (this.animationDelayKey_) {
    cancelAnimationFrame(this.animationDelayKey_);
  }
  this.animationDelay_();
};


/**
 * Request a map rendering (at the next animation frame).
 * @api
 */
PluggableMap.prototype.render = function() {
  if (this.animationDelayKey_ === undefined) {
    this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
  }
};


/**
 * Remove the given control from the map.
 * @param {module:ol/control/Control} control Control.
 * @return {module:ol/control/Control|undefined} The removed control (or undefined
 *     if the control was not found).
 * @api
 */
PluggableMap.prototype.removeControl = function(control) {
  return this.getControls().remove(control);
};


/**
 * Remove the given interaction from the map.
 * @param {module:ol/interaction/Interaction} interaction Interaction to remove.
 * @return {module:ol/interaction/Interaction|undefined} The removed interaction (or
 *     undefined if the interaction was not found).
 * @api
 */
PluggableMap.prototype.removeInteraction = function(interaction) {
  return this.getInteractions().remove(interaction);
};


/**
 * Removes the given layer from the map.
 * @param {module:ol/layer/Base} layer Layer.
 * @return {module:ol/layer/Base|undefined} The removed layer (or undefined if the
 *     layer was not found).
 * @api
 */
PluggableMap.prototype.removeLayer = function(layer) {
  const layers = this.getLayerGroup().getLayers();
  return layers.remove(layer);
};


/**
 * Remove the given overlay from the map.
 * @param {module:ol/Overlay} overlay Overlay.
 * @return {module:ol/Overlay|undefined} The removed overlay (or undefined
 *     if the overlay was not found).
 * @api
 */
PluggableMap.prototype.removeOverlay = function(overlay) {
  return this.getOverlays().remove(overlay);
};


/**
 * @param {number} time Time.
 * @private
 */
PluggableMap.prototype.renderFrame_ = function(time) {
  let viewState;

  const size = this.getSize();
  const view = this.getView();
  const extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_19__[/* createEmpty */ "j"])();
  const previousFrameState = this.frameState_;
  /** @type {?module:ol/PluggableMap~FrameState} */
  let frameState = null;
  if (size !== undefined && Object(_size_js__WEBPACK_IMPORTED_MODULE_23__[/* hasArea */ "b"])(size) && view && view.isDef()) {
    const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();
    const layerStates = {};
    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
      layerStates[Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layerStatesArray[i].layer)] = layerStatesArray[i];
    }
    viewState = view.getState();
    let focus = this.focus_;
    if (!focus) {
      focus = viewState.center;
      const pixelResolution = viewState.resolution / this.pixelRatio_;
      focus[0] = Math.round(focus[0] / pixelResolution) * pixelResolution;
      focus[1] = Math.round(focus[1] / pixelResolution) * pixelResolution;
    }
    frameState = /** @type {module:ol/PluggableMap~FrameState} */ ({
      animate: false,
      coordinateToPixelTransform: this.coordinateToPixelTransform_,
      extent: extent,
      focus: focus,
      index: this.frameIndex_++,
      layerStates: layerStates,
      layerStatesArray: layerStatesArray,
      pixelRatio: this.pixelRatio_,
      pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
      postRenderFunctions: [],
      size: size,
      skippedFeatureUids: this.skippedFeatureUids_,
      tileQueue: this.tileQueue_,
      time: time,
      usedTiles: {},
      viewState: viewState,
      viewHints: viewHints,
      wantedTiles: {}
    });
  }

  if (frameState) {
    frameState.extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_19__[/* getForViewAndSize */ "z"])(viewState.center,
      viewState.resolution, viewState.rotation, frameState.size, extent);
  }

  this.frameState_ = frameState;
  this.renderer_.renderFrame(frameState);

  if (frameState) {
    if (frameState.animate) {
      this.render();
    }
    Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);

    if (previousFrameState) {
      const moveStart = !this.previousExtent_ ||
                  (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_19__[/* isEmpty */ "H"])(this.previousExtent_) &&
                  !Object(_extent_js__WEBPACK_IMPORTED_MODULE_19__[/* equals */ "p"])(frameState.extent, this.previousExtent_));
      if (moveStart) {
        this.dispatchEvent(
          new _MapEvent_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](_MapEventType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MOVESTART, this, previousFrameState));
        this.previousExtent_ = Object(_extent_js__WEBPACK_IMPORTED_MODULE_19__[/* createOrUpdateEmpty */ "l"])(this.previousExtent_);
      }
    }

    const idle = this.previousExtent_ &&
        !frameState.viewHints[_ViewHint_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].ANIMATING] &&
        !frameState.viewHints[_ViewHint_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"].INTERACTING] &&
        !Object(_extent_js__WEBPACK_IMPORTED_MODULE_19__[/* equals */ "p"])(frameState.extent, this.previousExtent_);

    if (idle) {
      this.dispatchEvent(new _MapEvent_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](_MapEventType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MOVEEND, this, frameState));
      Object(_extent_js__WEBPACK_IMPORTED_MODULE_19__[/* clone */ "d"])(frameState.extent, this.previousExtent_);
    }
  }

  this.dispatchEvent(new _MapEvent_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](_MapEventType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POSTRENDER, this, frameState));

  setTimeout(this.handlePostRender.bind(this), 0);

};


/**
 * Sets the layergroup of this map.
 * @param {module:ol/layer/Group} layerGroup A layer group containing the layers in this map.
 * @observable
 * @api
 */
PluggableMap.prototype.setLayerGroup = function(layerGroup) {
  this.set(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].LAYERGROUP, layerGroup);
};


/**
 * Set the size of this map.
 * @param {module:ol/size~Size|undefined} size The size in pixels of the map in the DOM.
 * @observable
 * @api
 */
PluggableMap.prototype.setSize = function(size) {
  this.set(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].SIZE, size);
};


/**
 * Set the target element to render this map into.
 * @param {HTMLElement|string|undefined} target The Element or id of the Element
 *     that the map is rendered in.
 * @observable
 * @api
 */
PluggableMap.prototype.setTarget = function(target) {
  this.set(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TARGET, target);
};


/**
 * Set the view for this map.
 * @param {module:ol/View} view The view that controls this map.
 * @observable
 * @api
 */
PluggableMap.prototype.setView = function(view) {
  this.set(_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].VIEW, view);
};


/**
 * @param {module:ol/Feature} feature Feature.
 */
PluggableMap.prototype.skipFeature = function(feature) {
  const featureUid = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();
  this.skippedFeatureUids_[featureUid] = true;
  this.render();
};


/**
 * Force a recalculation of the map viewport size.  This should be called when
 * third-party code changes the size of the map viewport.
 * @api
 */
PluggableMap.prototype.updateSize = function() {
  const targetElement = this.getTargetElement();

  if (!targetElement) {
    this.setSize(undefined);
  } else {
    const computedStyle = getComputedStyle(targetElement);
    this.setSize([
      targetElement.offsetWidth -
          parseFloat(computedStyle['borderLeftWidth']) -
          parseFloat(computedStyle['paddingLeft']) -
          parseFloat(computedStyle['paddingRight']) -
          parseFloat(computedStyle['borderRightWidth']),
      targetElement.offsetHeight -
          parseFloat(computedStyle['borderTopWidth']) -
          parseFloat(computedStyle['paddingTop']) -
          parseFloat(computedStyle['paddingBottom']) -
          parseFloat(computedStyle['borderBottomWidth'])
    ]);
  }
};


/**
 * @param {module:ol/Feature} feature Feature.
 */
PluggableMap.prototype.unskipFeature = function(feature) {
  const featureUid = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(feature).toString();
  delete this.skippedFeatureUids_[featureUid];
  this.render();
};


/**
 * @param {MapOptions} options Map options.
 * @return {module:ol/PluggableMap~MapOptionsInternal} Internal map options.
 */
function createOptionsInternal(options) {

  /**
   * @type {HTMLElement|Document}
   */
  let keyboardEventTarget = null;
  if (options.keyboardEventTarget !== undefined) {
    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ?
      document.getElementById(options.keyboardEventTarget) :
      options.keyboardEventTarget;
  }

  /**
   * @type {Object.<string, *>}
   */
  const values = {};

  const layerGroup = (options.layers instanceof _layer_Group_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"]) ?
    options.layers : new _layer_Group_js__WEBPACK_IMPORTED_MODULE_22__[/* default */ "a"]({layers: options.layers});
  values[_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].LAYERGROUP] = layerGroup;

  values[_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].TARGET] = options.target;

  values[_MapProperty_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].VIEW] = options.view !== undefined ?
    options.view : new _View_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"]();

  let controls;
  if (options.controls !== undefined) {
    if (Array.isArray(options.controls)) {
      controls = new _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"](options.controls.slice());
    } else {
      Object(_asserts_js__WEBPACK_IMPORTED_MODULE_14__[/* assert */ "a"])(options.controls instanceof _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"],
        47); // Expected `controls` to be an array or an `module:ol/Collection~Collection`
      controls = options.controls;
    }
  }

  let interactions;
  if (options.interactions !== undefined) {
    if (Array.isArray(options.interactions)) {
      interactions = new _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"](options.interactions.slice());
    } else {
      Object(_asserts_js__WEBPACK_IMPORTED_MODULE_14__[/* assert */ "a"])(options.interactions instanceof _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"],
        48); // Expected `interactions` to be an array or an `module:ol/Collection~Collection`
      interactions = options.interactions;
    }
  }

  let overlays;
  if (options.overlays !== undefined) {
    if (Array.isArray(options.overlays)) {
      overlays = new _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"](options.overlays.slice());
    } else {
      Object(_asserts_js__WEBPACK_IMPORTED_MODULE_14__[/* assert */ "a"])(options.overlays instanceof _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"],
        49); // Expected `overlays` to be an array or an `module:ol/Collection~Collection`
      overlays = options.overlays;
    }
  } else {
    overlays = new _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"]();
  }

  return {
    controls: controls,
    interactions: interactions,
    keyboardEventTarget: keyboardEventTarget,
    overlays: overlays,
    values: values
  };

}
/* harmony default export */ __webpack_exports__["a"] = (PluggableMap);


/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export DEFAULT_RADIUS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getArea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return offset; });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/**
 * @license
 * Latitude/longitude spherical geodesy formulae taken from
 * http://www.movable-type.co.uk/scripts/latlong.html
 * Licensed under CC-BY-3.0.
 */

/**
 * @module ol/sphere
 */




/**
 * Object literal with options for the {@link getLength} or {@link getArea}
 * functions.
 * @typedef {Object} SphereMetricOptions
 * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857']
 * Projection of the  geometry.  By default, the geometry is assumed to be in
 * Web Mercator.
 * @property {number} [radius=6371008.8] Sphere radius.  By default, the radius of the
 * earth is used (Clarke 1866 Authalic Sphere).
 */


/**
 * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
 * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
 * @type {number}
 */
const DEFAULT_RADIUS = 6371008.8;


/**
 * Get the great circle distance (in meters) between two geographic coordinates.
 * @param {Array} c1 Starting coordinate.
 * @param {Array} c2 Ending coordinate.
 * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
 *     mean radius using the WGS84 ellipsoid.
 * @return {number} The great circle distance between the points (in meters).
 * @api
 */
function getDistance(c1, c2, opt_radius) {
  const radius = opt_radius || DEFAULT_RADIUS;
  const lat1 = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toRadians */ "j"])(c1[1]);
  const lat2 = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toRadians */ "j"])(c2[1]);
  const deltaLatBy2 = (lat2 - lat1) / 2;
  const deltaLonBy2 = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toRadians */ "j"])(c2[0] - c1[0]) / 2;
  const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
      Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) *
      Math.cos(lat1) * Math.cos(lat2);
  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
}


/**
 * Get the cumulative great circle length of linestring coordinates (geographic).
 * @param {Array} coordinates Linestring coordinates.
 * @param {number} radius The sphere radius to use.
 * @return {number} The length (in meters).
 */
function getLengthInternal(coordinates, radius) {
  let length = 0;
  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {
    length += getDistance(coordinates[i], coordinates[i + 1], radius);
  }
  return length;
}


/**
 * Get the spherical length of a geometry.  This length is the sum of the
 * great circle distances between coordinates.  For polygons, the length is
 * the sum of all rings.  For points, the length is zero.  For multi-part
 * geometries, the length is the sum of the length of each part.
 * @param {module:ol/geom/Geometry} geometry A geometry.
 * @param {module:ol/sphere~SphereMetricOptions=} opt_options Options for the
 * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
 * You can change this by providing a `projection` option.
 * @return {number} The spherical length (in meters).
 * @api
 */
function getLength(geometry, opt_options) {
  const options = opt_options || {};
  const radius = options.radius || DEFAULT_RADIUS;
  const projection = options.projection || 'EPSG:3857';
  const type = geometry.getType();
  if (type !== _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].GEOMETRY_COLLECTION) {
    geometry = geometry.clone().transform(projection, 'EPSG:4326');
  }
  let length = 0;
  let coordinates, coords, i, ii, j, jj;
  switch (type) {
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POINT:
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MULTI_POINT: {
      break;
    }
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LINE_STRING:
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LINEAR_RING: {
      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();
      length = getLengthInternal(coordinates, radius);
      break;
    }
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MULTI_LINE_STRING:
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POLYGON: {
      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();
      for (i = 0, ii = coordinates.length; i < ii; ++i) {
        length += getLengthInternal(coordinates[i], radius);
      }
      break;
    }
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MULTI_POLYGON: {
      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();
      for (i = 0, ii = coordinates.length; i < ii; ++i) {
        coords = coordinates[i];
        for (j = 0, jj = coords.length; j < jj; ++j) {
          length += getLengthInternal(coords[j], radius);
        }
      }
      break;
    }
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].GEOMETRY_COLLECTION: {
      const geometries = /** @type {module:ol/geom/GeometryCollection} */ (geometry).getGeometries();
      for (i = 0, ii = geometries.length; i < ii; ++i) {
        length += getLength(geometries[i], opt_options);
      }
      break;
    }
    default: {
      throw new Error('Unsupported geometry type: ' + type);
    }
  }
  return length;
}


/**
 * Returns the spherical area for a list of coordinates.
 *
 * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)
 * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
 * Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
 * Laboratory, Pasadena, CA, June 2007
 *
 * @param {Array.<module:ol/coordinate~Coordinate>} coordinates List of coordinates of a linear
 * ring. If the ring is oriented clockwise, the area will be positive,
 * otherwise it will be negative.
 * @param {number} radius The sphere radius.
 * @return {number} Area (in square meters).
 */
function getAreaInternal(coordinates, radius) {
  let area = 0;
  const len = coordinates.length;
  let x1 = coordinates[len - 1][0];
  let y1 = coordinates[len - 1][1];
  for (let i = 0; i < len; i++) {
    const x2 = coordinates[i][0];
    const y2 = coordinates[i][1];
    area += Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toRadians */ "j"])(x2 - x1) *
        (2 + Math.sin(Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toRadians */ "j"])(y1)) +
        Math.sin(Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toRadians */ "j"])(y2)));
    x1 = x2;
    y1 = y2;
  }
  return area * radius * radius / 2.0;
}


/**
 * Get the spherical area of a geometry.  This is the area (in meters) assuming
 * that polygon edges are segments of great circles on a sphere.
 * @param {module:ol/geom/Geometry} geometry A geometry.
 * @param {module:ol/sphere~SphereMetricOptions=} opt_options Options for the area
 *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
 *     You can change this by providing a `projection` option.
 * @return {number} The spherical area (in square meters).
 * @api
 */
function getArea(geometry, opt_options) {
  const options = opt_options || {};
  const radius = options.radius || DEFAULT_RADIUS;
  const projection = options.projection || 'EPSG:3857';
  const type = geometry.getType();
  if (type !== _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].GEOMETRY_COLLECTION) {
    geometry = geometry.clone().transform(projection, 'EPSG:4326');
  }
  let area = 0;
  let coordinates, coords, i, ii, j, jj;
  switch (type) {
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POINT:
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MULTI_POINT:
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LINE_STRING:
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MULTI_LINE_STRING:
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LINEAR_RING: {
      break;
    }
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].POLYGON: {
      coordinates = /** @type {module:ol/geom/Polygon} */ (geometry).getCoordinates();
      area = Math.abs(getAreaInternal(coordinates[0], radius));
      for (i = 1, ii = coordinates.length; i < ii; ++i) {
        area -= Math.abs(getAreaInternal(coordinates[i], radius));
      }
      break;
    }
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MULTI_POLYGON: {
      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();
      for (i = 0, ii = coordinates.length; i < ii; ++i) {
        coords = coordinates[i];
        area += Math.abs(getAreaInternal(coords[0], radius));
        for (j = 1, jj = coords.length; j < jj; ++j) {
          area -= Math.abs(getAreaInternal(coords[j], radius));
        }
      }
      break;
    }
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].GEOMETRY_COLLECTION: {
      const geometries = /** @type {module:ol/geom/GeometryCollection} */ (geometry).getGeometries();
      for (i = 0, ii = geometries.length; i < ii; ++i) {
        area += getArea(geometries[i], opt_options);
      }
      break;
    }
    default: {
      throw new Error('Unsupported geometry type: ' + type);
    }
  }
  return area;
}


/**
 * Returns the coordinate at the given distance and bearing from `c1`.
 *
 * @param {module:ol/coordinate~Coordinate} c1 The origin point (`[lon, lat]` in degrees).
 * @param {number} distance The great-circle distance between the origin
 *     point and the target point.
 * @param {number} bearing The bearing (in radians).
 * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
 *     mean radius using the WGS84 ellipsoid.
 * @return {module:ol/coordinate~Coordinate} The target point.
 */
function offset(c1, distance, bearing, opt_radius) {
  const radius = opt_radius || DEFAULT_RADIUS;
  const lat1 = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toRadians */ "j"])(c1[1]);
  const lon1 = Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toRadians */ "j"])(c1[0]);
  const dByR = distance / radius;
  const lat = Math.asin(
    Math.sin(lat1) * Math.cos(dByR) +
      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
  const lon = lon1 + Math.atan2(
    Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),
    Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
  return [Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toDegrees */ "i"])(lon), Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[/* toDegrees */ "i"])(lat)];
}


/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return POINTER_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return POINTER_TYPE; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _pointer_EventSource_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(128);
/**
 * @module ol/pointer/MouseSource
 */
// Based on https://github.com/Polymer/PointerEvents

// Copyright (c) 2013 The Polymer Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.




/**
 * @param {module:ol/pointer/PointerEventHandler} dispatcher Event handler.
 * @constructor
 * @extends {module:ol/pointer/EventSource}
 */
const MouseSource = function(dispatcher) {
  const mapping = {
    'mousedown': this.mousedown,
    'mousemove': this.mousemove,
    'mouseup': this.mouseup,
    'mouseover': this.mouseover,
    'mouseout': this.mouseout
  };
  _pointer_EventSource_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, dispatcher, mapping);

  /**
   * @const
   * @type {!Object.<string, Event|Object>}
   */
  this.pointerMap = dispatcher.pointerMap;

  /**
   * @const
   * @type {Array.<module:ol~Pixel>}
   */
  this.lastTouches = [];
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MouseSource, _pointer_EventSource_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @type {number}
 */
const POINTER_ID = 1;


/**
 * @type {string}
 */
const POINTER_TYPE = 'mouse';


/**
 * Radius around touchend that swallows mouse events.
 *
 * @type {number}
 */
const DEDUP_DIST = 25;


/**
 * Detect if a mouse event was simulated from a touch by
 * checking if previously there was a touch event at the
 * same position.
 *
 * FIXME - Known problem with the native Android browser on
 * Samsung GT-I9100 (Android 4.1.2):
 * In case the page is scrolled, this function does not work
 * correctly when a canvas is used (WebGL or canvas renderer).
 * Mouse listeners on canvas elements (for this browser), create
 * two mouse events: One 'good' and one 'bad' one (on other browsers or
 * when a div is used, there is only one event). For the 'bad' one,
 * clientX/clientY and also pageX/pageY are wrong when the page
 * is scrolled. Because of that, this function can not detect if
 * the events were simulated from a touch event. As result, a
 * pointer event at a wrong position is dispatched, which confuses
 * the map interactions.
 * It is unclear, how one can get the correct position for the event
 * or detect that the positions are invalid.
 *
 * @private
 * @param {MouseEvent} inEvent The in event.
 * @return {boolean} True, if the event was generated by a touch.
 */
MouseSource.prototype.isEventSimulatedFromTouch_ = function(inEvent) {
  const lts = this.lastTouches;
  const x = inEvent.clientX;
  const y = inEvent.clientY;
  for (let i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {
    // simulated mouse events will be swallowed near a primary touchend
    const dx = Math.abs(x - t[0]);
    const dy = Math.abs(y - t[1]);
    if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {
      return true;
    }
  }
  return false;
};


/**
 * Creates a copy of the original event that will be used
 * for the fake pointer event.
 *
 * @param {Event} inEvent The in event.
 * @param {module:ol/pointer/PointerEventHandler} dispatcher Event handler.
 * @return {Object} The copied event.
 */
function prepareEvent(inEvent, dispatcher) {
  const e = dispatcher.cloneEvent(inEvent, inEvent);

  // forward mouse preventDefault
  const pd = e.preventDefault;
  e.preventDefault = function() {
    inEvent.preventDefault();
    pd();
  };

  e.pointerId = POINTER_ID;
  e.isPrimary = true;
  e.pointerType = POINTER_TYPE;

  return e;
}


/**
 * Handler for `mousedown`.
 *
 * @param {MouseEvent} inEvent The in event.
 */
MouseSource.prototype.mousedown = function(inEvent) {
  if (!this.isEventSimulatedFromTouch_(inEvent)) {
    // TODO(dfreedman) workaround for some elements not sending mouseup
    // http://crbug/149091
    if (POINTER_ID.toString() in this.pointerMap) {
      this.cancel(inEvent);
    }
    const e = prepareEvent(inEvent, this.dispatcher);
    this.pointerMap[POINTER_ID.toString()] = inEvent;
    this.dispatcher.down(e, inEvent);
  }
};


/**
 * Handler for `mousemove`.
 *
 * @param {MouseEvent} inEvent The in event.
 */
MouseSource.prototype.mousemove = function(inEvent) {
  if (!this.isEventSimulatedFromTouch_(inEvent)) {
    const e = prepareEvent(inEvent, this.dispatcher);
    this.dispatcher.move(e, inEvent);
  }
};


/**
 * Handler for `mouseup`.
 *
 * @param {MouseEvent} inEvent The in event.
 */
MouseSource.prototype.mouseup = function(inEvent) {
  if (!this.isEventSimulatedFromTouch_(inEvent)) {
    const p = this.pointerMap[POINTER_ID.toString()];

    if (p && p.button === inEvent.button) {
      const e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.up(e, inEvent);
      this.cleanupMouse();
    }
  }
};


/**
 * Handler for `mouseover`.
 *
 * @param {MouseEvent} inEvent The in event.
 */
MouseSource.prototype.mouseover = function(inEvent) {
  if (!this.isEventSimulatedFromTouch_(inEvent)) {
    const e = prepareEvent(inEvent, this.dispatcher);
    this.dispatcher.enterOver(e, inEvent);
  }
};


/**
 * Handler for `mouseout`.
 *
 * @param {MouseEvent} inEvent The in event.
 */
MouseSource.prototype.mouseout = function(inEvent) {
  if (!this.isEventSimulatedFromTouch_(inEvent)) {
    const e = prepareEvent(inEvent, this.dispatcher);
    this.dispatcher.leaveOut(e, inEvent);
  }
};


/**
 * Dispatches a `pointercancel` event.
 *
 * @param {Event} inEvent The in event.
 */
MouseSource.prototype.cancel = function(inEvent) {
  const e = prepareEvent(inEvent, this.dispatcher);
  this.dispatcher.cancel(e, inEvent);
  this.cleanupMouse();
};


/**
 * Remove the mouse from the list of active pointers.
 */
MouseSource.prototype.cleanupMouse = function() {
  delete this.pointerMap[POINTER_ID.toString()];
};
/* harmony default export */ __webpack_exports__["c"] = (MouseSource);


/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DEFAULT_WMS_VERSION; });
/**
 * Default WMS version.
 * @type {string}
 */
const DEFAULT_WMS_VERSION = '1.3.0';


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(29);
/* harmony import */ var _render_Event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(162);
/* harmony import */ var _render_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(78);
/* harmony import */ var _render_canvas_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26);
/* harmony import */ var _render_canvas_Immediate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(191);
/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(194);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(18);
/**
 * @module ol/renderer/canvas/Layer
 */










/**
 * @constructor
 * @abstract
 * @extends {module:ol/renderer/Layer}
 * @param {module:ol/layer/Layer} layer Layer.
 */
const CanvasLayerRenderer = function(layer) {

  _Layer_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].call(this, layer);

  /**
   * @protected
   * @type {number}
   */
  this.renderedResolution;

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.transform_ = Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* create */ "c"])();

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(CanvasLayerRenderer, _Layer_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]);


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/extent~Extent} extent Clip extent.
 * @protected
 */
CanvasLayerRenderer.prototype.clip = function(context, frameState, extent) {
  const pixelRatio = frameState.pixelRatio;
  const width = frameState.size[0] * pixelRatio;
  const height = frameState.size[1] * pixelRatio;
  const rotation = frameState.viewState.rotation;
  const topLeft = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* getTopLeft */ "C"])(/** @type {module:ol/extent~Extent} */ (extent));
  const topRight = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* getTopRight */ "D"])(/** @type {module:ol/extent~Extent} */ (extent));
  const bottomRight = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* getBottomRight */ "w"])(/** @type {module:ol/extent~Extent} */ (extent));
  const bottomLeft = Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* getBottomLeft */ "v"])(/** @type {module:ol/extent~Extent} */ (extent));

  Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* apply */ "a"])(frameState.coordinateToPixelTransform, topLeft);
  Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* apply */ "a"])(frameState.coordinateToPixelTransform, topRight);
  Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* apply */ "a"])(frameState.coordinateToPixelTransform, bottomRight);
  Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* apply */ "a"])(frameState.coordinateToPixelTransform, bottomLeft);

  context.save();
  Object(_render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* rotateAtOffset */ "s"])(context, -rotation, width / 2, height / 2);
  context.beginPath();
  context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);
  context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);
  context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);
  context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);
  context.clip();
  Object(_render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* rotateAtOffset */ "s"])(context, rotation, width / 2, height / 2);
};


/**
 * @param {module:ol/render/EventType} type Event type.
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/transform~Transform=} opt_transform Transform.
 * @private
 */
CanvasLayerRenderer.prototype.dispatchComposeEvent_ = function(type, context, frameState, opt_transform) {
  const layer = this.getLayer();
  if (layer.hasListener(type)) {
    const width = frameState.size[0] * frameState.pixelRatio;
    const height = frameState.size[1] * frameState.pixelRatio;
    const rotation = frameState.viewState.rotation;
    Object(_render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* rotateAtOffset */ "s"])(context, -rotation, width / 2, height / 2);
    const transform = opt_transform !== undefined ?
      opt_transform : this.getTransform(frameState, 0);
    const render = new _render_canvas_Immediate_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](
      context, frameState.pixelRatio, frameState.extent, transform,
      frameState.viewState.rotation);
    const composeEvent = new _render_Event_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](type, render, frameState,
      context, null);
    layer.dispatchEvent(composeEvent);
    Object(_render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* rotateAtOffset */ "s"])(context, rotation, width / 2, height / 2);
  }
};


/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/PluggableMap~FrameState} frameState FrameState.
 * @param {number} hitTolerance Hit tolerance in pixels.
 * @param {function(this: S, module:ol/layer/Layer, (Uint8ClampedArray|Uint8Array)): T} callback Layer
 *     callback.
 * @param {S} thisArg Value to use as `this` when executing `callback`.
 * @return {T|undefined} Callback result.
 * @template S,T,U
 */
CanvasLayerRenderer.prototype.forEachLayerAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg) {
  const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, _functions_js__WEBPACK_IMPORTED_MODULE_2__[/* TRUE */ "b"], this);

  if (hasFeature) {
    return callback.call(thisArg, this.getLayer(), null);
  } else {
    return undefined;
  }
};


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/layer/Layer~State} layerState Layer state.
 * @param {module:ol/transform~Transform=} opt_transform Transform.
 * @protected
 */
CanvasLayerRenderer.prototype.postCompose = function(context, frameState, layerState, opt_transform) {
  this.dispatchComposeEvent_(_render_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].POSTCOMPOSE, context, frameState, opt_transform);
};


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/transform~Transform=} opt_transform Transform.
 * @protected
 */
CanvasLayerRenderer.prototype.preCompose = function(context, frameState, opt_transform) {
  this.dispatchComposeEvent_(_render_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].PRECOMPOSE, context, frameState, opt_transform);
};


/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/transform~Transform=} opt_transform Transform.
 * @protected
 */
CanvasLayerRenderer.prototype.dispatchRenderEvent = function(context, frameState, opt_transform) {
  this.dispatchComposeEvent_(_render_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].RENDER, context, frameState, opt_transform);
};


/**
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {number} offsetX Offset on the x-axis in view coordinates.
 * @protected
 * @return {!module:ol/transform~Transform} Transform.
 */
CanvasLayerRenderer.prototype.getTransform = function(frameState, offsetX) {
  const viewState = frameState.viewState;
  const pixelRatio = frameState.pixelRatio;
  const dx1 = pixelRatio * frameState.size[0] / 2;
  const dy1 = pixelRatio * frameState.size[1] / 2;
  const sx = pixelRatio / viewState.resolution;
  const sy = -sx;
  const angle = -viewState.rotation;
  const dx2 = -viewState.center[0] + offsetX;
  const dy2 = -viewState.center[1];
  return Object(_transform_js__WEBPACK_IMPORTED_MODULE_8__[/* compose */ "b"])(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);
};


/**
 * @abstract
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/layer/Layer~State} layerState Layer state.
 * @param {CanvasRenderingContext2D} context Context.
 */
CanvasLayerRenderer.prototype.composeFrame = function(frameState, layerState, context) {};

/**
 * @abstract
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/layer/Layer~State} layerState Layer state.
 * @return {boolean} whether composeFrame should be called.
 */
CanvasLayerRenderer.prototype.prepareFrame = function(frameState, layerState) {};
/* harmony default export */ __webpack_exports__["a"] = (CanvasLayerRenderer);


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _coordinate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(34);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(29);
/* harmony import */ var _canvas_Layer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(170);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(18);
/**
 * @module ol/renderer/canvas/IntermediateCanvas
 */








/**
 * @constructor
 * @abstract
 * @extends {module:ol/renderer/canvas/Layer}
 * @param {module:ol/layer/Layer} layer Layer.
 */
const IntermediateCanvasRenderer = function(layer) {

  _canvas_Layer_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].call(this, layer);

  /**
   * @protected
   * @type {module:ol/transform~Transform}
   */
  this.coordinateToCanvasPixelTransform = Object(_transform_js__WEBPACK_IMPORTED_MODULE_6__[/* create */ "c"])();

  /**
   * @private
   * @type {CanvasRenderingContext2D}
   */
  this.hitCanvasContext_ = null;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(IntermediateCanvasRenderer, _canvas_Layer_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]);


/**
 * @inheritDoc
 */
IntermediateCanvasRenderer.prototype.composeFrame = function(frameState, layerState, context) {

  this.preCompose(context, frameState);

  const image = this.getImage();
  if (image) {

    // clipped rendering if layer extent is set
    const extent = layerState.extent;
    const clipped = extent !== undefined &&
        !Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* containsExtent */ "g"])(extent, frameState.extent) &&
        Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* intersects */ "F"])(extent, frameState.extent);
    if (clipped) {
      this.clip(context, frameState, /** @type {module:ol/extent~Extent} */ (extent));
    }

    const imageTransform = this.getImageTransform();
    // for performance reasons, context.save / context.restore is not used
    // to save and restore the transformation matrix and the opacity.
    // see http://jsperf.com/context-save-restore-versus-variable
    const alpha = context.globalAlpha;
    context.globalAlpha = layerState.opacity;

    // for performance reasons, context.setTransform is only used
    // when the view is rotated. see http://jsperf.com/canvas-transform
    const dx = imageTransform[4];
    const dy = imageTransform[5];
    const dw = image.width * imageTransform[0];
    const dh = image.height * imageTransform[3];
    context.drawImage(image, 0, 0, +image.width, +image.height,
      Math.round(dx), Math.round(dy), Math.round(dw), Math.round(dh));
    context.globalAlpha = alpha;

    if (clipped) {
      context.restore();
    }
  }

  this.postCompose(context, frameState, layerState);
};


/**
 * @abstract
 * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Canvas.
 */
IntermediateCanvasRenderer.prototype.getImage = function() {};


/**
 * @abstract
 * @return {!module:ol/transform~Transform} Image transform.
 */
IntermediateCanvasRenderer.prototype.getImageTransform = function() {};


/**
 * @inheritDoc
 */
IntermediateCanvasRenderer.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg) {
  const layer = this.getLayer();
  const source = layer.getSource();
  const resolution = frameState.viewState.resolution;
  const rotation = frameState.viewState.rotation;
  const skippedFeatureUids = frameState.skippedFeatureUids;
  return source.forEachFeatureAtCoordinate(
    coordinate, resolution, rotation, hitTolerance, skippedFeatureUids,
    /**
     * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.
     * @return {?} Callback result.
     */
    function(feature) {
      return callback.call(thisArg, feature, layer);
    });
};


/**
 * @inheritDoc
 */
IntermediateCanvasRenderer.prototype.forEachLayerAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg) {
  if (!this.getImage()) {
    return undefined;
  }

  if (this.getLayer().getSource().forEachFeatureAtCoordinate !== _functions_js__WEBPACK_IMPORTED_MODULE_4__[/* UNDEFINED */ "c"]) {
    // for ImageCanvas sources use the original hit-detection logic,
    // so that for example also transparent polygons are detected
    return _canvas_Layer_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].prototype.forEachLayerAtCoordinate.apply(this, arguments);
  } else {
    const pixel = Object(_transform_js__WEBPACK_IMPORTED_MODULE_6__[/* apply */ "a"])(this.coordinateToCanvasPixelTransform, coordinate.slice());
    Object(_coordinate_js__WEBPACK_IMPORTED_MODULE_1__[/* scale */ "i"])(pixel, frameState.viewState.resolution / this.renderedResolution);

    if (!this.hitCanvasContext_) {
      this.hitCanvasContext_ = Object(_dom_js__WEBPACK_IMPORTED_MODULE_2__[/* createCanvasContext2D */ "a"])(1, 1);
    }

    this.hitCanvasContext_.clearRect(0, 0, 1, 1);
    this.hitCanvasContext_.drawImage(this.getImage(), pixel[0], pixel[1], 1, 1, 0, 0, 1, 1);

    const imageData = this.hitCanvasContext_.getImageData(0, 0, 1, 1).data;
    if (imageData[3] > 0) {
      return callback.call(thisArg, this.getLayer(),  imageData);
    } else {
      return undefined;
    }
  }
};

/* harmony default export */ __webpack_exports__["a"] = (IntermediateCanvasRenderer);


/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(55);
/* harmony import */ var _geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(90);
/**
 * @module ol/geom/Circle
 */







/**
 * @classdesc
 * Circle geometry.
 *
 * @constructor
 * @extends {module:ol/geom/SimpleGeometry}
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number=} opt_radius Radius.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @api
 */
const Circle = function(center, opt_radius, opt_layout) {
  _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this);
  const radius = opt_radius ? opt_radius : 0;
  this.setCenterAndRadius(center, radius, opt_layout);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Circle, _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * Make a complete copy of the geometry.
 * @return {!module:ol/geom/Circle} Clone.
 * @override
 * @api
 */
Circle.prototype.clone = function() {
  const circle = new Circle(null);
  circle.setFlatCoordinates(this.layout, this.flatCoordinates.slice());
  return circle;
};


/**
 * @inheritDoc
 */
Circle.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
  const flatCoordinates = this.flatCoordinates;
  const dx = x - flatCoordinates[0];
  const dy = y - flatCoordinates[1];
  const squaredDistance = dx * dx + dy * dy;
  if (squaredDistance < minSquaredDistance) {
    if (squaredDistance === 0) {
      for (let i = 0; i < this.stride; ++i) {
        closestPoint[i] = flatCoordinates[i];
      }
    } else {
      const delta = this.getRadius() / Math.sqrt(squaredDistance);
      closestPoint[0] = flatCoordinates[0] + delta * dx;
      closestPoint[1] = flatCoordinates[1] + delta * dy;
      for (let i = 2; i < this.stride; ++i) {
        closestPoint[i] = flatCoordinates[i];
      }
    }
    closestPoint.length = this.stride;
    return squaredDistance;
  } else {
    return minSquaredDistance;
  }
};


/**
 * @inheritDoc
 */
Circle.prototype.containsXY = function(x, y) {
  const flatCoordinates = this.flatCoordinates;
  const dx = x - flatCoordinates[0];
  const dy = y - flatCoordinates[1];
  return dx * dx + dy * dy <= this.getRadiusSquared_();
};


/**
 * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
 * @return {module:ol/coordinate~Coordinate} Center.
 * @api
 */
Circle.prototype.getCenter = function() {
  return this.flatCoordinates.slice(0, this.stride);
};


/**
 * @inheritDoc
 */
Circle.prototype.computeExtent = function(extent) {
  const flatCoordinates = this.flatCoordinates;
  const radius = flatCoordinates[this.stride] - flatCoordinates[0];
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* createOrUpdate */ "k"])(
    flatCoordinates[0] - radius, flatCoordinates[1] - radius,
    flatCoordinates[0] + radius, flatCoordinates[1] + radius,
    extent);
};


/**
 * Return the radius of the circle.
 * @return {number} Radius.
 * @api
 */
Circle.prototype.getRadius = function() {
  return Math.sqrt(this.getRadiusSquared_());
};


/**
 * @private
 * @return {number} Radius squared.
 */
Circle.prototype.getRadiusSquared_ = function() {
  const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];
  const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];
  return dx * dx + dy * dy;
};


/**
 * @inheritDoc
 * @api
 */
Circle.prototype.getType = function() {
  return _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CIRCLE;
};


/**
 * @inheritDoc
 * @api
 */
Circle.prototype.intersectsExtent = function(extent) {
  const circleExtent = this.getExtent();
  if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* intersects */ "F"])(extent, circleExtent)) {
    const center = this.getCenter();

    if (extent[0] <= center[0] && extent[2] >= center[0]) {
      return true;
    }
    if (extent[1] <= center[1] && extent[3] >= center[1]) {
      return true;
    }

    return Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* forEachCorner */ "t"])(extent, this.intersectsCoordinate, this);
  }
  return false;

};


/**
 * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @api
 */
Circle.prototype.setCenter = function(center) {
  const stride = this.stride;
  const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];
  const flatCoordinates = center.slice();
  flatCoordinates[stride] = flatCoordinates[0] + radius;
  for (let i = 1; i < stride; ++i) {
    flatCoordinates[stride + i] = center[i];
  }
  this.setFlatCoordinates(this.layout, flatCoordinates);
};


/**
 * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as
 * number) of the circle.
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number} radius Radius.
 * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.
 * @api
 */
Circle.prototype.setCenterAndRadius = function(center, radius, opt_layout) {
  if (!center) {
    this.setFlatCoordinates(_geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].XY, null);
  } else {
    this.setLayout(opt_layout, center, 0);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    /** @type {Array.<number>} */
    const flatCoordinates = this.flatCoordinates;
    let offset = Object(_geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_5__[/* deflateCoordinate */ "a"])(
      flatCoordinates, 0, center, this.stride);
    flatCoordinates[offset++] = flatCoordinates[0] + radius;
    for (let i = 1, ii = this.stride; i < ii; ++i) {
      flatCoordinates[offset++] = flatCoordinates[i];
    }
    flatCoordinates.length = offset;
    this.changed();
  }
};


/**
 * @inheritDoc
 */
Circle.prototype.getCoordinates = function() {};


/**
 * @inheritDoc
 */
Circle.prototype.setCoordinates = function(coordinates, opt_layout) {};


/**
 * @param {module:ol/geom/GeometryLayout} layout Layout.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 */
Circle.prototype.setFlatCoordinates = function(layout, flatCoordinates) {
  this.setFlatCoordinatesInternal(layout, flatCoordinates);
  this.changed();
};


/**
 * Set the radius of the circle. The radius is in the units of the projection.
 * @param {number} radius Radius.
 * @api
 */
Circle.prototype.setRadius = function(radius) {
  this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;
  this.changed();
};


/**
 * Transform each coordinate of the circle from one coordinate reference system
 * to another. The geometry is modified in place.
 * If you do not want the geometry modified in place, first clone() it and
 * then use this function on the clone.
 *
 * Internally a circle is currently represented by two points: the center of
 * the circle `[cx, cy]`, and the point to the right of the circle
 * `[cx + r, cy]`. This `transform` function just transforms these two points.
 * So the resulting geometry is also a circle, and that circle does not
 * correspond to the shape that would be obtained by transforming every point
 * of the original circle.
 *
 * @param {module:ol/proj~ProjectionLike} source The current projection.  Can be a
 *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
 * @param {module:ol/proj~ProjectionLike} destination The desired projection.  Can be a
 *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
 * @return {module:ol/geom/Circle} This geometry.  Note that original geometry is
 *     modified in place.
 * @function
 * @api
 */
Circle.prototype.transform;
/* harmony default export */ __webpack_exports__["a"] = (Circle);


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _MapEvent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(133);
/**
 * @module ol/MapBrowserEvent
 */



/**
 * @classdesc
 * Events emitted as map browser events are instances of this type.
 * See {@link module:ol/Map~Map} for which events trigger a map browser event.
 *
 * @constructor
 * @extends {module:ol/MapEvent}
 * @param {string} type Event type.
 * @param {module:ol/PluggableMap} map Map.
 * @param {Event} browserEvent Browser event.
 * @param {boolean=} opt_dragging Is the map currently being dragged?
 * @param {?module:ol/PluggableMap~FrameState=} opt_frameState Frame state.
 */
const MapBrowserEvent = function(type, map, browserEvent, opt_dragging, opt_frameState) {

  _MapEvent_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, type, map, opt_frameState);

  /**
   * The original browser event.
   * @const
   * @type {Event}
   * @api
   */
  this.originalEvent = browserEvent;

  /**
   * The map pixel relative to the viewport corresponding to the original browser event.
   * @type {module:ol~Pixel}
   * @api
   */
  this.pixel = map.getEventPixel(browserEvent);

  /**
   * The coordinate in view projection corresponding to the original browser event.
   * @type {module:ol/coordinate~Coordinate}
   * @api
   */
  this.coordinate = map.getCoordinateFromPixel(this.pixel);

  /**
   * Indicates if the map is currently being dragged. Only set for
   * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
   *
   * @type {boolean}
   * @api
   */
  this.dragging = opt_dragging !== undefined ? opt_dragging : false;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MapBrowserEvent, _MapEvent_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * Prevents the default browser action.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault
 * @override
 * @api
 */
MapBrowserEvent.prototype.preventDefault = function() {
  _MapEvent_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].prototype.preventDefault.call(this);
  this.originalEvent.preventDefault();
};


/**
 * Prevents further propagation of the current event.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation
 * @override
 * @api
 */
MapBrowserEvent.prototype.stopPropagation = function() {
  _MapEvent_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].prototype.stopPropagation.call(this);
  this.originalEvent.stopPropagation();
};
/* harmony default export */ __webpack_exports__["a"] = (MapBrowserEvent);


/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return jsonp; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/**
 * @module ol/net
 */



/**
 * Simple JSONP helper. Supports error callbacks and a custom callback param.
 * The error callback will be called when no JSONP is executed after 10 seconds.
 *
 * @param {string} url Request url. A 'callback' query parameter will be
 *     appended.
 * @param {Function} callback Callback on success.
 * @param {function()=} opt_errback Callback on error.
 * @param {string=} opt_callbackParam Custom query parameter for the JSONP
 *     callback. Default is 'callback'.
 */
function jsonp(url, callback, opt_errback, opt_callbackParam) {
  const script = document.createElement('script');
  const key = 'olc_' + Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(callback);
  function cleanup() {
    delete window[key];
    script.parentNode.removeChild(script);
  }
  script.async = true;
  script.src = url + (url.indexOf('?') == -1 ? '?' : '&') +
      (opt_callbackParam || 'callback') + '=' + key;
  const timer = setTimeout(function() {
    cleanup();
    if (opt_errback) {
      opt_errback();
    }
  }, 10000);
  window[key] = function(data) {
    clearTimeout(timer);
    cleanup();
    callback(data);
  };
  document.getElementsByTagName('head')[0].appendChild(script);
}


/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);
/* harmony import */ var _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14);
/**
 * @module ol/structs/LRUCache
 */






/**
 * @typedef {Object} Entry
 * @property {string} key_
 * @property {Object} newer
 * @property {Object} older
 * @property {*} value_
 */


/**
 * Implements a Least-Recently-Used cache where the keys do not conflict with
 * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
 * items from the cache is the responsibility of the user.
 * @constructor
 * @extends {module:ol/events/EventTarget}
 * @fires module:ol/events/Event~Event
 * @struct
 * @template T
 * @param {number=} opt_highWaterMark High water mark.
 */
const LRUCache = function(opt_highWaterMark) {

  _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this);

  /**
   * @type {number}
   */
  this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;

  /**
   * @private
   * @type {number}
   */
  this.count_ = 0;

  /**
   * @private
   * @type {!Object.<string, module:ol/structs/LRUCache~Entry>}
   */
  this.entries_ = {};

  /**
   * @private
   * @type {?module:ol/structs/LRUCache~Entry}
   */
  this.oldest_ = null;

  /**
   * @private
   * @type {?module:ol/structs/LRUCache~Entry}
   */
  this.newest_ = null;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(LRUCache, _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * @return {boolean} Can expire cache.
 */
LRUCache.prototype.canExpireCache = function() {
  return this.getCount() > this.highWaterMark;
};


/**
 * FIXME empty description for jsdoc
 */
LRUCache.prototype.clear = function() {
  this.count_ = 0;
  this.entries_ = {};
  this.oldest_ = null;
  this.newest_ = null;
  this.dispatchEvent(_events_EventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CLEAR);
};


/**
 * @param {string} key Key.
 * @return {boolean} Contains key.
 */
LRUCache.prototype.containsKey = function(key) {
  return this.entries_.hasOwnProperty(key);
};


/**
 * @param {function(this: S, T, string, module:ol/structs/LRUCache): ?} f The function
 *     to call for every entry from the oldest to the newer. This function takes
 *     3 arguments (the entry value, the entry key and the LRUCache object).
 *     The return value is ignored.
 * @param {S=} opt_this The object to use as `this` in `f`.
 * @template S
 */
LRUCache.prototype.forEach = function(f, opt_this) {
  let entry = this.oldest_;
  while (entry) {
    f.call(opt_this, entry.value_, entry.key_, this);
    entry = entry.newer;
  }
};


/**
 * @param {string} key Key.
 * @return {T} Value.
 */
LRUCache.prototype.get = function(key) {
  const entry = this.entries_[key];
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(entry !== undefined,
    15); // Tried to get a value for a key that does not exist in the cache
  if (entry === this.newest_) {
    return entry.value_;
  } else if (entry === this.oldest_) {
    this.oldest_ = /** @type {module:ol/structs/LRUCache~Entry} */ (this.oldest_.newer);
    this.oldest_.older = null;
  } else {
    entry.newer.older = entry.older;
    entry.older.newer = entry.newer;
  }
  entry.newer = null;
  entry.older = this.newest_;
  this.newest_.newer = entry;
  this.newest_ = entry;
  return entry.value_;
};


/**
 * Remove an entry from the cache.
 * @param {string} key The entry key.
 * @return {T} The removed entry.
 */
LRUCache.prototype.remove = function(key) {
  const entry = this.entries_[key];
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
  if (entry === this.newest_) {
    this.newest_ = /** @type {module:ol/structs/LRUCache~Entry} */ (entry.older);
    if (this.newest_) {
      this.newest_.newer = null;
    }
  } else if (entry === this.oldest_) {
    this.oldest_ = /** @type {module:ol/structs/LRUCache~Entry} */ (entry.newer);
    if (this.oldest_) {
      this.oldest_.older = null;
    }
  } else {
    entry.newer.older = entry.older;
    entry.older.newer = entry.newer;
  }
  delete this.entries_[key];
  --this.count_;
  return entry.value_;
};


/**
 * @return {number} Count.
 */
LRUCache.prototype.getCount = function() {
  return this.count_;
};


/**
 * @return {Array.<string>} Keys.
 */
LRUCache.prototype.getKeys = function() {
  const keys = new Array(this.count_);
  let i = 0;
  let entry;
  for (entry = this.newest_; entry; entry = entry.older) {
    keys[i++] = entry.key_;
  }
  return keys;
};


/**
 * @return {Array.<T>} Values.
 */
LRUCache.prototype.getValues = function() {
  const values = new Array(this.count_);
  let i = 0;
  let entry;
  for (entry = this.newest_; entry; entry = entry.older) {
    values[i++] = entry.value_;
  }
  return values;
};


/**
 * @return {T} Last value.
 */
LRUCache.prototype.peekLast = function() {
  return this.oldest_.value_;
};


/**
 * @return {string} Last key.
 */
LRUCache.prototype.peekLastKey = function() {
  return this.oldest_.key_;
};


/**
 * Get the key of the newest item in the cache.  Throws if the cache is empty.
 * @return {string} The newest key.
 */
LRUCache.prototype.peekFirstKey = function() {
  return this.newest_.key_;
};


/**
 * @return {T} value Value.
 */
LRUCache.prototype.pop = function() {
  const entry = this.oldest_;
  delete this.entries_[entry.key_];
  if (entry.newer) {
    entry.newer.older = null;
  }
  this.oldest_ = /** @type {module:ol/structs/LRUCache~Entry} */ (entry.newer);
  if (!this.oldest_) {
    this.newest_ = null;
  }
  --this.count_;
  return entry.value_;
};


/**
 * @param {string} key Key.
 * @param {T} value Value.
 */
LRUCache.prototype.replace = function(key, value) {
  this.get(key);  // update `newest_`
  this.entries_[key].value_ = value;
};


/**
 * @param {string} key Key.
 * @param {T} value Value.
 */
LRUCache.prototype.set = function(key, value) {
  Object(_asserts_js__WEBPACK_IMPORTED_MODULE_1__[/* assert */ "a"])(!(key in this.entries_),
    16); // Tried to set a value for a key that is used already
  const entry = /** @type {module:ol/structs/LRUCache~Entry} */ ({
    key_: key,
    newer: null,
    older: this.newest_,
    value_: value
  });
  if (!this.newest_) {
    this.oldest_ = entry;
  } else {
    this.newest_.newer = entry;
  }
  this.newest_ = entry;
  this.entries_[key] = entry;
  ++this.count_;
};


/**
 * Set a maximum number of entries for the cache.
 * @param {number} size Cache size.
 * @api
 */
LRUCache.prototype.setSize = function(size) {
  this.highWaterMark = size;
};


/**
 * Prune the cache.
 */
LRUCache.prototype.prune = function() {
  while (this.canExpireCache()) {
    this.pop();
  }
};
/* harmony default export */ __webpack_exports__["a"] = (LRUCache);


/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/interaction/Property
 */

/**
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  ACTIVE: 'active'
});


/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getInteriorPointOfArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getInteriorPointsOfMultiArray; });
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _flat_contains_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(112);
/**
 * @module ol/geom/flat/interiorpoint
 */




/**
 * Calculates a point that is likely to lie in the interior of the linear rings.
 * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {Array.<number>} flatCenters Flat centers.
 * @param {number} flatCentersOffset Flat center offset.
 * @param {Array.<number>=} opt_dest Destination.
 * @return {Array.<number>} Destination point as XYM coordinate, where M is the
 * length of the horizontal intersection that the point belongs to.
 */
function getInteriorPointOfArray(flatCoordinates, offset,
  ends, stride, flatCenters, flatCentersOffset, opt_dest) {
  let i, ii, x, x1, x2, y1, y2;
  const y = flatCenters[flatCentersOffset + 1];
  /** @type {Array.<number>} */
  const intersections = [];
  // Calculate intersections with the horizontal line
  for (let r = 0, rr = ends.length; r < rr; ++r) {
    const end = ends[r];
    x1 = flatCoordinates[end - stride];
    y1 = flatCoordinates[end - stride + 1];
    for (i = offset; i < end; i += stride) {
      x2 = flatCoordinates[i];
      y2 = flatCoordinates[i + 1];
      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
        x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;
        intersections.push(x);
      }
      x1 = x2;
      y1 = y2;
    }
  }
  // Find the longest segment of the horizontal line that has its center point
  // inside the linear ring.
  let pointX = NaN;
  let maxSegmentLength = -Infinity;
  intersections.sort(_array_js__WEBPACK_IMPORTED_MODULE_0__[/* numberSafeCompareFunction */ "i"]);
  x1 = intersections[0];
  for (i = 1, ii = intersections.length; i < ii; ++i) {
    x2 = intersections[i];
    const segmentLength = Math.abs(x2 - x1);
    if (segmentLength > maxSegmentLength) {
      x = (x1 + x2) / 2;
      if (Object(_flat_contains_js__WEBPACK_IMPORTED_MODULE_1__[/* linearRingsContainsXY */ "c"])(flatCoordinates, offset, ends, stride, x, y)) {
        pointX = x;
        maxSegmentLength = segmentLength;
      }
    }
    x1 = x2;
  }
  if (isNaN(pointX)) {
    // There is no horizontal line that has its center point inside the linear
    // ring.  Use the center of the the linear ring's extent.
    pointX = flatCenters[flatCentersOffset];
  }
  if (opt_dest) {
    opt_dest.push(pointX, y, maxSegmentLength);
    return opt_dest;
  } else {
    return [pointX, y, maxSegmentLength];
  }
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {Array.<number>} flatCenters Flat centers.
 * @return {Array.<number>} Interior points as XYM coordinates, where M is the
 * length of the horizontal intersection that the point belongs to.
 */
function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {
  let interiorPoints = [];
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    interiorPoints = getInteriorPointOfArray(flatCoordinates,
      offset, ends, stride, flatCenters, 2 * i, interiorPoints);
    offset = ends[ends.length - 1];
  }
  return interiorPoints;
}


/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/asserts.js
var asserts = __webpack_require__(27);

// CONCATENATED MODULE: ../src/ol/format/filter/Filter.js
/**
 * @module ol/format/filter/Filter
 */


/**
 * @classdesc
 * Abstract class; normally only used for creating subclasses and not instantiated in apps.
 * Base class for WFS GetFeature filters.
 *
 * @constructor
 * @abstract
 * @param {!string} tagName The XML tag name for this filter.
 * @struct
 */
const Filter = function(tagName) {

  /**
   * @private
   * @type {!string}
   */
  this.tagName_ = tagName;
};

/**
 * The XML tag name for a filter.
 * @returns {!string} Name.
 */
Filter.prototype.getTagName = function() {
  return this.tagName_;
};

/* harmony default export */ var filter_Filter = (Filter);

// CONCATENATED MODULE: ../src/ol/format/filter/LogicalNary.js
/**
 * @module ol/format/filter/LogicalNary
 */




/**
 * @classdesc
 * Abstract class; normally only used for creating subclasses and not instantiated in apps.
 * Base class for WFS GetFeature n-ary logical filters.
 *
 * @constructor
 * @abstract
 * @param {!string} tagName The XML tag name for this filter.
 * @param {...module:ol/format/filter/Filter} conditions Conditions.
 * @extends {module:ol/format/filter/Filter}
 */
const LogicalNary = function(tagName, conditions) {

  filter_Filter.call(this, tagName);

  /**
   * @type {Array.<module:ol/format/filter/Filter>}
   */
  this.conditions = Array.prototype.slice.call(arguments, 1);
  Object(asserts["a" /* assert */])(this.conditions.length >= 2, 57); // At least 2 conditions are required.
};

Object(util["c" /* inherits */])(LogicalNary, filter_Filter);
/* harmony default export */ var filter_LogicalNary = (LogicalNary);

// CONCATENATED MODULE: ../src/ol/format/filter/And.js
/**
 * @module ol/format/filter/And
 */



/**
 * @classdesc
 * Represents a logical `<And>` operator between two or more filter conditions.
 *
 * @constructor
 * @abstract
 * @param {...module:ol/format/filter/Filter} conditions Conditions.
 * @extends {module:ol/format/filter/LogicalNary}
 */
const And = function(conditions) {
  const params = ['And'].concat(Array.prototype.slice.call(arguments));
  filter_LogicalNary.apply(this, params);
};

Object(util["c" /* inherits */])(And, filter_LogicalNary);

/* harmony default export */ var filter_And = (And);

// CONCATENATED MODULE: ../src/ol/format/filter/Bbox.js
/**
 * @module ol/format/filter/Bbox
 */



/**
 * @classdesc
 * Represents a `<BBOX>` operator to test whether a geometry-valued property
 * intersects a fixed bounding box
 *
 * @constructor
 * @param {!string} geometryName Geometry name to use.
 * @param {!module:ol/extent~Extent} extent Extent.
 * @param {string=} opt_srsName SRS name. No srsName attribute will be
 *    set on geometries when this is not provided.
 * @extends {module:ol/format/filter/Filter}
 * @api
 */
const Bbox = function(geometryName, extent, opt_srsName) {

  filter_Filter.call(this, 'BBOX');

  /**
   * @type {!string}
   */
  this.geometryName = geometryName;

  /**
   * @type {module:ol/extent~Extent}
   */
  this.extent = extent;

  /**
   * @type {string|undefined}
   */
  this.srsName = opt_srsName;
};

Object(util["c" /* inherits */])(Bbox, filter_Filter);

/* harmony default export */ var filter_Bbox = (Bbox);

// CONCATENATED MODULE: ../src/ol/format/filter/Spatial.js
/**
 * @module ol/format/filter/Spatial
 */



/**
 * @classdesc
 * Abstract class; normally only used for creating subclasses and not instantiated in apps.
 * Represents a spatial operator to test whether a geometry-valued property
 * relates to a given geometry.
 *
 * @constructor
 * @abstract
 * @param {!string} tagName The XML tag name for this filter.
 * @param {!string} geometryName Geometry name to use.
 * @param {!module:ol/geom/Geometry} geometry Geometry.
 * @param {string=} opt_srsName SRS name. No srsName attribute will be
 *    set on geometries when this is not provided.
 * @extends {module:ol/format/filter/Filter}
 */
const Spatial = function(tagName, geometryName, geometry, opt_srsName) {

  filter_Filter.call(this, tagName);

  /**
   * @type {!string}
   */
  this.geometryName = geometryName || 'the_geom';

  /**
   * @type {module:ol/geom/Geometry}
   */
  this.geometry = geometry;

  /**
   * @type {string|undefined}
   */
  this.srsName = opt_srsName;
};

Object(util["c" /* inherits */])(Spatial, filter_Filter);

/* harmony default export */ var filter_Spatial = (Spatial);

// CONCATENATED MODULE: ../src/ol/format/filter/Contains.js
/**
 * @module ol/format/filter/Contains
 */



/**
 * @classdesc
 * Represents a `<Contains>` operator to test whether a geometry-valued property
 * contains a given geometry.
 *
 * @constructor
 * @param {!string} geometryName Geometry name to use.
 * @param {!module:ol/geom/Geometry} geometry Geometry.
 * @param {string=} opt_srsName SRS name. No srsName attribute will be
 *    set on geometries when this is not provided.
 * @extends {module:ol/format/filter/Spatial}
 * @api
 */
const Contains = function(geometryName, geometry, opt_srsName) {

  filter_Spatial.call(this, 'Contains', geometryName, geometry, opt_srsName);

};

Object(util["c" /* inherits */])(Contains, filter_Spatial);
/* harmony default export */ var filter_Contains = (Contains);

// CONCATENATED MODULE: ../src/ol/format/filter/Comparison.js
/**
 * @module ol/format/filter/Comparison
 */



/**
 * @classdesc
 * Abstract class; normally only used for creating subclasses and not instantiated in apps.
 * Base class for WFS GetFeature property comparison filters.
 *
 * @constructor
 * @abstract
 * @param {!string} tagName The XML tag name for this filter.
 * @param {!string} propertyName Name of the context property to compare.
 * @extends {module:ol/format/filter/Filter}
 */
const Comparison = function(tagName, propertyName) {

  filter_Filter.call(this, tagName);

  /**
   * @type {!string}
   */
  this.propertyName = propertyName;
};

Object(util["c" /* inherits */])(Comparison, filter_Filter);

/* harmony default export */ var filter_Comparison = (Comparison);

// CONCATENATED MODULE: ../src/ol/format/filter/During.js
/**
 * @module ol/format/filter/During
 */



/**
 * @classdesc
 * Represents a `<During>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!string} begin The begin date in ISO-8601 format.
 * @param {!string} end The end date in ISO-8601 format.
 * @extends {module:ol/format/filter/Comparison}
 * @api
 */
const During = function(propertyName, begin, end) {
  filter_Comparison.call(this, 'During', propertyName);

  /**
   * @type {!string}
   */
  this.begin = begin;

  /**
   * @type {!string}
   */
  this.end = end;
};

Object(util["c" /* inherits */])(During, filter_Comparison);
/* harmony default export */ var filter_During = (During);

// CONCATENATED MODULE: ../src/ol/format/filter/ComparisonBinary.js
/**
 * @module ol/format/filter/ComparisonBinary
 */



/**
 * @classdesc
 * Abstract class; normally only used for creating subclasses and not instantiated in apps.
 * Base class for WFS GetFeature property binary comparison filters.
 *
 * @constructor
 * @abstract
 * @param {!string} tagName The XML tag name for this filter.
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!(string|number)} expression The value to compare.
 * @param {boolean=} opt_matchCase Case-sensitive?
 * @extends {module:ol/format/filter/Comparison}
 */
const ComparisonBinary = function(tagName, propertyName, expression, opt_matchCase) {

  filter_Comparison.call(this, tagName, propertyName);

  /**
   * @type {!(string|number)}
   */
  this.expression = expression;

  /**
   * @type {boolean|undefined}
   */
  this.matchCase = opt_matchCase;
};

Object(util["c" /* inherits */])(ComparisonBinary, filter_Comparison);
/* harmony default export */ var filter_ComparisonBinary = (ComparisonBinary);

// CONCATENATED MODULE: ../src/ol/format/filter/EqualTo.js
/**
 * @module ol/format/filter/EqualTo
 */



/**
 * @classdesc
 * Represents a `<PropertyIsEqualTo>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!(string|number)} expression The value to compare.
 * @param {boolean=} opt_matchCase Case-sensitive?
 * @extends {module:ol/format/filter/ComparisonBinary}
 * @api
 */
const EqualTo = function(propertyName, expression, opt_matchCase) {
  filter_ComparisonBinary.call(this, 'PropertyIsEqualTo', propertyName, expression, opt_matchCase);
};

Object(util["c" /* inherits */])(EqualTo, filter_ComparisonBinary);
/* harmony default export */ var filter_EqualTo = (EqualTo);

// CONCATENATED MODULE: ../src/ol/format/filter/GreaterThan.js
/**
 * @module ol/format/filter/GreaterThan
 */



/**
 * @classdesc
 * Represents a `<PropertyIsGreaterThan>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} expression The value to compare.
 * @extends {module:ol/format/filter/ComparisonBinary}
 * @api
 */
const GreaterThan = function(propertyName, expression) {
  filter_ComparisonBinary.call(this, 'PropertyIsGreaterThan', propertyName, expression);
};

Object(util["c" /* inherits */])(GreaterThan, filter_ComparisonBinary);
/* harmony default export */ var filter_GreaterThan = (GreaterThan);

// CONCATENATED MODULE: ../src/ol/format/filter/GreaterThanOrEqualTo.js
/**
 * @module ol/format/filter/GreaterThanOrEqualTo
 */



/**
 * @classdesc
 * Represents a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} expression The value to compare.
 * @extends {module:ol/format/filter/ComparisonBinary}
 * @api
 */
const GreaterThanOrEqualTo = function(propertyName, expression) {
  filter_ComparisonBinary.call(this, 'PropertyIsGreaterThanOrEqualTo', propertyName, expression);
};

Object(util["c" /* inherits */])(GreaterThanOrEqualTo, filter_ComparisonBinary);
/* harmony default export */ var filter_GreaterThanOrEqualTo = (GreaterThanOrEqualTo);

// CONCATENATED MODULE: ../src/ol/format/filter/Intersects.js
/**
 * @module ol/format/filter/Intersects
 */



/**
 * @classdesc
 * Represents a `<Intersects>` operator to test whether a geometry-valued property
 * intersects a given geometry.
 *
 * @constructor
 * @param {!string} geometryName Geometry name to use.
 * @param {!module:ol/geom/Geometry} geometry Geometry.
 * @param {string=} opt_srsName SRS name. No srsName attribute will be
 *    set on geometries when this is not provided.
 * @extends {module:ol/format/filter/Spatial}
 * @api
 */
const Intersects = function(geometryName, geometry, opt_srsName) {

  filter_Spatial.call(this, 'Intersects', geometryName, geometry, opt_srsName);

};

Object(util["c" /* inherits */])(Intersects, filter_Spatial);
/* harmony default export */ var filter_Intersects = (Intersects);

// CONCATENATED MODULE: ../src/ol/format/filter/IsBetween.js
/**
 * @module ol/format/filter/IsBetween
 */



/**
 * @classdesc
 * Represents a `<PropertyIsBetween>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} lowerBoundary The lower bound of the range.
 * @param {!number} upperBoundary The upper bound of the range.
 * @extends {module:ol/format/filter/Comparison}
 * @api
 */
const IsBetween = function(propertyName, lowerBoundary, upperBoundary) {
  filter_Comparison.call(this, 'PropertyIsBetween', propertyName);

  /**
   * @type {!number}
   */
  this.lowerBoundary = lowerBoundary;

  /**
   * @type {!number}
   */
  this.upperBoundary = upperBoundary;
};

Object(util["c" /* inherits */])(IsBetween, filter_Comparison);
/* harmony default export */ var filter_IsBetween = (IsBetween);

// CONCATENATED MODULE: ../src/ol/format/filter/IsLike.js
/**
 * @module ol/format/filter/IsLike
 */



/**
 * @classdesc
 * Represents a `<PropertyIsLike>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!string} pattern Text pattern.
 * @param {string=} opt_wildCard Pattern character which matches any sequence of
 *    zero or more string characters. Default is '*'.
 * @param {string=} opt_singleChar pattern character which matches any single
 *    string character. Default is '.'.
 * @param {string=} opt_escapeChar Escape character which can be used to escape
 *    the pattern characters. Default is '!'.
 * @param {boolean=} opt_matchCase Case-sensitive?
 * @extends {module:ol/format/filter/Comparison}
 * @api
 */
const IsLike = function(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {
  filter_Comparison.call(this, 'PropertyIsLike', propertyName);

  /**
   * @type {!string}
   */
  this.pattern = pattern;

  /**
   * @type {!string}
   */
  this.wildCard = (opt_wildCard !== undefined) ? opt_wildCard : '*';

  /**
   * @type {!string}
   */
  this.singleChar = (opt_singleChar !== undefined) ? opt_singleChar : '.';

  /**
   * @type {!string}
   */
  this.escapeChar = (opt_escapeChar !== undefined) ? opt_escapeChar : '!';

  /**
   * @type {boolean|undefined}
   */
  this.matchCase = opt_matchCase;
};

Object(util["c" /* inherits */])(IsLike, filter_Comparison);
/* harmony default export */ var filter_IsLike = (IsLike);

// CONCATENATED MODULE: ../src/ol/format/filter/IsNull.js
/**
 * @module ol/format/filter/IsNull
 */



/**
 * @classdesc
 * Represents a `<PropertyIsNull>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @extends {module:ol/format/filter/Comparison}
 * @api
 */
const IsNull = function(propertyName) {
  filter_Comparison.call(this, 'PropertyIsNull', propertyName);
};

Object(util["c" /* inherits */])(IsNull, filter_Comparison);
/* harmony default export */ var filter_IsNull = (IsNull);

// CONCATENATED MODULE: ../src/ol/format/filter/LessThan.js
/**
 * @module ol/format/filter/LessThan
 */



/**
 * @classdesc
 * Represents a `<PropertyIsLessThan>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} expression The value to compare.
 * @extends {module:ol/format/filter/ComparisonBinary}
 * @api
 */
const LessThan = function(propertyName, expression) {
  filter_ComparisonBinary.call(this, 'PropertyIsLessThan', propertyName, expression);
};

Object(util["c" /* inherits */])(LessThan, filter_ComparisonBinary);
/* harmony default export */ var filter_LessThan = (LessThan);

// CONCATENATED MODULE: ../src/ol/format/filter/LessThanOrEqualTo.js
/**
 * @module ol/format/filter/LessThanOrEqualTo
 */



/**
 * @classdesc
 * Represents a `<PropertyIsLessThanOrEqualTo>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} expression The value to compare.
 * @extends {module:ol/format/filter/ComparisonBinary}
 * @api
 */
const LessThanOrEqualTo = function(propertyName, expression) {
  filter_ComparisonBinary.call(this, 'PropertyIsLessThanOrEqualTo', propertyName, expression);
};

Object(util["c" /* inherits */])(LessThanOrEqualTo, filter_ComparisonBinary);
/* harmony default export */ var filter_LessThanOrEqualTo = (LessThanOrEqualTo);

// CONCATENATED MODULE: ../src/ol/format/filter/Not.js
/**
 * @module ol/format/filter/Not
 */



/**
 * @classdesc
 * Represents a logical `<Not>` operator for a filter condition.
 *
 * @constructor
 * @param {!module:ol/format/filter/Filter} condition Filter condition.
 * @extends {module:ol/format/filter/Filter}
 * @api
 */
const Not = function(condition) {

  filter_Filter.call(this, 'Not');

  /**
   * @type {!module:ol/format/filter/Filter}
   */
  this.condition = condition;
};

Object(util["c" /* inherits */])(Not, filter_Filter);
/* harmony default export */ var filter_Not = (Not);

// CONCATENATED MODULE: ../src/ol/format/filter/NotEqualTo.js
/**
 * @module ol/format/filter/NotEqualTo
 */



/**
 * @classdesc
 * Represents a `<PropertyIsNotEqualTo>` comparison operator.
 *
 * @constructor
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!(string|number)} expression The value to compare.
 * @param {boolean=} opt_matchCase Case-sensitive?
 * @extends {module:ol/format/filter/ComparisonBinary}
 * @api
 */
const NotEqualTo = function(propertyName, expression, opt_matchCase) {
  filter_ComparisonBinary.call(this, 'PropertyIsNotEqualTo', propertyName, expression, opt_matchCase);
};

Object(util["c" /* inherits */])(NotEqualTo, filter_ComparisonBinary);
/* harmony default export */ var filter_NotEqualTo = (NotEqualTo);

// CONCATENATED MODULE: ../src/ol/format/filter/Or.js
/**
 * @module ol/format/filter/Or
 */



/**
 * @classdesc
 * Represents a logical `<Or>` operator between two ore more filter conditions.
 *
 * @constructor
 * @param {...module:ol/format/filter/Filter} conditions Conditions.
 * @extends {module:ol/format/filter/LogicalNary}
 * @api
 */
const Or = function(conditions) {
  const params = ['Or'].concat(Array.prototype.slice.call(arguments));
  filter_LogicalNary.apply(this, params);
};

Object(util["c" /* inherits */])(Or, filter_LogicalNary);
/* harmony default export */ var filter_Or = (Or);

// CONCATENATED MODULE: ../src/ol/format/filter/Within.js
/**
 * @module ol/format/filter/Within
 */



/**
 * @classdesc
 * Represents a `<Within>` operator to test whether a geometry-valued property
 * is within a given geometry.
 *
 * @constructor
 * @param {!string} geometryName Geometry name to use.
 * @param {!module:ol/geom/Geometry} geometry Geometry.
 * @param {string=} opt_srsName SRS name. No srsName attribute will be
 *    set on geometries when this is not provided.
 * @extends {module:ol/format/filter/Spatial}
 * @api
 */
const Within = function(geometryName, geometry, opt_srsName) {

  filter_Spatial.call(this, 'Within', geometryName, geometry, opt_srsName);

};

Object(util["c" /* inherits */])(Within, filter_Spatial);
/* harmony default export */ var filter_Within = (Within);

// CONCATENATED MODULE: ../src/ol/format/filter.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return and; });
/* unused harmony export or */
/* unused harmony export not */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return bbox; });
/* unused harmony export contains */
/* unused harmony export intersects */
/* unused harmony export within */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return equalTo; });
/* unused harmony export notEqualTo */
/* unused harmony export lessThan */
/* unused harmony export lessThanOrEqualTo */
/* unused harmony export greaterThan */
/* unused harmony export greaterThanOrEqualTo */
/* unused harmony export isNull */
/* unused harmony export between */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return like; });
/* unused harmony export during */
/**
 * @module ol/format/filter
 */



















/**
 * Create a logical `<And>` operator between two or more filter conditions.
 *
 * @param {...module:ol/format/filter/Filter} conditions Filter conditions.
 * @returns {!module:ol/format/filter/And} `<And>` operator.
 * @api
 */
function and(conditions) {
  const params = [null].concat(Array.prototype.slice.call(arguments));
  return new (Function.prototype.bind.apply(filter_And, params));
}


/**
 * Create a logical `<Or>` operator between two or more filter conditions.
 *
 * @param {...module:ol/format/filter/Filter} conditions Filter conditions.
 * @returns {!module:ol/format/filter/Or} `<Or>` operator.
 * @api
 */
function or(conditions) {
  const params = [null].concat(Array.prototype.slice.call(arguments));
  return new (Function.prototype.bind.apply(filter_Or, params));
}


/**
 * Represents a logical `<Not>` operator for a filter condition.
 *
 * @param {!module:ol/format/filter/Filter} condition Filter condition.
 * @returns {!module:ol/format/filter/Not} `<Not>` operator.
 * @api
 */
function not(condition) {
  return new filter_Not(condition);
}


/**
 * Create a `<BBOX>` operator to test whether a geometry-valued property
 * intersects a fixed bounding box
 *
 * @param {!string} geometryName Geometry name to use.
 * @param {!module:ol/extent~Extent} extent Extent.
 * @param {string=} opt_srsName SRS name. No srsName attribute will be
 *    set on geometries when this is not provided.
 * @returns {!module:ol/format/filter/Bbox} `<BBOX>` operator.
 * @api
 */
function bbox(geometryName, extent, opt_srsName) {
  return new filter_Bbox(geometryName, extent, opt_srsName);
}

/**
 * Create a `<Contains>` operator to test whether a geometry-valued property
 * contains a given geometry.
 *
 * @param {!string} geometryName Geometry name to use.
 * @param {!module:ol/geom/Geometry} geometry Geometry.
 * @param {string=} opt_srsName SRS name. No srsName attribute will be
 *    set on geometries when this is not provided.
 * @returns {!module:ol/format/filter/Contains} `<Contains>` operator.
 * @api
 */
function contains(geometryName, geometry, opt_srsName) {
  return new filter_Contains(geometryName, geometry, opt_srsName);
}

/**
 * Create a `<Intersects>` operator to test whether a geometry-valued property
 * intersects a given geometry.
 *
 * @param {!string} geometryName Geometry name to use.
 * @param {!module:ol/geom/Geometry} geometry Geometry.
 * @param {string=} opt_srsName SRS name. No srsName attribute will be
 *    set on geometries when this is not provided.
 * @returns {!module:ol/format/filter/Intersects} `<Intersects>` operator.
 * @api
 */
function intersects(geometryName, geometry, opt_srsName) {
  return new filter_Intersects(geometryName, geometry, opt_srsName);
}

/**
 * Create a `<Within>` operator to test whether a geometry-valued property
 * is within a given geometry.
 *
 * @param {!string} geometryName Geometry name to use.
 * @param {!module:ol/geom/Geometry} geometry Geometry.
 * @param {string=} opt_srsName SRS name. No srsName attribute will be
 *    set on geometries when this is not provided.
 * @returns {!module:ol/format/filter/Within} `<Within>` operator.
 * @api
 */
function within(geometryName, geometry, opt_srsName) {
  return new filter_Within(geometryName, geometry, opt_srsName);
}


/**
 * Creates a `<PropertyIsEqualTo>` comparison operator.
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!(string|number)} expression The value to compare.
 * @param {boolean=} opt_matchCase Case-sensitive?
 * @returns {!module:ol/format/filter/EqualTo} `<PropertyIsEqualTo>` operator.
 * @api
 */
function equalTo(propertyName, expression, opt_matchCase) {
  return new filter_EqualTo(propertyName, expression, opt_matchCase);
}


/**
 * Creates a `<PropertyIsNotEqualTo>` comparison operator.
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!(string|number)} expression The value to compare.
 * @param {boolean=} opt_matchCase Case-sensitive?
 * @returns {!module:ol/format/filter/NotEqualTo} `<PropertyIsNotEqualTo>` operator.
 * @api
 */
function notEqualTo(propertyName, expression, opt_matchCase) {
  return new filter_NotEqualTo(propertyName, expression, opt_matchCase);
}


/**
 * Creates a `<PropertyIsLessThan>` comparison operator.
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} expression The value to compare.
 * @returns {!module:ol/format/filter/LessThan} `<PropertyIsLessThan>` operator.
 * @api
 */
function lessThan(propertyName, expression) {
  return new filter_LessThan(propertyName, expression);
}


/**
 * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} expression The value to compare.
 * @returns {!module:ol/format/filter/LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.
 * @api
 */
function lessThanOrEqualTo(propertyName, expression) {
  return new filter_LessThanOrEqualTo(propertyName, expression);
}


/**
 * Creates a `<PropertyIsGreaterThan>` comparison operator.
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} expression The value to compare.
 * @returns {!module:ol/format/filter/GreaterThan} `<PropertyIsGreaterThan>` operator.
 * @api
 */
function greaterThan(propertyName, expression) {
  return new filter_GreaterThan(propertyName, expression);
}


/**
 * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} expression The value to compare.
 * @returns {!module:ol/format/filter/GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.
 * @api
 */
function greaterThanOrEqualTo(propertyName, expression) {
  return new filter_GreaterThanOrEqualTo(propertyName, expression);
}


/**
 * Creates a `<PropertyIsNull>` comparison operator to test whether a property value
 * is null.
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @returns {!module:ol/format/filter/IsNull} `<PropertyIsNull>` operator.
 * @api
 */
function isNull(propertyName) {
  return new filter_IsNull(propertyName);
}


/**
 * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression
 * value lies within a range given by a lower and upper bound (inclusive).
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!number} lowerBoundary The lower bound of the range.
 * @param {!number} upperBoundary The upper bound of the range.
 * @returns {!module:ol/format/filter/IsBetween} `<PropertyIsBetween>` operator.
 * @api
 */
function between(propertyName, lowerBoundary, upperBoundary) {
  return new filter_IsBetween(propertyName, lowerBoundary, upperBoundary);
}


/**
 * Represents a `<PropertyIsLike>` comparison operator that matches a string property
 * value against a text pattern.
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!string} pattern Text pattern.
 * @param {string=} opt_wildCard Pattern character which matches any sequence of
 *    zero or more string characters. Default is '*'.
 * @param {string=} opt_singleChar pattern character which matches any single
 *    string character. Default is '.'.
 * @param {string=} opt_escapeChar Escape character which can be used to escape
 *    the pattern characters. Default is '!'.
 * @param {boolean=} opt_matchCase Case-sensitive?
 * @returns {!module:ol/format/filter/IsLike} `<PropertyIsLike>` operator.
 * @api
 */
function like(propertyName, pattern,
  opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {
  return new filter_IsLike(propertyName, pattern,
    opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase);
}


/**
 * Create a `<During>` temporal operator.
 *
 * @param {!string} propertyName Name of the context property to compare.
 * @param {!string} begin The begin date in ISO-8601 format.
 * @param {!string} end The end date in ISO-8601 format.
 * @returns {!module:ol/format/filter/During} `<During>` operator.
 * @api
 */
function during(propertyName, begin, end) {
  return new filter_During(propertyName, begin, end);
}


/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/extent/Corner
 */

/**
 * Extent corner.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  BOTTOM_LEFT: 'bottom-left',
  BOTTOM_RIGHT: 'bottom-right',
  TOP_LEFT: 'top-left',
  TOP_RIGHT: 'top-right'
});


/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/coordinate.js
var ol_coordinate = __webpack_require__(34);

// EXTERNAL MODULE: ../src/ol/events.js
var events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/extent.js
var ol_extent = __webpack_require__(3);

// EXTERNAL MODULE: ../src/ol/geom/GeometryLayout.js
var GeometryLayout = __webpack_require__(22);

// EXTERNAL MODULE: ../src/ol/geom/LineString.js
var LineString = __webpack_require__(41);

// EXTERNAL MODULE: ../src/ol/geom/Point.js
var Point = __webpack_require__(30);

// EXTERNAL MODULE: ../src/ol/math.js
var math = __webpack_require__(21);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// CONCATENATED MODULE: ../src/ol/geom/flat/geodesic.js
/**
 * @module ol/geom/flat/geodesic
 */




/**
 * @param {function(number): module:ol/coordinate~Coordinate} interpolate Interpolate function.
 * @param {module:ol/proj~TransformFunction} transform Transform from longitude/latitude to
 *     projected coordinates.
 * @param {number} squaredTolerance Squared tolerance.
 * @return {Array.<number>} Flat coordinates.
 */
function geodesic_line(interpolate, transform, squaredTolerance) {
  // FIXME reduce garbage generation
  // FIXME optimize stack operations

  /** @type {Array.<number>} */
  const flatCoordinates = [];

  let geoA = interpolate(0);
  let geoB = interpolate(1);

  let a = transform(geoA);
  let b = transform(geoB);

  /** @type {Array.<module:ol/coordinate~Coordinate>} */
  const geoStack = [geoB, geoA];
  /** @type {Array.<module:ol/coordinate~Coordinate>} */
  const stack = [b, a];
  /** @type {Array.<number>} */
  const fractionStack = [1, 0];

  /** @type {!Object.<string, boolean>} */
  const fractions = {};

  let maxIterations = 1e5;
  let geoM, m, fracA, fracB, fracM, key;

  while (--maxIterations > 0 && fractionStack.length > 0) {
    // Pop the a coordinate off the stack
    fracA = fractionStack.pop();
    geoA = geoStack.pop();
    a = stack.pop();
    // Add the a coordinate if it has not been added yet
    key = fracA.toString();
    if (!(key in fractions)) {
      flatCoordinates.push(a[0], a[1]);
      fractions[key] = true;
    }
    // Pop the b coordinate off the stack
    fracB = fractionStack.pop();
    geoB = geoStack.pop();
    b = stack.pop();
    // Find the m point between the a and b coordinates
    fracM = (fracA + fracB) / 2;
    geoM = interpolate(fracM);
    m = transform(geoM);
    if (Object(math["h" /* squaredSegmentDistance */])(m[0], m[1], a[0], a[1],
      b[0], b[1]) < squaredTolerance) {
      // If the m point is sufficiently close to the straight line, then we
      // discard it.  Just use the b coordinate and move on to the next line
      // segment.
      flatCoordinates.push(b[0], b[1]);
      key = fracB.toString();
      fractions[key] = true;
    } else {
      // Otherwise, we need to subdivide the current line segment.  Split it
      // into two and push the two line segments onto the stack.
      fractionStack.push(fracB, fracM, fracM, fracA);
      stack.push(b, m, m, a);
      geoStack.push(geoB, geoM, geoM, geoA);
    }
  }

  return flatCoordinates;
}


/**
 * Generate a great-circle arcs between two lat/lon points.
 * @param {number} lon1 Longitude 1 in degrees.
 * @param {number} lat1 Latitude 1 in degrees.
 * @param {number} lon2 Longitude 2 in degrees.
 * @param {number} lat2 Latitude 2 in degrees.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {number} squaredTolerance Squared tolerance.
 * @return {Array.<number>} Flat coordinates.
 */
function greatCircleArc(lon1, lat1, lon2, lat2, projection, squaredTolerance) {
  const geoProjection = Object(proj["h" /* get */])('EPSG:4326');

  const cosLat1 = Math.cos(Object(math["j" /* toRadians */])(lat1));
  const sinLat1 = Math.sin(Object(math["j" /* toRadians */])(lat1));
  const cosLat2 = Math.cos(Object(math["j" /* toRadians */])(lat2));
  const sinLat2 = Math.sin(Object(math["j" /* toRadians */])(lat2));
  const cosDeltaLon = Math.cos(Object(math["j" /* toRadians */])(lon2 - lon1));
  const sinDeltaLon = Math.sin(Object(math["j" /* toRadians */])(lon2 - lon1));
  const d = sinLat1 * sinLat2 + cosLat1 * cosLat2 * cosDeltaLon;

  return geodesic_line(
    /**
     * @param {number} frac Fraction.
     * @return {module:ol/coordinate~Coordinate} Coordinate.
     */
    function(frac) {
      if (1 <= d) {
        return [lon2, lat2];
      }
      const D = frac * Math.acos(d);
      const cosD = Math.cos(D);
      const sinD = Math.sin(D);
      const y = sinDeltaLon * cosLat2;
      const x = cosLat1 * sinLat2 - sinLat1 * cosLat2 * cosDeltaLon;
      const theta = Math.atan2(y, x);
      const lat = Math.asin(sinLat1 * cosD + cosLat1 * sinD * Math.cos(theta));
      const lon = Object(math["j" /* toRadians */])(lon1) +
            Math.atan2(Math.sin(theta) * sinD * cosLat1,
              cosD - sinLat1 * Math.sin(lat));
      return [Object(math["i" /* toDegrees */])(lon), Object(math["i" /* toDegrees */])(lat)];
    }, Object(proj["j" /* getTransform */])(geoProjection, projection), squaredTolerance);
}


/**
 * Generate a meridian (line at constant longitude).
 * @param {number} lon Longitude.
 * @param {number} lat1 Latitude 1.
 * @param {number} lat2 Latitude 2.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {number} squaredTolerance Squared tolerance.
 * @return {Array.<number>} Flat coordinates.
 */
function meridian(lon, lat1, lat2, projection, squaredTolerance) {
  const epsg4326Projection = Object(proj["h" /* get */])('EPSG:4326');
  return geodesic_line(
    /**
     * @param {number} frac Fraction.
     * @return {module:ol/coordinate~Coordinate} Coordinate.
     */
    function(frac) {
      return [lon, lat1 + ((lat2 - lat1) * frac)];
    },
    Object(proj["j" /* getTransform */])(epsg4326Projection, projection), squaredTolerance);
}


/**
 * Generate a parallel (line at constant latitude).
 * @param {number} lat Latitude.
 * @param {number} lon1 Longitude 1.
 * @param {number} lon2 Longitude 2.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {number} squaredTolerance Squared tolerance.
 * @return {Array.<number>} Flat coordinates.
 */
function parallel(lat, lon1, lon2, projection, squaredTolerance) {
  const epsg4326Projection = Object(proj["h" /* get */])('EPSG:4326');
  return geodesic_line(
    /**
     * @param {number} frac Fraction.
     * @return {module:ol/coordinate~Coordinate} Coordinate.
     */
    function(frac) {
      return [lon1 + ((lon2 - lon1) * frac), lat];
    },
    Object(proj["j" /* getTransform */])(epsg4326Projection, projection), squaredTolerance);
}

// EXTERNAL MODULE: ../src/ol/render/EventType.js
var EventType = __webpack_require__(78);

// EXTERNAL MODULE: ../src/ol/style/Fill.js
var Fill = __webpack_require__(104);

// EXTERNAL MODULE: ../src/ol/style/Stroke.js
var Stroke = __webpack_require__(89);

// EXTERNAL MODULE: ../src/ol/style/Text.js
var Text = __webpack_require__(158);

// CONCATENATED MODULE: ../src/ol/Graticule.js
/**
 * @module ol/Graticule
 */















/**
 * @type {module:ol/style/Stroke}
 * @private
 * @const
 */
const DEFAULT_STROKE_STYLE = new Stroke["a" /* default */]({
  color: 'rgba(0,0,0,0.2)'
});

/**
 * TODO can be configurable
 * @type {Array.<number>}
 * @private
 */
const INTERVALS = [
  90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001
];

/**
 * @typedef {Object} GraticuleLabelDataType
 * @property {module:ol/geom/Point} geom
 * @property {string} text
 */

/**
 * @typedef {Object} Options
 * @property {module:ol/PluggableMap} [map] Reference to an
 * {@link module:ol/Map~Map} object.
 * @property {number} [maxLines=100] The maximum number of meridians and
 * parallels from the center of the map. The default value of 100 means that at
 * most 200 meridians and 200 parallels will be displayed. The default value is
 * appropriate for conformal projections like Spherical Mercator. If you
 * increase the value, more lines will be drawn and the drawing performance will
 * decrease.
 * @property {module:ol/style/Stroke} [strokeStyle='rgba(0,0,0,0.2)'] The
 * stroke style to use for drawing the graticule. If not provided, a not fully
 * opaque black will be used.
 * @property {number} [targetSize=100] The target size of the graticule cells,
 * in pixels.
 * @property {boolean} [showLabels=false] Render a label with the respective
 * latitude/longitude for each graticule line.
 * @property {function(number):string} [lonLabelFormatter] Label formatter for
 * longitudes. This function is called with the longitude as argument, and
 * should return a formatted string representing the longitude. By default,
 * labels are formatted as degrees, minutes, seconds and hemisphere.
 * @property {function(number):string} [latLabelFormatter] Label formatter for
 * latitudes. This function is called with the latitude as argument, and
 * should return a formatted string representing the latitude. By default,
 * labels are formatted as degrees, minutes, seconds and hemisphere.
 * @property {number} [lonLabelPosition=0] Longitude label position in fractions
 * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the
 * top.
 * @property {number} [latLabelPosition=1] Latitude label position in fractions
 * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the
 * right.
 * @property {module:ol/style/Text} [lonLabelStyle] Longitude label text
 * style. If not provided, the following style will be used:
 * ```js
 * new Text({
 *   font: '12px Calibri,sans-serif',
 *   textBaseline: 'bottom',
 *   fill: new Fill({
 *     color: 'rgba(0,0,0,1)'
 *   }),
 *   stroke: new Stroke({
 *     color: 'rgba(255,255,255,1)',
 *     width: 3
 *   })
 * });
 * ```
 * Note that the default's `textBaseline` configuration will not work well for
 * `lonLabelPosition` configurations that position labels close to the top of
 * the viewport.
 * @property {module:ol/style/Text} [latLabelStyle] Latitude label text style.
 * If not provided, the following style will be used:
 * ```js
 * new Text({
 *   font: '12px Calibri,sans-serif',
 *   textAlign: 'end',
 *   fill: new Fill({
 *     color: 'rgba(0,0,0,1)'
 *   }),
 *   stroke: Stroke({
 *     color: 'rgba(255,255,255,1)',
 *     width: 3
 *   })
 * });
 * ```
 * Note that the default's `textAlign` configuration will not work well for
 * `latLabelPosition` configurations that position labels close to the left of
 * the viewport.
 */


/**
 * Render a grid for a coordinate system on a map.
 * @constructor
 * @param {module:ol/Graticule~Options=} opt_options Options.
 * @api
 */
const Graticule = function(opt_options) {
  const options = opt_options || {};

  /**
   * @type {module:ol/PluggableMap}
   * @private
   */
  this.map_ = null;

  /**
   * @type {?module:ol/events~EventsKey}
   * @private
   */
  this.postcomposeListenerKey_ = null;

  /**
   * @type {module:ol/proj/Projection}
   */
  this.projection_ = null;

  /**
   * @type {number}
   * @private
   */
  this.maxLat_ = Infinity;

  /**
   * @type {number}
   * @private
   */
  this.maxLon_ = Infinity;

  /**
   * @type {number}
   * @private
   */
  this.minLat_ = -Infinity;

  /**
   * @type {number}
   * @private
   */
  this.minLon_ = -Infinity;

  /**
   * @type {number}
   * @private
   */
  this.maxLatP_ = Infinity;

  /**
   * @type {number}
   * @private
   */
  this.maxLonP_ = Infinity;

  /**
   * @type {number}
   * @private
   */
  this.minLatP_ = -Infinity;

  /**
   * @type {number}
   * @private
   */
  this.minLonP_ = -Infinity;

  /**
   * @type {number}
   * @private
   */
  this.targetSize_ = options.targetSize !== undefined ? options.targetSize : 100;

  /**
   * @type {number}
   * @private
   */
  this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;

  /**
   * @type {Array.<module:ol/geom/LineString>}
   * @private
   */
  this.meridians_ = [];

  /**
   * @type {Array.<module:ol/geom/LineString>}
   * @private
   */
  this.parallels_ = [];

  /**
   * @type {module:ol/style/Stroke}
   * @private
   */
  this.strokeStyle_ = options.strokeStyle !== undefined ? options.strokeStyle : DEFAULT_STROKE_STYLE;

  /**
   * @type {module:ol/proj~TransformFunction|undefined}
   * @private
   */
  this.fromLonLatTransform_ = undefined;

  /**
   * @type {module:ol/proj~TransformFunction|undefined}
   * @private
   */
  this.toLonLatTransform_ = undefined;

  /**
   * @type {module:ol/coordinate~Coordinate}
   * @private
   */
  this.projectionCenterLonLat_ = null;

  /**
   * @type {Array.<module:ol/Graticule~GraticuleLabelDataType>}
   * @private
   */
  this.meridiansLabels_ = null;

  /**
   * @type {Array.<module:ol/Graticule~GraticuleLabelDataType>}
   * @private
   */
  this.parallelsLabels_ = null;

  if (options.showLabels == true) {

    /**
     * @type {null|function(number):string}
     * @private
     */
    this.lonLabelFormatter_ = options.lonLabelFormatter == undefined ?
      ol_coordinate["e" /* degreesToStringHDMS */].bind(this, 'EW') : options.lonLabelFormatter;

    /**
     * @type {function(number):string}
     * @private
     */
    this.latLabelFormatter_ = options.latLabelFormatter == undefined ?
      ol_coordinate["e" /* degreesToStringHDMS */].bind(this, 'NS') : options.latLabelFormatter;

    /**
     * Longitude label position in fractions (0..1) of view extent. 0 means
     * bottom, 1 means top.
     * @type {number}
     * @private
     */
    this.lonLabelPosition_ = options.lonLabelPosition == undefined ? 0 :
      options.lonLabelPosition;

    /**
     * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1
     * means right.
     * @type {number}
     * @private
     */
    this.latLabelPosition_ = options.latLabelPosition == undefined ? 1 :
      options.latLabelPosition;

    /**
     * @type {module:ol/style/Text}
     * @private
     */
    this.lonLabelStyle_ = options.lonLabelStyle !== undefined ? options.lonLabelStyle :
      new Text["a" /* default */]({
        font: '12px Calibri,sans-serif',
        textBaseline: 'bottom',
        fill: new Fill["a" /* default */]({
          color: 'rgba(0,0,0,1)'
        }),
        stroke: new Stroke["a" /* default */]({
          color: 'rgba(255,255,255,1)',
          width: 3
        })
      });

    /**
     * @type {module:ol/style/Text}
     * @private
     */
    this.latLabelStyle_ = options.latLabelStyle !== undefined ? options.latLabelStyle :
      new Text["a" /* default */]({
        font: '12px Calibri,sans-serif',
        textAlign: 'end',
        fill: new Fill["a" /* default */]({
          color: 'rgba(0,0,0,1)'
        }),
        stroke: new Stroke["a" /* default */]({
          color: 'rgba(255,255,255,1)',
          width: 3
        })
      });

    this.meridiansLabels_ = [];
    this.parallelsLabels_ = [];
  }

  this.setMap(options.map !== undefined ? options.map : null);
};


/**
 * @param {number} lon Longitude.
 * @param {number} minLat Minimal latitude.
 * @param {number} maxLat Maximal latitude.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} index Index.
 * @return {number} Index.
 * @private
 */
Graticule.prototype.addMeridian_ = function(lon, minLat, maxLat, squaredTolerance, extent, index) {
  const lineString = this.getMeridian_(lon, minLat, maxLat, squaredTolerance, index);
  if (Object(ol_extent["F" /* intersects */])(lineString.getExtent(), extent)) {
    if (this.meridiansLabels_) {
      const textPoint = this.getMeridianPoint_(lineString, extent, index);
      this.meridiansLabels_[index] = {
        geom: textPoint,
        text: this.lonLabelFormatter_(lon)
      };
    }
    this.meridians_[index++] = lineString;
  }
  return index;
};

/**
 * @param {module:ol/geom/LineString} lineString Meridian
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} index Index.
 * @return {module:ol/geom/Point} Meridian point.
 * @private
 */
Graticule.prototype.getMeridianPoint_ = function(lineString, extent, index) {
  const flatCoordinates = lineString.getFlatCoordinates();
  const clampedBottom = Math.max(extent[1], flatCoordinates[1]);
  const clampedTop = Math.min(extent[3], flatCoordinates[flatCoordinates.length - 1]);
  const lat = Object(math["a" /* clamp */])(
    extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_,
    clampedBottom, clampedTop);
  const coordinate = [flatCoordinates[0], lat];
  const point = this.meridiansLabels_[index] !== undefined ?
    this.meridiansLabels_[index].geom : new Point["a" /* default */](null);
  point.setCoordinates(coordinate);
  return point;
};


/**
 * @param {number} lat Latitude.
 * @param {number} minLon Minimal longitude.
 * @param {number} maxLon Maximal longitude.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} index Index.
 * @return {number} Index.
 * @private
 */
Graticule.prototype.addParallel_ = function(lat, minLon, maxLon, squaredTolerance, extent, index) {
  const lineString = this.getParallel_(lat, minLon, maxLon, squaredTolerance, index);
  if (Object(ol_extent["F" /* intersects */])(lineString.getExtent(), extent)) {
    if (this.parallelsLabels_) {
      const textPoint = this.getParallelPoint_(lineString, extent, index);
      this.parallelsLabels_[index] = {
        geom: textPoint,
        text: this.latLabelFormatter_(lat)
      };
    }
    this.parallels_[index++] = lineString;
  }
  return index;
};


/**
 * @param {module:ol/geom/LineString} lineString Parallels.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} index Index.
 * @return {module:ol/geom/Point} Parallel point.
 * @private
 */
Graticule.prototype.getParallelPoint_ = function(lineString, extent, index) {
  const flatCoordinates = lineString.getFlatCoordinates();
  const clampedLeft = Math.max(extent[0], flatCoordinates[0]);
  const clampedRight = Math.min(extent[2], flatCoordinates[flatCoordinates.length - 2]);
  const lon = Object(math["a" /* clamp */])(
    extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_,
    clampedLeft, clampedRight);
  const coordinate = [lon, flatCoordinates[1]];
  const point = this.parallelsLabels_[index] !== undefined ?
    this.parallelsLabels_[index].geom : new Point["a" /* default */](null);
  point.setCoordinates(coordinate);
  return point;
};


/**
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/coordinate~Coordinate} center Center.
 * @param {number} resolution Resolution.
 * @param {number} squaredTolerance Squared tolerance.
 * @private
 */
Graticule.prototype.createGraticule_ = function(extent, center, resolution, squaredTolerance) {

  const interval = this.getInterval_(resolution);
  if (interval == -1) {
    this.meridians_.length = this.parallels_.length = 0;
    if (this.meridiansLabels_) {
      this.meridiansLabels_.length = 0;
    }
    if (this.parallelsLabels_) {
      this.parallelsLabels_.length = 0;
    }
    return;
  }

  const centerLonLat = this.toLonLatTransform_(center);
  let centerLon = centerLonLat[0];
  let centerLat = centerLonLat[1];
  const maxLines = this.maxLines_;
  let cnt, idx, lat, lon;

  let validExtent = [
    Math.max(extent[0], this.minLonP_),
    Math.max(extent[1], this.minLatP_),
    Math.min(extent[2], this.maxLonP_),
    Math.min(extent[3], this.maxLatP_)
  ];

  validExtent = Object(proj["o" /* transformExtent */])(validExtent, this.projection_, 'EPSG:4326');
  const maxLat = validExtent[3];
  const maxLon = validExtent[2];
  const minLat = validExtent[1];
  const minLon = validExtent[0];

  // Create meridians

  centerLon = Math.floor(centerLon / interval) * interval;
  lon = Object(math["a" /* clamp */])(centerLon, this.minLon_, this.maxLon_);

  idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);

  cnt = 0;
  while (lon != this.minLon_ && cnt++ < maxLines) {
    lon = Math.max(lon - interval, this.minLon_);
    idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);
  }

  lon = Object(math["a" /* clamp */])(centerLon, this.minLon_, this.maxLon_);

  cnt = 0;
  while (lon != this.maxLon_ && cnt++ < maxLines) {
    lon = Math.min(lon + interval, this.maxLon_);
    idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);
  }

  this.meridians_.length = idx;
  if (this.meridiansLabels_) {
    this.meridiansLabels_.length = idx;
  }

  // Create parallels

  centerLat = Math.floor(centerLat / interval) * interval;
  lat = Object(math["a" /* clamp */])(centerLat, this.minLat_, this.maxLat_);

  idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);

  cnt = 0;
  while (lat != this.minLat_ && cnt++ < maxLines) {
    lat = Math.max(lat - interval, this.minLat_);
    idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);
  }

  lat = Object(math["a" /* clamp */])(centerLat, this.minLat_, this.maxLat_);

  cnt = 0;
  while (lat != this.maxLat_ && cnt++ < maxLines) {
    lat = Math.min(lat + interval, this.maxLat_);
    idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);
  }

  this.parallels_.length = idx;
  if (this.parallelsLabels_) {
    this.parallelsLabels_.length = idx;
  }

};


/**
 * @param {number} resolution Resolution.
 * @return {number} The interval in degrees.
 * @private
 */
Graticule.prototype.getInterval_ = function(resolution) {
  const centerLon = this.projectionCenterLonLat_[0];
  const centerLat = this.projectionCenterLonLat_[1];
  let interval = -1;
  const target = Math.pow(this.targetSize_ * resolution, 2);
  /** @type {Array.<number>} **/
  const p1 = [];
  /** @type {Array.<number>} **/
  const p2 = [];
  for (let i = 0, ii = INTERVALS.length; i < ii; ++i) {
    const delta = INTERVALS[i] / 2;
    p1[0] = centerLon - delta;
    p1[1] = centerLat - delta;
    p2[0] = centerLon + delta;
    p2[1] = centerLat + delta;
    this.fromLonLatTransform_(p1, p1);
    this.fromLonLatTransform_(p2, p2);
    const dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);
    if (dist <= target) {
      break;
    }
    interval = INTERVALS[i];
  }
  return interval;
};


/**
 * Get the map associated with this graticule.
 * @return {module:ol/PluggableMap} The map.
 * @api
 */
Graticule.prototype.getMap = function() {
  return this.map_;
};


/**
 * @param {number} lon Longitude.
 * @param {number} minLat Minimal latitude.
 * @param {number} maxLat Maximal latitude.
 * @param {number} squaredTolerance Squared tolerance.
 * @return {module:ol/geom/LineString} The meridian line string.
 * @param {number} index Index.
 * @private
 */
Graticule.prototype.getMeridian_ = function(lon, minLat, maxLat, squaredTolerance, index) {
  const flatCoordinates = meridian(lon, minLat, maxLat, this.projection_, squaredTolerance);
  const lineString = this.meridians_[index] !== undefined ? this.meridians_[index] : new LineString["a" /* default */](null);
  lineString.setFlatCoordinates(GeometryLayout["a" /* default */].XY, flatCoordinates);
  return lineString;
};


/**
 * Get the list of meridians.  Meridians are lines of equal longitude.
 * @return {Array.<module:ol/geom/LineString>} The meridians.
 * @api
 */
Graticule.prototype.getMeridians = function() {
  return this.meridians_;
};


/**
 * @param {number} lat Latitude.
 * @param {number} minLon Minimal longitude.
 * @param {number} maxLon Maximal longitude.
 * @param {number} squaredTolerance Squared tolerance.
 * @return {module:ol/geom/LineString} The parallel line string.
 * @param {number} index Index.
 * @private
 */
Graticule.prototype.getParallel_ = function(lat, minLon, maxLon, squaredTolerance, index) {
  const flatCoordinates = parallel(lat, minLon, maxLon, this.projection_, squaredTolerance);
  const lineString = this.parallels_[index] !== undefined ? this.parallels_[index] : new LineString["a" /* default */](null);
  lineString.setFlatCoordinates(GeometryLayout["a" /* default */].XY, flatCoordinates);
  return lineString;
};


/**
 * Get the list of parallels.  Parallels are lines of equal latitude.
 * @return {Array.<module:ol/geom/LineString>} The parallels.
 * @api
 */
Graticule.prototype.getParallels = function() {
  return this.parallels_;
};


/**
 * @param {module:ol/render/Event} e Event.
 * @private
 */
Graticule.prototype.handlePostCompose_ = function(e) {
  const vectorContext = e.vectorContext;
  const frameState = e.frameState;
  const extent = frameState.extent;
  const viewState = frameState.viewState;
  const center = viewState.center;
  const projection = viewState.projection;
  const resolution = viewState.resolution;
  const pixelRatio = frameState.pixelRatio;
  const squaredTolerance =
      resolution * resolution / (4 * pixelRatio * pixelRatio);

  const updateProjectionInfo = !this.projection_ ||
      !Object(proj["f" /* equivalent */])(this.projection_, projection);

  if (updateProjectionInfo) {
    this.updateProjectionInfo_(projection);
  }

  this.createGraticule_(extent, center, resolution, squaredTolerance);

  // Draw the lines
  vectorContext.setFillStrokeStyle(null, this.strokeStyle_);
  let i, l, line;
  for (i = 0, l = this.meridians_.length; i < l; ++i) {
    line = this.meridians_[i];
    vectorContext.drawGeometry(line);
  }
  for (i = 0, l = this.parallels_.length; i < l; ++i) {
    line = this.parallels_[i];
    vectorContext.drawGeometry(line);
  }
  let labelData;
  if (this.meridiansLabels_) {
    for (i = 0, l = this.meridiansLabels_.length; i < l; ++i) {
      labelData = this.meridiansLabels_[i];
      this.lonLabelStyle_.setText(labelData.text);
      vectorContext.setTextStyle(this.lonLabelStyle_);
      vectorContext.drawGeometry(labelData.geom);
    }
  }
  if (this.parallelsLabels_) {
    for (i = 0, l = this.parallelsLabels_.length; i < l; ++i) {
      labelData = this.parallelsLabels_[i];
      this.latLabelStyle_.setText(labelData.text);
      vectorContext.setTextStyle(this.latLabelStyle_);
      vectorContext.drawGeometry(labelData.geom);
    }
  }
};


/**
 * @param {module:ol/proj/Projection} projection Projection.
 * @private
 */
Graticule.prototype.updateProjectionInfo_ = function(projection) {
  const epsg4326Projection = Object(proj["h" /* get */])('EPSG:4326');

  const worldExtent = projection.getWorldExtent();
  const worldExtentP = Object(proj["o" /* transformExtent */])(worldExtent, epsg4326Projection, projection);

  this.maxLat_ = worldExtent[3];
  this.maxLon_ = worldExtent[2];
  this.minLat_ = worldExtent[1];
  this.minLon_ = worldExtent[0];

  this.maxLatP_ = worldExtentP[3];
  this.maxLonP_ = worldExtentP[2];
  this.minLatP_ = worldExtentP[1];
  this.minLonP_ = worldExtentP[0];

  this.fromLonLatTransform_ = Object(proj["j" /* getTransform */])(epsg4326Projection, projection);

  this.toLonLatTransform_ = Object(proj["j" /* getTransform */])(projection, epsg4326Projection);

  this.projectionCenterLonLat_ = this.toLonLatTransform_(Object(ol_extent["x" /* getCenter */])(projection.getExtent()));

  this.projection_ = projection;
};


/**
 * Set the map for this graticule.  The graticule will be rendered on the
 * provided map.
 * @param {module:ol/PluggableMap} map Map.
 * @api
 */
Graticule.prototype.setMap = function(map) {
  if (this.map_) {
    Object(events["e" /* unlistenByKey */])(this.postcomposeListenerKey_);
    this.postcomposeListenerKey_ = null;
    this.map_.render();
  }
  if (map) {
    this.postcomposeListenerKey_ = Object(events["a" /* listen */])(map, EventType["a" /* default */].POSTCOMPOSE, this.handlePostCompose_, this);
    map.render();
  }
  this.map_ = map;
};
/* harmony default export */ var ol_Graticule = __webpack_exports__["a"] = (Graticule);


/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42);
/* harmony import */ var _format_TextFeature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(150);
/* harmony import */ var _geom_GeometryCollection_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(151);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(22);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(41);
/* harmony import */ var _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(71);
/* harmony import */ var _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(73);
/* harmony import */ var _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(82);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(30);
/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(39);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(55);
/**
 * @module ol/format/WKT
 */
















/**
 * @typedef {Object} Options
 * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into
 * multiple features on reading.
 */

/**
 * @typedef {Object} Token
 * @property {number} type
 * @property {number|string} [value]
 * @property {number} position
 */

/**
 * @const
 * @type {string}
 */
const EMPTY = 'EMPTY';


/**
 * @const
 * @type {string}
 */
const Z = 'Z';


/**
 * @const
 * @type {string}
 */
const M = 'M';


/**
 * @const
 * @type {string}
 */
const ZM = 'ZM';


/**
 * @const
 * @enum {number}
 */
const TokenType = {
  TEXT: 1,
  LEFT_PAREN: 2,
  RIGHT_PAREN: 3,
  NUMBER: 4,
  COMMA: 5,
  EOF: 6
};


/**
 * Class to tokenize a WKT string.
 * @param {string} wkt WKT string.
 * @constructor
 */
const Lexer = function(wkt) {

  /**
   * @type {string}
   */
  this.wkt = wkt;

  /**
   * @type {number}
   * @private
   */
  this.index_ = -1;
};


/**
 * @param {string} c Character.
 * @return {boolean} Whether the character is alphabetic.
 * @private
 */
Lexer.prototype.isAlpha_ = function(c) {
  return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z';
};


/**
 * @param {string} c Character.
 * @param {boolean=} opt_decimal Whether the string number
 *     contains a dot, i.e. is a decimal number.
 * @return {boolean} Whether the character is numeric.
 * @private
 */
Lexer.prototype.isNumeric_ = function(c, opt_decimal) {
  const decimal = opt_decimal !== undefined ? opt_decimal : false;
  return c >= '0' && c <= '9' || c == '.' && !decimal;
};


/**
 * @param {string} c Character.
 * @return {boolean} Whether the character is whitespace.
 * @private
 */
Lexer.prototype.isWhiteSpace_ = function(c) {
  return c == ' ' || c == '\t' || c == '\r' || c == '\n';
};


/**
 * @return {string} Next string character.
 * @private
 */
Lexer.prototype.nextChar_ = function() {
  return this.wkt.charAt(++this.index_);
};


/**
 * Fetch and return the next token.
 * @return {!module:ol/format/WKT~Token} Next string token.
 */
Lexer.prototype.nextToken = function() {
  const c = this.nextChar_();
  const token = {position: this.index_, value: c};

  if (c == '(') {
    token.type = TokenType.LEFT_PAREN;
  } else if (c == ',') {
    token.type = TokenType.COMMA;
  } else if (c == ')') {
    token.type = TokenType.RIGHT_PAREN;
  } else if (this.isNumeric_(c) || c == '-') {
    token.type = TokenType.NUMBER;
    token.value = this.readNumber_();
  } else if (this.isAlpha_(c)) {
    token.type = TokenType.TEXT;
    token.value = this.readText_();
  } else if (this.isWhiteSpace_(c)) {
    return this.nextToken();
  } else if (c === '') {
    token.type = TokenType.EOF;
  } else {
    throw new Error('Unexpected character: ' + c);
  }

  return token;
};


/**
 * @return {number} Numeric token value.
 * @private
 */
Lexer.prototype.readNumber_ = function() {
  let c;
  const index = this.index_;
  let decimal = false;
  let scientificNotation = false;
  do {
    if (c == '.') {
      decimal = true;
    } else if (c == 'e' || c == 'E') {
      scientificNotation = true;
    }
    c = this.nextChar_();
  } while (
    this.isNumeric_(c, decimal) ||
      // if we haven't detected a scientific number before, 'e' or 'E'
      // hint that we should continue to read
      !scientificNotation && (c == 'e' || c == 'E') ||
      // once we know that we have a scientific number, both '-' and '+'
      // are allowed
      scientificNotation && (c == '-' || c == '+')
  );
  return parseFloat(this.wkt.substring(index, this.index_--));
};


/**
 * @return {string} String token value.
 * @private
 */
Lexer.prototype.readText_ = function() {
  let c;
  const index = this.index_;
  do {
    c = this.nextChar_();
  } while (this.isAlpha_(c));
  return this.wkt.substring(index, this.index_--).toUpperCase();
};


/**
 * Class to parse the tokens from the WKT string.
 * @param {module:ol/format/WKT~Lexer} lexer The lexer.
 * @constructor
 */
const Parser = function(lexer) {

  /**
   * @type {module:ol/format/WKT~Lexer}
   * @private
   */
  this.lexer_ = lexer;

  /**
   * @type {module:ol/format/WKT~Token}
   * @private
   */
  this.token_;

  /**
   * @type {module:ol/geom/GeometryLayout}
   * @private
   */
  this.layout_ = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XY;
};


/**
 * Fetch the next token form the lexer and replace the active token.
 * @private
 */
Parser.prototype.consume_ = function() {
  this.token_ = this.lexer_.nextToken();
};

/**
 * Tests if the given type matches the type of the current token.
 * @param {module:ol/format/WKT~TokenType} type Token type.
 * @return {boolean} Whether the token matches the given type.
 */
Parser.prototype.isTokenType = function(type) {
  const isMatch = this.token_.type == type;
  return isMatch;
};


/**
 * If the given type matches the current token, consume it.
 * @param {module:ol/format/WKT~TokenType} type Token type.
 * @return {boolean} Whether the token matches the given type.
 */
Parser.prototype.match = function(type) {
  const isMatch = this.isTokenType(type);
  if (isMatch) {
    this.consume_();
  }
  return isMatch;
};


/**
 * Try to parse the tokens provided by the lexer.
 * @return {module:ol/geom/Geometry} The geometry.
 */
Parser.prototype.parse = function() {
  this.consume_();
  const geometry = this.parseGeometry_();
  return geometry;
};


/**
 * Try to parse the dimensional info.
 * @return {module:ol/geom/GeometryLayout} The layout.
 * @private
 */
Parser.prototype.parseGeometryLayout_ = function() {
  let layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XY;
  const dimToken = this.token_;
  if (this.isTokenType(TokenType.TEXT)) {
    const dimInfo = dimToken.value;
    if (dimInfo === Z) {
      layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZ;
    } else if (dimInfo === M) {
      layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYM;
    } else if (dimInfo === ZM) {
      layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM;
    }
    if (layout !== _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XY) {
      this.consume_();
    }
  }
  return layout;
};


/**
 * @return {!Array.<module:ol/geom/Geometry>} A collection of geometries.
 * @private
 */
Parser.prototype.parseGeometryCollectionText_ = function() {
  if (this.match(TokenType.LEFT_PAREN)) {
    const geometries = [];
    do {
      geometries.push(this.parseGeometry_());
    } while (this.match(TokenType.COMMA));
    if (this.match(TokenType.RIGHT_PAREN)) {
      return geometries;
    }
  } else if (this.isEmptyGeometry_()) {
    return [];
  }
  throw new Error(this.formatErrorMessage_());
};


/**
 * @return {Array.<number>} All values in a point.
 * @private
 */
Parser.prototype.parsePointText_ = function() {
  if (this.match(TokenType.LEFT_PAREN)) {
    const coordinates = this.parsePoint_();
    if (this.match(TokenType.RIGHT_PAREN)) {
      return coordinates;
    }
  } else if (this.isEmptyGeometry_()) {
    return null;
  }
  throw new Error(this.formatErrorMessage_());
};


/**
 * @return {!Array.<!Array.<number>>} All points in a linestring.
 * @private
 */
Parser.prototype.parseLineStringText_ = function() {
  if (this.match(TokenType.LEFT_PAREN)) {
    const coordinates = this.parsePointList_();
    if (this.match(TokenType.RIGHT_PAREN)) {
      return coordinates;
    }
  } else if (this.isEmptyGeometry_()) {
    return [];
  }
  throw new Error(this.formatErrorMessage_());
};


/**
 * @return {!Array.<!Array.<number>>} All points in a polygon.
 * @private
 */
Parser.prototype.parsePolygonText_ = function() {
  if (this.match(TokenType.LEFT_PAREN)) {
    const coordinates = this.parseLineStringTextList_();
    if (this.match(TokenType.RIGHT_PAREN)) {
      return coordinates;
    }
  } else if (this.isEmptyGeometry_()) {
    return [];
  }
  throw new Error(this.formatErrorMessage_());
};


/**
 * @return {!Array.<!Array.<number>>} All points in a multipoint.
 * @private
 */
Parser.prototype.parseMultiPointText_ = function() {
  if (this.match(TokenType.LEFT_PAREN)) {
    let coordinates;
    if (this.token_.type == TokenType.LEFT_PAREN) {
      coordinates = this.parsePointTextList_();
    } else {
      coordinates = this.parsePointList_();
    }
    if (this.match(TokenType.RIGHT_PAREN)) {
      return coordinates;
    }
  } else if (this.isEmptyGeometry_()) {
    return [];
  }
  throw new Error(this.formatErrorMessage_());
};


/**
 * @return {!Array.<!Array.<number>>} All linestring points
 *                                        in a multilinestring.
 * @private
 */
Parser.prototype.parseMultiLineStringText_ = function() {
  if (this.match(TokenType.LEFT_PAREN)) {
    const coordinates = this.parseLineStringTextList_();
    if (this.match(TokenType.RIGHT_PAREN)) {
      return coordinates;
    }
  } else if (this.isEmptyGeometry_()) {
    return [];
  }
  throw new Error(this.formatErrorMessage_());
};


/**
 * @return {!Array.<!Array.<number>>} All polygon points in a multipolygon.
 * @private
 */
Parser.prototype.parseMultiPolygonText_ = function() {
  if (this.match(TokenType.LEFT_PAREN)) {
    const coordinates = this.parsePolygonTextList_();
    if (this.match(TokenType.RIGHT_PAREN)) {
      return coordinates;
    }
  } else if (this.isEmptyGeometry_()) {
    return [];
  }
  throw new Error(this.formatErrorMessage_());
};


/**
 * @return {!Array.<number>} A point.
 * @private
 */
Parser.prototype.parsePoint_ = function() {
  const coordinates = [];
  const dimensions = this.layout_.length;
  for (let i = 0; i < dimensions; ++i) {
    const token = this.token_;
    if (this.match(TokenType.NUMBER)) {
      coordinates.push(token.value);
    } else {
      break;
    }
  }
  if (coordinates.length == dimensions) {
    return coordinates;
  }
  throw new Error(this.formatErrorMessage_());
};


/**
 * @return {!Array.<!Array.<number>>} An array of points.
 * @private
 */
Parser.prototype.parsePointList_ = function() {
  const coordinates = [this.parsePoint_()];
  while (this.match(TokenType.COMMA)) {
    coordinates.push(this.parsePoint_());
  }
  return coordinates;
};


/**
 * @return {!Array.<!Array.<number>>} An array of points.
 * @private
 */
Parser.prototype.parsePointTextList_ = function() {
  const coordinates = [this.parsePointText_()];
  while (this.match(TokenType.COMMA)) {
    coordinates.push(this.parsePointText_());
  }
  return coordinates;
};


/**
 * @return {!Array.<!Array.<number>>} An array of points.
 * @private
 */
Parser.prototype.parseLineStringTextList_ = function() {
  const coordinates = [this.parseLineStringText_()];
  while (this.match(TokenType.COMMA)) {
    coordinates.push(this.parseLineStringText_());
  }
  return coordinates;
};


/**
 * @return {!Array.<!Array.<number>>} An array of points.
 * @private
 */
Parser.prototype.parsePolygonTextList_ = function() {
  const coordinates = [this.parsePolygonText_()];
  while (this.match(TokenType.COMMA)) {
    coordinates.push(this.parsePolygonText_());
  }
  return coordinates;
};


/**
 * @return {boolean} Whether the token implies an empty geometry.
 * @private
 */
Parser.prototype.isEmptyGeometry_ = function() {
  const isEmpty = this.isTokenType(TokenType.TEXT) &&
      this.token_.value == EMPTY;
  if (isEmpty) {
    this.consume_();
  }
  return isEmpty;
};


/**
 * Create an error message for an unexpected token error.
 * @return {string} Error message.
 * @private
 */
Parser.prototype.formatErrorMessage_ = function() {
  return 'Unexpected `' + this.token_.value + '` at position ' +
      this.token_.position + ' in `' + this.lexer_.wkt + '`';
};


/**
 * @classdesc
 * Geometry format for reading and writing data in the `WellKnownText` (WKT)
 * format.
 *
 * @constructor
 * @extends {module:ol/format/TextFeature}
 * @param {module:ol/format/WKT~Options=} opt_options Options.
 * @api
 */
const WKT = function(opt_options) {

  const options = opt_options ? opt_options : {};

  _format_TextFeature_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this);

  /**
   * Split GeometryCollection into multiple features.
   * @type {boolean}
   * @private
   */
  this.splitCollection_ = options.splitCollection !== undefined ?
    options.splitCollection : false;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(WKT, _format_TextFeature_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @param {module:ol/geom/Point} geom Point geometry.
 * @return {string} Coordinates part of Point as WKT.
 */
function encodePointGeometry(geom) {
  const coordinates = geom.getCoordinates();
  if (coordinates.length === 0) {
    return '';
  }
  return coordinates.join(' ');
}


/**
 * @param {module:ol/geom/MultiPoint} geom MultiPoint geometry.
 * @return {string} Coordinates part of MultiPoint as WKT.
 */
function encodeMultiPointGeometry(geom) {
  const array = [];
  const components = geom.getPoints();
  for (let i = 0, ii = components.length; i < ii; ++i) {
    array.push('(' + encodePointGeometry(components[i]) + ')');
  }
  return array.join(',');
}


/**
 * @param {module:ol/geom/GeometryCollection} geom GeometryCollection geometry.
 * @return {string} Coordinates part of GeometryCollection as WKT.
 */
function encodeGeometryCollectionGeometry(geom) {
  const array = [];
  const geoms = geom.getGeometries();
  for (let i = 0, ii = geoms.length; i < ii; ++i) {
    array.push(encode(geoms[i]));
  }
  return array.join(',');
}


/**
 * @param {module:ol/geom/LineString|module:ol/geom/LinearRing} geom LineString geometry.
 * @return {string} Coordinates part of LineString as WKT.
 */
function encodeLineStringGeometry(geom) {
  const coordinates = geom.getCoordinates();
  const array = [];
  for (let i = 0, ii = coordinates.length; i < ii; ++i) {
    array.push(coordinates[i].join(' '));
  }
  return array.join(',');
}


/**
 * @param {module:ol/geom/MultiLineString} geom MultiLineString geometry.
 * @return {string} Coordinates part of MultiLineString as WKT.
 */
function encodeMultiLineStringGeometry(geom) {
  const array = [];
  const components = geom.getLineStrings();
  for (let i = 0, ii = components.length; i < ii; ++i) {
    array.push('(' + encodeLineStringGeometry(components[i]) + ')');
  }
  return array.join(',');
}


/**
 * @param {module:ol/geom/Polygon} geom Polygon geometry.
 * @return {string} Coordinates part of Polygon as WKT.
 */
function encodePolygonGeometry(geom) {
  const array = [];
  const rings = geom.getLinearRings();
  for (let i = 0, ii = rings.length; i < ii; ++i) {
    array.push('(' + encodeLineStringGeometry(rings[i]) + ')');
  }
  return array.join(',');
}


/**
 * @param {module:ol/geom/MultiPolygon} geom MultiPolygon geometry.
 * @return {string} Coordinates part of MultiPolygon as WKT.
 */
function encodeMultiPolygonGeometry(geom) {
  const array = [];
  const components = geom.getPolygons();
  for (let i = 0, ii = components.length; i < ii; ++i) {
    array.push('(' + encodePolygonGeometry(components[i]) + ')');
  }
  return array.join(',');
}

/**
 * @param {module:ol/geom/SimpleGeometry} geom SimpleGeometry geometry.
 * @return {string} Potential dimensional information for WKT type.
 */
function encodeGeometryLayout(geom) {
  const layout = geom.getLayout();
  let dimInfo = '';
  if (layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZ || layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM) {
    dimInfo += Z;
  }
  if (layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYM || layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM) {
    dimInfo += M;
  }
  return dimInfo;
}


/**
 * @const
 * @type {Object.<string, function(module:ol/geom/Geometry): string>}
 */
const GeometryEncoder = {
  'Point': encodePointGeometry,
  'LineString': encodeLineStringGeometry,
  'Polygon': encodePolygonGeometry,
  'MultiPoint': encodeMultiPointGeometry,
  'MultiLineString': encodeMultiLineStringGeometry,
  'MultiPolygon': encodeMultiPolygonGeometry,
  'GeometryCollection': encodeGeometryCollectionGeometry
};


/**
 * Encode a geometry as WKT.
 * @param {module:ol/geom/Geometry} geom The geometry to encode.
 * @return {string} WKT string for the geometry.
 */
function encode(geom) {
  let type = geom.getType();
  const geometryEncoder = GeometryEncoder[type];
  const enc = geometryEncoder(geom);
  type = type.toUpperCase();
  if (geom instanceof _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"]) {
    const dimInfo = encodeGeometryLayout(geom);
    if (dimInfo.length > 0) {
      type += ' ' + dimInfo;
    }
  }
  if (enc.length === 0) {
    return type + ' ' + EMPTY;
  }
  return type + '(' + enc + ')';
}


/**
 * Parse a WKT string.
 * @param {string} wkt WKT string.
 * @return {module:ol/geom/Geometry|undefined}
 *     The geometry created.
 * @private
 */
WKT.prototype.parse_ = function(wkt) {
  const lexer = new Lexer(wkt);
  const parser = new Parser(lexer);
  return parser.parse();
};


/**
 * Read a feature from a WKT source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature} Feature.
 * @api
 */
WKT.prototype.readFeature;


/**
 * @inheritDoc
 */
WKT.prototype.readFeatureFromText = function(text, opt_options) {
  const geom = this.readGeometryFromText(text, opt_options);
  if (geom) {
    const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]();
    feature.setGeometry(geom);
    return feature;
  }
  return null;
};


/**
 * Read all features from a WKT source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
WKT.prototype.readFeatures;


/**
 * @inheritDoc
 */
WKT.prototype.readFeaturesFromText = function(text, opt_options) {
  let geometries = [];
  const geometry = this.readGeometryFromText(text, opt_options);
  if (this.splitCollection_ &&
      geometry.getType() == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].GEOMETRY_COLLECTION) {
    geometries = (/** @type {module:ol/geom/GeometryCollection} */ (geometry))
      .getGeometriesArray();
  } else {
    geometries = [geometry];
  }
  const features = [];
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]();
    feature.setGeometry(geometries[i]);
    features.push(feature);
  }
  return features;
};


/**
 * Read a single geometry from a WKT source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/geom/Geometry} Geometry.
 * @api
 */
WKT.prototype.readGeometry;


/**
 * @inheritDoc
 */
WKT.prototype.readGeometryFromText = function(text, opt_options) {
  const geometry = this.parse_(text);
  if (geometry) {
    return (
      /** @type {module:ol/geom/Geometry} */ (Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* transformWithOptions */ "b"])(geometry, false, opt_options))
    );
  } else {
    return null;
  }
};


/**
 * @enum {function (new:module:ol/geom/Geometry, Array, module:ol/geom/GeometryLayout)}
 */
const GeometryConstructor = {
  'POINT': _geom_Point_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"],
  'LINESTRING': _geom_LineString_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"],
  'POLYGON': _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "b"],
  'MULTIPOINT': _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"],
  'MULTILINESTRING': _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"],
  'MULTIPOLYGON': _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"]
};


/**
 * @enum {(function(): Array)}
 */
const GeometryParser = {
  'POINT': Parser.prototype.parsePointText_,
  'LINESTRING': Parser.prototype.parseLineStringText_,
  'POLYGON': Parser.prototype.parsePolygonText_,
  'MULTIPOINT': Parser.prototype.parseMultiPointText_,
  'MULTILINESTRING': Parser.prototype.parseMultiLineStringText_,
  'MULTIPOLYGON': Parser.prototype.parseMultiPolygonText_
};


/**
 * @return {!module:ol/geom/Geometry} The geometry.
 * @private
 */
Parser.prototype.parseGeometry_ = function() {
  const token = this.token_;
  if (this.match(TokenType.TEXT)) {
    const geomType = token.value;
    this.layout_ = this.parseGeometryLayout_();
    if (geomType == _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].GEOMETRY_COLLECTION.toUpperCase()) {
      const geometries = this.parseGeometryCollectionText_();
      return new _geom_GeometryCollection_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](geometries);
    } else {
      const parser = GeometryParser[geomType];
      const ctor = GeometryConstructor[geomType];
      if (!parser || !ctor) {
        throw new Error('Invalid geometry type: ' + geomType);
      }
      const coordinates = parser.call(this);
      return new ctor(coordinates, this.layout_);
    }
  }
  throw new Error(this.formatErrorMessage_());
};


/**
 * Encode a feature as a WKT string.
 *
 * @function
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} WKT string.
 * @api
 */
WKT.prototype.writeFeature;


/**
 * @inheritDoc
 */
WKT.prototype.writeFeatureText = function(feature, opt_options) {
  const geometry = feature.getGeometry();
  if (geometry) {
    return this.writeGeometryText(geometry, opt_options);
  }
  return '';
};


/**
 * Encode an array of features as a WKT string.
 *
 * @function
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} WKT string.
 * @api
 */
WKT.prototype.writeFeatures;


/**
 * @inheritDoc
 */
WKT.prototype.writeFeaturesText = function(features, opt_options) {
  if (features.length == 1) {
    return this.writeFeatureText(features[0], opt_options);
  }
  const geometries = [];
  for (let i = 0, ii = features.length; i < ii; ++i) {
    geometries.push(features[i].getGeometry());
  }
  const collection = new _geom_GeometryCollection_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](geometries);
  return this.writeGeometryText(collection, opt_options);
};


/**
 * Write a single geometry as a WKT string.
 *
 * @function
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} WKT string.
 * @api
 */
WKT.prototype.writeGeometry;


/**
 * @inheritDoc
 */
WKT.prototype.writeGeometryText = function(geometry, opt_options) {
  return encode(/** @type {module:ol/geom/Geometry} */ (
    Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* transformWithOptions */ "b"])(geometry, true, opt_options)));
};


/* harmony default export */ __webpack_exports__["a"] = (WKT);


/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42);
/* harmony import */ var _format_JSONFeature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(152);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(41);
/* harmony import */ var _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(71);
/* harmony import */ var _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(73);
/* harmony import */ var _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(30);
/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(39);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7);
/**
 * @module ol/format/TopoJSON
 */













/**
 * @typedef {Object} Options
 * @property {module:ol/proj~ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
 * @property {string} [layerName] Set the name of the TopoJSON topology
 * `objects`'s children as feature property with the specified name. This means
 * that when set to `'layer'`, a topology like
 * ```
 * {
 *   "type": "Topology",
 *   "objects": {
 *     "example": {
 *       "type": "GeometryCollection",
 *       "geometries": []
 *     }
 *   }
 * }
 * ```
 * will result in features that have a property `'layer'` set to `'example'`.
 * When not set, no property will be added to features.
 * @property {Array.<string>} [layers] Names of the TopoJSON topology's
 * `objects`'s children to read features from.  If not provided, features will
 * be read from all children.
 */


/**
 * @classdesc
 * Feature format for reading data in the TopoJSON format.
 *
 * @constructor
 * @extends {module:ol/format/JSONFeature}
 * @param {module:ol/format/TopoJSON~Options=} opt_options Options.
 * @api
 */
const TopoJSON = function(opt_options) {

  const options = opt_options ? opt_options : {};

  _format_JSONFeature_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {string|undefined}
   */
  this.layerName_ = options.layerName;

  /**
   * @private
   * @type {Array.<string>}
   */
  this.layers_ = options.layers ? options.layers : null;

  /**
   * @inheritDoc
   */
  this.dataProjection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_10__[/* get */ "h"])(
    options.dataProjection ?
      options.dataProjection : 'EPSG:4326');

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(TopoJSON, _format_JSONFeature_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @const
 * @type {Object.<string, function(TopoJSONGeometry, Array, ...Array): module:ol/geom/Geometry>}
 */
const GEOMETRY_READERS = {
  'Point': readPointGeometry,
  'LineString': readLineStringGeometry,
  'Polygon': readPolygonGeometry,
  'MultiPoint': readMultiPointGeometry,
  'MultiLineString': readMultiLineStringGeometry,
  'MultiPolygon': readMultiPolygonGeometry
};


/**
 * Concatenate arcs into a coordinate array.
 * @param {Array.<number>} indices Indices of arcs to concatenate.  Negative
 *     values indicate arcs need to be reversed.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs (already
 *     transformed).
 * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates array.
 */
function concatenateArcs(indices, arcs) {
  /** @type {Array.<module:ol/coordinate~Coordinate>} */
  const coordinates = [];
  let index, arc;
  for (let i = 0, ii = indices.length; i < ii; ++i) {
    index = indices[i];
    if (i > 0) {
      // splicing together arcs, discard last point
      coordinates.pop();
    }
    if (index >= 0) {
      // forward arc
      arc = arcs[index];
    } else {
      // reverse arc
      arc = arcs[~index].slice().reverse();
    }
    coordinates.push.apply(coordinates, arc);
  }
  // provide fresh copies of coordinate arrays
  for (let j = 0, jj = coordinates.length; j < jj; ++j) {
    coordinates[j] = coordinates[j].slice();
  }
  return coordinates;
}


/**
 * Create a point from a TopoJSON geometry object.
 *
 * @param {TopoJSONGeometry} object TopoJSON object.
 * @param {Array.<number>} scale Scale for each dimension.
 * @param {Array.<number>} translate Translation for each dimension.
 * @return {module:ol/geom/Point} Geometry.
 */
function readPointGeometry(object, scale, translate) {
  const coordinates = object.coordinates;
  if (scale && translate) {
    transformVertex(coordinates, scale, translate);
  }
  return new _geom_Point_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](coordinates);
}


/**
 * Create a multi-point from a TopoJSON geometry object.
 *
 * @param {TopoJSONGeometry} object TopoJSON object.
 * @param {Array.<number>} scale Scale for each dimension.
 * @param {Array.<number>} translate Translation for each dimension.
 * @return {module:ol/geom/MultiPoint} Geometry.
 */
function readMultiPointGeometry(object, scale, translate) {
  const coordinates = object.coordinates;
  if (scale && translate) {
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      transformVertex(coordinates[i], scale, translate);
    }
  }
  return new _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](coordinates);
}


/**
 * Create a linestring from a TopoJSON geometry object.
 *
 * @param {TopoJSONGeometry} object TopoJSON object.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.
 * @return {module:ol/geom/LineString} Geometry.
 */
function readLineStringGeometry(object, arcs) {
  const coordinates = concatenateArcs(object.arcs, arcs);
  return new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](coordinates);
}


/**
 * Create a multi-linestring from a TopoJSON geometry object.
 *
 * @param {TopoJSONGeometry} object TopoJSON object.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.
 * @return {module:ol/geom/MultiLineString} Geometry.
 */
function readMultiLineStringGeometry(object, arcs) {
  const coordinates = [];
  for (let i = 0, ii = object.arcs.length; i < ii; ++i) {
    coordinates[i] = concatenateArcs(object.arcs[i], arcs);
  }
  return new _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](coordinates);
}


/**
 * Create a polygon from a TopoJSON geometry object.
 *
 * @param {TopoJSONGeometry} object TopoJSON object.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.
 * @return {module:ol/geom/Polygon} Geometry.
 */
function readPolygonGeometry(object, arcs) {
  const coordinates = [];
  for (let i = 0, ii = object.arcs.length; i < ii; ++i) {
    coordinates[i] = concatenateArcs(object.arcs[i], arcs);
  }
  return new _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "b"](coordinates);
}


/**
 * Create a multi-polygon from a TopoJSON geometry object.
 *
 * @param {TopoJSONGeometry} object TopoJSON object.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.
 * @return {module:ol/geom/MultiPolygon} Geometry.
 */
function readMultiPolygonGeometry(object, arcs) {
  const coordinates = [];
  for (let i = 0, ii = object.arcs.length; i < ii; ++i) {
    // for each polygon
    const polyArray = object.arcs[i];
    const ringCoords = [];
    for (let j = 0, jj = polyArray.length; j < jj; ++j) {
      // for each ring
      ringCoords[j] = concatenateArcs(polyArray[j], arcs);
    }
    coordinates[i] = ringCoords;
  }
  return new _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"](coordinates);
}


/**
 * Create features from a TopoJSON GeometryCollection object.
 *
 * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry
 *     object.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.
 * @param {Array.<number>} scale Scale for each dimension.
 * @param {Array.<number>} translate Translation for each dimension.
 * @param {string|undefined} property Property to set the `GeometryCollection`'s parent
 *     object to.
 * @param {string} name Name of the `Topology`'s child object.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Array of features.
 */
function readFeaturesFromGeometryCollection(collection, arcs, scale, translate, property, name, opt_options) {
  const geometries = collection.geometries;
  const features = [];
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    features[i] = readFeatureFromGeometry(
      geometries[i], arcs, scale, translate, property, name, opt_options);
  }
  return features;
}


/**
 * Create a feature from a TopoJSON geometry object.
 *
 * @param {TopoJSONGeometry} object TopoJSON geometry object.
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.
 * @param {Array.<number>} scale Scale for each dimension.
 * @param {Array.<number>} translate Translation for each dimension.
 * @param {string|undefined} property Property to set the `GeometryCollection`'s parent
 *     object to.
 * @param {string} name Name of the `Topology`'s child object.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature} Feature.
 */
function readFeatureFromGeometry(object, arcs, scale, translate, property, name, opt_options) {
  let geometry;
  const type = object.type;
  const geometryReader = GEOMETRY_READERS[type];
  if ((type === 'Point') || (type === 'MultiPoint')) {
    geometry = geometryReader(object, scale, translate);
  } else {
    geometry = geometryReader(object, arcs);
  }
  const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]();
  feature.setGeometry(/** @type {module:ol/geom/Geometry} */ (
    Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* transformWithOptions */ "b"])(geometry, false, opt_options)));
  if (object.id !== undefined) {
    feature.setId(object.id);
  }
  let properties = object.properties;
  if (property) {
    if (!properties) {
      properties = {};
    }
    properties[property] = name;
  }
  if (properties) {
    feature.setProperties(properties);
  }
  return feature;
}


/**
 * Read all features from a TopoJSON source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
TopoJSON.prototype.readFeatures;


/**
 * @inheritDoc
 */
TopoJSON.prototype.readFeaturesFromObject = function(object, opt_options) {
  if (object.type == 'Topology') {
    const topoJSONTopology = /** @type {TopoJSONTopology} */ (object);
    let transform, scale = null, translate = null;
    if (topoJSONTopology.transform) {
      transform = topoJSONTopology.transform;
      scale = transform.scale;
      translate = transform.translate;
    }
    const arcs = topoJSONTopology.arcs;
    if (transform) {
      transformArcs(arcs, scale, translate);
    }
    /** @type {Array.<module:ol/Feature>} */
    const features = [];
    const topoJSONFeatures = topoJSONTopology.objects;
    const property = this.layerName_;
    let feature;
    for (const objectName in topoJSONFeatures) {
      if (this.layers_ && this.layers_.indexOf(objectName) == -1) {
        continue;
      }
      if (topoJSONFeatures[objectName].type === 'GeometryCollection') {
        feature = /** @type {TopoJSONGeometryCollection} */ (topoJSONFeatures[objectName]);
        features.push.apply(features, readFeaturesFromGeometryCollection(
          feature, arcs, scale, translate, property, objectName, opt_options));
      } else {
        feature = /** @type {TopoJSONGeometry} */ (topoJSONFeatures[objectName]);
        features.push(readFeatureFromGeometry(
          feature, arcs, scale, translate, property, objectName, opt_options));
      }
    }
    return features;
  } else {
    return [];
  }
};


/**
 * Apply a linear transform to array of arcs.  The provided array of arcs is
 * modified in place.
 *
 * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.
 * @param {Array.<number>} scale Scale for each dimension.
 * @param {Array.<number>} translate Translation for each dimension.
 */
function transformArcs(arcs, scale, translate) {
  for (let i = 0, ii = arcs.length; i < ii; ++i) {
    transformArc(arcs[i], scale, translate);
  }
}


/**
 * Apply a linear transform to an arc.  The provided arc is modified in place.
 *
 * @param {Array.<module:ol/coordinate~Coordinate>} arc Arc.
 * @param {Array.<number>} scale Scale for each dimension.
 * @param {Array.<number>} translate Translation for each dimension.
 */
function transformArc(arc, scale, translate) {
  let x = 0;
  let y = 0;
  for (let i = 0, ii = arc.length; i < ii; ++i) {
    const vertex = arc[i];
    x += vertex[0];
    y += vertex[1];
    vertex[0] = x;
    vertex[1] = y;
    transformVertex(vertex, scale, translate);
  }
}


/**
 * Apply a linear transform to a vertex.  The provided vertex is modified in
 * place.
 *
 * @param {module:ol/coordinate~Coordinate} vertex Vertex.
 * @param {Array.<number>} scale Scale for each dimension.
 * @param {Array.<number>} translate Translation for each dimension.
 */
function transformVertex(vertex, scale, translate) {
  vertex[0] = vertex[0] * scale[0] + translate[0];
  vertex[1] = vertex[1] * scale[1] + translate[1];
}


/**
 * Read the projection from a TopoJSON source.
 *
 * @param {Document|Node|Object|string} object Source.
 * @return {module:ol/proj/Projection} Projection.
 * @override
 * @api
 */
TopoJSON.prototype.readProjection;


/**
 * @inheritDoc
 */
TopoJSON.prototype.readProjectionFromObject = function(object) {
  return this.dataProjection;
};


/**
 * Not implemented.
 * @inheritDoc
 */
TopoJSON.prototype.writeFeatureObject = function(feature, opt_options) {};


/**
 * Not implemented.
 * @inheritDoc
 */
TopoJSON.prototype.writeFeaturesObject = function(features, opt_options) {};


/**
 * Not implemented.
 * @inheritDoc
 */
TopoJSON.prototype.writeGeometryObject = function(geometry, opt_options) {};


/**
 * Not implemented.
 * @override
 */
TopoJSON.prototype.readGeometryFromObject = function() {};


/**
 * Not implemented.
 * @override
 */
TopoJSON.prototype.readFeatureFromObject = function() {};
/* harmony default export */ __webpack_exports__["a"] = (TopoJSON);


/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42);
/* harmony import */ var _format_JSONFeature_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(152);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(22);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(41);
/* harmony import */ var _geom_LinearRing_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(141);
/* harmony import */ var _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(71);
/* harmony import */ var _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(73);
/* harmony import */ var _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(30);
/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(39);
/* harmony import */ var _geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(90);
/* harmony import */ var _geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(93);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(15);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(7);
/**
 * @module ol/format/EsriJSON
 */





















/**
 * @const
 * @type {Object.<module:ol/geom/GeometryType, function(EsriJSONGeometry): module:ol/geom/Geometry>}
 */
const GEOMETRY_READERS = {};
GEOMETRY_READERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POINT] = readPointGeometry;
GEOMETRY_READERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].LINE_STRING] = readLineStringGeometry;
GEOMETRY_READERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POLYGON] = readPolygonGeometry;
GEOMETRY_READERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MULTI_POINT] = readMultiPointGeometry;
GEOMETRY_READERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MULTI_LINE_STRING] = readMultiLineStringGeometry;
GEOMETRY_READERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MULTI_POLYGON] = readMultiPolygonGeometry;


/**
 * @const
 * @type {Object.<string, function(module:ol/geom/Geometry, module:ol/format/Feature~WriteOptions=): (EsriJSONGeometry)>}
 */
const GEOMETRY_WRITERS = {};
GEOMETRY_WRITERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POINT] = writePointGeometry;
GEOMETRY_WRITERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].LINE_STRING] = writeLineStringGeometry;
GEOMETRY_WRITERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POLYGON] = writePolygonGeometry;
GEOMETRY_WRITERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MULTI_POINT] = writeMultiPointGeometry;
GEOMETRY_WRITERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MULTI_LINE_STRING] = writeMultiLineStringGeometry;
GEOMETRY_WRITERS[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MULTI_POLYGON] = writeMultiPolygonGeometry;


/**
 * @typedef {Object} Options
 * @property {string} [geometryName] Geometry name to use when creating features.
 */


/**
 * @classdesc
 * Feature format for reading and writing data in the EsriJSON format.
 *
 * @constructor
 * @extends {module:ol/format/JSONFeature}
 * @param {module:ol/format/EsriJSON~Options=} opt_options Options.
 * @api
 */
const EsriJSON = function(opt_options) {

  const options = opt_options ? opt_options : {};

  _format_JSONFeature_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].call(this);

  /**
   * Name of the geometry attribute for features.
   * @type {string|undefined}
   * @private
   */
  this.geometryName_ = options.geometryName;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(EsriJSON, _format_JSONFeature_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]);


/**
 * @param {EsriJSONGeometry} object Object.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/geom/Geometry} Geometry.
 */
function readGeometry(object, opt_options) {
  if (!object) {
    return null;
  }
  /** @type {module:ol/geom/GeometryType} */
  let type;
  if (typeof object.x === 'number' && typeof object.y === 'number') {
    type = _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POINT;
  } else if (object.points) {
    type = _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MULTI_POINT;
  } else if (object.paths) {
    if (object.paths.length === 1) {
      type = _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].LINE_STRING;
    } else {
      type = _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MULTI_LINE_STRING;
    }
  } else if (object.rings) {
    const layout = getGeometryLayout(object);
    const rings = convertRings(object.rings, layout);
    object = /** @type {EsriJSONGeometry} */(Object(_obj_js__WEBPACK_IMPORTED_MODULE_17__[/* assign */ "a"])({}, object));
    if (rings.length === 1) {
      type = _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POLYGON;
      object.rings = rings[0];
    } else {
      type = _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].MULTI_POLYGON;
      object.rings = rings;
    }
  }
  const geometryReader = GEOMETRY_READERS[type];
  return (
    /** @type {module:ol/geom/Geometry} */ (Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_4__[/* transformWithOptions */ "b"])(geometryReader(object), false, opt_options))
  );
}


/**
 * Determines inner and outer rings.
 * Checks if any polygons in this array contain any other polygons in this
 * array. It is used for checking for holes.
 * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser
 * @param {Array.<!Array.<!Array.<number>>>} rings Rings.
 * @param {module:ol/geom/GeometryLayout} layout Geometry layout.
 * @return {Array.<!Array.<!Array.<number>>>} Transformed rings.
 */
function convertRings(rings, layout) {
  const flatRing = [];
  const outerRings = [];
  const holes = [];
  let i, ii;
  for (i = 0, ii = rings.length; i < ii; ++i) {
    flatRing.length = 0;
    Object(_geom_flat_deflate_js__WEBPACK_IMPORTED_MODULE_15__[/* deflateCoordinates */ "b"])(flatRing, 0, rings[i], layout.length);
    // is this ring an outer ring? is it clockwise?
    const clockwise = Object(_geom_flat_orient_js__WEBPACK_IMPORTED_MODULE_16__[/* linearRingIsClockwise */ "a"])(flatRing, 0,
      flatRing.length, layout.length);
    if (clockwise) {
      outerRings.push([rings[i]]);
    } else {
      holes.push(rings[i]);
    }
  }
  while (holes.length) {
    const hole = holes.shift();
    let matched = false;
    // loop over all outer rings and see if they contain our hole.
    for (i = outerRings.length - 1; i >= 0; i--) {
      const outerRing = outerRings[i][0];
      const containsHole = Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* containsExtent */ "g"])(
        new _geom_LinearRing_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"](outerRing).getExtent(),
        new _geom_LinearRing_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"](hole).getExtent()
      );
      if (containsHole) {
        // the hole is contained push it into our polygon
        outerRings[i].push(hole);
        matched = true;
        break;
      }
    }
    if (!matched) {
      // no outer rings contain this hole turn it into and outer
      // ring (reverse it)
      outerRings.push([hole.reverse()]);
    }
  }
  return outerRings;
}


/**
 * @param {EsriJSONGeometry} object Object.
 * @return {module:ol/geom/Geometry} Point.
 */
function readPointGeometry(object) {
  let point;
  if (object.m !== undefined && object.z !== undefined) {
    point = new _geom_Point_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"]([object.x, object.y, object.z, object.m],
      _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM);
  } else if (object.z !== undefined) {
    point = new _geom_Point_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"]([object.x, object.y, object.z],
      _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZ);
  } else if (object.m !== undefined) {
    point = new _geom_Point_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"]([object.x, object.y, object.m],
      _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYM);
  } else {
    point = new _geom_Point_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"]([object.x, object.y]);
  }
  return point;
}


/**
 * @param {EsriJSONGeometry} object Object.
 * @return {module:ol/geom/Geometry} LineString.
 */
function readLineStringGeometry(object) {
  const layout = getGeometryLayout(object);
  return new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](object.paths[0], layout);
}


/**
 * @param {EsriJSONGeometry} object Object.
 * @return {module:ol/geom/Geometry} MultiLineString.
 */
function readMultiLineStringGeometry(object) {
  const layout = getGeometryLayout(object);
  return new _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"](object.paths, layout);
}


/**
 * @param {EsriJSONGeometry} object Object.
 * @return {module:ol/geom/GeometryLayout} The geometry layout to use.
 */
function getGeometryLayout(object) {
  let layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XY;
  if (object.hasZ === true && object.hasM === true) {
    layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM;
  } else if (object.hasZ === true) {
    layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZ;
  } else if (object.hasM === true) {
    layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYM;
  }
  return layout;
}


/**
 * @param {EsriJSONGeometry} object Object.
 * @return {module:ol/geom/Geometry} MultiPoint.
 */
function readMultiPointGeometry(object) {
  const layout = getGeometryLayout(object);
  return new _geom_MultiPoint_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"](object.points, layout);
}


/**
 * @param {EsriJSONGeometry} object Object.
 * @return {module:ol/geom/Geometry} MultiPolygon.
 */
function readMultiPolygonGeometry(object) {
  const layout = getGeometryLayout(object);
  return new _geom_MultiPolygon_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](
    /** @type {Array.<Array.<Array.<Array.<number>>>>} */(object.rings),
    layout);
}


/**
 * @param {EsriJSONGeometry} object Object.
 * @return {module:ol/geom/Geometry} Polygon.
 */
function readPolygonGeometry(object) {
  const layout = getGeometryLayout(object);
  return new _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "b"](object.rings, layout);
}


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {EsriJSONGeometry} EsriJSON geometry.
 */
function writePointGeometry(geometry, opt_options) {
  const coordinates = /** @type {module:ol/geom/Point} */ (geometry).getCoordinates();
  let esriJSON;
  const layout = /** @type {module:ol/geom/Point} */ (geometry).getLayout();
  if (layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZ) {
    esriJSON = /** @type {EsriJSONPoint} */ ({
      x: coordinates[0],
      y: coordinates[1],
      z: coordinates[2]
    });
  } else if (layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYM) {
    esriJSON = /** @type {EsriJSONPoint} */ ({
      x: coordinates[0],
      y: coordinates[1],
      m: coordinates[2]
    });
  } else if (layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM) {
    esriJSON = /** @type {EsriJSONPoint} */ ({
      x: coordinates[0],
      y: coordinates[1],
      z: coordinates[2],
      m: coordinates[3]
    });
  } else if (layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XY) {
    esriJSON = /** @type {EsriJSONPoint} */ ({
      x: coordinates[0],
      y: coordinates[1]
    });
  } else {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_2__[/* assert */ "a"])(false, 34); // Invalid geometry layout
  }
  return /** @type {EsriJSONGeometry} */ (esriJSON);
}


/**
 * @param {module:ol/geom/SimpleGeometry} geometry Geometry.
 * @return {Object} Object with boolean hasZ and hasM keys.
 */
function getHasZM(geometry) {
  const layout = geometry.getLayout();
  return {
    hasZ: (layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZ ||
      layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM),
    hasM: (layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYM ||
      layout === _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM)
  };
}


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {EsriJSONPolyline} EsriJSON geometry.
 */
function writeLineStringGeometry(geometry, opt_options) {
  const hasZM = getHasZM(/** @type {module:ol/geom/LineString} */(geometry));
  return (
    /** @type {EsriJSONPolyline} */ {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      paths: [
        /** @type {module:ol/geom/LineString} */ (geometry).getCoordinates()
      ]
    }
  );
}


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {EsriJSONPolygon} EsriJSON geometry.
 */
function writePolygonGeometry(geometry, opt_options) {
  // Esri geometries use the left-hand rule
  const hasZM = getHasZM(/** @type {module:ol/geom/Polygon} */(geometry));
  return (
    /** @type {EsriJSONPolygon} */ {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      rings: /** @type {module:ol/geom/Polygon} */ (geometry).getCoordinates(false)
    }
  );
}


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {EsriJSONPolyline} EsriJSON geometry.
 */
function writeMultiLineStringGeometry(geometry, opt_options) {
  const hasZM = getHasZM(/** @type {module:ol/geom/MultiLineString} */(geometry));
  return (
    /** @type {EsriJSONPolyline} */ {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      paths: /** @type {module:ol/geom/MultiLineString} */ (geometry).getCoordinates()
    }
  );
}


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {EsriJSONMultipoint} EsriJSON geometry.
 */
function writeMultiPointGeometry(geometry, opt_options) {
  const hasZM = getHasZM(/** @type {module:ol/geom/MultiPoint} */(geometry));
  return (
    /** @type {EsriJSONMultipoint} */ {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      points: /** @type {module:ol/geom/MultiPoint} */ (geometry).getCoordinates()
    }
  );
}


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {EsriJSONPolygon} EsriJSON geometry.
 */
function writeMultiPolygonGeometry(geometry, opt_options) {
  const hasZM = getHasZM(/** @type {module:ol/geom/MultiPolygon} */(geometry));
  const coordinates = /** @type {module:ol/geom/MultiPolygon} */ (geometry).getCoordinates(false);
  const output = [];
  for (let i = 0; i < coordinates.length; i++) {
    for (let x = coordinates[i].length - 1; x >= 0; x--) {
      output.push(coordinates[i][x]);
    }
  }
  return /** @type {EsriJSONPolygon} */ ({
    hasZ: hasZM.hasZ,
    hasM: hasZM.hasM,
    rings: output
  });
}


/**
 * Read a feature from a EsriJSON Feature source.  Only works for Feature,
 * use `readFeatures` to read FeatureCollection source.
 *
 * @function
 * @param {ArrayBuffer|Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature} Feature.
 * @api
 */
EsriJSON.prototype.readFeature;


/**
 * Read all features from a EsriJSON source.  Works with both Feature and
 * FeatureCollection sources.
 *
 * @function
 * @param {ArrayBuffer|Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
EsriJSON.prototype.readFeatures;


/**
 * @inheritDoc
 */
EsriJSON.prototype.readFeatureFromObject = function(object, opt_options) {
  const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);
  const geometry = readGeometry(esriJSONFeature.geometry, opt_options);
  const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]();
  if (this.geometryName_) {
    feature.setGeometryName(this.geometryName_);
  }
  feature.setGeometry(geometry);
  if (opt_options && opt_options.idField &&
    esriJSONFeature.attributes[opt_options.idField]) {
    feature.setId(/** @type {number} */(esriJSONFeature.attributes[opt_options.idField]));
  }
  if (esriJSONFeature.attributes) {
    feature.setProperties(esriJSONFeature.attributes);
  }
  return feature;
};


/**
 * @inheritDoc
 */
EsriJSON.prototype.readFeaturesFromObject = function(object, opt_options) {
  const esriJSONObject = /** @type {EsriJSONObject} */ (object);
  const options = opt_options ? opt_options : {};
  if (esriJSONObject.features) {
    const esriJSONFeatureCollection = /** @type {EsriJSONFeatureCollection} */ (object);
    /** @type {Array.<module:ol/Feature>} */
    const features = [];
    const esriJSONFeatures = esriJSONFeatureCollection.features;
    options.idField = object.objectIdFieldName;
    for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {
      features.push(this.readFeatureFromObject(esriJSONFeatures[i], options));
    }
    return features;
  } else {
    return [this.readFeatureFromObject(object, options)];
  }
};


/**
 * Read a geometry from a EsriJSON source.
 *
 * @function
 * @param {ArrayBuffer|Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/geom/Geometry} Geometry.
 * @api
 */
EsriJSON.prototype.readGeometry;


/**
 * @inheritDoc
 */
EsriJSON.prototype.readGeometryFromObject = function(object, opt_options) {
  return readGeometry(/** @type {EsriJSONGeometry} */(object), opt_options);
};


/**
 * Read the projection from a EsriJSON source.
 *
 * @function
 * @param {ArrayBuffer|Document|Node|Object|string} source Source.
 * @return {module:ol/proj/Projection} Projection.
 * @api
 */
EsriJSON.prototype.readProjection;


/**
 * @inheritDoc
 */
EsriJSON.prototype.readProjectionFromObject = function(object) {
  const esriJSONObject = /** @type {EsriJSONObject} */ (object);
  if (esriJSONObject.spatialReference && esriJSONObject.spatialReference.wkid) {
    const crs = esriJSONObject.spatialReference.wkid;
    return Object(_proj_js__WEBPACK_IMPORTED_MODULE_18__[/* get */ "h"])('EPSG:' + crs);
  } else {
    return null;
  }
};


/**
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {EsriJSONGeometry} EsriJSON geometry.
 */
function writeGeometry(geometry, opt_options) {
  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];
  return geometryWriter(/** @type {module:ol/geom/Geometry} */(
    Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_4__[/* transformWithOptions */ "b"])(geometry, true, opt_options)), opt_options);
}


/**
 * Encode a geometry as a EsriJSON string.
 *
 * @function
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} EsriJSON.
 * @api
 */
EsriJSON.prototype.writeGeometry;


/**
 * Encode a geometry as a EsriJSON object.
 *
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {EsriJSONGeometry} Object.
 * @override
 * @api
 */
EsriJSON.prototype.writeGeometryObject = function(geometry, opt_options) {
  return writeGeometry(geometry, this.adaptOptions(opt_options));
};


/**
 * Encode a feature as a EsriJSON Feature string.
 *
 * @function
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} EsriJSON.
 * @api
 */
EsriJSON.prototype.writeFeature;


/**
 * Encode a feature as a esriJSON Feature object.
 *
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {Object} Object.
 * @override
 * @api
 */
EsriJSON.prototype.writeFeatureObject = function(feature, opt_options) {
  opt_options = this.adaptOptions(opt_options);
  const object = {};
  const geometry = feature.getGeometry();
  if (geometry) {
    object['geometry'] = writeGeometry(geometry, opt_options);
    if (opt_options && opt_options.featureProjection) {
      object['geometry']['spatialReference'] = /** @type {EsriJSONCRS} */({
        wkid: Object(_proj_js__WEBPACK_IMPORTED_MODULE_18__[/* get */ "h"])(opt_options.featureProjection).getCode().split(':').pop()
      });
    }
  }
  const properties = feature.getProperties();
  delete properties[feature.getGeometryName()];
  if (!Object(_obj_js__WEBPACK_IMPORTED_MODULE_17__[/* isEmpty */ "d"])(properties)) {
    object['attributes'] = properties;
  } else {
    object['attributes'] = {};
  }
  return object;
};


/**
 * Encode an array of features as EsriJSON.
 *
 * @function
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} EsriJSON.
 * @api
 */
EsriJSON.prototype.writeFeatures;


/**
 * Encode an array of features as a EsriJSON object.
 *
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {Object} EsriJSON Object.
 * @override
 * @api
 */
EsriJSON.prototype.writeFeaturesObject = function(features, opt_options) {
  opt_options = this.adaptOptions(opt_options);
  const objects = [];
  for (let i = 0, ii = features.length; i < ii; ++i) {
    objects.push(this.writeFeatureObject(features[i], opt_options));
  }
  return /** @type {EsriJSONFeatureCollection} */ ({
    'features': objects
  });
};

/* harmony default export */ __webpack_exports__["a"] = (EsriJSON);


/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Image_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(138);
/* harmony import */ var _ImageState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(35);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(32);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7);
/* harmony import */ var _source_Image_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(64);
/**
 * @module ol/source/ImageStatic
 */










/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {module:ol/extent~Extent} [imageExtent] Extent of the image in map coordinates.
 * This is the [left, bottom, right, top] map coordinates of your image.
 * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {module:ol/size~Size} [imageSize] Size of the image in pixels. Usually the image size is auto-detected, so this
 * only needs to be set if auto-detection fails for some reason.
 * @property {string} url Image URL.
 */


/**
 * @classdesc
 * A layer source for displaying a single, static image.
 *
 * @constructor
 * @extends {module:ol/source/Image}
 * @param {module:ol/source/ImageStatic~Options=} options ImageStatic options.
 * @api
 */
const Static = function(options) {
  const imageExtent = options.imageExtent;

  const crossOrigin = options.crossOrigin !== undefined ?
    options.crossOrigin : null;

  const /** @type {module:ol/Image~LoadFunction} */ imageLoadFunction =
      options.imageLoadFunction !== undefined ?
        options.imageLoadFunction : _source_Image_js__WEBPACK_IMPORTED_MODULE_8__[/* defaultImageLoadFunction */ "b"];

  _source_Image_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].call(this, {
    attributions: options.attributions,
    projection: Object(_proj_js__WEBPACK_IMPORTED_MODULE_7__[/* get */ "h"])(options.projection)
  });

  /**
   * @private
   * @type {module:ol/Image}
   */
  this.image_ = new _Image_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](imageExtent, undefined, 1, options.url, crossOrigin, imageLoadFunction);

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.imageSize_ = options.imageSize ? options.imageSize : null;

  Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(this.image_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].CHANGE,
    this.handleImageChange, this);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Static, _source_Image_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"]);


/**
 * @inheritDoc
 */
Static.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {
  if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* intersects */ "F"])(extent, this.image_.getExtent())) {
    return this.image_;
  }
  return null;
};


/**
 * @inheritDoc
 */
Static.prototype.handleImageChange = function(evt) {
  if (this.image_.getState() == _ImageState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED) {
    const imageExtent = this.image_.getExtent();
    const image = this.image_.getImage();
    let imageWidth, imageHeight;
    if (this.imageSize_) {
      imageWidth = this.imageSize_[0];
      imageHeight = this.imageSize_[1];
    } else {
      imageWidth = image.width;
      imageHeight = image.height;
    }
    const resolution = Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getHeight */ "A"])(imageExtent) / imageHeight;
    const targetWidth = Math.ceil(Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getWidth */ "E"])(imageExtent) / resolution);
    if (targetWidth != imageWidth) {
      const context = Object(_dom_js__WEBPACK_IMPORTED_MODULE_3__[/* createCanvasContext2D */ "a"])(targetWidth, imageHeight);
      const canvas = context.canvas;
      context.drawImage(image, 0, 0, imageWidth, imageHeight,
        0, 0, canvas.width, canvas.height);
      this.image_.setImage(canvas);
    }
  }
  _source_Image_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].prototype.handleImageChange.call(this, evt);
};
/* harmony default export */ __webpack_exports__["a"] = (Static);


/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _structs_LRUCache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(175);
/* harmony import */ var _tilecoord_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(57);
/**
 * @module ol/TileCache
 */




/**
 * @constructor
 * @extends {module:ol/structs/LRUCache.<module:ol/Tile>}
 * @param {number=} opt_highWaterMark High water mark.
 * @struct
 */
const TileCache = function(opt_highWaterMark) {

  _structs_LRUCache_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, opt_highWaterMark);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(TileCache, _structs_LRUCache_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @param {!Object.<string, module:ol/TileRange>} usedTiles Used tiles.
 */
TileCache.prototype.expireCache = function(usedTiles) {
  while (this.canExpireCache()) {
    const tile = this.peekLast();
    const zKey = tile.tileCoord[0].toString();
    if (zKey in usedTiles && usedTiles[zKey].contains(tile.tileCoord)) {
      break;
    } else {
      this.pop().dispose();
    }
  }
};


/**
 * Prune all tiles from the cache that don't have the same z as the newest tile.
 */
TileCache.prototype.pruneExceptNewestZ = function() {
  if (this.getCount() === 0) {
    return;
  }
  const key = this.peekFirstKey();
  const tileCoord = Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_2__[/* fromKey */ "b"])(key);
  const z = tileCoord[0];
  this.forEach(function(tile) {
    if (tile.tileCoord[0] !== z) {
      this.remove(Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_2__[/* getKey */ "c"])(tile.tileCoord));
      tile.dispose();
    }
  }, this);
};
/* harmony default export */ __webpack_exports__["a"] = (TileCache);


/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14);
/* harmony import */ var _structs_PriorityQueue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(154);
/**
 * @module ol/TileQueue
 */







/**
 * @typedef {function(module:ol/Tile, string, module:ol/coordinate~Coordinate, number): number} PriorityFunction
 */


/**
 * @constructor
 * @extends {module:ol/structs/PriorityQueue.<Array>}
 * @param {module:ol/TileQueue~PriorityFunction} tilePriorityFunction
 *     Tile priority function.
 * @param {function(): ?} tileChangeCallback
 *     Function called on each tile change event.
 * @struct
 */
const TileQueue = function(tilePriorityFunction, tileChangeCallback) {

  _structs_PriorityQueue_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "b"].call(
    this,
    /**
     * @param {Array} element Element.
     * @return {number} Priority.
     */
    function(element) {
      return tilePriorityFunction.apply(null, element);
    },
    /**
     * @param {Array} element Element.
     * @return {string} Key.
     */
    function(element) {
      return (/** @type {module:ol/Tile} */ (element[0]).getKey());
    });

  /**
   * @private
   * @type {function(): ?}
   */
  this.tileChangeCallback_ = tileChangeCallback;

  /**
   * @private
   * @type {number}
   */
  this.tilesLoading_ = 0;

  /**
   * @private
   * @type {!Object.<string,boolean>}
   */
  this.tilesLoadingKeys_ = {};

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(TileQueue, _structs_PriorityQueue_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "b"]);


/**
 * @inheritDoc
 */
TileQueue.prototype.enqueue = function(element) {
  const added = _structs_PriorityQueue_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "b"].prototype.enqueue.call(this, element);
  if (added) {
    const tile = element[0];
    Object(_events_js__WEBPACK_IMPORTED_MODULE_2__[/* listen */ "a"])(tile, _events_EventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CHANGE, this.handleTileChange, this);
  }
  return added;
};


/**
 * @return {number} Number of tiles loading.
 */
TileQueue.prototype.getTilesLoading = function() {
  return this.tilesLoading_;
};


/**
 * @param {module:ol/events/Event} event Event.
 * @protected
 */
TileQueue.prototype.handleTileChange = function(event) {
  const tile = /** @type {module:ol/Tile} */ (event.target);
  const state = tile.getState();
  if (state === _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED || state === _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].ERROR ||
      state === _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].EMPTY || state === _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].ABORT) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_2__[/* unlisten */ "c"])(tile, _events_EventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CHANGE, this.handleTileChange, this);
    const tileKey = tile.getKey();
    if (tileKey in this.tilesLoadingKeys_) {
      delete this.tilesLoadingKeys_[tileKey];
      --this.tilesLoading_;
    }
    this.tileChangeCallback_();
  }
};


/**
 * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
 * @param {number} maxNewLoads Maximum number of new tiles to load.
 */
TileQueue.prototype.loadMoreTiles = function(maxTotalLoading, maxNewLoads) {
  let newLoads = 0;
  let abortedTiles = false;
  let state, tile, tileKey;
  while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads &&
         this.getCount() > 0) {
    tile = /** @type {module:ol/Tile} */ (this.dequeue()[0]);
    tileKey = tile.getKey();
    state = tile.getState();
    if (state === _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].ABORT) {
      abortedTiles = true;
    } else if (state === _TileState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].IDLE && !(tileKey in this.tilesLoadingKeys_)) {
      this.tilesLoadingKeys_[tileKey] = true;
      ++this.tilesLoading_;
      ++newLoads;
      tile.load();
    }
  }
  if (newLoads === 0 && abortedTiles) {
    // Do not stop the render loop when all wanted tiles were aborted due to
    // a small, saturated tile cache.
    this.tileChangeCallback_();
  }
};
/* harmony default export */ __webpack_exports__["a"] = (TileQueue);


/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/**
 * @module ol/AssertionError
 */


/**
 * Error object thrown when an assertion failed. This is an ECMA-262 Error,
 * extended with a `code` property.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error}
 * @constructor
 * @extends {Error}
 * @param {number} code Error code.
 */
const AssertionError = function(code) {

  const path = _util_js__WEBPACK_IMPORTED_MODULE_0__[/* VERSION */ "a"].split('-')[0];

  /**
   * @type {string}
   */
  this.message = 'Assertion failed. See https://openlayers.org/en/' + path +
      '/doc/errors/#' + code + ' for details.';

  /**
   * Error code. The meaning of the code can be found on
   * {@link https://openlayers.org/en/latest/doc/errors/} (replace `latest` with
   * the version found in the OpenLayers script's header comment if a version
   * other than the latest is used).
   * @type {number}
   * @api
   */
  this.code = code;

  this.name = 'AssertionError';

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(AssertionError, Error);

/* harmony default export */ __webpack_exports__["a"] = (AssertionError);


/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _format_GML2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(201);
/* harmony import */ var _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15);
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/**
 * @module ol/format/WMSGetFeatureInfo
 */








/**
 * @typedef {Object} Options
 * @property {Array.<string>} [layers] If set, only features of the given layers will be returned by the format when read.
 */


/**
 * @classdesc
 * Format for reading WMSGetFeatureInfo format. It uses
 * {@link module:ol/format/GML2~GML2} to read features.
 *
 * @constructor
 * @extends {module:ol/format/XMLFeature}
 * @param {module:ol/format/WMSGetFeatureInfo~Options=} opt_options Options.
 * @api
 */
const WMSGetFeatureInfo = function(opt_options) {

  const options = opt_options ? opt_options : {};

  /**
   * @private
   * @type {string}
   */
  this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';


  /**
   * @private
   * @type {module:ol/format/GML2}
   */
  this.gmlFormat_ = new _format_GML2_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]();


  /**
   * @private
   * @type {Array.<string>}
   */
  this.layers_ = options.layers ? options.layers : null;

  _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(WMSGetFeatureInfo, _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @const
 * @type {string}
 */
const featureIdentifier = '_feature';


/**
 * @const
 * @type {string}
 */
const layerIdentifier = '_layer';


/**
 * @return {Array.<string>} layers
 */
WMSGetFeatureInfo.prototype.getLayers = function() {
  return this.layers_;
};


/**
 * @param {Array.<string>} layers Layers to parse.
 */
WMSGetFeatureInfo.prototype.setLayers = function(layers) {
  this.layers_ = layers;
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Array.<module:ol/Feature>} Features.
 * @private
 */
WMSGetFeatureInfo.prototype.readFeatures_ = function(node, objectStack) {
  node.setAttribute('namespaceURI', this.featureNS_);
  const localName = node.localName;
  /** @type {Array.<module:ol/Feature>} */
  let features = [];
  if (node.childNodes.length === 0) {
    return features;
  }
  if (localName == 'msGMLOutput') {
    for (let i = 0, ii = node.childNodes.length; i < ii; i++) {
      const layer = node.childNodes[i];
      if (layer.nodeType !== Node.ELEMENT_NODE) {
        continue;
      }
      const context = objectStack[0];

      const toRemove = layerIdentifier;
      const layerName = layer.localName.replace(toRemove, '');

      if (this.layers_ && !Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* includes */ "f"])(this.layers_, layerName)) {
        continue;
      }

      const featureType = layerName +
          featureIdentifier;

      context['featureType'] = featureType;
      context['featureNS'] = this.featureNS_;

      const parsers = {};
      parsers[featureType] = Object(_xml_js__WEBPACK_IMPORTED_MODULE_5__[/* makeArrayPusher */ "j"])(
        this.gmlFormat_.readFeatureElement, this.gmlFormat_);
      const parsersNS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_5__[/* makeStructureNS */ "r"])(
        [context['featureNS'], null], parsers);
      layer.setAttribute('namespaceURI', this.featureNS_);
      const layerFeatures = Object(_xml_js__WEBPACK_IMPORTED_MODULE_5__[/* pushParseAndPop */ "u"])(
        [], parsersNS, layer, objectStack, this.gmlFormat_);
      if (layerFeatures) {
        Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* extend */ "c"])(features, layerFeatures);
      }
    }
  }
  if (localName == 'FeatureCollection') {
    const gmlFeatures = Object(_xml_js__WEBPACK_IMPORTED_MODULE_5__[/* pushParseAndPop */ "u"])([],
      this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,
      [{}], this.gmlFormat_);
    if (gmlFeatures) {
      features = gmlFeatures;
    }
  }
  return features;
};


/**
 * Read all features from a WMSGetFeatureInfo response.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
WMSGetFeatureInfo.prototype.readFeatures;


/**
 * @inheritDoc
 */
WMSGetFeatureInfo.prototype.readFeaturesFromNode = function(node, opt_options) {
  const options = {};
  if (opt_options) {
    Object(_obj_js__WEBPACK_IMPORTED_MODULE_4__[/* assign */ "a"])(options, this.getReadOptions(node, opt_options));
  }
  return this.readFeatures_(node, [options]);
};


/**
 * Not implemented.
 * @inheritDoc
 */
WMSGetFeatureInfo.prototype.writeFeatureNode = function(feature, opt_options) {};


/**
 * Not implemented.
 * @inheritDoc
 */
WMSGetFeatureInfo.prototype.writeFeaturesNode = function(features, opt_options) {};


/**
 * Not implemented.
 * @inheritDoc
 */
WMSGetFeatureInfo.prototype.writeGeometryNode = function(geometry, opt_options) {};
/* harmony default export */ __webpack_exports__["a"] = (WMSGetFeatureInfo);


/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);
/**
 * @module ol/style/Atlas
 */



/**
 * @typedef {Object} AtlasBlock
 * @property {number} x
 * @property {number} y
 * @property {number} width
 * @property {number} height
 */

/**
 * Provides information for an image inside an atlas.
 * `offsetX` and `offsetY` are the position of the image inside the atlas image `image`.
 * @typedef {Object} AtlasInfo
 * @property {number} offsetX
 * @property {number} offsetY
 * @property {HTMLCanvasElement} image
 */

/**
 * This class facilitates the creation of image atlases.
 *
 * Images added to an atlas will be rendered onto a single
 * atlas canvas. The distribution of images on the canvas is
 * managed with the bin packing algorithm described in:
 * http://www.blackpawn.com/texts/lightmaps/
 *
 * @constructor
 * @struct
 * @param {number} size The size in pixels of the sprite image.
 * @param {number} space The space in pixels between images.
 *    Because texture coordinates are float values, the edges of
 *    images might not be completely correct (in a way that the
 *    edges overlap when being rendered). To avoid this we add a
 *    padding around each image.
 */
const Atlas = function(size, space) {

  /**
   * @private
   * @type {number}
   */
  this.space_ = space;

  /**
   * @private
   * @type {Array.<module:ol/style/Atlas~AtlasBlock>}
   */
  this.emptyBlocks_ = [{x: 0, y: 0, width: size, height: size}];

  /**
   * @private
   * @type {Object.<string, module:ol/style/Atlas~AtlasInfo>}
   */
  this.entries_ = {};

  /**
   * @private
   * @type {CanvasRenderingContext2D}
   */
  this.context_ = Object(_dom_js__WEBPACK_IMPORTED_MODULE_0__[/* createCanvasContext2D */ "a"])(size, size);

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = this.context_.canvas;
};


/**
 * @param {string} id The identifier of the entry to check.
 * @return {?module:ol/style/Atlas~AtlasInfo} The atlas info.
 */
Atlas.prototype.get = function(id) {
  return this.entries_[id] || null;
};


/**
 * @param {string} id The identifier of the entry to add.
 * @param {number} width The width.
 * @param {number} height The height.
 * @param {function(CanvasRenderingContext2D, number, number)} renderCallback
 *    Called to render the new image onto an atlas image.
 * @param {Object=} opt_this Value to use as `this` when executing
 *    `renderCallback`.
 * @return {?module:ol/style/Atlas~AtlasInfo} The position and atlas image for the entry.
 */
Atlas.prototype.add = function(id, width, height, renderCallback, opt_this) {
  for (let i = 0, ii = this.emptyBlocks_.length; i < ii; ++i) {
    const block = this.emptyBlocks_[i];
    if (block.width >= width + this.space_ &&
        block.height >= height + this.space_) {
      // we found a block that is big enough for our entry
      const entry = {
        offsetX: block.x + this.space_,
        offsetY: block.y + this.space_,
        image: this.canvas_
      };
      this.entries_[id] = entry;

      // render the image on the atlas image
      renderCallback.call(opt_this, this.context_,
        block.x + this.space_, block.y + this.space_);

      // split the block after the insertion, either horizontally or vertically
      this.split_(i, block, width + this.space_, height + this.space_);

      return entry;
    }
  }

  // there is no space for the new entry in this atlas
  return null;
};


/**
 * @private
 * @param {number} index The index of the block.
 * @param {module:ol/style/Atlas~AtlasBlock} block The block to split.
 * @param {number} width The width of the entry to insert.
 * @param {number} height The height of the entry to insert.
 */
Atlas.prototype.split_ = function(index, block, width, height) {
  const deltaWidth = block.width - width;
  const deltaHeight = block.height - height;

  /** @type {module:ol/style/Atlas~AtlasBlock} */
  let newBlock1;
  /** @type {module:ol/style/Atlas~AtlasBlock} */
  let newBlock2;

  if (deltaWidth > deltaHeight) {
    // split vertically
    // block right of the inserted entry
    newBlock1 = {
      x: block.x + width,
      y: block.y,
      width: block.width - width,
      height: block.height
    };

    // block below the inserted entry
    newBlock2 = {
      x: block.x,
      y: block.y + height,
      width: width,
      height: block.height - height
    };
    this.updateBlocks_(index, newBlock1, newBlock2);
  } else {
    // split horizontally
    // block right of the inserted entry
    newBlock1 = {
      x: block.x + width,
      y: block.y,
      width: block.width - width,
      height: height
    };

    // block below the inserted entry
    newBlock2 = {
      x: block.x,
      y: block.y + height,
      width: block.width,
      height: block.height - height
    };
    this.updateBlocks_(index, newBlock1, newBlock2);
  }
};


/**
 * Remove the old block and insert new blocks at the same array position.
 * The new blocks are inserted at the same position, so that splitted
 * blocks (that are potentially smaller) are filled first.
 * @private
 * @param {number} index The index of the block to remove.
 * @param {module:ol/style/Atlas~AtlasBlock} newBlock1 The 1st block to add.
 * @param {module:ol/style/Atlas~AtlasBlock} newBlock2 The 2nd block to add.
 */
Atlas.prototype.updateBlocks_ = function(index, newBlock1, newBlock2) {
  const args = [index, 1];
  if (newBlock1.width > 0 && newBlock1.height > 0) {
    args.push(newBlock1);
  }
  if (newBlock2.width > 0 && newBlock2.height > 0) {
    args.push(newBlock2);
  }
  this.emptyBlocks_.splice.apply(this.emptyBlocks_, args);
};
/* harmony default export */ __webpack_exports__["a"] = (Atlas);


/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export CustomTile */
/* harmony import */ var _tilegrid_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(147);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _ImageTile_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(161);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19);
/* harmony import */ var _tileurlfunction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(84);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(27);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(32);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(58);
/* harmony import */ var _source_TileImage_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(65);
/* harmony import */ var _tilegrid_TileGrid_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(109);
/**
 * @module ol/source/Zoomify
 */













/**
 * @enum {string}
 */
const TierSizeCalculation = {
  DEFAULT: 'default',
  TRUNCATED: 'truncated'
};


/**
 * @constructor
 * @extends {module:ol/ImageTile}
 * @param {module:ol/tilegrid/TileGrid} tileGrid TileGrid that the tile belongs to.
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/TileState} state State.
 * @param {string} src Image source URI.
 * @param {?string} crossOrigin Cross origin.
 * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.
 * @param {module:ol/Tile~Options=} opt_options Tile options.
 */
const CustomTile = function(
  tileGrid, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {

  _ImageTile_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options);

  /**
   * @private
   * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
   */
  this.zoomifyImage_ = null;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.tileSize_ = Object(_size_js__WEBPACK_IMPORTED_MODULE_8__[/* toSize */ "d"])(tileGrid.getTileSize(tileCoord[0]));
};
Object(_util_js__WEBPACK_IMPORTED_MODULE_1__[/* inherits */ "c"])(CustomTile, _ImageTile_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * @inheritDoc
 */
CustomTile.prototype.getImage = function() {
  if (this.zoomifyImage_) {
    return this.zoomifyImage_;
  }
  const image = _ImageTile_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].prototype.getImage.call(this);
  if (this.state == _TileState_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].LOADED) {
    const tileSize = this.tileSize_;
    if (image.width == tileSize[0] && image.height == tileSize[1]) {
      this.zoomifyImage_ = image;
      return image;
    } else {
      const context = Object(_dom_js__WEBPACK_IMPORTED_MODULE_6__[/* createCanvasContext2D */ "a"])(tileSize[0], tileSize[1]);
      context.drawImage(image, 0, 0);
      this.zoomifyImage_ = context.canvas;
      return context.canvas;
    }
  } else {
    return image;
  }
};


/**
 * @typedef {Object} Options
 * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize=2048] Cache size.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {module:ol/proj~ProjectionLike} [projection] Projection.
 * @property {boolean} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {string} [url] URL template or base URL of the Zoomify service.
 * A base URL is the fixed part
 * of the URL, excluding the tile group, z, x, and y folder structure, e.g.
 * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include
 * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.
 * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.
 * Internet Imaging Protocol (IIP) with JTL extension can be also used with
 * `{tileIndex}` and `{z}` placeholders, e.g.
 * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.
 * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
 * used instead of defining each one separately in the `urls` option.
 * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.
 * @property {module:ol/size~Size} [size] Size of the image.
 * @property {module:ol/extent~Extent} [extent] Extent for the TileGrid that is created.
 * Default sets the TileGrid in the
 * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the
 * extent to the first quadrant (the default for OpenLayers 2) set the extent
 * as `[0, 0, width, height]`.
 * @property {number} [transition] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.
 */


/**
 * @classdesc
 * Layer source for tile data in Zoomify format (both Zoomify and Internet
 * Imaging Protocol are supported).
 *
 * @constructor
 * @extends {module:ol/source/TileImage}
 * @param {module:ol/source/Zoomify~Options=} opt_options Options.
 * @api
 */
const Zoomify = function(opt_options) {

  const options = opt_options || {};

  const size = options.size;
  const tierSizeCalculation = options.tierSizeCalculation !== undefined ?
    options.tierSizeCalculation :
    TierSizeCalculation.DEFAULT;

  const imageWidth = size[0];
  const imageHeight = size[1];
  const extent = options.extent || [0, -size[1], size[0], 0];
  const tierSizeInTiles = [];
  const tileSize = options.tileSize || _tilegrid_common_js__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_TILE_SIZE */ "b"];
  let tileSizeForTierSizeCalculation = tileSize;

  switch (tierSizeCalculation) {
    case TierSizeCalculation.DEFAULT:
      while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {
        tierSizeInTiles.push([
          Math.ceil(imageWidth / tileSizeForTierSizeCalculation),
          Math.ceil(imageHeight / tileSizeForTierSizeCalculation)
        ]);
        tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;
      }
      break;
    case TierSizeCalculation.TRUNCATED:
      let width = imageWidth;
      let height = imageHeight;
      while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {
        tierSizeInTiles.push([
          Math.ceil(width / tileSizeForTierSizeCalculation),
          Math.ceil(height / tileSizeForTierSizeCalculation)
        ]);
        width >>= 1;
        height >>= 1;
      }
      break;
    default:
      Object(_asserts_js__WEBPACK_IMPORTED_MODULE_5__[/* assert */ "a"])(false, 53); // Unknown `tierSizeCalculation` configured
      break;
  }

  tierSizeInTiles.push([1, 1]);
  tierSizeInTiles.reverse();

  const resolutions = [1];
  const tileCountUpToTier = [0];
  for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {
    resolutions.push(1 << i);
    tileCountUpToTier.push(
      tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +
        tileCountUpToTier[i - 1]
    );
  }
  resolutions.reverse();

  const tileGrid = new _tilegrid_TileGrid_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"]({
    tileSize: tileSize,
    extent: extent,
    origin: Object(_extent_js__WEBPACK_IMPORTED_MODULE_7__[/* getTopLeft */ "C"])(extent),
    resolutions: resolutions
  });

  let url = options.url;
  if (url && url.indexOf('{TileGroup}') == -1 && url.indexOf('{tileIndex}') == -1) {
    url += '{TileGroup}/{z}-{x}-{y}.jpg';
  }
  const urls = Object(_tileurlfunction_js__WEBPACK_IMPORTED_MODULE_4__[/* expandUrl */ "c"])(url);

  /**
   * @param {string} template Template.
   * @return {module:ol/Tile~UrlFunction} Tile URL function.
   */
  function createFromTemplate(template) {

    return (
      /**
       * @param {module:ol/tilecoord~TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {module:ol/proj/Projection} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        } else {
          const tileCoordZ = tileCoord[0];
          const tileCoordX = tileCoord[1];
          const tileCoordY = -tileCoord[2] - 1;
          const tileIndex =
              tileCoordX +
              tileCoordY * tierSizeInTiles[tileCoordZ][0];
          const tileSize = tileGrid.getTileSize(tileCoordZ);
          const tileGroup = ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileSize) | 0;
          const localContext = {
            'z': tileCoordZ,
            'x': tileCoordX,
            'y': tileCoordY,
            'tileIndex': tileIndex,
            'TileGroup': 'TileGroup' + tileGroup
          };
          return template.replace(/\{(\w+?)\}/g, function(m, p) {
            return localContext[p];
          });
        }
      }
    );
  }

  const tileUrlFunction = Object(_tileurlfunction_js__WEBPACK_IMPORTED_MODULE_4__[/* createFromTileUrlFunctions */ "b"])(urls.map(createFromTemplate));

  const ZoomifyTileClass = CustomTile.bind(null, tileGrid);

  _source_TileImage_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].call(this, {
    attributions: options.attributions,
    cacheSize: options.cacheSize,
    crossOrigin: options.crossOrigin,
    projection: options.projection,
    reprojectionErrorThreshold: options.reprojectionErrorThreshold,
    tileClass: ZoomifyTileClass,
    tileGrid: tileGrid,
    tileUrlFunction: tileUrlFunction,
    transition: options.transition
  });

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_1__[/* inherits */ "c"])(Zoomify, _source_TileImage_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]);


/* harmony default export */ __webpack_exports__["a"] = (Zoomify);


/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _colorlike_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(55);
/* harmony import */ var _geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(61);
/* harmony import */ var _has_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(48);
/* harmony import */ var _VectorContext_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(126);
/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(26);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(18);
/**
 * @module ol/render/canvas/Immediate
 */
// FIXME test, especially polygons with holes and multipolygons
// FIXME need to handle large thick features (where pixel size matters)
// FIXME add offset and end to ol/geom/flat/transform~transform2D?













/**
 * @classdesc
 * A concrete subclass of {@link module:ol/render/VectorContext} that implements
 * direct rendering of features and geometries to an HTML5 Canvas context.
 * Instances of this class are created internally by the library and
 * provided to application code as vectorContext member of the
 * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
 * render events emitted by layers and maps.
 *
 * @constructor
 * @extends {module:ol/render/VectorContext}
 * @param {CanvasRenderingContext2D} context Context.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/transform~Transform} transform Transform.
 * @param {number} viewRotation View rotation.
 * @struct
 */
const CanvasImmediateRenderer = function(context, pixelRatio, extent, transform, viewRotation) {
  _VectorContext_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {CanvasRenderingContext2D}
   */
  this.context_ = context;

  /**
   * @private
   * @type {number}
   */
  this.pixelRatio_ = pixelRatio;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.extent_ = extent;

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.transform_ = transform;

  /**
   * @private
   * @type {number}
   */
  this.viewRotation_ = viewRotation;

  /**
   * @private
   * @type {?module:ol/render/canvas~FillState}
   */
  this.contextFillState_ = null;

  /**
   * @private
   * @type {?module:ol/render/canvas~StrokeState}
   */
  this.contextStrokeState_ = null;

  /**
   * @private
   * @type {?module:ol/render/canvas~TextState}
   */
  this.contextTextState_ = null;

  /**
   * @private
   * @type {?module:ol/render/canvas~FillState}
   */
  this.fillState_ = null;

  /**
   * @private
   * @type {?module:ol/render/canvas~StrokeState}
   */
  this.strokeState_ = null;

  /**
   * @private
   * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
   */
  this.image_ = null;

  /**
   * @private
   * @type {number}
   */
  this.imageAnchorX_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.imageAnchorY_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.imageHeight_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.imageOpacity_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.imageOriginX_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.imageOriginY_ = 0;

  /**
   * @private
   * @type {boolean}
   */
  this.imageRotateWithView_ = false;

  /**
   * @private
   * @type {number}
   */
  this.imageRotation_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.imageScale_ = 0;

  /**
   * @private
   * @type {boolean}
   */
  this.imageSnapToPixel_ = false;

  /**
   * @private
   * @type {number}
   */
  this.imageWidth_ = 0;

  /**
   * @private
   * @type {string}
   */
  this.text_ = '';

  /**
   * @private
   * @type {number}
   */
  this.textOffsetX_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.textOffsetY_ = 0;

  /**
   * @private
   * @type {boolean}
   */
  this.textRotateWithView_ = false;

  /**
   * @private
   * @type {number}
   */
  this.textRotation_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.textScale_ = 0;

  /**
   * @private
   * @type {?module:ol/render/canvas~FillState}
   */
  this.textFillState_ = null;

  /**
   * @private
   * @type {?module:ol/render/canvas~StrokeState}
   */
  this.textStrokeState_ = null;

  /**
   * @private
   * @type {?module:ol/render/canvas~TextState}
   */
  this.textState_ = null;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.pixelCoordinates_ = [];

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.tmpLocalTransform_ = Object(_transform_js__WEBPACK_IMPORTED_MODULE_10__[/* create */ "c"])();

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(CanvasImmediateRenderer, _VectorContext_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"]);


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @private
 */
CanvasImmediateRenderer.prototype.drawImages_ = function(flatCoordinates, offset, end, stride) {
  if (!this.image_) {
    return;
  }
  const pixelCoordinates = Object(_geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_6__[/* transform2D */ "c"])(
    flatCoordinates, offset, end, 2, this.transform_,
    this.pixelCoordinates_);
  const context = this.context_;
  const localTransform = this.tmpLocalTransform_;
  const alpha = context.globalAlpha;
  if (this.imageOpacity_ != 1) {
    context.globalAlpha = alpha * this.imageOpacity_;
  }
  let rotation = this.imageRotation_;
  if (this.imageRotateWithView_) {
    rotation += this.viewRotation_;
  }
  for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
    let x = pixelCoordinates[i] - this.imageAnchorX_;
    let y = pixelCoordinates[i + 1] - this.imageAnchorY_;
    if (this.imageSnapToPixel_) {
      x = Math.round(x);
      y = Math.round(y);
    }
    if (rotation !== 0 || this.imageScale_ != 1) {
      const centerX = x + this.imageAnchorX_;
      const centerY = y + this.imageAnchorY_;
      Object(_transform_js__WEBPACK_IMPORTED_MODULE_10__[/* compose */ "b"])(localTransform,
        centerX, centerY,
        this.imageScale_, this.imageScale_,
        rotation,
        -centerX, -centerY);
      context.setTransform.apply(context, localTransform);
    }
    context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_,
      this.imageWidth_, this.imageHeight_, x, y,
      this.imageWidth_, this.imageHeight_);
  }
  if (rotation !== 0 || this.imageScale_ != 1) {
    context.setTransform(1, 0, 0, 1, 0, 0);
  }
  if (this.imageOpacity_ != 1) {
    context.globalAlpha = alpha;
  }
};


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @private
 */
CanvasImmediateRenderer.prototype.drawText_ = function(flatCoordinates, offset, end, stride) {
  if (!this.textState_ || this.text_ === '') {
    return;
  }
  if (this.textFillState_) {
    this.setContextFillState_(this.textFillState_);
  }
  if (this.textStrokeState_) {
    this.setContextStrokeState_(this.textStrokeState_);
  }
  this.setContextTextState_(this.textState_);
  const pixelCoordinates = Object(_geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_6__[/* transform2D */ "c"])(
    flatCoordinates, offset, end, stride, this.transform_,
    this.pixelCoordinates_);
  const context = this.context_;
  let rotation = this.textRotation_;
  if (this.textRotateWithView_) {
    rotation += this.viewRotation_;
  }
  for (; offset < end; offset += stride) {
    const x = pixelCoordinates[offset] + this.textOffsetX_;
    const y = pixelCoordinates[offset + 1] + this.textOffsetY_;
    if (rotation !== 0 || this.textScale_ != 1) {
      const localTransform = Object(_transform_js__WEBPACK_IMPORTED_MODULE_10__[/* compose */ "b"])(this.tmpLocalTransform_,
        x, y,
        this.textScale_, this.textScale_,
        rotation,
        -x, -y);
      context.setTransform.apply(context, localTransform);
    }
    if (this.textStrokeState_) {
      context.strokeText(this.text_, x, y);
    }
    if (this.textFillState_) {
      context.fillText(this.text_, x, y);
    }
  }
  if (rotation !== 0 || this.textScale_ != 1) {
    context.setTransform(1, 0, 0, 1, 0, 0);
  }
};


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {boolean} close Close.
 * @private
 * @return {number} end End.
 */
CanvasImmediateRenderer.prototype.moveToLineTo_ = function(flatCoordinates, offset, end, stride, close) {
  const context = this.context_;
  const pixelCoordinates = Object(_geom_flat_transform_js__WEBPACK_IMPORTED_MODULE_6__[/* transform2D */ "c"])(
    flatCoordinates, offset, end, stride, this.transform_,
    this.pixelCoordinates_);
  context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
  let length = pixelCoordinates.length;
  if (close) {
    length -= 2;
  }
  for (let i = 2; i < length; i += 2) {
    context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
  }
  if (close) {
    context.closePath();
  }
  return end;
};


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<number>} ends Ends.
 * @param {number} stride Stride.
 * @private
 * @return {number} End.
 */
CanvasImmediateRenderer.prototype.drawRings_ = function(flatCoordinates, offset, ends, stride) {
  for (let i = 0, ii = ends.length; i < ii; ++i) {
    offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
  }
  return offset;
};


/**
 * Render a circle geometry into the canvas.  Rendering is immediate and uses
 * the current fill and stroke styles.
 *
 * @param {module:ol/geom/Circle} geometry Circle geometry.
 * @override
 * @api
 */
CanvasImmediateRenderer.prototype.drawCircle = function(geometry) {
  if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* intersects */ "F"])(this.extent_, geometry.getExtent())) {
    return;
  }
  if (this.fillState_ || this.strokeState_) {
    if (this.fillState_) {
      this.setContextFillState_(this.fillState_);
    }
    if (this.strokeState_) {
      this.setContextStrokeState_(this.strokeState_);
    }
    const pixelCoordinates = Object(_geom_SimpleGeometry_js__WEBPACK_IMPORTED_MODULE_5__[/* transformGeom2D */ "c"])(
      geometry, this.transform_, this.pixelCoordinates_);
    const dx = pixelCoordinates[2] - pixelCoordinates[0];
    const dy = pixelCoordinates[3] - pixelCoordinates[1];
    const radius = Math.sqrt(dx * dx + dy * dy);
    const context = this.context_;
    context.beginPath();
    context.arc(
      pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
    if (this.fillState_) {
      context.fill();
    }
    if (this.strokeState_) {
      context.stroke();
    }
  }
  if (this.text_ !== '') {
    this.drawText_(geometry.getCenter(), 0, 2, 2);
  }
};


/**
 * Set the rendering style.  Note that since this is an immediate rendering API,
 * any `zIndex` on the provided style will be ignored.
 *
 * @param {module:ol/style/Style} style The rendering style.
 * @override
 * @api
 */
CanvasImmediateRenderer.prototype.setStyle = function(style) {
  this.setFillStrokeStyle(style.getFill(), style.getStroke());
  this.setImageStyle(style.getImage());
  this.setTextStyle(style.getText());
};


/**
 * Render a geometry into the canvas.  Call
 * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.
 *
 * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry The geometry to render.
 * @override
 * @api
 */
CanvasImmediateRenderer.prototype.drawGeometry = function(geometry) {
  const type = geometry.getType();
  switch (type) {
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].POINT:
      this.drawPoint(/** @type {module:ol/geom/Point} */ (geometry));
      break;
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].LINE_STRING:
      this.drawLineString(/** @type {module:ol/geom/LineString} */ (geometry));
      break;
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].POLYGON:
      this.drawPolygon(/** @type {module:ol/geom/Polygon} */ (geometry));
      break;
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].MULTI_POINT:
      this.drawMultiPoint(/** @type {module:ol/geom/MultiPoint} */ (geometry));
      break;
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].MULTI_LINE_STRING:
      this.drawMultiLineString(/** @type {module:ol/geom/MultiLineString} */ (geometry));
      break;
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].MULTI_POLYGON:
      this.drawMultiPolygon(/** @type {module:ol/geom/MultiPolygon} */ (geometry));
      break;
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].GEOMETRY_COLLECTION:
      this.drawGeometryCollection(/** @type {module:ol/geom/GeometryCollection} */ (geometry));
      break;
    case _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].CIRCLE:
      this.drawCircle(/** @type {module:ol/geom/Circle} */ (geometry));
      break;
    default:
  }
};


/**
 * Render a feature into the canvas.  Note that any `zIndex` on the provided
 * style will be ignored - features are rendered immediately in the order that
 * this method is called.  If you need `zIndex` support, you should be using an
 * {@link module:ol/layer/Vector~VectorLayer} instead.
 *
 * @param {module:ol/Feature} feature Feature.
 * @param {module:ol/style/Style} style Style.
 * @override
 * @api
 */
CanvasImmediateRenderer.prototype.drawFeature = function(feature, style) {
  const geometry = style.getGeometryFunction()(feature);
  if (!geometry || !Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* intersects */ "F"])(this.extent_, geometry.getExtent())) {
    return;
  }
  this.setStyle(style);
  this.drawGeometry(geometry);
};


/**
 * Render a GeometryCollection to the canvas.  Rendering is immediate and
 * uses the current styles appropriate for each geometry in the collection.
 *
 * @param {module:ol/geom/GeometryCollection} geometry Geometry collection.
 * @override
 */
CanvasImmediateRenderer.prototype.drawGeometryCollection = function(geometry) {
  const geometries = geometry.getGeometriesArray();
  for (let i = 0, ii = geometries.length; i < ii; ++i) {
    this.drawGeometry(geometries[i]);
  }
};


/**
 * Render a Point geometry into the canvas.  Rendering is immediate and uses
 * the current style.
 *
 * @param {module:ol/geom/Point|module:ol/render/Feature} geometry Point geometry.
 * @override
 */
CanvasImmediateRenderer.prototype.drawPoint = function(geometry) {
  const flatCoordinates = geometry.getFlatCoordinates();
  const stride = geometry.getStride();
  if (this.image_) {
    this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
  }
  if (this.text_ !== '') {
    this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
  }
};


/**
 * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
 * uses the current style.
 *
 * @param {module:ol/geom/MultiPoint|module:ol/render/Feature} geometry MultiPoint geometry.
 * @override
 */
CanvasImmediateRenderer.prototype.drawMultiPoint = function(geometry) {
  const flatCoordinates = geometry.getFlatCoordinates();
  const stride = geometry.getStride();
  if (this.image_) {
    this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
  }
  if (this.text_ !== '') {
    this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
  }
};


/**
 * Render a LineString into the canvas.  Rendering is immediate and uses
 * the current style.
 *
 * @param {module:ol/geom/LineString|module:ol/render/Feature} geometry LineString geometry.
 * @override
 */
CanvasImmediateRenderer.prototype.drawLineString = function(geometry) {
  if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* intersects */ "F"])(this.extent_, geometry.getExtent())) {
    return;
  }
  if (this.strokeState_) {
    this.setContextStrokeState_(this.strokeState_);
    const context = this.context_;
    const flatCoordinates = geometry.getFlatCoordinates();
    context.beginPath();
    this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length,
      geometry.getStride(), false);
    context.stroke();
  }
  if (this.text_ !== '') {
    const flatMidpoint = geometry.getFlatMidpoint();
    this.drawText_(flatMidpoint, 0, 2, 2);
  }
};


/**
 * Render a MultiLineString geometry into the canvas.  Rendering is immediate
 * and uses the current style.
 *
 * @param {module:ol/geom/MultiLineString|module:ol/render/Feature} geometry MultiLineString geometry.
 * @override
 */
CanvasImmediateRenderer.prototype.drawMultiLineString = function(geometry) {
  const geometryExtent = geometry.getExtent();
  if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* intersects */ "F"])(this.extent_, geometryExtent)) {
    return;
  }
  if (this.strokeState_) {
    this.setContextStrokeState_(this.strokeState_);
    const context = this.context_;
    const flatCoordinates = geometry.getFlatCoordinates();
    let offset = 0;
    const ends = geometry.getEnds();
    const stride = geometry.getStride();
    context.beginPath();
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
    }
    context.stroke();
  }
  if (this.text_ !== '') {
    const flatMidpoints = geometry.getFlatMidpoints();
    this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
  }
};


/**
 * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
 * the current style.
 *
 * @param {module:ol/geom/Polygon|module:ol/render/Feature} geometry Polygon geometry.
 * @override
 */
CanvasImmediateRenderer.prototype.drawPolygon = function(geometry) {
  if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* intersects */ "F"])(this.extent_, geometry.getExtent())) {
    return;
  }
  if (this.strokeState_ || this.fillState_) {
    if (this.fillState_) {
      this.setContextFillState_(this.fillState_);
    }
    if (this.strokeState_) {
      this.setContextStrokeState_(this.strokeState_);
    }
    const context = this.context_;
    context.beginPath();
    this.drawRings_(geometry.getOrientedFlatCoordinates(),
      0, geometry.getEnds(), geometry.getStride());
    if (this.fillState_) {
      context.fill();
    }
    if (this.strokeState_) {
      context.stroke();
    }
  }
  if (this.text_ !== '') {
    const flatInteriorPoint = geometry.getFlatInteriorPoint();
    this.drawText_(flatInteriorPoint, 0, 2, 2);
  }
};


/**
 * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
 * uses the current style.
 * @param {module:ol/geom/MultiPolygon} geometry MultiPolygon geometry.
 * @override
 */
CanvasImmediateRenderer.prototype.drawMultiPolygon = function(geometry) {
  if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_3__[/* intersects */ "F"])(this.extent_, geometry.getExtent())) {
    return;
  }
  if (this.strokeState_ || this.fillState_) {
    if (this.fillState_) {
      this.setContextFillState_(this.fillState_);
    }
    if (this.strokeState_) {
      this.setContextStrokeState_(this.strokeState_);
    }
    const context = this.context_;
    const flatCoordinates = geometry.getOrientedFlatCoordinates();
    let offset = 0;
    const endss = geometry.getEndss();
    const stride = geometry.getStride();
    context.beginPath();
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      offset = this.drawRings_(flatCoordinates, offset, ends, stride);
    }
    if (this.fillState_) {
      context.fill();
    }
    if (this.strokeState_) {
      context.stroke();
    }
  }
  if (this.text_ !== '') {
    const flatInteriorPoints = geometry.getFlatInteriorPoints();
    this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
  }
};


/**
 * @param {module:ol/render/canvas~FillState} fillState Fill state.
 * @private
 */
CanvasImmediateRenderer.prototype.setContextFillState_ = function(fillState) {
  const context = this.context_;
  const contextFillState = this.contextFillState_;
  if (!contextFillState) {
    context.fillStyle = fillState.fillStyle;
    this.contextFillState_ = {
      fillStyle: fillState.fillStyle
    };
  } else {
    if (contextFillState.fillStyle != fillState.fillStyle) {
      contextFillState.fillStyle = context.fillStyle = fillState.fillStyle;
    }
  }
};


/**
 * @param {module:ol/render/canvas~StrokeState} strokeState Stroke state.
 * @private
 */
CanvasImmediateRenderer.prototype.setContextStrokeState_ = function(strokeState) {
  const context = this.context_;
  const contextStrokeState = this.contextStrokeState_;
  if (!contextStrokeState) {
    context.lineCap = strokeState.lineCap;
    if (_has_js__WEBPACK_IMPORTED_MODULE_7__[/* CANVAS_LINE_DASH */ "a"]) {
      context.setLineDash(strokeState.lineDash);
      context.lineDashOffset = strokeState.lineDashOffset;
    }
    context.lineJoin = strokeState.lineJoin;
    context.lineWidth = strokeState.lineWidth;
    context.miterLimit = strokeState.miterLimit;
    context.strokeStyle = strokeState.strokeStyle;
    this.contextStrokeState_ = {
      lineCap: strokeState.lineCap,
      lineDash: strokeState.lineDash,
      lineDashOffset: strokeState.lineDashOffset,
      lineJoin: strokeState.lineJoin,
      lineWidth: strokeState.lineWidth,
      miterLimit: strokeState.miterLimit,
      strokeStyle: strokeState.strokeStyle
    };
  } else {
    if (contextStrokeState.lineCap != strokeState.lineCap) {
      contextStrokeState.lineCap = context.lineCap = strokeState.lineCap;
    }
    if (_has_js__WEBPACK_IMPORTED_MODULE_7__[/* CANVAS_LINE_DASH */ "a"]) {
      if (!Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* equals */ "b"])(contextStrokeState.lineDash, strokeState.lineDash)) {
        context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);
      }
      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
        contextStrokeState.lineDashOffset = context.lineDashOffset =
            strokeState.lineDashOffset;
      }
    }
    if (contextStrokeState.lineJoin != strokeState.lineJoin) {
      contextStrokeState.lineJoin = context.lineJoin = strokeState.lineJoin;
    }
    if (contextStrokeState.lineWidth != strokeState.lineWidth) {
      contextStrokeState.lineWidth = context.lineWidth = strokeState.lineWidth;
    }
    if (contextStrokeState.miterLimit != strokeState.miterLimit) {
      contextStrokeState.miterLimit = context.miterLimit =
          strokeState.miterLimit;
    }
    if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
      contextStrokeState.strokeStyle = context.strokeStyle =
          strokeState.strokeStyle;
    }
  }
};


/**
 * @param {module:ol/render/canvas~TextState} textState Text state.
 * @private
 */
CanvasImmediateRenderer.prototype.setContextTextState_ = function(textState) {
  const context = this.context_;
  const contextTextState = this.contextTextState_;
  const textAlign = textState.textAlign ?
    textState.textAlign : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultTextAlign */ "l"];
  if (!contextTextState) {
    context.font = textState.font;
    context.textAlign = textAlign;
    context.textBaseline = textState.textBaseline;
    this.contextTextState_ = {
      font: textState.font,
      textAlign: textAlign,
      textBaseline: textState.textBaseline
    };
  } else {
    if (contextTextState.font != textState.font) {
      contextTextState.font = context.font = textState.font;
    }
    if (contextTextState.textAlign != textAlign) {
      contextTextState.textAlign = context.textAlign = textAlign;
    }
    if (contextTextState.textBaseline != textState.textBaseline) {
      contextTextState.textBaseline = context.textBaseline =
          textState.textBaseline;
    }
  }
};


/**
 * Set the fill and stroke style for subsequent draw operations.  To clear
 * either fill or stroke styles, pass null for the appropriate parameter.
 *
 * @param {module:ol/style/Fill} fillStyle Fill style.
 * @param {module:ol/style/Stroke} strokeStyle Stroke style.
 * @override
 */
CanvasImmediateRenderer.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {
  if (!fillStyle) {
    this.fillState_ = null;
  } else {
    const fillStyleColor = fillStyle.getColor();
    this.fillState_ = {
      fillStyle: Object(_colorlike_js__WEBPACK_IMPORTED_MODULE_2__[/* asColorLike */ "a"])(fillStyleColor ?
        fillStyleColor : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultFillStyle */ "b"])
    };
  }
  if (!strokeStyle) {
    this.strokeState_ = null;
  } else {
    const strokeStyleColor = strokeStyle.getColor();
    const strokeStyleLineCap = strokeStyle.getLineCap();
    const strokeStyleLineDash = strokeStyle.getLineDash();
    const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
    const strokeStyleLineJoin = strokeStyle.getLineJoin();
    const strokeStyleWidth = strokeStyle.getWidth();
    const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
    this.strokeState_ = {
      lineCap: strokeStyleLineCap !== undefined ?
        strokeStyleLineCap : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineCap */ "d"],
      lineDash: strokeStyleLineDash ?
        strokeStyleLineDash : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineDash */ "e"],
      lineDashOffset: strokeStyleLineDashOffset ?
        strokeStyleLineDashOffset : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineDashOffset */ "f"],
      lineJoin: strokeStyleLineJoin !== undefined ?
        strokeStyleLineJoin : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineJoin */ "g"],
      lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ?
        strokeStyleWidth : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineWidth */ "h"]),
      miterLimit: strokeStyleMiterLimit !== undefined ?
        strokeStyleMiterLimit : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultMiterLimit */ "i"],
      strokeStyle: Object(_colorlike_js__WEBPACK_IMPORTED_MODULE_2__[/* asColorLike */ "a"])(strokeStyleColor ?
        strokeStyleColor : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultStrokeStyle */ "k"])
    };
  }
};


/**
 * Set the image style for subsequent draw operations.  Pass null to remove
 * the image style.
 *
 * @param {module:ol/style/Image} imageStyle Image style.
 * @override
 */
CanvasImmediateRenderer.prototype.setImageStyle = function(imageStyle) {
  if (!imageStyle) {
    this.image_ = null;
  } else {
    const imageAnchor = imageStyle.getAnchor();
    // FIXME pixel ratio
    const imageImage = imageStyle.getImage(1);
    const imageOrigin = imageStyle.getOrigin();
    const imageSize = imageStyle.getSize();
    this.imageAnchorX_ = imageAnchor[0];
    this.imageAnchorY_ = imageAnchor[1];
    this.imageHeight_ = imageSize[1];
    this.image_ = imageImage;
    this.imageOpacity_ = imageStyle.getOpacity();
    this.imageOriginX_ = imageOrigin[0];
    this.imageOriginY_ = imageOrigin[1];
    this.imageRotateWithView_ = imageStyle.getRotateWithView();
    this.imageRotation_ = imageStyle.getRotation();
    this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;
    this.imageSnapToPixel_ = imageStyle.getSnapToPixel();
    this.imageWidth_ = imageSize[0];
  }
};


/**
 * Set the text style for subsequent draw operations.  Pass null to
 * remove the text style.
 *
 * @param {module:ol/style/Text} textStyle Text style.
 * @override
 */
CanvasImmediateRenderer.prototype.setTextStyle = function(textStyle) {
  if (!textStyle) {
    this.text_ = '';
  } else {
    const textFillStyle = textStyle.getFill();
    if (!textFillStyle) {
      this.textFillState_ = null;
    } else {
      const textFillStyleColor = textFillStyle.getColor();
      this.textFillState_ = {
        fillStyle: Object(_colorlike_js__WEBPACK_IMPORTED_MODULE_2__[/* asColorLike */ "a"])(textFillStyleColor ?
          textFillStyleColor : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultFillStyle */ "b"])
      };
    }
    const textStrokeStyle = textStyle.getStroke();
    if (!textStrokeStyle) {
      this.textStrokeState_ = null;
    } else {
      const textStrokeStyleColor = textStrokeStyle.getColor();
      const textStrokeStyleLineCap = textStrokeStyle.getLineCap();
      const textStrokeStyleLineDash = textStrokeStyle.getLineDash();
      const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
      const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
      const textStrokeStyleWidth = textStrokeStyle.getWidth();
      const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
      this.textStrokeState_ = {
        lineCap: textStrokeStyleLineCap !== undefined ?
          textStrokeStyleLineCap : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineCap */ "d"],
        lineDash: textStrokeStyleLineDash ?
          textStrokeStyleLineDash : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineDash */ "e"],
        lineDashOffset: textStrokeStyleLineDashOffset ?
          textStrokeStyleLineDashOffset : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineDashOffset */ "f"],
        lineJoin: textStrokeStyleLineJoin !== undefined ?
          textStrokeStyleLineJoin : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineJoin */ "g"],
        lineWidth: textStrokeStyleWidth !== undefined ?
          textStrokeStyleWidth : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultLineWidth */ "h"],
        miterLimit: textStrokeStyleMiterLimit !== undefined ?
          textStrokeStyleMiterLimit : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultMiterLimit */ "i"],
        strokeStyle: Object(_colorlike_js__WEBPACK_IMPORTED_MODULE_2__[/* asColorLike */ "a"])(textStrokeStyleColor ?
          textStrokeStyleColor : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultStrokeStyle */ "k"])
      };
    }
    const textFont = textStyle.getFont();
    const textOffsetX = textStyle.getOffsetX();
    const textOffsetY = textStyle.getOffsetY();
    const textRotateWithView = textStyle.getRotateWithView();
    const textRotation = textStyle.getRotation();
    const textScale = textStyle.getScale();
    const textText = textStyle.getText();
    const textTextAlign = textStyle.getTextAlign();
    const textTextBaseline = textStyle.getTextBaseline();
    this.textState_ = {
      font: textFont !== undefined ?
        textFont : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultFont */ "c"],
      textAlign: textTextAlign !== undefined ?
        textTextAlign : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultTextAlign */ "l"],
      textBaseline: textTextBaseline !== undefined ?
        textTextBaseline : _canvas_js__WEBPACK_IMPORTED_MODULE_9__[/* defaultTextBaseline */ "m"]
    };
    this.text_ = textText !== undefined ? textText : '';
    this.textOffsetX_ =
        textOffsetX !== undefined ? (this.pixelRatio_ * textOffsetX) : 0;
    this.textOffsetY_ =
        textOffsetY !== undefined ? (this.pixelRatio_ * textOffsetY) : 0;
    this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;
    this.textRotation_ = textRotation !== undefined ? textRotation : 0;
    this.textScale_ = this.pixelRatio_ * (textScale !== undefined ?
      textScale : 1);
  }
};
/* harmony default export */ __webpack_exports__["a"] = (CanvasImmediateRenderer);


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = rbush;
module.exports.default = rbush;

var quickselect = __webpack_require__(406);

function rbush(maxEntries, format) {
    if (!(this instanceof rbush)) return new rbush(maxEntries, format);

    // max entries in a node is 9 by default; min node fill is 40% for best performance
    this._maxEntries = Math.max(4, maxEntries || 9);
    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));

    if (format) {
        this._initFormat(format);
    }

    this.clear();
}

rbush.prototype = {

    all: function () {
        return this._all(this.data, []);
    },

    search: function (bbox) {

        var node = this.data,
            result = [],
            toBBox = this.toBBox;

        if (!intersects(bbox, node)) return result;

        var nodesToSearch = [],
            i, len, child, childBBox;

        while (node) {
            for (i = 0, len = node.children.length; i < len; i++) {

                child = node.children[i];
                childBBox = node.leaf ? toBBox(child) : child;

                if (intersects(bbox, childBBox)) {
                    if (node.leaf) result.push(child);
                    else if (contains(bbox, childBBox)) this._all(child, result);
                    else nodesToSearch.push(child);
                }
            }
            node = nodesToSearch.pop();
        }

        return result;
    },

    collides: function (bbox) {

        var node = this.data,
            toBBox = this.toBBox;

        if (!intersects(bbox, node)) return false;

        var nodesToSearch = [],
            i, len, child, childBBox;

        while (node) {
            for (i = 0, len = node.children.length; i < len; i++) {

                child = node.children[i];
                childBBox = node.leaf ? toBBox(child) : child;

                if (intersects(bbox, childBBox)) {
                    if (node.leaf || contains(bbox, childBBox)) return true;
                    nodesToSearch.push(child);
                }
            }
            node = nodesToSearch.pop();
        }

        return false;
    },

    load: function (data) {
        if (!(data && data.length)) return this;

        if (data.length < this._minEntries) {
            for (var i = 0, len = data.length; i < len; i++) {
                this.insert(data[i]);
            }
            return this;
        }

        // recursively build the tree with the given data from scratch using OMT algorithm
        var node = this._build(data.slice(), 0, data.length - 1, 0);

        if (!this.data.children.length) {
            // save as is if tree is empty
            this.data = node;

        } else if (this.data.height === node.height) {
            // split root if trees have the same height
            this._splitRoot(this.data, node);

        } else {
            if (this.data.height < node.height) {
                // swap trees if inserted one is bigger
                var tmpNode = this.data;
                this.data = node;
                node = tmpNode;
            }

            // insert the small tree into the large tree at appropriate level
            this._insert(node, this.data.height - node.height - 1, true);
        }

        return this;
    },

    insert: function (item) {
        if (item) this._insert(item, this.data.height - 1);
        return this;
    },

    clear: function () {
        this.data = createNode([]);
        return this;
    },

    remove: function (item, equalsFn) {
        if (!item) return this;

        var node = this.data,
            bbox = this.toBBox(item),
            path = [],
            indexes = [],
            i, parent, index, goingUp;

        // depth-first iterative tree traversal
        while (node || path.length) {

            if (!node) { // go up
                node = path.pop();
                parent = path[path.length - 1];
                i = indexes.pop();
                goingUp = true;
            }

            if (node.leaf) { // check current node
                index = findItem(item, node.children, equalsFn);

                if (index !== -1) {
                    // item found, remove the item and condense tree upwards
                    node.children.splice(index, 1);
                    path.push(node);
                    this._condense(path);
                    return this;
                }
            }

            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
                path.push(node);
                indexes.push(i);
                i = 0;
                parent = node;
                node = node.children[0];

            } else if (parent) { // go right
                i++;
                node = parent.children[i];
                goingUp = false;

            } else node = null; // nothing found
        }

        return this;
    },

    toBBox: function (item) { return item; },

    compareMinX: compareNodeMinX,
    compareMinY: compareNodeMinY,

    toJSON: function () { return this.data; },

    fromJSON: function (data) {
        this.data = data;
        return this;
    },

    _all: function (node, result) {
        var nodesToSearch = [];
        while (node) {
            if (node.leaf) result.push.apply(result, node.children);
            else nodesToSearch.push.apply(nodesToSearch, node.children);

            node = nodesToSearch.pop();
        }
        return result;
    },

    _build: function (items, left, right, height) {

        var N = right - left + 1,
            M = this._maxEntries,
            node;

        if (N <= M) {
            // reached leaf level; return leaf
            node = createNode(items.slice(left, right + 1));
            calcBBox(node, this.toBBox);
            return node;
        }

        if (!height) {
            // target height of the bulk-loaded tree
            height = Math.ceil(Math.log(N) / Math.log(M));

            // target number of root entries to maximize storage utilization
            M = Math.ceil(N / Math.pow(M, height - 1));
        }

        node = createNode([]);
        node.leaf = false;
        node.height = height;

        // split the items into M mostly square tiles

        var N2 = Math.ceil(N / M),
            N1 = N2 * Math.ceil(Math.sqrt(M)),
            i, j, right2, right3;

        multiSelect(items, left, right, N1, this.compareMinX);

        for (i = left; i <= right; i += N1) {

            right2 = Math.min(i + N1 - 1, right);

            multiSelect(items, i, right2, N2, this.compareMinY);

            for (j = i; j <= right2; j += N2) {

                right3 = Math.min(j + N2 - 1, right2);

                // pack each entry recursively
                node.children.push(this._build(items, j, right3, height - 1));
            }
        }

        calcBBox(node, this.toBBox);

        return node;
    },

    _chooseSubtree: function (bbox, node, level, path) {

        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;

        while (true) {
            path.push(node);

            if (node.leaf || path.length - 1 === level) break;

            minArea = minEnlargement = Infinity;

            for (i = 0, len = node.children.length; i < len; i++) {
                child = node.children[i];
                area = bboxArea(child);
                enlargement = enlargedArea(bbox, child) - area;

                // choose entry with the least area enlargement
                if (enlargement < minEnlargement) {
                    minEnlargement = enlargement;
                    minArea = area < minArea ? area : minArea;
                    targetNode = child;

                } else if (enlargement === minEnlargement) {
                    // otherwise choose one with the smallest area
                    if (area < minArea) {
                        minArea = area;
                        targetNode = child;
                    }
                }
            }

            node = targetNode || node.children[0];
        }

        return node;
    },

    _insert: function (item, level, isNode) {

        var toBBox = this.toBBox,
            bbox = isNode ? item : toBBox(item),
            insertPath = [];

        // find the best node for accommodating the item, saving all nodes along the path too
        var node = this._chooseSubtree(bbox, this.data, level, insertPath);

        // put the item into the node
        node.children.push(item);
        extend(node, bbox);

        // split on node overflow; propagate upwards if necessary
        while (level >= 0) {
            if (insertPath[level].children.length > this._maxEntries) {
                this._split(insertPath, level);
                level--;
            } else break;
        }

        // adjust bboxes along the insertion path
        this._adjustParentBBoxes(bbox, insertPath, level);
    },

    // split overflowed node into two
    _split: function (insertPath, level) {

        var node = insertPath[level],
            M = node.children.length,
            m = this._minEntries;

        this._chooseSplitAxis(node, m, M);

        var splitIndex = this._chooseSplitIndex(node, m, M);

        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
        newNode.height = node.height;
        newNode.leaf = node.leaf;

        calcBBox(node, this.toBBox);
        calcBBox(newNode, this.toBBox);

        if (level) insertPath[level - 1].children.push(newNode);
        else this._splitRoot(node, newNode);
    },

    _splitRoot: function (node, newNode) {
        // split root node
        this.data = createNode([node, newNode]);
        this.data.height = node.height + 1;
        this.data.leaf = false;
        calcBBox(this.data, this.toBBox);
    },

    _chooseSplitIndex: function (node, m, M) {

        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;

        minOverlap = minArea = Infinity;

        for (i = m; i <= M - m; i++) {
            bbox1 = distBBox(node, 0, i, this.toBBox);
            bbox2 = distBBox(node, i, M, this.toBBox);

            overlap = intersectionArea(bbox1, bbox2);
            area = bboxArea(bbox1) + bboxArea(bbox2);

            // choose distribution with minimum overlap
            if (overlap < minOverlap) {
                minOverlap = overlap;
                index = i;

                minArea = area < minArea ? area : minArea;

            } else if (overlap === minOverlap) {
                // otherwise choose distribution with minimum area
                if (area < minArea) {
                    minArea = area;
                    index = i;
                }
            }
        }

        return index;
    },

    // sorts node children by the best axis for split
    _chooseSplitAxis: function (node, m, M) {

        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
            xMargin = this._allDistMargin(node, m, M, compareMinX),
            yMargin = this._allDistMargin(node, m, M, compareMinY);

        // if total distributions margin value is minimal for x, sort by minX,
        // otherwise it's already sorted by minY
        if (xMargin < yMargin) node.children.sort(compareMinX);
    },

    // total margin of all possible split distributions where each node is at least m full
    _allDistMargin: function (node, m, M, compare) {

        node.children.sort(compare);

        var toBBox = this.toBBox,
            leftBBox = distBBox(node, 0, m, toBBox),
            rightBBox = distBBox(node, M - m, M, toBBox),
            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
            i, child;

        for (i = m; i < M - m; i++) {
            child = node.children[i];
            extend(leftBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(leftBBox);
        }

        for (i = M - m - 1; i >= m; i--) {
            child = node.children[i];
            extend(rightBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(rightBBox);
        }

        return margin;
    },

    _adjustParentBBoxes: function (bbox, path, level) {
        // adjust bboxes along the given tree path
        for (var i = level; i >= 0; i--) {
            extend(path[i], bbox);
        }
    },

    _condense: function (path) {
        // go through the path, removing empty nodes and updating bboxes
        for (var i = path.length - 1, siblings; i >= 0; i--) {
            if (path[i].children.length === 0) {
                if (i > 0) {
                    siblings = path[i - 1].children;
                    siblings.splice(siblings.indexOf(path[i]), 1);

                } else this.clear();

            } else calcBBox(path[i], this.toBBox);
        }
    },

    _initFormat: function (format) {
        // data format (minX, minY, maxX, maxY accessors)

        // uses eval-type function compilation instead of just accepting a toBBox function
        // because the algorithms are very sensitive to sorting functions performance,
        // so they should be dead simple and without inner calls

        var compareArr = ['return a', ' - b', ';'];

        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));

        this.toBBox = new Function('a',
            'return {minX: a' + format[0] +
            ', minY: a' + format[1] +
            ', maxX: a' + format[2] +
            ', maxY: a' + format[3] + '};');
    }
};

function findItem(item, items, equalsFn) {
    if (!equalsFn) return items.indexOf(item);

    for (var i = 0; i < items.length; i++) {
        if (equalsFn(item, items[i])) return i;
    }
    return -1;
}

// calculate node's bbox from bboxes of its children
function calcBBox(node, toBBox) {
    distBBox(node, 0, node.children.length, toBBox, node);
}

// min bounding rectangle of node children from k to p-1
function distBBox(node, k, p, toBBox, destNode) {
    if (!destNode) destNode = createNode(null);
    destNode.minX = Infinity;
    destNode.minY = Infinity;
    destNode.maxX = -Infinity;
    destNode.maxY = -Infinity;

    for (var i = k, child; i < p; i++) {
        child = node.children[i];
        extend(destNode, node.leaf ? toBBox(child) : child);
    }

    return destNode;
}

function extend(a, b) {
    a.minX = Math.min(a.minX, b.minX);
    a.minY = Math.min(a.minY, b.minY);
    a.maxX = Math.max(a.maxX, b.maxX);
    a.maxY = Math.max(a.maxY, b.maxY);
    return a;
}

function compareNodeMinX(a, b) { return a.minX - b.minX; }
function compareNodeMinY(a, b) { return a.minY - b.minY; }

function bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

function enlargedArea(a, b) {
    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
}

function intersectionArea(a, b) {
    var minX = Math.max(a.minX, b.minX),
        minY = Math.max(a.minY, b.minY),
        maxX = Math.min(a.maxX, b.maxX),
        maxY = Math.min(a.maxY, b.maxY);

    return Math.max(0, maxX - minX) *
           Math.max(0, maxY - minY);
}

function contains(a, b) {
    return a.minX <= b.minX &&
           a.minY <= b.minY &&
           b.maxX <= a.maxX &&
           b.maxY <= a.maxY;
}

function intersects(a, b) {
    return b.minX <= a.maxX &&
           b.minY <= a.maxY &&
           b.maxX >= a.minX &&
           b.maxY >= a.minY;
}

function createNode(children) {
    return {
        children: children,
        height: 1,
        leaf: true,
        minX: Infinity,
        minY: Infinity,
        maxX: -Infinity,
        maxY: -Infinity
    };
}

// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
// combines selection algorithm with binary divide & conquer approach

function multiSelect(arr, left, right, n, compare) {
    var stack = [left, right],
        mid;

    while (stack.length) {
        right = stack.pop();
        left = stack.pop();

        if (right - left <= n) continue;

        mid = left + Math.ceil((right - left) / n / 2) * n;
        quickselect(arr, mid, left, right, compare);

        stack.push(left, mid, mid, right);
    }
}


/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/render/ReplayGroup
 */
/**
 * Base class for replay groups.
 * @constructor
 * @abstract
 */
const ReplayGroup = function() {};


/**
 * @abstract
 * @param {number|undefined} zIndex Z index.
 * @param {module:ol/render/ReplayType} replayType Replay type.
 * @return {module:ol/render/VectorContext} Replay.
 */
ReplayGroup.prototype.getReplay = function(zIndex, replayType) {};


/**
 * @abstract
 * @return {boolean} Is empty.
 */
ReplayGroup.prototype.isEmpty = function() {};
/* harmony default export */ __webpack_exports__["a"] = (ReplayGroup);


/***/ }),
/* 194 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _ImageState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(35);
/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(108);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(29);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(50);
/**
 * @module ol/renderer/Layer
 */









/**
 * @constructor
 * @extends {module:ol/Observable}
 * @param {module:ol/layer/Layer} layer Layer.
 * @struct
 */
const LayerRenderer = function(layer) {

  _Observable_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {module:ol/layer/Layer}
   */
  this.layer_ = layer;


};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(LayerRenderer, _Observable_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {number} hitTolerance Hit tolerance in pixels.
 * @param {function(this: S, (module:ol/Feature|module:ol/render/Feature), module:ol/layer/Layer): T}
 *     callback Feature callback.
 * @param {S} thisArg Value to use as `this` when executing `callback`.
 * @return {T|undefined} Callback result.
 * @template S,T
 */
LayerRenderer.prototype.forEachFeatureAtCoordinate = _functions_js__WEBPACK_IMPORTED_MODULE_6__[/* UNDEFINED */ "c"];


/**
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @return {boolean} Is there a feature at the given coordinate?
 */
LayerRenderer.prototype.hasFeatureAtCoordinate = _functions_js__WEBPACK_IMPORTED_MODULE_6__[/* FALSE */ "a"];


/**
 * Create a function that adds loaded tiles to the tile lookup.
 * @param {module:ol/source/Tile} source Tile source.
 * @param {module:ol/proj/Projection} projection Projection of the tiles.
 * @param {Object.<number, Object.<string, module:ol/Tile>>} tiles Lookup of loaded tiles by zoom level.
 * @return {function(number, module:ol/TileRange):boolean} A function that can be
 *     called with a zoom level and a tile range to add loaded tiles to the lookup.
 * @protected
 */
LayerRenderer.prototype.createLoadedTileFinder = function(source, projection, tiles) {
  return (
    /**
     * @param {number} zoom Zoom level.
     * @param {module:ol/TileRange} tileRange Tile range.
     * @return {boolean} The tile range is fully loaded.
     */
    function(zoom, tileRange) {
      function callback(tile) {
        if (!tiles[zoom]) {
          tiles[zoom] = {};
        }
        tiles[zoom][tile.tileCoord.toString()] = tile;
      }
      return source.forEachLoadedTile(projection, zoom, tileRange, callback);
    }
  );
};


/**
 * @return {module:ol/layer/Layer} Layer.
 */
LayerRenderer.prototype.getLayer = function() {
  return this.layer_;
};


/**
 * Handle changes in image state.
 * @param {module:ol/events/Event} event Image change event.
 * @private
 */
LayerRenderer.prototype.handleImageChange_ = function(event) {
  const image = /** @type {module:ol/Image} */ (event.target);
  if (image.getState() === _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED) {
    this.renderIfReadyAndVisible();
  }
};


/**
 * Load the image if not already loaded, and register the image change
 * listener if needed.
 * @param {module:ol/ImageBase} image Image.
 * @return {boolean} `true` if the image is already loaded, `false` otherwise.
 * @protected
 */
LayerRenderer.prototype.loadImage = function(image) {
  let imageState = image.getState();
  if (imageState != _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED && imageState != _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].ERROR) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(image, _events_EventType_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].CHANGE, this.handleImageChange_, this);
  }
  if (imageState == _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].IDLE) {
    image.load();
    imageState = image.getState();
  }
  return imageState == _ImageState_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].LOADED;
};


/**
 * @protected
 */
LayerRenderer.prototype.renderIfReadyAndVisible = function() {
  const layer = this.getLayer();
  if (layer.getVisible() && layer.getSourceState() == _source_State_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].READY) {
    this.changed();
  }
};


/**
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/source/Tile} tileSource Tile source.
 * @protected
 */
LayerRenderer.prototype.scheduleExpireCache = function(frameState, tileSource) {
  if (tileSource.canExpireCache()) {
    /**
     * @param {module:ol/source/Tile} tileSource Tile source.
     * @param {module:ol/PluggableMap} map Map.
     * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
     */
    const postRenderFunction = function(tileSource, map, frameState) {
      const tileSourceKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(tileSource).toString();
      if (tileSourceKey in frameState.usedTiles) {
        tileSource.expireCache(frameState.viewState.projection,
          frameState.usedTiles[tileSourceKey]);
      }
    }.bind(null, tileSource);

    frameState.postRenderFunctions.push(
      /** @type {module:ol/PluggableMap~PostRenderFunction} */ (postRenderFunction)
    );
  }
};


/**
 * @param {!Object.<string, !Object.<string, module:ol/TileRange>>} usedTiles Used tiles.
 * @param {module:ol/source/Tile} tileSource Tile source.
 * @param {number} z Z.
 * @param {module:ol/TileRange} tileRange Tile range.
 * @protected
 */
LayerRenderer.prototype.updateUsedTiles = function(usedTiles, tileSource, z, tileRange) {
  // FIXME should we use tilesToDrawByZ instead?
  const tileSourceKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(tileSource).toString();
  const zKey = z.toString();
  if (tileSourceKey in usedTiles) {
    if (zKey in usedTiles[tileSourceKey]) {
      usedTiles[tileSourceKey][zKey].extend(tileRange);
    } else {
      usedTiles[tileSourceKey][zKey] = tileRange;
    }
  } else {
    usedTiles[tileSourceKey] = {};
    usedTiles[tileSourceKey][zKey] = tileRange;
  }
};


/**
 * Manage tile pyramid.
 * This function performs a number of functions related to the tiles at the
 * current zoom and lower zoom levels:
 * - registers idle tiles in frameState.wantedTiles so that they are not
 *   discarded by the tile queue
 * - enqueues missing tiles
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @param {module:ol/source/Tile} tileSource Tile source.
 * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {number} currentZ Current Z.
 * @param {number} preload Load low resolution tiles up to 'preload' levels.
 * @param {function(this: T, module:ol/Tile)=} opt_tileCallback Tile callback.
 * @param {T=} opt_this Object to use as `this` in `opt_tileCallback`.
 * @protected
 * @template T
 */
LayerRenderer.prototype.manageTilePyramid = function(
  frameState, tileSource, tileGrid, pixelRatio, projection, extent,
  currentZ, preload, opt_tileCallback, opt_this) {
  const tileSourceKey = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(tileSource).toString();
  if (!(tileSourceKey in frameState.wantedTiles)) {
    frameState.wantedTiles[tileSourceKey] = {};
  }
  const wantedTiles = frameState.wantedTiles[tileSourceKey];
  const tileQueue = frameState.tileQueue;
  const minZoom = tileGrid.getMinZoom();
  let tile, tileRange, tileResolution, x, y, z;
  for (z = minZoom; z <= currentZ; ++z) {
    tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
    tileResolution = tileGrid.getResolution(z);
    for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
      for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
        if (currentZ - z <= preload) {
          tile = tileSource.getTile(z, x, y, pixelRatio, projection);
          if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].IDLE) {
            wantedTiles[tile.getKey()] = true;
            if (!tileQueue.isKeyQueued(tile.getKey())) {
              tileQueue.enqueue([tile, tileSourceKey,
                tileGrid.getTileCoordCenter(tile.tileCoord), tileResolution]);
            }
          }
          if (opt_tileCallback !== undefined) {
            opt_tileCallback.call(opt_this, tile);
          }
        } else {
          tileSource.useTile(z, x, y, projection);
        }
      }
    }
  }
};
/* harmony default export */ __webpack_exports__["a"] = (LayerRenderer);


/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31);
/* harmony import */ var _layer_Property_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(21);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15);
/**
 * @module ol/layer/Base
 */







/**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 */


/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in
 * the options is set as a {@link module:ol/Object} property on the layer object, so
 * is observable, and has get/set accessors.
 *
 * @constructor
 * @abstract
 * @extends {module:ol/Object}
 * @param {module:ol/layer/Base~Options} options Layer options.
 * @api
 */
const BaseLayer = function(options) {

  _Object_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this);

  /**
   * @type {Object.<string, *>}
   */
  const properties = Object(_obj_js__WEBPACK_IMPORTED_MODULE_4__[/* assign */ "a"])({}, options);
  properties[_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].OPACITY] =
      options.opacity !== undefined ? options.opacity : 1;
  properties[_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].VISIBLE] =
      options.visible !== undefined ? options.visible : true;
  properties[_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].Z_INDEX] =
      options.zIndex !== undefined ? options.zIndex : 0;
  properties[_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].MAX_RESOLUTION] =
      options.maxResolution !== undefined ? options.maxResolution : Infinity;
  properties[_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].MIN_RESOLUTION] =
      options.minResolution !== undefined ? options.minResolution : 0;

  this.setProperties(properties);

  /**
   * @type {module:ol/layer/Layer~State}
   * @private
   */
  this.state_ = /** @type {module:ol/layer/Layer~State} */ ({
    layer: /** @type {module:ol/layer/Layer} */ (this),
    managed: true
  });

  /**
   * The layer type.
   * @type {module:ol/LayerType}
   * @protected;
   */
  this.type;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(BaseLayer, _Object_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * Get the layer type (used when creating a layer renderer).
 * @return {module:ol/LayerType} The layer type.
 */
BaseLayer.prototype.getType = function() {
  return this.type;
};


/**
 * @return {module:ol/layer/Layer~State} Layer state.
 */
BaseLayer.prototype.getLayerState = function() {
  this.state_.opacity = Object(_math_js__WEBPACK_IMPORTED_MODULE_3__[/* clamp */ "a"])(this.getOpacity(), 0, 1);
  this.state_.sourceState = this.getSourceState();
  this.state_.visible = this.getVisible();
  this.state_.extent = this.getExtent();
  this.state_.zIndex = this.getZIndex();
  this.state_.maxResolution = this.getMaxResolution();
  this.state_.minResolution = Math.max(this.getMinResolution(), 0);

  return this.state_;
};


/**
 * @abstract
 * @param {Array.<module:ol/layer/Layer>=} opt_array Array of layers (to be
 *     modified in place).
 * @return {Array.<module:ol/layer/Layer>} Array of layers.
 */
BaseLayer.prototype.getLayersArray = function(opt_array) {};


/**
 * @abstract
 * @param {Array.<module:ol/layer/Layer~State>=} opt_states Optional list of layer
 *     states (to be modified in place).
 * @return {Array.<module:ol/layer/Layer~State>} List of layer states.
 */
BaseLayer.prototype.getLayerStatesArray = function(opt_states) {};


/**
 * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
 * will be visible regardless of extent.
 * @return {module:ol/extent~Extent|undefined} The layer extent.
 * @observable
 * @api
 */
BaseLayer.prototype.getExtent = function() {
  return (
    /** @type {module:ol/extent~Extent|undefined} */ (this.get(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EXTENT))
  );
};


/**
 * Return the maximum resolution of the layer.
 * @return {number} The maximum resolution of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.getMaxResolution = function() {
  return /** @type {number} */ (this.get(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].MAX_RESOLUTION));
};


/**
 * Return the minimum resolution of the layer.
 * @return {number} The minimum resolution of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.getMinResolution = function() {
  return /** @type {number} */ (this.get(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].MIN_RESOLUTION));
};


/**
 * Return the opacity of the layer (between 0 and 1).
 * @return {number} The opacity of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.getOpacity = function() {
  return /** @type {number} */ (this.get(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].OPACITY));
};


/**
 * @abstract
 * @return {module:ol/source/State} Source state.
 */
BaseLayer.prototype.getSourceState = function() {};


/**
 * Return the visibility of the layer (`true` or `false`).
 * @return {boolean} The visibility of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.getVisible = function() {
  return /** @type {boolean} */ (this.get(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].VISIBLE));
};


/**
 * Return the Z-index of the layer, which is used to order layers before
 * rendering. The default Z-index is 0.
 * @return {number} The Z-index of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.getZIndex = function() {
  return /** @type {number} */ (this.get(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].Z_INDEX));
};


/**
 * Set the extent at which the layer is visible.  If `undefined`, the layer
 * will be visible at all extents.
 * @param {module:ol/extent~Extent|undefined} extent The extent of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.setExtent = function(extent) {
  this.set(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EXTENT, extent);
};


/**
 * Set the maximum resolution at which the layer is visible.
 * @param {number} maxResolution The maximum resolution of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.setMaxResolution = function(maxResolution) {
  this.set(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].MAX_RESOLUTION, maxResolution);
};


/**
 * Set the minimum resolution at which the layer is visible.
 * @param {number} minResolution The minimum resolution of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.setMinResolution = function(minResolution) {
  this.set(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].MIN_RESOLUTION, minResolution);
};


/**
 * Set the opacity of the layer, allowed values range from 0 to 1.
 * @param {number} opacity The opacity of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.setOpacity = function(opacity) {
  this.set(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].OPACITY, opacity);
};


/**
 * Set the visibility of the layer (`true` or `false`).
 * @param {boolean} visible The visibility of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.setVisible = function(visible) {
  this.set(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].VISIBLE, visible);
};


/**
 * Set Z-index of the layer, which is used to order layers before rendering.
 * The default Z-index is 0.
 * @param {number} zindex The z-index of the layer.
 * @observable
 * @api
 */
BaseLayer.prototype.setZIndex = function(zindex) {
  this.set(_layer_Property_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].Z_INDEX, zindex);
};
/* harmony default export */ __webpack_exports__["a"] = (BaseLayer);


/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return defaultLoadFunction; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Tile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(32);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);
/* harmony import */ var _featureloader_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(227);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(29);
/**
 * @module ol/VectorImageTile
 */











/**
 * @typedef {Object} ReplayState
 * @property {boolean} dirty
 * @property {null|module:ol/render~OrderFunction} renderedRenderOrder
 * @property {number} renderedTileRevision
 * @property {number} renderedRevision
 */


/**
 * @constructor
 * @extends {module:ol/Tile}
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/TileState} state State.
 * @param {number} sourceRevision Source revision.
 * @param {module:ol/format/Feature} format Feature format.
 * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.
 * @param {module:ol/tilecoord~TileCoord} urlTileCoord Wrapped tile coordinate for source urls.
 * @param {module:ol/Tile~UrlFunction} tileUrlFunction Tile url function.
 * @param {module:ol/tilegrid/TileGrid} sourceTileGrid Tile grid of the source.
 * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid of the renderer.
 * @param {Object.<string, module:ol/VectorTile>} sourceTiles Source tiles.
 * @param {number} pixelRatio Pixel ratio.
 * @param {module:ol/proj/Projection} projection Projection.
 * @param {function(new: module:ol/VectorTile, module:ol/tilecoord~TileCoord, module:ol/TileState, string,
 *     module:ol/format/Feature, module:ol/Tile~LoadFunction)} tileClass Class to
 *     instantiate for source tiles.
 * @param {function(this: module:ol/source/VectorTile, module:ol/events/Event)} handleTileChange
 *     Function to call when a source tile's state changes.
 * @param {number} zoom Integer zoom to render the tile for.
 */
const VectorImageTile = function(tileCoord, state, sourceRevision, format,
  tileLoadFunction, urlTileCoord, tileUrlFunction, sourceTileGrid, tileGrid,
  sourceTiles, pixelRatio, projection, tileClass, handleTileChange, zoom) {

  _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, tileCoord, state, {transition: 0});

  /**
   * @private
   * @type {!Object.<string, CanvasRenderingContext2D>}
   */
  this.context_ = {};

  /**
   * @private
   * @type {module:ol/featureloader~FeatureLoader}
   */
  this.loader_;

  /**
   * @private
   * @type {!Object.<string, module:ol/VectorImageTile~ReplayState>}
   */
  this.replayState_ = {};

  /**
   * @private
   * @type {Object.<string, module:ol/VectorTile>}
   */
  this.sourceTiles_ = sourceTiles;

  /**
   * Keys of source tiles used by this tile. Use with {@link #getTile}.
   * @type {Array.<string>}
   */
  this.tileKeys = [];

  /**
   * @type {module:ol/extent~Extent}
   */
  this.extent = null;

  /**
   * @type {number}
   */
  this.sourceRevision_ = sourceRevision;

  /**
   * @type {module:ol/tilecoord~TileCoord}
   */
  this.wrappedTileCoord = urlTileCoord;

  /**
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.loadListenerKeys_ = [];

  /**
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.sourceTileListenerKeys_ = [];

  if (urlTileCoord) {
    const extent = this.extent = tileGrid.getTileCoordExtent(urlTileCoord);
    const resolution = tileGrid.getResolution(zoom);
    const sourceZ = sourceTileGrid.getZForResolution(resolution);
    const useLoadedOnly = zoom != tileCoord[0];
    let loadCount = 0;
    sourceTileGrid.forEachTileCoord(extent, sourceZ, function(sourceTileCoord) {
      let sharedExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_5__[/* getIntersection */ "B"])(extent,
        sourceTileGrid.getTileCoordExtent(sourceTileCoord));
      const sourceExtent = sourceTileGrid.getExtent();
      if (sourceExtent) {
        sharedExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_5__[/* getIntersection */ "B"])(sharedExtent, sourceExtent, sharedExtent);
      }
      if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_5__[/* getWidth */ "E"])(sharedExtent) / resolution >= 0.5 &&
          Object(_extent_js__WEBPACK_IMPORTED_MODULE_5__[/* getHeight */ "A"])(sharedExtent) / resolution >= 0.5) {
        // only include source tile if overlap is at least 1 pixel
        ++loadCount;
        const sourceTileKey = sourceTileCoord.toString();
        let sourceTile = sourceTiles[sourceTileKey];
        if (!sourceTile && !useLoadedOnly) {
          const tileUrl = tileUrlFunction(sourceTileCoord, pixelRatio, projection);
          sourceTile = sourceTiles[sourceTileKey] = new tileClass(sourceTileCoord,
            tileUrl == undefined ? _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EMPTY : _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE,
            tileUrl == undefined ? '' : tileUrl,
            format, tileLoadFunction);
          this.sourceTileListenerKeys_.push(
            Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(sourceTile, _events_EventType_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].CHANGE, handleTileChange));
        }
        if (sourceTile && (!useLoadedOnly || sourceTile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED)) {
          sourceTile.consumers++;
          this.tileKeys.push(sourceTileKey);
        }
      }
    }.bind(this));

    if (useLoadedOnly && loadCount == this.tileKeys.length) {
      this.finishLoading_();
    }

    if (zoom <= tileCoord[0] && this.state != _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED) {
      while (zoom > tileGrid.getMinZoom()) {
        const tile = new VectorImageTile(tileCoord, state, sourceRevision,
          format, tileLoadFunction, urlTileCoord, tileUrlFunction,
          sourceTileGrid, tileGrid, sourceTiles, pixelRatio, projection,
          tileClass, _functions_js__WEBPACK_IMPORTED_MODULE_8__[/* UNDEFINED */ "c"], --zoom);
        if (tile.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED) {
          this.interimTile = tile;
          break;
        }
      }
    }
  }

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(VectorImageTile, _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * @inheritDoc
 */
VectorImageTile.prototype.disposeInternal = function() {
  this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ABORT;
  this.changed();
  if (this.interimTile) {
    this.interimTile.dispose();
  }

  for (let i = 0, ii = this.tileKeys.length; i < ii; ++i) {
    const sourceTileKey = this.tileKeys[i];
    const sourceTile = this.getTile(sourceTileKey);
    sourceTile.consumers--;
    if (sourceTile.consumers == 0) {
      delete this.sourceTiles_[sourceTileKey];
      sourceTile.dispose();
    }
  }
  this.tileKeys.length = 0;
  this.sourceTiles_ = null;
  this.loadListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* unlistenByKey */ "e"]);
  this.loadListenerKeys_.length = 0;
  this.sourceTileListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* unlistenByKey */ "e"]);
  this.sourceTileListenerKeys_.length = 0;
  _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].prototype.disposeInternal.call(this);
};


/**
 * @param {module:ol/layer/Layer} layer Layer.
 * @return {CanvasRenderingContext2D} The rendering context.
 */
VectorImageTile.prototype.getContext = function(layer) {
  const key = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layer).toString();
  if (!(key in this.context_)) {
    this.context_[key] = Object(_dom_js__WEBPACK_IMPORTED_MODULE_3__[/* createCanvasContext2D */ "a"])();
  }
  return this.context_[key];
};


/**
 * Get the Canvas for this tile.
 * @param {module:ol/layer/Layer} layer Layer.
 * @return {HTMLCanvasElement} Canvas.
 */
VectorImageTile.prototype.getImage = function(layer) {
  return this.getReplayState(layer).renderedTileRevision == -1 ?
    null : this.getContext(layer).canvas;
};


/**
 * @param {module:ol/layer/Layer} layer Layer.
 * @return {module:ol/VectorImageTile~ReplayState} The replay state.
 */
VectorImageTile.prototype.getReplayState = function(layer) {
  const key = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layer).toString();
  if (!(key in this.replayState_)) {
    this.replayState_[key] = {
      dirty: false,
      renderedRenderOrder: null,
      renderedRevision: -1,
      renderedTileRevision: -1
    };
  }
  return this.replayState_[key];
};


/**
 * @inheritDoc
 */
VectorImageTile.prototype.getKey = function() {
  return this.tileKeys.join('/') + '-' + this.sourceRevision_;
};


/**
 * @param {string} tileKey Key (tileCoord) of the source tile.
 * @return {module:ol/VectorTile} Source tile.
 */
VectorImageTile.prototype.getTile = function(tileKey) {
  return this.sourceTiles_[tileKey];
};


/**
 * @inheritDoc
 */
VectorImageTile.prototype.load = function() {
  // Source tiles with LOADED state - we just count them because once they are
  // loaded, we're no longer listening to state changes.
  let leftToLoad = 0;
  // Source tiles with ERROR state - we track them because they can still have
  // an ERROR state after another load attempt.
  const errorSourceTiles = {};

  if (this.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE) {
    this.setState(_TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADING);
  }
  if (this.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADING) {
    this.tileKeys.forEach(function(sourceTileKey) {
      const sourceTile = this.getTile(sourceTileKey);
      if (sourceTile.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE) {
        sourceTile.setLoader(this.loader_);
        sourceTile.load();
      }
      if (sourceTile.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADING) {
        const key = Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(sourceTile, _events_EventType_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].CHANGE, function(e) {
          const state = sourceTile.getState();
          if (state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED ||
              state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR) {
            const uid = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(sourceTile);
            if (state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR) {
              errorSourceTiles[uid] = true;
            } else {
              --leftToLoad;
              delete errorSourceTiles[uid];
            }
            if (leftToLoad - Object.keys(errorSourceTiles).length == 0) {
              this.finishLoading_();
            }
          }
        }.bind(this));
        this.loadListenerKeys_.push(key);
        ++leftToLoad;
      }
    }.bind(this));
  }
  if (leftToLoad - Object.keys(errorSourceTiles).length == 0) {
    setTimeout(this.finishLoading_.bind(this), 0);
  }
};


/**
 * @private
 */
VectorImageTile.prototype.finishLoading_ = function() {
  let loaded = this.tileKeys.length;
  let empty = 0;
  for (let i = loaded - 1; i >= 0; --i) {
    const state = this.getTile(this.tileKeys[i]).getState();
    if (state != _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED) {
      --loaded;
    }
    if (state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EMPTY) {
      ++empty;
    }
  }
  if (loaded == this.tileKeys.length) {
    this.loadListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* unlistenByKey */ "e"]);
    this.loadListenerKeys_.length = 0;
    this.setState(_TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED);
  } else {
    this.setState(empty == this.tileKeys.length ? _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EMPTY : _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR);
  }
};

/* harmony default export */ __webpack_exports__["a"] = (VectorImageTile);

/**
 * Sets the loader for a tile.
 * @param {module:ol/VectorTile} tile Vector tile.
 * @param {string} url URL.
 */
function defaultLoadFunction(tile, url) {
  const loader = Object(_featureloader_js__WEBPACK_IMPORTED_MODULE_7__[/* loadFeaturesXhr */ "a"])(url, tile.getFormat(), tile.onLoad.bind(tile), tile.onError.bind(tile));
  tile.setLoader(loader);
}


/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _colorlike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);
/* harmony import */ var _has_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48);
/* harmony import */ var _ImageState_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(35);
/* harmony import */ var _render_canvas_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26);
/* harmony import */ var _style_Image_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(163);
/**
 * @module ol/style/RegularShape
 */









/**
 * Specify radius for regular polygons, or radius1 and radius2 for stars.
 * @typedef {Object} Options
 * @property {module:ol/style/Fill} [fill] Fill style.
 * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
 * is the number of sides.
 * @property {number} [radius] Radius of a regular polygon.
 * @property {number} [radius1] Outer radius of a star.
 * @property {number} [radius2] Inner radius of a star.
 * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
 * @property {boolean} [snapToPixel=true] If `true` integral numbers of pixels are used as the X and Y pixel coordinate
 * when drawing the shape in the output canvas. If `false` fractional numbers may be used. Using `true` allows for
 * "sharp" rendering (no blur), while using `false` allows for "accurate" rendering. Note that accuracy is important if
 * the shape's position is animated. Without it, the shape may jitter noticeably.
 * @property {module:ol/style/Stroke} [stroke] Stroke style.
 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
 * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
 * @property {module:ol/style/AtlasManager} [atlasManager] The atlas manager to use for this symbol. When
 * using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given, the
 * symbol is added to an atlas. By default no atlas manager is used.
 */


/**
 * @typedef {Object} RenderOptions
 * @property {module:ol/colorlike~ColorLike} [strokeStyle]
 * @property {number} strokeWidth
 * @property {number} size
 * @property {string} lineCap
 * @property {Array.<number>} lineDash
 * @property {number} lineDashOffset
 * @property {string} lineJoin
 * @property {number} miterLimit
 */


/**
 * @classdesc
 * Set regular shape style for vector features. The resulting shape will be
 * a regular polygon when `radius` is provided, or a star when `radius1` and
 * `radius2` are provided.
 *
 * @constructor
 * @param {module:ol/style/RegularShape~Options} options Options.
 * @extends {module:ol/style/Image}
 * @api
 */
const RegularShape = function(options) {
  /**
   * @private
   * @type {Array.<string>}
   */
  this.checksums_ = null;

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = null;

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.hitDetectionCanvas_ = null;

  /**
   * @private
   * @type {module:ol/style/Fill}
   */
  this.fill_ = options.fill !== undefined ? options.fill : null;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.origin_ = [0, 0];

  /**
   * @private
   * @type {number}
   */
  this.points_ = options.points;

  /**
   * @protected
   * @type {number}
   */
  this.radius_ = /** @type {number} */ (options.radius !== undefined ?
    options.radius : options.radius1);

  /**
   * @private
   * @type {number|undefined}
   */
  this.radius2_ = options.radius2;

  /**
   * @private
   * @type {number}
   */
  this.angle_ = options.angle !== undefined ? options.angle : 0;

  /**
   * @private
   * @type {module:ol/style/Stroke}
   */
  this.stroke_ = options.stroke !== undefined ? options.stroke : null;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.anchor_ = null;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.size_ = null;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.imageSize_ = null;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.hitDetectionImageSize_ = null;

  /**
   * @protected
   * @type {module:ol/style/AtlasManager|undefined}
   */
  this.atlasManager_ = options.atlasManager;

  this.render_(this.atlasManager_);

  /**
   * @type {boolean}
   */
  const snapToPixel = options.snapToPixel !== undefined ?
    options.snapToPixel : true;

  /**
   * @type {boolean}
   */
  const rotateWithView = options.rotateWithView !== undefined ?
    options.rotateWithView : false;

  _style_Image_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].call(this, {
    opacity: 1,
    rotateWithView: rotateWithView,
    rotation: options.rotation !== undefined ? options.rotation : 0,
    scale: 1,
    snapToPixel: snapToPixel
  });
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(RegularShape, _style_Image_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"]);


/**
 * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.
 * @return {module:ol/style/RegularShape} The cloned style.
 * @api
 */
RegularShape.prototype.clone = function() {
  const style = new RegularShape({
    fill: this.getFill() ? this.getFill().clone() : undefined,
    points: this.getPoints(),
    radius: this.getRadius(),
    radius2: this.getRadius2(),
    angle: this.getAngle(),
    snapToPixel: this.getSnapToPixel(),
    stroke: this.getStroke() ?  this.getStroke().clone() : undefined,
    rotation: this.getRotation(),
    rotateWithView: this.getRotateWithView(),
    atlasManager: this.atlasManager_
  });
  style.setOpacity(this.getOpacity());
  style.setScale(this.getScale());
  return style;
};


/**
 * @inheritDoc
 * @api
 */
RegularShape.prototype.getAnchor = function() {
  return this.anchor_;
};


/**
 * Get the angle used in generating the shape.
 * @return {number} Shape's rotation in radians.
 * @api
 */
RegularShape.prototype.getAngle = function() {
  return this.angle_;
};


/**
 * Get the fill style for the shape.
 * @return {module:ol/style/Fill} Fill style.
 * @api
 */
RegularShape.prototype.getFill = function() {
  return this.fill_;
};


/**
 * @inheritDoc
 */
RegularShape.prototype.getHitDetectionImage = function(pixelRatio) {
  return this.hitDetectionCanvas_;
};


/**
 * @inheritDoc
 * @api
 */
RegularShape.prototype.getImage = function(pixelRatio) {
  return this.canvas_;
};


/**
 * @inheritDoc
 */
RegularShape.prototype.getImageSize = function() {
  return this.imageSize_;
};


/**
 * @inheritDoc
 */
RegularShape.prototype.getHitDetectionImageSize = function() {
  return this.hitDetectionImageSize_;
};


/**
 * @inheritDoc
 */
RegularShape.prototype.getImageState = function() {
  return _ImageState_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].LOADED;
};


/**
 * @inheritDoc
 * @api
 */
RegularShape.prototype.getOrigin = function() {
  return this.origin_;
};


/**
 * Get the number of points for generating the shape.
 * @return {number} Number of points for stars and regular polygons.
 * @api
 */
RegularShape.prototype.getPoints = function() {
  return this.points_;
};


/**
 * Get the (primary) radius for the shape.
 * @return {number} Radius.
 * @api
 */
RegularShape.prototype.getRadius = function() {
  return this.radius_;
};


/**
 * Get the secondary radius for the shape.
 * @return {number|undefined} Radius2.
 * @api
 */
RegularShape.prototype.getRadius2 = function() {
  return this.radius2_;
};


/**
 * @inheritDoc
 * @api
 */
RegularShape.prototype.getSize = function() {
  return this.size_;
};


/**
 * Get the stroke style for the shape.
 * @return {module:ol/style/Stroke} Stroke style.
 * @api
 */
RegularShape.prototype.getStroke = function() {
  return this.stroke_;
};


/**
 * @inheritDoc
 */
RegularShape.prototype.listenImageChange = function(listener, thisArg) {};


/**
 * @inheritDoc
 */
RegularShape.prototype.load = function() {};


/**
 * @inheritDoc
 */
RegularShape.prototype.unlistenImageChange = function(listener, thisArg) {};


/**
 * @protected
 * @param {module:ol/style/AtlasManager|undefined} atlasManager An atlas manager.
 */
RegularShape.prototype.render_ = function(atlasManager) {
  let imageSize;
  let lineCap = '';
  let lineJoin = '';
  let miterLimit = 0;
  let lineDash = null;
  let lineDashOffset = 0;
  let strokeStyle;
  let strokeWidth = 0;

  if (this.stroke_) {
    strokeStyle = this.stroke_.getColor();
    if (strokeStyle === null) {
      strokeStyle = _render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* defaultStrokeStyle */ "k"];
    }
    strokeStyle = Object(_colorlike_js__WEBPACK_IMPORTED_MODULE_1__[/* asColorLike */ "a"])(strokeStyle);
    strokeWidth = this.stroke_.getWidth();
    if (strokeWidth === undefined) {
      strokeWidth = _render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* defaultLineWidth */ "h"];
    }
    lineDash = this.stroke_.getLineDash();
    lineDashOffset = this.stroke_.getLineDashOffset();
    if (!_has_js__WEBPACK_IMPORTED_MODULE_3__[/* CANVAS_LINE_DASH */ "a"]) {
      lineDash = null;
      lineDashOffset = 0;
    }
    lineJoin = this.stroke_.getLineJoin();
    if (lineJoin === undefined) {
      lineJoin = _render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* defaultLineJoin */ "g"];
    }
    lineCap = this.stroke_.getLineCap();
    if (lineCap === undefined) {
      lineCap = _render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* defaultLineCap */ "d"];
    }
    miterLimit = this.stroke_.getMiterLimit();
    if (miterLimit === undefined) {
      miterLimit = _render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* defaultMiterLimit */ "i"];
    }
  }

  let size = 2 * (this.radius_ + strokeWidth) + 1;

  /** @type {module:ol/style/RegularShape~RenderOptions} */
  const renderOptions = {
    strokeStyle: strokeStyle,
    strokeWidth: strokeWidth,
    size: size,
    lineCap: lineCap,
    lineDash: lineDash,
    lineDashOffset: lineDashOffset,
    lineJoin: lineJoin,
    miterLimit: miterLimit
  };

  if (atlasManager === undefined) {
    // no atlas manager is used, create a new canvas
    const context = Object(_dom_js__WEBPACK_IMPORTED_MODULE_2__[/* createCanvasContext2D */ "a"])(size, size);
    this.canvas_ = context.canvas;

    // canvas.width and height are rounded to the closest integer
    size = this.canvas_.width;
    imageSize = size;

    this.draw_(renderOptions, context, 0, 0);

    this.createHitDetectionCanvas_(renderOptions);
  } else {
    // an atlas manager is used, add the symbol to an atlas
    size = Math.round(size);

    const hasCustomHitDetectionImage = !this.fill_;
    let renderHitDetectionCallback;
    if (hasCustomHitDetectionImage) {
      // render the hit-detection image into a separate atlas image
      renderHitDetectionCallback =
          this.drawHitDetectionCanvas_.bind(this, renderOptions);
    }

    const id = this.getChecksum();
    const info = atlasManager.add(
      id, size, size, this.draw_.bind(this, renderOptions),
      renderHitDetectionCallback);

    this.canvas_ = info.image;
    this.origin_ = [info.offsetX, info.offsetY];
    imageSize = info.image.width;

    if (hasCustomHitDetectionImage) {
      this.hitDetectionCanvas_ = info.hitImage;
      this.hitDetectionImageSize_ =
          [info.hitImage.width, info.hitImage.height];
    } else {
      this.hitDetectionCanvas_ = this.canvas_;
      this.hitDetectionImageSize_ = [imageSize, imageSize];
    }
  }

  this.anchor_ = [size / 2, size / 2];
  this.size_ = [size, size];
  this.imageSize_ = [imageSize, imageSize];
};


/**
 * @private
 * @param {module:ol/style/RegularShape~RenderOptions} renderOptions Render options.
 * @param {CanvasRenderingContext2D} context The rendering context.
 * @param {number} x The origin for the symbol (x).
 * @param {number} y The origin for the symbol (y).
 */
RegularShape.prototype.draw_ = function(renderOptions, context, x, y) {
  let i, angle0, radiusC;
  // reset transform
  context.setTransform(1, 0, 0, 1, 0, 0);

  // then move to (x, y)
  context.translate(x, y);

  context.beginPath();

  let points = this.points_;
  if (points === Infinity) {
    context.arc(
      renderOptions.size / 2, renderOptions.size / 2,
      this.radius_, 0, 2 * Math.PI, true);
  } else {
    const radius2 = (this.radius2_ !== undefined) ? this.radius2_
      : this.radius_;
    if (radius2 !== this.radius_) {
      points = 2 * points;
    }
    for (i = 0; i <= points; i++) {
      angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
      radiusC = i % 2 === 0 ? this.radius_ : radius2;
      context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),
        renderOptions.size / 2 + radiusC * Math.sin(angle0));
    }
  }


  if (this.fill_) {
    let color = this.fill_.getColor();
    if (color === null) {
      color = _render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* defaultFillStyle */ "b"];
    }
    context.fillStyle = Object(_colorlike_js__WEBPACK_IMPORTED_MODULE_1__[/* asColorLike */ "a"])(color);
    context.fill();
  }
  if (this.stroke_) {
    context.strokeStyle = renderOptions.strokeStyle;
    context.lineWidth = renderOptions.strokeWidth;
    if (renderOptions.lineDash) {
      context.setLineDash(renderOptions.lineDash);
      context.lineDashOffset = renderOptions.lineDashOffset;
    }
    context.lineCap = renderOptions.lineCap;
    context.lineJoin = renderOptions.lineJoin;
    context.miterLimit = renderOptions.miterLimit;
    context.stroke();
  }
  context.closePath();
};


/**
 * @private
 * @param {module:ol/style/RegularShape~RenderOptions} renderOptions Render options.
 */
RegularShape.prototype.createHitDetectionCanvas_ = function(renderOptions) {
  this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];
  if (this.fill_) {
    this.hitDetectionCanvas_ = this.canvas_;
    return;
  }

  // if no fill style is set, create an extra hit-detection image with a
  // default fill style
  const context = Object(_dom_js__WEBPACK_IMPORTED_MODULE_2__[/* createCanvasContext2D */ "a"])(renderOptions.size, renderOptions.size);
  this.hitDetectionCanvas_ = context.canvas;

  this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);
};


/**
 * @private
 * @param {module:ol/style/RegularShape~RenderOptions} renderOptions Render options.
 * @param {CanvasRenderingContext2D} context The context.
 * @param {number} x The origin for the symbol (x).
 * @param {number} y The origin for the symbol (y).
 */
RegularShape.prototype.drawHitDetectionCanvas_ = function(renderOptions, context, x, y) {
  // reset transform
  context.setTransform(1, 0, 0, 1, 0, 0);

  // then move to (x, y)
  context.translate(x, y);

  context.beginPath();

  let points = this.points_;
  if (points === Infinity) {
    context.arc(
      renderOptions.size / 2, renderOptions.size / 2,
      this.radius_, 0, 2 * Math.PI, true);
  } else {
    const radius2 = (this.radius2_ !== undefined) ? this.radius2_
      : this.radius_;
    if (radius2 !== this.radius_) {
      points = 2 * points;
    }
    let i, radiusC, angle0;
    for (i = 0; i <= points; i++) {
      angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
      radiusC = i % 2 === 0 ? this.radius_ : radius2;
      context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),
        renderOptions.size / 2 + radiusC * Math.sin(angle0));
    }
  }

  context.fillStyle = _render_canvas_js__WEBPACK_IMPORTED_MODULE_5__[/* defaultFillStyle */ "b"];
  context.fill();
  if (this.stroke_) {
    context.strokeStyle = renderOptions.strokeStyle;
    context.lineWidth = renderOptions.strokeWidth;
    if (renderOptions.lineDash) {
      context.setLineDash(renderOptions.lineDash);
      context.lineDashOffset = renderOptions.lineDashOffset;
    }
    context.stroke();
  }
  context.closePath();
};


/**
 * @return {string} The checksum.
 */
RegularShape.prototype.getChecksum = function() {
  const strokeChecksum = this.stroke_ ?
    this.stroke_.getChecksum() : '-';
  const fillChecksum = this.fill_ ?
    this.fill_.getChecksum() : '-';

  const recalculate = !this.checksums_ ||
      (strokeChecksum != this.checksums_[1] ||
      fillChecksum != this.checksums_[2] ||
      this.radius_ != this.checksums_[3] ||
      this.radius2_ != this.checksums_[4] ||
      this.angle_ != this.checksums_[5] ||
      this.points_ != this.checksums_[6]);

  if (recalculate) {
    const checksum = 'r' + strokeChecksum + fillChecksum +
        (this.radius_ !== undefined ? this.radius_.toString() : '-') +
        (this.radius2_ !== undefined ? this.radius2_.toString() : '-') +
        (this.angle_ !== undefined ? this.angle_.toString() : '-') +
        (this.points_ !== undefined ? this.points_.toString() : '-');
    this.checksums_ = [checksum, strokeChecksum, fillChecksum,
      this.radius_, this.radius2_, this.angle_, this.points_];
  }

  return this.checksums_[0];
};
/* harmony default export */ __webpack_exports__["a"] = (RegularShape);


/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _style_RegularShape_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(197);
/**
 * @module ol/style/Circle
 */




/**
 * @typedef {Object} Options
 * @property {module:ol/style/Fill} [fill] Fill style.
 * @property {number} radius Circle radius.
 * @property {boolean} [snapToPixel=true] If `true` integral numbers of pixels are used as the X and Y pixel coordinate
 * when drawing the circle in the output canvas. If `false` fractional numbers may be used. Using `true` allows for
 * "sharp" rendering (no blur), while using `false` allows for "accurate" rendering. Note that accuracy is important if
 * the circle's position is animated. Without it, the circle may jitter noticeably.
 * @property {module:ol/style/Stroke} [stroke] Stroke style.
 * @property {module:ol/style/AtlasManager} [atlasManager] The atlas manager to use for this circle.
 * When using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given,
 * the circle is added to an atlas. By default no atlas manager is used.
 */


/**
 * @classdesc
 * Set circle style for vector features.
 *
 * @constructor
 * @param {module:ol/style/Circle~Options=} opt_options Options.
 * @extends {module:ol/style/RegularShape}
 * @api
 */
const CircleStyle = function(opt_options) {

  const options = opt_options || {};

  _style_RegularShape_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, {
    points: Infinity,
    fill: options.fill,
    radius: options.radius,
    snapToPixel: options.snapToPixel,
    stroke: options.stroke,
    atlasManager: options.atlasManager
  });

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(CircleStyle, _style_RegularShape_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * Clones the style.  If an atlasmanager was provided to the original style it will be used in the cloned style, too.
 * @return {module:ol/style/Circle} The cloned style.
 * @override
 * @api
 */
CircleStyle.prototype.clone = function() {
  const style = new CircleStyle({
    fill: this.getFill() ? this.getFill().clone() : undefined,
    stroke: this.getStroke() ? this.getStroke().clone() : undefined,
    radius: this.getRadius(),
    snapToPixel: this.getSnapToPixel(),
    atlasManager: this.atlasManager_
  });
  style.setOpacity(this.getOpacity());
  style.setScale(this.getScale());
  return style;
};


/**
 * Set the circle radius.
 *
 * @param {number} radius Circle radius.
 * @api
 */
CircleStyle.prototype.setRadius = function(radius) {
  this.radius_ = radius;
  this.render_(this.atlasManager_);
};
/* harmony default export */ __webpack_exports__["a"] = (CircleStyle);


/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51);
/* harmony import */ var _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(31);
/* harmony import */ var _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(125);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(27);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3);
/* harmony import */ var _layer_Base_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(195);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(15);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(50);
/**
 * @module ol/layer/Group
 */














/**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {(Array.<module:ol/layer/Base>|module:ol/Collection.<module:ol/layer/Base>)} [layers] Child layers.
 */


/**
 * @enum {string}
 * @private
 */
const Property = {
  LAYERS: 'layers'
};


/**
 * @classdesc
 * A {@link module:ol/Collection~Collection} of layers that are handled together.
 *
 * A generic `change` event is triggered when the group/Collection changes.
 *
 * @constructor
 * @extends {module:ol/layer/Base}
 * @param {module:ol/layer/Group~Options=} opt_options Layer options.
 * @api
 */
const LayerGroup = function(opt_options) {

  const options = opt_options || {};
  const baseOptions = /** @type {module:ol/layer/Group~Options} */ (Object(_obj_js__WEBPACK_IMPORTED_MODULE_10__[/* assign */ "a"])({}, options));
  delete baseOptions.layers;

  let layers = options.layers;

  _layer_Base_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].call(this, baseOptions);

  /**
   * @private
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.layersListenerKeys_ = [];

  /**
   * @private
   * @type {Object.<string, Array.<module:ol/events~EventsKey>>}
   */
  this.listenerKeys_ = {};

  Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(this,
    Object(_Object_js__WEBPACK_IMPORTED_MODULE_3__[/* getChangeEventType */ "b"])(Property.LAYERS),
    this.handleLayersChanged_, this);

  if (layers) {
    if (Array.isArray(layers)) {
      layers = new _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"](layers.slice(), {unique: true});
    } else {
      Object(_asserts_js__WEBPACK_IMPORTED_MODULE_5__[/* assert */ "a"])(layers instanceof _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"],
        43); // Expected `layers` to be an array or a `Collection`
      layers = layers;
    }
  } else {
    layers = new _Collection_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "b"](undefined, {unique: true});
  }

  this.setLayers(layers);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(LayerGroup, _layer_Base_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]);


/**
 * @private
 */
LayerGroup.prototype.handleLayerChange_ = function() {
  this.changed();
};


/**
 * @param {module:ol/events/Event} event Event.
 * @private
 */
LayerGroup.prototype.handleLayersChanged_ = function(event) {
  this.layersListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* unlistenByKey */ "e"]);
  this.layersListenerKeys_.length = 0;

  const layers = this.getLayers();
  this.layersListenerKeys_.push(
    Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(layers, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ADD, this.handleLayersAdd_, this),
    Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(layers, _CollectionEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].REMOVE, this.handleLayersRemove_, this)
  );

  for (const id in this.listenerKeys_) {
    this.listenerKeys_[id].forEach(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* unlistenByKey */ "e"]);
  }
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_10__[/* clear */ "b"])(this.listenerKeys_);

  const layersArray = layers.getArray();
  for (let i = 0, ii = layersArray.length; i < ii; i++) {
    const layer = layersArray[i];
    this.listenerKeys_[Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layer).toString()] = [
      Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(layer, _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].PROPERTYCHANGE, this.handleLayerChange_, this),
      Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(layer, _events_EventType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].CHANGE, this.handleLayerChange_, this)
    ];
  }

  this.changed();
};


/**
 * @param {module:ol/Collection~CollectionEvent} collectionEvent CollectionEvent.
 * @private
 */
LayerGroup.prototype.handleLayersAdd_ = function(collectionEvent) {
  const layer = /** @type {module:ol/layer/Base} */ (collectionEvent.element);
  const key = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layer).toString();
  this.listenerKeys_[key] = [
    Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(layer, _ObjectEventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].PROPERTYCHANGE, this.handleLayerChange_, this),
    Object(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* listen */ "a"])(layer, _events_EventType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].CHANGE, this.handleLayerChange_, this)
  ];
  this.changed();
};


/**
 * @param {module:ol/Collection~CollectionEvent} collectionEvent CollectionEvent.
 * @private
 */
LayerGroup.prototype.handleLayersRemove_ = function(collectionEvent) {
  const layer = /** @type {module:ol/layer/Base} */ (collectionEvent.element);
  const key = Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layer).toString();
  this.listenerKeys_[key].forEach(_events_js__WEBPACK_IMPORTED_MODULE_6__[/* unlistenByKey */ "e"]);
  delete this.listenerKeys_[key];
  this.changed();
};


/**
 * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
 * in this group.
 * @return {!module:ol/Collection.<module:ol/layer/Base>} Collection of
 *   {@link module:ol/layer/Base layers} that are part of this group.
 * @observable
 * @api
 */
LayerGroup.prototype.getLayers = function() {
  return (
    /** @type {!module:ol/Collection.<module:ol/layer/Base>} */ (this.get(Property.LAYERS))
  );
};


/**
 * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
 * in this group.
 * @param {!module:ol/Collection.<module:ol/layer/Base>} layers Collection of
 *   {@link module:ol/layer/Base layers} that are part of this group.
 * @observable
 * @api
 */
LayerGroup.prototype.setLayers = function(layers) {
  this.set(Property.LAYERS, layers);
};


/**
 * @inheritDoc
 */
LayerGroup.prototype.getLayersArray = function(opt_array) {
  const array = opt_array !== undefined ? opt_array : [];
  this.getLayers().forEach(function(layer) {
    layer.getLayersArray(array);
  });
  return array;
};


/**
 * @inheritDoc
 */
LayerGroup.prototype.getLayerStatesArray = function(opt_states) {
  const states = opt_states !== undefined ? opt_states : [];

  const pos = states.length;

  this.getLayers().forEach(function(layer) {
    layer.getLayerStatesArray(states);
  });

  const ownLayerState = this.getLayerState();
  for (let i = pos, ii = states.length; i < ii; i++) {
    const layerState = states[i];
    layerState.opacity *= ownLayerState.opacity;
    layerState.visible = layerState.visible && ownLayerState.visible;
    layerState.maxResolution = Math.min(
      layerState.maxResolution, ownLayerState.maxResolution);
    layerState.minResolution = Math.max(
      layerState.minResolution, ownLayerState.minResolution);
    if (ownLayerState.extent !== undefined) {
      if (layerState.extent !== undefined) {
        layerState.extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_8__[/* getIntersection */ "B"])(layerState.extent, ownLayerState.extent);
      } else {
        layerState.extent = ownLayerState.extent;
      }
    }
  }

  return states;
};


/**
 * @inheritDoc
 */
LayerGroup.prototype.getSourceState = function() {
  return _source_State_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"].READY;
};

/* harmony default export */ __webpack_exports__["a"] = (LayerGroup);


/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/events.js
var ol_events = __webpack_require__(8);

// EXTERNAL MODULE: ../src/ol/events/EventTarget.js
var EventTarget = __webpack_require__(72);

// EXTERNAL MODULE: ../src/ol/has.js
var has = __webpack_require__(48);

// EXTERNAL MODULE: ../src/ol/pointer/EventType.js
var EventType = __webpack_require__(102);

// EXTERNAL MODULE: ../src/ol/pointer/MouseSource.js
var MouseSource = __webpack_require__(168);

// EXTERNAL MODULE: ../src/ol/pointer/EventSource.js
var EventSource = __webpack_require__(128);

// CONCATENATED MODULE: ../src/ol/pointer/MsSource.js
/**
 * @module ol/pointer/MsSource
 */
// Based on https://github.com/Polymer/PointerEvents

// Copyright (c) 2013 The Polymer Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.




/**
 * @param {module:ol/pointer/PointerEventHandler} dispatcher Event handler.
 * @constructor
 * @extends {module:ol/pointer/EventSource}
 */
const MsSource = function(dispatcher) {
  const mapping = {
    'MSPointerDown': this.msPointerDown,
    'MSPointerMove': this.msPointerMove,
    'MSPointerUp': this.msPointerUp,
    'MSPointerOut': this.msPointerOut,
    'MSPointerOver': this.msPointerOver,
    'MSPointerCancel': this.msPointerCancel,
    'MSGotPointerCapture': this.msGotPointerCapture,
    'MSLostPointerCapture': this.msLostPointerCapture
  };
  EventSource["a" /* default */].call(this, dispatcher, mapping);

  /**
   * @const
   * @type {!Object.<string, MSPointerEvent|Object>}
   */
  this.pointerMap = dispatcher.pointerMap;
};

Object(util["c" /* inherits */])(MsSource, EventSource["a" /* default */]);

/**
 * @const
 * @type {Array.<string>}
 */
const POINTER_TYPES = [
  '',
  'unavailable',
  'touch',
  'pen',
  'mouse'
];


/**
 * Creates a copy of the original event that will be used
 * for the fake pointer event.
 *
 * @private
 * @param {MSPointerEvent} inEvent The in event.
 * @return {Object} The copied event.
 */
MsSource.prototype.prepareEvent_ = function(inEvent) {
  let e = inEvent;
  if (typeof inEvent.pointerType === 'number') {
    e = this.dispatcher.cloneEvent(inEvent, inEvent);
    e.pointerType = POINTER_TYPES[inEvent.pointerType];
  }

  return e;
};


/**
 * Remove this pointer from the list of active pointers.
 * @param {number} pointerId Pointer identifier.
 */
MsSource.prototype.cleanup = function(pointerId) {
  delete this.pointerMap[pointerId.toString()];
};


/**
 * Handler for `msPointerDown`.
 *
 * @param {MSPointerEvent} inEvent The in event.
 */
MsSource.prototype.msPointerDown = function(inEvent) {
  this.pointerMap[inEvent.pointerId.toString()] = inEvent;
  const e = this.prepareEvent_(inEvent);
  this.dispatcher.down(e, inEvent);
};


/**
 * Handler for `msPointerMove`.
 *
 * @param {MSPointerEvent} inEvent The in event.
 */
MsSource.prototype.msPointerMove = function(inEvent) {
  const e = this.prepareEvent_(inEvent);
  this.dispatcher.move(e, inEvent);
};


/**
 * Handler for `msPointerUp`.
 *
 * @param {MSPointerEvent} inEvent The in event.
 */
MsSource.prototype.msPointerUp = function(inEvent) {
  const e = this.prepareEvent_(inEvent);
  this.dispatcher.up(e, inEvent);
  this.cleanup(inEvent.pointerId);
};


/**
 * Handler for `msPointerOut`.
 *
 * @param {MSPointerEvent} inEvent The in event.
 */
MsSource.prototype.msPointerOut = function(inEvent) {
  const e = this.prepareEvent_(inEvent);
  this.dispatcher.leaveOut(e, inEvent);
};


/**
 * Handler for `msPointerOver`.
 *
 * @param {MSPointerEvent} inEvent The in event.
 */
MsSource.prototype.msPointerOver = function(inEvent) {
  const e = this.prepareEvent_(inEvent);
  this.dispatcher.enterOver(e, inEvent);
};


/**
 * Handler for `msPointerCancel`.
 *
 * @param {MSPointerEvent} inEvent The in event.
 */
MsSource.prototype.msPointerCancel = function(inEvent) {
  const e = this.prepareEvent_(inEvent);
  this.dispatcher.cancel(e, inEvent);
  this.cleanup(inEvent.pointerId);
};


/**
 * Handler for `msLostPointerCapture`.
 *
 * @param {MSPointerEvent} inEvent The in event.
 */
MsSource.prototype.msLostPointerCapture = function(inEvent) {
  const e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);
  this.dispatcher.dispatchEvent(e);
};


/**
 * Handler for `msGotPointerCapture`.
 *
 * @param {MSPointerEvent} inEvent The in event.
 */
MsSource.prototype.msGotPointerCapture = function(inEvent) {
  const e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);
  this.dispatcher.dispatchEvent(e);
};
/* harmony default export */ var pointer_MsSource = (MsSource);

// CONCATENATED MODULE: ../src/ol/pointer/NativeSource.js
/**
 * @module ol/pointer/NativeSource
 */
// Based on https://github.com/Polymer/PointerEvents

// Copyright (c) 2013 The Polymer Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.




/**
 * @param {module:ol/pointer/PointerEventHandler} dispatcher Event handler.
 * @constructor
 * @extends {module:ol/pointer/EventSource}
 */
const NativeSource = function(dispatcher) {
  const mapping = {
    'pointerdown': this.pointerDown,
    'pointermove': this.pointerMove,
    'pointerup': this.pointerUp,
    'pointerout': this.pointerOut,
    'pointerover': this.pointerOver,
    'pointercancel': this.pointerCancel,
    'gotpointercapture': this.gotPointerCapture,
    'lostpointercapture': this.lostPointerCapture
  };
  EventSource["a" /* default */].call(this, dispatcher, mapping);
};

Object(util["c" /* inherits */])(NativeSource, EventSource["a" /* default */]);


/**
 * Handler for `pointerdown`.
 *
 * @param {Event} inEvent The in event.
 */
NativeSource.prototype.pointerDown = function(inEvent) {
  this.dispatcher.fireNativeEvent(inEvent);
};


/**
 * Handler for `pointermove`.
 *
 * @param {Event} inEvent The in event.
 */
NativeSource.prototype.pointerMove = function(inEvent) {
  this.dispatcher.fireNativeEvent(inEvent);
};


/**
 * Handler for `pointerup`.
 *
 * @param {Event} inEvent The in event.
 */
NativeSource.prototype.pointerUp = function(inEvent) {
  this.dispatcher.fireNativeEvent(inEvent);
};


/**
 * Handler for `pointerout`.
 *
 * @param {Event} inEvent The in event.
 */
NativeSource.prototype.pointerOut = function(inEvent) {
  this.dispatcher.fireNativeEvent(inEvent);
};


/**
 * Handler for `pointerover`.
 *
 * @param {Event} inEvent The in event.
 */
NativeSource.prototype.pointerOver = function(inEvent) {
  this.dispatcher.fireNativeEvent(inEvent);
};


/**
 * Handler for `pointercancel`.
 *
 * @param {Event} inEvent The in event.
 */
NativeSource.prototype.pointerCancel = function(inEvent) {
  this.dispatcher.fireNativeEvent(inEvent);
};


/**
 * Handler for `lostpointercapture`.
 *
 * @param {Event} inEvent The in event.
 */
NativeSource.prototype.lostPointerCapture = function(inEvent) {
  this.dispatcher.fireNativeEvent(inEvent);
};


/**
 * Handler for `gotpointercapture`.
 *
 * @param {Event} inEvent The in event.
 */
NativeSource.prototype.gotPointerCapture = function(inEvent) {
  this.dispatcher.fireNativeEvent(inEvent);
};
/* harmony default export */ var pointer_NativeSource = (NativeSource);

// EXTERNAL MODULE: ../src/ol/events/Event.js
var Event = __webpack_require__(36);

// CONCATENATED MODULE: ../src/ol/pointer/PointerEvent.js
/**
 * @module ol/pointer/PointerEvent
 */
// Based on https://github.com/Polymer/PointerEvents

// Copyright (c) 2013 The Polymer Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.




/**
 * A class for pointer events.
 *
 * This class is used as an abstraction for mouse events,
 * touch events and even native pointer events.
 *
 * @constructor
 * @extends {module:ol/events/Event}
 * @param {string} type The type of the event to create.
 * @param {Event} originalEvent The event.
 * @param {Object.<string, ?>=} opt_eventDict An optional dictionary of
 *    initial event properties.
 */
const PointerEvent = function(type, originalEvent, opt_eventDict) {
  Event["a" /* default */].call(this, type);

  /**
   * @const
   * @type {Event}
   */
  this.originalEvent = originalEvent;

  const eventDict = opt_eventDict ? opt_eventDict : {};

  /**
   * @type {number}
   */
  this.buttons = this.getButtons_(eventDict);

  /**
   * @type {number}
   */
  this.pressure = this.getPressure_(eventDict, this.buttons);

  // MouseEvent related properties

  /**
   * @type {boolean}
   */
  this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;

  /**
   * @type {boolean}
   */
  this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;

  /**
   * @type {Object}
   */
  this.view = 'view' in eventDict ? eventDict['view'] : null;

  /**
   * @type {number}
   */
  this.detail = 'detail' in eventDict ? eventDict['detail'] : null;

  /**
   * @type {number}
   */
  this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;

  /**
   * @type {number}
   */
  this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;

  /**
   * @type {number}
   */
  this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;

  /**
   * @type {number}
   */
  this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;

  /**
   * @type {boolean}
   */
  this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;

  /**
   * @type {boolean}
   */
  this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;

  /**
   * @type {boolean}
   */
  this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;

  /**
   * @type {boolean}
   */
  this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;

  /**
   * @type {number}
   */
  this.button = 'button' in eventDict ? eventDict['button'] : 0;

  /**
   * @type {Node}
   */
  this.relatedTarget = 'relatedTarget' in eventDict ?
    eventDict['relatedTarget'] : null;

  // PointerEvent related properties

  /**
   * @const
   * @type {number}
   */
  this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;

  /**
   * @type {number}
   */
  this.width = 'width' in eventDict ? eventDict['width'] : 0;

  /**
   * @type {number}
   */
  this.height = 'height' in eventDict ? eventDict['height'] : 0;

  /**
   * @type {number}
   */
  this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;

  /**
   * @type {number}
   */
  this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;

  /**
   * @type {string}
   */
  this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';

  /**
   * @type {number}
   */
  this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;

  /**
   * @type {boolean}
   */
  this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false;

  // keep the semantics of preventDefault
  if (originalEvent.preventDefault) {
    this.preventDefault = function() {
      originalEvent.preventDefault();
    };
  }
};

Object(util["c" /* inherits */])(PointerEvent, Event["a" /* default */]);


/**
 * Is the `buttons` property supported?
 * @type {boolean}
 */
let HAS_BUTTONS = false;


/**
 * @private
 * @param {Object.<string, ?>} eventDict The event dictionary.
 * @return {number} Button indicator.
 */
PointerEvent.prototype.getButtons_ = function(eventDict) {
  // According to the w3c spec,
  // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button
  // MouseEvent.button == 0 can mean either no mouse button depressed, or the
  // left mouse button depressed.
  //
  // As of now, the only way to distinguish between the two states of
  // MouseEvent.button is by using the deprecated MouseEvent.which property, as
  // this maps mouse buttons to positive integers > 0, and uses 0 to mean that
  // no mouse button is held.
  //
  // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,
  // but initMouseEvent does not expose an argument with which to set
  // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set
  // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations
  // of app developers.
  //
  // The only way to propagate the correct state of MouseEvent.which and
  // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0
  // is to call initMouseEvent with a buttonArg value of -1.
  //
  // This is fixed with DOM Level 4's use of buttons
  let buttons;
  if (eventDict.buttons || HAS_BUTTONS) {
    buttons = eventDict.buttons;
  } else {
    switch (eventDict.which) {
      case 1: buttons = 1; break;
      case 2: buttons = 4; break;
      case 3: buttons = 2; break;
      default: buttons = 0;
    }
  }
  return buttons;
};


/**
 * @private
 * @param {Object.<string, ?>} eventDict The event dictionary.
 * @param {number} buttons Button indicator.
 * @return {number} The pressure.
 */
PointerEvent.prototype.getPressure_ = function(eventDict, buttons) {
  // Spec requires that pointers without pressure specified use 0.5 for down
  // state and 0 for up state.
  let pressure = 0;
  if (eventDict.pressure) {
    pressure = eventDict.pressure;
  } else {
    pressure = buttons ? 0.5 : 0;
  }
  return pressure;
};


/**
 * Checks if the `buttons` property is supported.
 */
(function() {
  try {
    const ev = new MouseEvent('click', {buttons: 1});
    HAS_BUTTONS = ev.buttons === 1;
  } catch (e) {
    // pass
  }
})();
/* harmony default export */ var pointer_PointerEvent = (PointerEvent);

// EXTERNAL MODULE: ../src/ol/array.js
var array = __webpack_require__(16);

// CONCATENATED MODULE: ../src/ol/pointer/TouchSource.js
/**
 * @module ol/pointer/TouchSource
 */
// Based on https://github.com/Polymer/PointerEvents

// Copyright (c) 2013 The Polymer Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.







/**
 * @constructor
 * @param {module:ol/pointer/PointerEventHandler} dispatcher The event handler.
 * @param {module:ol/pointer/MouseSource} mouseSource Mouse source.
 * @extends {module:ol/pointer/EventSource}
 */
const TouchSource = function(dispatcher, mouseSource) {
  const mapping = {
    'touchstart': this.touchstart,
    'touchmove': this.touchmove,
    'touchend': this.touchend,
    'touchcancel': this.touchcancel
  };
  EventSource["a" /* default */].call(this, dispatcher, mapping);

  /**
   * @const
   * @type {!Object.<string, Event|Object>}
   */
  this.pointerMap = dispatcher.pointerMap;

  /**
   * @const
   * @type {module:ol/pointer/MouseSource}
   */
  this.mouseSource = mouseSource;

  /**
   * @private
   * @type {number|undefined}
   */
  this.firstTouchId_ = undefined;

  /**
   * @private
   * @type {number}
   */
  this.clickCount_ = 0;

  /**
   * @private
   * @type {number|undefined}
   */
  this.resetId_ = undefined;

  /**
   * Mouse event timeout: This should be long enough to
   * ignore compat mouse events made by touch.
   * @private
   * @type {number}
   */
  this.dedupTimeout_ = 2500;
};

Object(util["c" /* inherits */])(TouchSource, EventSource["a" /* default */]);


/**
 * @type {number}
 */
const CLICK_COUNT_TIMEOUT = 200;


/**
 * @type {string}
 */
const POINTER_TYPE = 'touch';

/**
 * @private
 * @param {Touch} inTouch The in touch.
 * @return {boolean} True, if this is the primary touch.
 */
TouchSource.prototype.isPrimaryTouch_ = function(inTouch) {
  return this.firstTouchId_ === inTouch.identifier;
};


/**
 * Set primary touch if there are no pointers, or the only pointer is the mouse.
 * @param {Touch} inTouch The in touch.
 * @private
 */
TouchSource.prototype.setPrimaryTouch_ = function(inTouch) {
  const count = Object.keys(this.pointerMap).length;
  if (count === 0 || (count === 1 && MouseSource["a" /* POINTER_ID */].toString() in this.pointerMap)) {
    this.firstTouchId_ = inTouch.identifier;
    this.cancelResetClickCount_();
  }
};


/**
 * @private
 * @param {PointerEvent} inPointer The in pointer object.
 */
TouchSource.prototype.removePrimaryPointer_ = function(inPointer) {
  if (inPointer.isPrimary) {
    this.firstTouchId_ = undefined;
    this.resetClickCount_();
  }
};


/**
 * @private
 */
TouchSource.prototype.resetClickCount_ = function() {
  this.resetId_ = setTimeout(
    this.resetClickCountHandler_.bind(this),
    CLICK_COUNT_TIMEOUT);
};


/**
 * @private
 */
TouchSource.prototype.resetClickCountHandler_ = function() {
  this.clickCount_ = 0;
  this.resetId_ = undefined;
};


/**
 * @private
 */
TouchSource.prototype.cancelResetClickCount_ = function() {
  if (this.resetId_ !== undefined) {
    clearTimeout(this.resetId_);
  }
};


/**
 * @private
 * @param {TouchEvent} browserEvent Browser event
 * @param {Touch} inTouch Touch event
 * @return {PointerEvent} A pointer object.
 */
TouchSource.prototype.touchToPointer_ = function(browserEvent, inTouch) {
  const e = this.dispatcher.cloneEvent(browserEvent, inTouch);
  // Spec specifies that pointerId 1 is reserved for Mouse.
  // Touch identifiers can start at 0.
  // Add 2 to the touch identifier for compatibility.
  e.pointerId = inTouch.identifier + 2;
  // TODO: check if this is necessary?
  //e.target = findTarget(e);
  e.bubbles = true;
  e.cancelable = true;
  e.detail = this.clickCount_;
  e.button = 0;
  e.buttons = 1;
  e.width = inTouch.webkitRadiusX || inTouch.radiusX || 0;
  e.height = inTouch.webkitRadiusY || inTouch.radiusY || 0;
  e.pressure = inTouch.webkitForce || inTouch.force || 0.5;
  e.isPrimary = this.isPrimaryTouch_(inTouch);
  e.pointerType = POINTER_TYPE;

  // make sure that the properties that are different for
  // each `Touch` object are not copied from the BrowserEvent object
  e.clientX = inTouch.clientX;
  e.clientY = inTouch.clientY;
  e.screenX = inTouch.screenX;
  e.screenY = inTouch.screenY;

  return e;
};


/**
 * @private
 * @param {TouchEvent} inEvent Touch event
 * @param {function(TouchEvent, PointerEvent)} inFunction In function.
 */
TouchSource.prototype.processTouches_ = function(inEvent, inFunction) {
  const touches = Array.prototype.slice.call(inEvent.changedTouches);
  const count = touches.length;
  function preventDefault() {
    inEvent.preventDefault();
  }
  for (let i = 0; i < count; ++i) {
    const pointer = this.touchToPointer_(inEvent, touches[i]);
    // forward touch preventDefaults
    pointer.preventDefault = preventDefault;
    inFunction.call(this, inEvent, pointer);
  }
};


/**
 * @private
 * @param {TouchList} touchList The touch list.
 * @param {number} searchId Search identifier.
 * @return {boolean} True, if the `Touch` with the given id is in the list.
 */
TouchSource.prototype.findTouch_ = function(touchList, searchId) {
  const l = touchList.length;
  for (let i = 0; i < l; i++) {
    const touch = touchList[i];
    if (touch.identifier === searchId) {
      return true;
    }
  }
  return false;
};


/**
 * In some instances, a touchstart can happen without a touchend. This
 * leaves the pointermap in a broken state.
 * Therefore, on every touchstart, we remove the touches that did not fire a
 * touchend event.
 * To keep state globally consistent, we fire a pointercancel for
 * this "abandoned" touch
 *
 * @private
 * @param {TouchEvent} inEvent The in event.
 */
TouchSource.prototype.vacuumTouches_ = function(inEvent) {
  const touchList = inEvent.touches;
  // pointerMap.getCount() should be < touchList.length here,
  // as the touchstart has not been processed yet.
  const keys = Object.keys(this.pointerMap);
  const count = keys.length;
  if (count >= touchList.length) {
    const d = [];
    for (let i = 0; i < count; ++i) {
      const key = keys[i];
      const value = this.pointerMap[key];
      // Never remove pointerId == 1, which is mouse.
      // Touch identifiers are 2 smaller than their pointerId, which is the
      // index in pointermap.
      if (key != MouseSource["a" /* POINTER_ID */] && !this.findTouch_(touchList, key - 2)) {
        d.push(value.out);
      }
    }
    for (let i = 0; i < d.length; ++i) {
      this.cancelOut_(inEvent, d[i]);
    }
  }
};


/**
 * Handler for `touchstart`, triggers `pointerover`,
 * `pointerenter` and `pointerdown` events.
 *
 * @param {TouchEvent} inEvent The in event.
 */
TouchSource.prototype.touchstart = function(inEvent) {
  this.vacuumTouches_(inEvent);
  this.setPrimaryTouch_(inEvent.changedTouches[0]);
  this.dedupSynthMouse_(inEvent);
  this.clickCount_++;
  this.processTouches_(inEvent, this.overDown_);
};


/**
 * @private
 * @param {TouchEvent} browserEvent The event.
 * @param {PointerEvent} inPointer The in pointer object.
 */
TouchSource.prototype.overDown_ = function(browserEvent, inPointer) {
  this.pointerMap[inPointer.pointerId] = {
    target: inPointer.target,
    out: inPointer,
    outTarget: inPointer.target
  };
  this.dispatcher.over(inPointer, browserEvent);
  this.dispatcher.enter(inPointer, browserEvent);
  this.dispatcher.down(inPointer, browserEvent);
};


/**
 * Handler for `touchmove`.
 *
 * @param {TouchEvent} inEvent The in event.
 */
TouchSource.prototype.touchmove = function(inEvent) {
  inEvent.preventDefault();
  this.processTouches_(inEvent, this.moveOverOut_);
};


/**
 * @private
 * @param {TouchEvent} browserEvent The event.
 * @param {PointerEvent} inPointer The in pointer.
 */
TouchSource.prototype.moveOverOut_ = function(browserEvent, inPointer) {
  const event = inPointer;
  const pointer = this.pointerMap[event.pointerId];
  // a finger drifted off the screen, ignore it
  if (!pointer) {
    return;
  }
  const outEvent = pointer.out;
  const outTarget = pointer.outTarget;
  this.dispatcher.move(event, browserEvent);
  if (outEvent && outTarget !== event.target) {
    outEvent.relatedTarget = event.target;
    event.relatedTarget = outTarget;
    // recover from retargeting by shadow
    outEvent.target = outTarget;
    if (event.target) {
      this.dispatcher.leaveOut(outEvent, browserEvent);
      this.dispatcher.enterOver(event, browserEvent);
    } else {
      // clean up case when finger leaves the screen
      event.target = outTarget;
      event.relatedTarget = null;
      this.cancelOut_(browserEvent, event);
    }
  }
  pointer.out = event;
  pointer.outTarget = event.target;
};


/**
 * Handler for `touchend`, triggers `pointerup`,
 * `pointerout` and `pointerleave` events.
 *
 * @param {TouchEvent} inEvent The event.
 */
TouchSource.prototype.touchend = function(inEvent) {
  this.dedupSynthMouse_(inEvent);
  this.processTouches_(inEvent, this.upOut_);
};


/**
 * @private
 * @param {TouchEvent} browserEvent An event.
 * @param {PointerEvent} inPointer The inPointer object.
 */
TouchSource.prototype.upOut_ = function(browserEvent, inPointer) {
  this.dispatcher.up(inPointer, browserEvent);
  this.dispatcher.out(inPointer, browserEvent);
  this.dispatcher.leave(inPointer, browserEvent);
  this.cleanUpPointer_(inPointer);
};


/**
 * Handler for `touchcancel`, triggers `pointercancel`,
 * `pointerout` and `pointerleave` events.
 *
 * @param {TouchEvent} inEvent The in event.
 */
TouchSource.prototype.touchcancel = function(inEvent) {
  this.processTouches_(inEvent, this.cancelOut_);
};


/**
 * @private
 * @param {TouchEvent} browserEvent The event.
 * @param {PointerEvent} inPointer The in pointer.
 */
TouchSource.prototype.cancelOut_ = function(browserEvent, inPointer) {
  this.dispatcher.cancel(inPointer, browserEvent);
  this.dispatcher.out(inPointer, browserEvent);
  this.dispatcher.leave(inPointer, browserEvent);
  this.cleanUpPointer_(inPointer);
};


/**
 * @private
 * @param {PointerEvent} inPointer The inPointer object.
 */
TouchSource.prototype.cleanUpPointer_ = function(inPointer) {
  delete this.pointerMap[inPointer.pointerId];
  this.removePrimaryPointer_(inPointer);
};


/**
 * Prevent synth mouse events from creating pointer events.
 *
 * @private
 * @param {TouchEvent} inEvent The in event.
 */
TouchSource.prototype.dedupSynthMouse_ = function(inEvent) {
  const lts = this.mouseSource.lastTouches;
  const t = inEvent.changedTouches[0];
  // only the primary finger will synth mouse events
  if (this.isPrimaryTouch_(t)) {
    // remember x/y of last touch
    const lt = [t.clientX, t.clientY];
    lts.push(lt);

    setTimeout(function() {
      // remove touch after timeout
      Object(array["j" /* remove */])(lts, lt);
    }, this.dedupTimeout_);
  }
};
/* harmony default export */ var pointer_TouchSource = (TouchSource);

// CONCATENATED MODULE: ../src/ol/pointer/PointerEventHandler.js
/**
 * @module ol/pointer/PointerEventHandler
 */
// Based on https://github.com/Polymer/PointerEvents

// Copyright (c) 2013 The Polymer Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.












/**
 * @constructor
 * @extends {module:ol/events/EventTarget}
 * @param {Element|HTMLDocument} element Viewport element.
 */
const PointerEventHandler = function(element) {
  EventTarget["a" /* default */].call(this);

  /**
   * @const
   * @private
   * @type {Element|HTMLDocument}
   */
  this.element_ = element;

  /**
   * @const
   * @type {!Object.<string, Event|Object>}
   */
  this.pointerMap = {};

  /**
   * @type {Object.<string, function(Event)>}
   * @private
   */
  this.eventMap_ = {};

  /**
   * @type {Array.<module:ol/pointer/EventSource>}
   * @private
   */
  this.eventSourceList_ = [];

  this.registerSources();
};

Object(util["c" /* inherits */])(PointerEventHandler, EventTarget["a" /* default */]);

/**
 * Properties to copy when cloning an event, with default values.
 * @type {Array.<Array>}
 */
const CLONE_PROPS = [
  // MouseEvent
  ['bubbles', false],
  ['cancelable', false],
  ['view', null],
  ['detail', null],
  ['screenX', 0],
  ['screenY', 0],
  ['clientX', 0],
  ['clientY', 0],
  ['ctrlKey', false],
  ['altKey', false],
  ['shiftKey', false],
  ['metaKey', false],
  ['button', 0],
  ['relatedTarget', null],
  // DOM Level 3
  ['buttons', 0],
  // PointerEvent
  ['pointerId', 0],
  ['width', 0],
  ['height', 0],
  ['pressure', 0],
  ['tiltX', 0],
  ['tiltY', 0],
  ['pointerType', ''],
  ['hwTimestamp', 0],
  ['isPrimary', false],
  // event instance
  ['type', ''],
  ['target', null],
  ['currentTarget', null],
  ['which', 0]
];


/**
 * Set up the event sources (mouse, touch and native pointers)
 * that generate pointer events.
 */
PointerEventHandler.prototype.registerSources = function() {
  if (has["g" /* POINTER */]) {
    this.registerSource('native', new pointer_NativeSource(this));
  } else if (has["f" /* MSPOINTER */]) {
    this.registerSource('ms', new pointer_MsSource(this));
  } else {
    const mouseSource = new MouseSource["c" /* default */](this);
    this.registerSource('mouse', mouseSource);

    if (has["i" /* TOUCH */]) {
      this.registerSource('touch', new pointer_TouchSource(this, mouseSource));
    }
  }

  // register events on the viewport element
  this.register_();
};


/**
 * Add a new event source that will generate pointer events.
 *
 * @param {string} name A name for the event source
 * @param {module:ol/pointer/EventSource} source The source event.
 */
PointerEventHandler.prototype.registerSource = function(name, source) {
  const s = source;
  const newEvents = s.getEvents();

  if (newEvents) {
    newEvents.forEach(function(e) {
      const handler = s.getHandlerForEvent(e);

      if (handler) {
        this.eventMap_[e] = handler.bind(s);
      }
    }.bind(this));
    this.eventSourceList_.push(s);
  }
};


/**
 * Set up the events for all registered event sources.
 * @private
 */
PointerEventHandler.prototype.register_ = function() {
  const l = this.eventSourceList_.length;
  for (let i = 0; i < l; i++) {
    const eventSource = this.eventSourceList_[i];
    this.addEvents_(eventSource.getEvents());
  }
};


/**
 * Remove all registered events.
 * @private
 */
PointerEventHandler.prototype.unregister_ = function() {
  const l = this.eventSourceList_.length;
  for (let i = 0; i < l; i++) {
    const eventSource = this.eventSourceList_[i];
    this.removeEvents_(eventSource.getEvents());
  }
};


/**
 * Calls the right handler for a new event.
 * @private
 * @param {Event} inEvent Browser event.
 */
PointerEventHandler.prototype.eventHandler_ = function(inEvent) {
  const type = inEvent.type;
  const handler = this.eventMap_[type];
  if (handler) {
    handler(inEvent);
  }
};


/**
 * Setup listeners for the given events.
 * @private
 * @param {Array.<string>} events List of events.
 */
PointerEventHandler.prototype.addEvents_ = function(events) {
  events.forEach(function(eventName) {
    Object(ol_events["a" /* listen */])(this.element_, eventName, this.eventHandler_, this);
  }.bind(this));
};


/**
 * Unregister listeners for the given events.
 * @private
 * @param {Array.<string>} events List of events.
 */
PointerEventHandler.prototype.removeEvents_ = function(events) {
  events.forEach(function(e) {
    Object(ol_events["c" /* unlisten */])(this.element_, e, this.eventHandler_, this);
  }.bind(this));
};


/**
 * Returns a snapshot of inEvent, with writable properties.
 *
 * @param {Event} event Browser event.
 * @param {Event|Touch} inEvent An event that contains
 *    properties to copy.
 * @return {Object} An object containing shallow copies of
 *    `inEvent`'s properties.
 */
PointerEventHandler.prototype.cloneEvent = function(event, inEvent) {
  const eventCopy = {};
  for (let i = 0, ii = CLONE_PROPS.length; i < ii; i++) {
    const p = CLONE_PROPS[i][0];
    eventCopy[p] = event[p] || inEvent[p] || CLONE_PROPS[i][1];
  }

  return eventCopy;
};


// EVENTS


/**
 * Triggers a 'pointerdown' event.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.down = function(data, event) {
  this.fireEvent(EventType["a" /* default */].POINTERDOWN, data, event);
};


/**
 * Triggers a 'pointermove' event.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.move = function(data, event) {
  this.fireEvent(EventType["a" /* default */].POINTERMOVE, data, event);
};


/**
 * Triggers a 'pointerup' event.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.up = function(data, event) {
  this.fireEvent(EventType["a" /* default */].POINTERUP, data, event);
};


/**
 * Triggers a 'pointerenter' event.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.enter = function(data, event) {
  data.bubbles = false;
  this.fireEvent(EventType["a" /* default */].POINTERENTER, data, event);
};


/**
 * Triggers a 'pointerleave' event.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.leave = function(data, event) {
  data.bubbles = false;
  this.fireEvent(EventType["a" /* default */].POINTERLEAVE, data, event);
};


/**
 * Triggers a 'pointerover' event.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.over = function(data, event) {
  data.bubbles = true;
  this.fireEvent(EventType["a" /* default */].POINTEROVER, data, event);
};


/**
 * Triggers a 'pointerout' event.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.out = function(data, event) {
  data.bubbles = true;
  this.fireEvent(EventType["a" /* default */].POINTEROUT, data, event);
};


/**
 * Triggers a 'pointercancel' event.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.cancel = function(data, event) {
  this.fireEvent(EventType["a" /* default */].POINTERCANCEL, data, event);
};


/**
 * Triggers a combination of 'pointerout' and 'pointerleave' events.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.leaveOut = function(data, event) {
  this.out(data, event);
  if (!this.contains_(data.target, data.relatedTarget)) {
    this.leave(data, event);
  }
};


/**
 * Triggers a combination of 'pointerover' and 'pointerevents' events.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.enterOver = function(data, event) {
  this.over(data, event);
  if (!this.contains_(data.target, data.relatedTarget)) {
    this.enter(data, event);
  }
};


/**
 * @private
 * @param {Element} container The container element.
 * @param {Element} contained The contained element.
 * @return {boolean} Returns true if the container element
 *   contains the other element.
 */
PointerEventHandler.prototype.contains_ = function(container, contained) {
  if (!container || !contained) {
    return false;
  }
  return container.contains(contained);
};


// EVENT CREATION AND TRACKING
/**
 * Creates a new Event of type `inType`, based on the information in
 * `data`.
 *
 * @param {string} inType A string representing the type of event to create.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 * @return {module:ol/pointer/PointerEvent} A PointerEvent of type `inType`.
 */
PointerEventHandler.prototype.makeEvent = function(inType, data, event) {
  return new pointer_PointerEvent(inType, event, data);
};


/**
 * Make and dispatch an event in one call.
 * @param {string} inType A string representing the type of event.
 * @param {Object} data Pointer event data.
 * @param {Event} event The event.
 */
PointerEventHandler.prototype.fireEvent = function(inType, data, event) {
  const e = this.makeEvent(inType, data, event);
  this.dispatchEvent(e);
};


/**
 * Creates a pointer event from a native pointer event
 * and dispatches this event.
 * @param {Event} event A platform event with a target.
 */
PointerEventHandler.prototype.fireNativeEvent = function(event) {
  const e = this.makeEvent(event.type, event, event);
  this.dispatchEvent(e);
};


/**
 * Wrap a native mouse event into a pointer event.
 * This proxy method is required for the legacy IE support.
 * @param {string} eventType The pointer event type.
 * @param {Event} event The event.
 * @return {module:ol/pointer/PointerEvent} The wrapped event.
 */
PointerEventHandler.prototype.wrapMouseEvent = function(eventType, event) {
  const pointerEvent = this.makeEvent(
    eventType, MouseSource["c" /* default */].prepareEvent(event, this), event);
  return pointerEvent;
};


/**
 * @inheritDoc
 */
PointerEventHandler.prototype.disposeInternal = function() {
  this.unregister_();
  EventTarget["a" /* default */].prototype.disposeInternal.call(this);
};


/* harmony default export */ var pointer_PointerEventHandler = __webpack_exports__["a"] = (PointerEventHandler);


/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42);
/* harmony import */ var _format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52);
/* harmony import */ var _format_xsd_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(83);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(15);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7);
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(0);
/**
 * @module ol/format/GML2
 */











/**
 * @const
 * @type {string}
 */
const schemaLocation = _format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* GMLNS */ "a"] + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';


/**
 * @classdesc
 * Feature format for reading and writing data in the GML format,
 * version 2.1.2.
 *
 * @constructor
 * @param {module:ol/format/GMLBase~Options=} opt_options Optional configuration object.
 * @extends {module:ol/format/GMLBase}
 * @api
 */
const GML2 = function(opt_options) {
  const options = /** @type {module:ol/format/GMLBase~Options} */
      (opt_options ? opt_options : {});

  _format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"].call(this, options);

  this.FEATURE_COLLECTION_PARSERS[_format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* GMLNS */ "a"]][
    'featureMember'] =
      Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeArrayPusher */ "j"])(_format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"].prototype.readFeaturesInternal);

  /**
   * @inheritDoc
   */
  this.schemaLocation = options.schemaLocation ?
    options.schemaLocation : schemaLocation;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(GML2, _format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"]);


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {Array.<number>|undefined} Flat coordinates.
 */
GML2.prototype.readFlatCoordinates_ = function(node, objectStack) {
  const s = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* getAllTextContent */ "e"])(node, false).replace(/^\s*|\s*$/g, '');
  const context = /** @type {module:ol/xml~NodeStackItem} */ (objectStack[0]);
  const containerSrs = context['srsName'];
  let axisOrientation = 'enu';
  if (containerSrs) {
    const proj = Object(_proj_js__WEBPACK_IMPORTED_MODULE_7__[/* get */ "h"])(containerSrs);
    if (proj) {
      axisOrientation = proj.getAxisOrientation();
    }
  }
  const coordsGroups = s.trim().split(/\s+/);
  const flatCoordinates = [];
  for (let i = 0, ii = coordsGroups.length; i < ii; i++) {
    const coords = coordsGroups[i].split(/,+/);
    const x = parseFloat(coords[0]);
    const y = parseFloat(coords[1]);
    const z = (coords.length === 3) ? parseFloat(coords[2]) : 0;
    if (axisOrientation.substr(0, 2) === 'en') {
      flatCoordinates.push(x, y, z);
    } else {
      flatCoordinates.push(y, x, z);
    }
  }
  return flatCoordinates;
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 * @return {module:ol/extent~Extent|undefined} Envelope.
 */
GML2.prototype.readBox_ = function(node, objectStack) {
  /** @type {Array.<number>} */
  const flatCoordinates = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushParseAndPop */ "u"])([null],
    this.BOX_PARSERS_, node, objectStack, this);
  return Object(_extent_js__WEBPACK_IMPORTED_MODULE_1__[/* createOrUpdate */ "k"])(flatCoordinates[1][0],
    flatCoordinates[1][1], flatCoordinates[1][3],
    flatCoordinates[1][4]);
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
GML2.prototype.innerBoundaryIsParser_ = function(node, objectStack) {
  /** @type {Array.<number>|undefined} */
  const flatLinearRing = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushParseAndPop */ "u"])(undefined,
    this.RING_PARSERS, node, objectStack, this);
  if (flatLinearRing) {
    const flatLinearRings = /** @type {Array.<Array.<number>>} */
        (objectStack[objectStack.length - 1]);
    flatLinearRings.push(flatLinearRing);
  }
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @private
 */
GML2.prototype.outerBoundaryIsParser_ = function(node, objectStack) {
  /** @type {Array.<number>|undefined} */
  const flatLinearRing = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushParseAndPop */ "u"])(undefined,
    this.RING_PARSERS, node, objectStack, this);
  if (flatLinearRing) {
    const flatLinearRings = /** @type {Array.<Array.<number>>} */
        (objectStack[objectStack.length - 1]);
    flatLinearRings[0] = flatLinearRing;
  }
};


/**
 * @const
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node|undefined} Node.
 * @private
 */
GML2.prototype.GEOMETRY_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {
  const context = objectStack[objectStack.length - 1];
  const multiSurface = context['multiSurface'];
  const surface = context['surface'];
  const multiCurve = context['multiCurve'];
  let nodeName;
  if (!Array.isArray(value)) {
    nodeName = /** @type {module:ol/geom/Geometry} */ (value).getType();
    if (nodeName === 'MultiPolygon' && multiSurface === true) {
      nodeName = 'MultiSurface';
    } else if (nodeName === 'Polygon' && surface === true) {
      nodeName = 'Surface';
    } else if (nodeName === 'MultiLineString' && multiCurve === true) {
      nodeName = 'MultiCurve';
    }
  } else {
    nodeName = 'Envelope';
  }
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])('http://www.opengis.net/gml',
    nodeName);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/Feature} feature Feature.
 * @param {Array.<*>} objectStack Node stack.
 */
GML2.prototype.writeFeatureElement = function(node, feature, objectStack) {
  const fid = feature.getId();
  if (fid) {
    node.setAttribute('fid', fid);
  }
  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  const featureNS = context['featureNS'];
  const geometryName = feature.getGeometryName();
  if (!context.serializers) {
    context.serializers = {};
    context.serializers[featureNS] = {};
  }
  const properties = feature.getProperties();
  const keys = [];
  const values = [];
  for (const key in properties) {
    const value = properties[key];
    if (value !== null) {
      keys.push(key);
      values.push(value);
      if (key == geometryName || value instanceof _geom_Geometry_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]) {
        if (!(key in context.serializers[featureNS])) {
          context.serializers[featureNS][key] = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
            this.writeGeometryElement, this);
        }
      } else {
        if (!(key in context.serializers[featureNS])) {
          context.serializers[featureNS][key] = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_4__[/* writeStringTextNode */ "n"]);
        }
      }
    }
  }
  const item = Object(_obj_js__WEBPACK_IMPORTED_MODULE_6__[/* assign */ "a"])({}, context);
  item.node = node;
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushSerializeAndPop */ "v"])(/** @type {module:ol/xml~NodeStackItem} */
    (item), context.serializers,
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeSimpleNodeFactory */ "q"])(undefined, featureNS),
    values,
    objectStack, keys);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LineString} geometry LineString geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeCurveOrLineString_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const srsName = context['srsName'];
  if (node.nodeName !== 'LineStringSegment' && srsName) {
    node.setAttribute('srsName', srsName);
  }
  if (node.nodeName === 'LineString' ||
      node.nodeName === 'LineStringSegment') {
    const coordinates = this.createCoordinatesNode_(node.namespaceURI);
    node.appendChild(coordinates);
    this.writeCoordinates_(coordinates, geometry, objectStack);
  } else if (node.nodeName === 'Curve') {
    const segments = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])(node.namespaceURI, 'segments');
    node.appendChild(segments);
    this.writeCurveSegments_(segments,
      geometry, objectStack);
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LineString} line LineString geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeLineStringOrCurveMember_ = function(node, line, objectStack) {
  const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
  if (child) {
    node.appendChild(child);
    this.writeCurveOrLineString_(child, line, objectStack);
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/MultiLineString} geometry MultiLineString geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeMultiCurveOrLineString_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsName = context['srsName'];
  const curve = context['curve'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const lines = geometry.getLineStrings();
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushSerializeAndPop */ "v"])({node: node, hasZ: hasZ, srsName: srsName, curve: curve},
    this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,
    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,
    objectStack, undefined, this);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Geometry|module:ol/extent~Extent} geometry Geometry.
 * @param {Array.<*>} objectStack Node stack.
 */
GML2.prototype.writeGeometryElement = function(node, geometry, objectStack) {
  const context = /** @type {module:ol/format/Feature~WriteOptions} */ (objectStack[objectStack.length - 1]);
  const item = Object(_obj_js__WEBPACK_IMPORTED_MODULE_6__[/* assign */ "a"])({}, context);
  item.node = node;
  let value;
  if (Array.isArray(geometry)) {
    if (context.dataProjection) {
      value = Object(_proj_js__WEBPACK_IMPORTED_MODULE_7__[/* transformExtent */ "o"])(
        geometry, context.featureProjection, context.dataProjection);
    } else {
      value = geometry;
    }
  } else {
    value = Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* transformWithOptions */ "b"])(/** @type {module:ol/geom/Geometry} */ (geometry), true, context);
  }
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushSerializeAndPop */ "v"])(/** @type {module:ol/xml~NodeStackItem} */
    (item), this.GEOMETRY_SERIALIZERS_,
    this.GEOMETRY_NODE_FACTORY_, [value],
    objectStack, undefined, this);
};


/**
 * @param {string} namespaceURI XML namespace.
 * @returns {Node} coordinates node.
 * @private
 */
GML2.prototype.createCoordinatesNode_ = function(namespaceURI) {
  const coordinates = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])(namespaceURI, 'coordinates');
  coordinates.setAttribute('decimal', '.');
  coordinates.setAttribute('cs', ',');
  coordinates.setAttribute('ts', ' ');

  return coordinates;
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LineString|module:ol/geom/LinearRing} value Geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeCoordinates_ = function(node, value, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsName = context['srsName'];
  // only 2d for simple features profile
  const points = value.getCoordinates();
  const len = points.length;
  const parts = new Array(len);
  for (let i = 0; i < len; ++i) {
    const point = points[i];
    parts[i] = this.getCoords_(point, srsName, hasZ);
  }
  Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_4__[/* writeStringTextNode */ "n"])(node, parts.join(' '));
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LineString} line LineString geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeCurveSegments_ = function(node, line, objectStack) {
  const child = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])(node.namespaceURI, 'LineStringSegment');
  node.appendChild(child);
  this.writeCurveOrLineString_(child, line, objectStack);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Polygon} geometry Polygon geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeSurfaceOrPolygon_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsName = context['srsName'];
  if (node.nodeName !== 'PolygonPatch' && srsName) {
    node.setAttribute('srsName', srsName);
  }
  if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
    const rings = geometry.getLinearRings();
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushSerializeAndPop */ "v"])(
      {node: node, hasZ: hasZ, srsName: srsName},
      this.RING_SERIALIZERS_,
      this.RING_NODE_FACTORY_,
      rings, objectStack, undefined, this);
  } else if (node.nodeName === 'Surface') {
    const patches = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])(node.namespaceURI, 'patches');
    node.appendChild(patches);
    this.writeSurfacePatches_(
      patches, geometry, objectStack);
  }
};


/**
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node} Node.
 * @private
 */
GML2.prototype.RING_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {
  const context = objectStack[objectStack.length - 1];
  const parentNode = context.node;
  const exteriorWritten = context['exteriorWritten'];
  if (exteriorWritten === undefined) {
    context['exteriorWritten'] = true;
  }
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])(parentNode.namespaceURI,
    exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Polygon} polygon Polygon geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeSurfacePatches_ = function(node, polygon, objectStack) {
  const child = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])(node.namespaceURI, 'PolygonPatch');
  node.appendChild(child);
  this.writeSurfaceOrPolygon_(child, polygon, objectStack);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LinearRing} ring LinearRing geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeRing_ = function(node, ring, objectStack) {
  const linearRing = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])(node.namespaceURI, 'LinearRing');
  node.appendChild(linearRing);
  this.writeLinearRing_(linearRing, ring, objectStack);
};


/**
 * @param {Array.<number>} point Point geometry.
 * @param {string=} opt_srsName Optional srsName
 * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.
 * @return {string} The coords string.
 * @private
 */
GML2.prototype.getCoords_ = function(point, opt_srsName, opt_hasZ) {
  let axisOrientation = 'enu';
  if (opt_srsName) {
    axisOrientation = Object(_proj_js__WEBPACK_IMPORTED_MODULE_7__[/* get */ "h"])(opt_srsName).getAxisOrientation();
  }
  let coords = ((axisOrientation.substr(0, 2) === 'en') ?
    point[0] + ',' + point[1] :
    point[1] + ',' + point[0]);
  if (opt_hasZ) {
    // For newly created points, Z can be undefined.
    const z = point[2] || 0;
    coords += ',' + z;
  }

  return coords;
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Point} geometry Point geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writePoint_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsName = context['srsName'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const coordinates = this.createCoordinatesNode_(node.namespaceURI);
  node.appendChild(coordinates);
  const point = geometry.getCoordinates();
  const coord = this.getCoords_(point, srsName, hasZ);
  Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_4__[/* writeStringTextNode */ "n"])(coordinates, coord);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/MultiPoint} geometry MultiPoint geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeMultiPoint_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsName = context['srsName'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const points = geometry.getPoints();
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushSerializeAndPop */ "v"])({node: node, hasZ: hasZ, srsName: srsName},
    this.POINTMEMBER_SERIALIZERS_,
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeSimpleNodeFactory */ "q"])('pointMember'), points,
    objectStack, undefined, this);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Point} point Point geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writePointMember_ = function(node, point, objectStack) {
  const child = Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])(node.namespaceURI, 'Point');
  node.appendChild(child);
  this.writePoint_(child, point, objectStack);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LinearRing} geometry LinearRing geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeLinearRing_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const srsName = context['srsName'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const coordinates = this.createCoordinatesNode_(node.namespaceURI);
  node.appendChild(coordinates);
  this.writeCoordinates_(coordinates, geometry, objectStack);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/MultiPolygon} geometry MultiPolygon geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeMultiSurfaceOrPolygon_ = function(node, geometry, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const hasZ = context['hasZ'];
  const srsName = context['srsName'];
  const surface = context['surface'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const polygons = geometry.getPolygons();
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushSerializeAndPop */ "v"])({node: node, hasZ: hasZ, srsName: srsName, surface: surface},
    this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,
    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,
    objectStack, undefined, this);
};


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/Polygon} polygon Polygon geometry.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeSurfaceOrPolygonMember_ = function(node, polygon, objectStack) {
  const child = this.GEOMETRY_NODE_FACTORY_(
    polygon, objectStack);
  if (child) {
    node.appendChild(child);
    this.writeSurfaceOrPolygon_(child, polygon, objectStack);
  }
};


/**
 * @param {Node} node Node.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {Array.<*>} objectStack Node stack.
 * @private
 */
GML2.prototype.writeEnvelope = function(node, extent, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const srsName = context['srsName'];
  if (srsName) {
    node.setAttribute('srsName', srsName);
  }
  const keys = ['lowerCorner', 'upperCorner'];
  const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* pushSerializeAndPop */ "v"])(/** @type {module:ol/xml~NodeStackItem} */
    ({node: node}), this.ENVELOPE_SERIALIZERS_,
    _xml_js__WEBPACK_IMPORTED_MODULE_8__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"],
    values,
    objectStack, keys, this);
};


/**
 * @const
 * @type {Object.<string, string>}
 */
const MULTIGEOMETRY_TO_MEMBER_NODENAME = {
  'MultiLineString': 'lineStringMember',
  'MultiCurve': 'curveMember',
  'MultiPolygon': 'polygonMember',
  'MultiSurface': 'surfaceMember'
};


/**
 * @const
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node|undefined} Node.
 * @private
 */
GML2.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {
  const parentNode = objectStack[objectStack.length - 1].node;
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* createElementNS */ "d"])('http://www.opengis.net/gml',
    MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'coordinates': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeReplacer */ "o"])(GML2.prototype.readFlatCoordinates_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML2.prototype.FLAT_LINEAR_RINGS_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser_,
    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser_
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML2.prototype.BOX_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'coordinates': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeArrayPusher */ "j"])(
      GML2.prototype.readFlatCoordinates_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 * @private
 */
GML2.prototype.GEOMETRY_PARSERS_ = {
  'http://www.opengis.net/gml': {
    'Point': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeReplacer */ "o"])(_format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"].prototype.readPoint),
    'MultiPoint': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeReplacer */ "o"])(
      _format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"].prototype.readMultiPoint),
    'LineString': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeReplacer */ "o"])(
      _format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"].prototype.readLineString),
    'MultiLineString': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeReplacer */ "o"])(
      _format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"].prototype.readMultiLineString),
    'LinearRing': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeReplacer */ "o"])(
      _format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"].prototype.readLinearRing),
    'Polygon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeReplacer */ "o"])(_format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"].prototype.readPolygon),
    'MultiPolygon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeReplacer */ "o"])(
      _format_GMLBase_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "b"].prototype.readMultiPolygon),
    'Box': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeReplacer */ "o"])(GML2.prototype.readBox_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML2.prototype.GEOMETRY_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'Curve': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeCurveOrLineString_),
    'MultiCurve': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeMultiCurveOrLineString_),
    'Point': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(GML2.prototype.writePoint_),
    'MultiPoint': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeMultiPoint_),
    'LineString': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeCurveOrLineString_),
    'MultiLineString': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeMultiCurveOrLineString_),
    'LinearRing': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeLinearRing_),
    'Polygon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeSurfaceOrPolygon_),
    'MultiPolygon': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeMultiSurfaceOrPolygon_),
    'Surface': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeSurfaceOrPolygon_),
    'MultiSurface': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeMultiSurfaceOrPolygon_),
    'Envelope': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeEnvelope)
  }
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'lineStringMember': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeLineStringOrCurveMember_),
    'curveMember': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeLineStringOrCurveMember_)
  }
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML2.prototype.RING_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'outerBoundaryIs': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(GML2.prototype.writeRing_),
    'innerBoundaryIs': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(GML2.prototype.writeRing_)
  }
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML2.prototype.POINTMEMBER_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'pointMember': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writePointMember_)
  }
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'surfaceMember': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeSurfaceOrPolygonMember_),
    'polygonMember': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(
      GML2.prototype.writeSurfaceOrPolygonMember_)
  }
};


/**
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 * @private
 */
GML2.prototype.ENVELOPE_SERIALIZERS_ = {
  'http://www.opengis.net/gml': {
    'lowerCorner': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_4__[/* writeStringTextNode */ "n"]),
    'upperCorner': Object(_xml_js__WEBPACK_IMPORTED_MODULE_8__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_4__[/* writeStringTextNode */ "n"])
  }
};

/* harmony default export */ __webpack_exports__["a"] = (GML2);


/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return shared; });
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(77);
/**
 * @module ol/style/IconImageCache
 */


/**
 * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.
 * @constructor
 */
const IconImageCache = function() {

  /**
   * @type {!Object.<string, module:ol/style/IconImage>}
   * @private
   */
  this.cache_ = {};

  /**
   * @type {number}
   * @private
   */
  this.cacheSize_ = 0;

  /**
   * @type {number}
   * @private
   */
  this.maxCacheSize_ = 32;
};


/**
 * @param {string} src Src.
 * @param {?string} crossOrigin Cross origin.
 * @param {module:ol/color~Color} color Color.
 * @return {string} Cache key.
 */
function getKey(src, crossOrigin, color) {
  const colorString = color ? Object(_color_js__WEBPACK_IMPORTED_MODULE_0__[/* asString */ "b"])(color) : 'null';
  return crossOrigin + ':' + src + ':' + colorString;
}


/**
 * FIXME empty description for jsdoc
 */
IconImageCache.prototype.clear = function() {
  this.cache_ = {};
  this.cacheSize_ = 0;
};


/**
 * FIXME empty description for jsdoc
 */
IconImageCache.prototype.expire = function() {
  if (this.cacheSize_ > this.maxCacheSize_) {
    let i = 0;
    for (const key in this.cache_) {
      const iconImage = this.cache_[key];
      if ((i++ & 3) === 0 && !iconImage.hasListener()) {
        delete this.cache_[key];
        --this.cacheSize_;
      }
    }
  }
};


/**
 * @param {string} src Src.
 * @param {?string} crossOrigin Cross origin.
 * @param {module:ol/color~Color} color Color.
 * @return {module:ol/style/IconImage} Icon image.
 */
IconImageCache.prototype.get = function(src, crossOrigin, color) {
  const key = getKey(src, crossOrigin, color);
  return key in this.cache_ ? this.cache_[key] : null;
};


/**
 * @param {string} src Src.
 * @param {?string} crossOrigin Cross origin.
 * @param {module:ol/color~Color} color Color.
 * @param {module:ol/style/IconImage} iconImage Icon image.
 */
IconImageCache.prototype.set = function(src, crossOrigin, color, iconImage) {
  const key = getKey(src, crossOrigin, color);
  this.cache_[key] = iconImage;
  ++this.cacheSize_;
};


/**
 * Set the cache size of the icon cache. Default is `32`. Change this value when
 * your map uses more than 32 different icon images and you are not caching icon
 * styles on the application level.
 * @param {number} maxCacheSize Cache max size.
 * @api
 */
IconImageCache.prototype.setSize = function(maxCacheSize) {
  this.maxCacheSize_ = maxCacheSize;
  this.expire();
};
/* unused harmony default export */ var _unused_webpack_default_export = (IconImageCache);


/**
 * The {@link module:ol/style/IconImageCache~IconImageCache} for
 * {@link module:ol/style/Icon~Icon} images.
 * @api
 */
const shared = new IconImageCache();


/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return layerRendererConstructors; });
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16);
/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(47);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(32);
/* harmony import */ var _layer_Layer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(66);
/* harmony import */ var _render_Event_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(162);
/* harmony import */ var _render_EventType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(78);
/* harmony import */ var _render_canvas_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(26);
/* harmony import */ var _render_canvas_Immediate_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(191);
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(145);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(50);
/**
 * @module ol/renderer/canvas/Map
 */














/**
 * @type {Array.<module:ol/renderer/Layer>}
 */
const layerRendererConstructors = [];


/**
 * @constructor
 * @extends {module:ol/renderer/Map}
 * @param {module:ol/PluggableMap} map Map.
 * @api
 */
const CanvasMapRenderer = function(map) {
  _Map_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].call(this, map);

  const container = map.getViewport();

  /**
   * @private
   * @type {CanvasRenderingContext2D}
   */
  this.context_ = Object(_dom_js__WEBPACK_IMPORTED_MODULE_4__[/* createCanvasContext2D */ "a"])();

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = this.context_.canvas;

  this.canvas_.style.width = '100%';
  this.canvas_.style.height = '100%';
  this.canvas_.style.display = 'block';
  this.canvas_.className = _css_js__WEBPACK_IMPORTED_MODULE_3__[/* CLASS_UNSELECTABLE */ "e"];
  container.insertBefore(this.canvas_, container.childNodes[0] || null);

  /**
   * @private
   * @type {boolean}
   */
  this.renderedVisible_ = true;

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.transform_ = Object(_transform_js__WEBPACK_IMPORTED_MODULE_0__[/* create */ "c"])();

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_1__[/* inherits */ "c"])(CanvasMapRenderer, _Map_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"]);


/**
 * @param {module:ol/render/EventType} type Event type.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @private
 */
CanvasMapRenderer.prototype.dispatchComposeEvent_ = function(type, frameState) {
  const map = this.getMap();
  const context = this.context_;
  if (map.hasListener(type)) {
    const extent = frameState.extent;
    const pixelRatio = frameState.pixelRatio;
    const viewState = frameState.viewState;
    const rotation = viewState.rotation;

    const transform = this.getTransform(frameState);

    const vectorContext = new _render_canvas_Immediate_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"](context, pixelRatio,
      extent, transform, rotation);
    const composeEvent = new _render_Event_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](type, vectorContext,
      frameState, context, null);
    map.dispatchEvent(composeEvent);
  }
};


/**
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @protected
 * @return {!module:ol/transform~Transform} Transform.
 */
CanvasMapRenderer.prototype.getTransform = function(frameState) {
  const viewState = frameState.viewState;
  const dx1 = this.canvas_.width / 2;
  const dy1 = this.canvas_.height / 2;
  const sx = frameState.pixelRatio / viewState.resolution;
  const sy = -sx;
  const angle = -viewState.rotation;
  const dx2 = -viewState.center[0];
  const dy2 = -viewState.center[1];
  return Object(_transform_js__WEBPACK_IMPORTED_MODULE_0__[/* compose */ "b"])(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);
};


/**
 * @inheritDoc
 */
CanvasMapRenderer.prototype.renderFrame = function(frameState) {

  if (!frameState) {
    if (this.renderedVisible_) {
      this.canvas_.style.display = 'none';
      this.renderedVisible_ = false;
    }
    return;
  }

  const context = this.context_;
  const pixelRatio = frameState.pixelRatio;
  const width = Math.round(frameState.size[0] * pixelRatio);
  const height = Math.round(frameState.size[1] * pixelRatio);
  if (this.canvas_.width != width || this.canvas_.height != height) {
    this.canvas_.width = width;
    this.canvas_.height = height;
  } else {
    context.clearRect(0, 0, width, height);
  }

  const rotation = frameState.viewState.rotation;

  this.calculateMatrices2D(frameState);

  this.dispatchComposeEvent_(_render_EventType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].PRECOMPOSE, frameState);

  const layerStatesArray = frameState.layerStatesArray;
  Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* stableSort */ "l"])(layerStatesArray, _Map_js__WEBPACK_IMPORTED_MODULE_10__[/* sortByZIndex */ "b"]);

  if (rotation) {
    context.save();
    Object(_render_canvas_js__WEBPACK_IMPORTED_MODULE_8__[/* rotateAtOffset */ "s"])(context, rotation, width / 2, height / 2);
  }

  const viewResolution = frameState.viewState.resolution;
  let i, ii, layer, layerRenderer, layerState;
  for (i = 0, ii = layerStatesArray.length; i < ii; ++i) {
    layerState = layerStatesArray[i];
    layer = layerState.layer;
    layerRenderer = /** @type {module:ol/renderer/canvas/Layer} */ (this.getLayerRenderer(layer));
    if (!Object(_layer_Layer_js__WEBPACK_IMPORTED_MODULE_5__[/* visibleAtResolution */ "b"])(layerState, viewResolution) ||
        layerState.sourceState != _source_State_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"].READY) {
      continue;
    }
    if (layerRenderer.prepareFrame(frameState, layerState)) {
      layerRenderer.composeFrame(frameState, layerState, context);
    }
  }

  if (rotation) {
    context.restore();
  }

  this.dispatchComposeEvent_(_render_EventType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POSTCOMPOSE, frameState);

  if (!this.renderedVisible_) {
    this.canvas_.style.display = '';
    this.renderedVisible_ = true;
  }

  this.scheduleRemoveUnusedLayerRenderers(frameState);
  this.scheduleExpireIconCache(frameState);
};


/**
 * @inheritDoc
 */
CanvasMapRenderer.prototype.forEachLayerAtPixel = function(pixel, frameState, hitTolerance, callback, thisArg,
  layerFilter, thisArg2) {
  let result;
  const viewState = frameState.viewState;
  const viewResolution = viewState.resolution;

  const layerStates = frameState.layerStatesArray;
  const numLayers = layerStates.length;

  const coordinate = Object(_transform_js__WEBPACK_IMPORTED_MODULE_0__[/* apply */ "a"])(
    frameState.pixelToCoordinateTransform, pixel.slice());

  let i;
  for (i = numLayers - 1; i >= 0; --i) {
    const layerState = layerStates[i];
    const layer = layerState.layer;
    if (Object(_layer_Layer_js__WEBPACK_IMPORTED_MODULE_5__[/* visibleAtResolution */ "b"])(layerState, viewResolution) && layerFilter.call(thisArg2, layer)) {
      const layerRenderer = /** @type {module:ol/renderer/canvas/Layer} */ (this.getLayerRenderer(layer));
      result = layerRenderer.forEachLayerAtCoordinate(
        coordinate, frameState, hitTolerance, callback, thisArg);
      if (result) {
        return result;
      }
    }
  }
  return undefined;
};


/**
 * @inheritDoc
 */
CanvasMapRenderer.prototype.registerLayerRenderers = function(constructors) {
  _Map_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].prototype.registerLayerRenderers.call(this, constructors);
  for (let i = 0, ii = constructors.length; i < ii; ++i) {
    const ctor = constructors[i];
    if (!Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(layerRendererConstructors, ctor)) {
      layerRendererConstructors.push(ctor);
    }
  }
};

/* harmony default export */ __webpack_exports__["a"] = (CanvasMapRenderer);


/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _reproj_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _ImageCanvas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(157);
/* harmony import */ var _LayerType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60);
/* harmony import */ var _ViewHint_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(43);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(16);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3);
/* harmony import */ var _layer_VectorRenderType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(228);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(15);
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(203);
/* harmony import */ var _canvas_IntermediateCanvas_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(171);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(18);
/**
 * @module ol/renderer/canvas/ImageLayer
 */













/**
 * @constructor
 * @extends {module:ol/renderer/canvas/IntermediateCanvas}
 * @param {module:ol/layer/Image|module:ol/layer/Vector} imageLayer Image or vector layer.
 * @api
 */
const CanvasImageLayerRenderer = function(imageLayer) {

  _canvas_IntermediateCanvas_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].call(this, imageLayer);

  /**
   * @private
   * @type {?module:ol/ImageBase}
   */
  this.image_ = null;

  /**
   * @private
   * @type {module:ol/transform~Transform}
   */
  this.imageTransform_ = Object(_transform_js__WEBPACK_IMPORTED_MODULE_11__[/* create */ "c"])();

  /**
   * @type {!Array.<string>}
   */
  this.skippedFeatures_ = [];

  /**
   * @private
   * @type {module:ol/renderer/canvas/VectorLayer}
   */
  this.vectorRenderer_ = null;

  if (imageLayer.getType() === _LayerType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].VECTOR) {
    for (let i = 0, ii = _Map_js__WEBPACK_IMPORTED_MODULE_9__[/* layerRendererConstructors */ "b"].length; i < ii; ++i) {
      const ctor = _Map_js__WEBPACK_IMPORTED_MODULE_9__[/* layerRendererConstructors */ "b"][i];
      if (ctor !== CanvasImageLayerRenderer && ctor['handles'](imageLayer)) {
        this.vectorRenderer_ = new ctor(imageLayer);
        break;
      }
    }
  }

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_1__[/* inherits */ "c"])(CanvasImageLayerRenderer, _canvas_IntermediateCanvas_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"]);


/**
 * Determine if this renderer handles the provided layer.
 * @param {module:ol/layer/Layer} layer The candidate layer.
 * @return {boolean} The renderer can render the layer.
 */
CanvasImageLayerRenderer['handles'] = function(layer) {
  return layer.getType() === _LayerType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].IMAGE ||
    layer.getType() === _LayerType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].VECTOR &&
    /** @type {module:ol/layer/Vector} */ (layer).getRenderMode() === _layer_VectorRenderType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].IMAGE;
};


/**
 * Create a layer renderer.
 * @param {module:ol/renderer/Map} mapRenderer The map renderer.
 * @param {module:ol/layer/Layer} layer The layer to be rendererd.
 * @return {module:ol/renderer/canvas/ImageLayer} The layer renderer.
 */
CanvasImageLayerRenderer['create'] = function(mapRenderer, layer) {
  return new CanvasImageLayerRenderer(/** @type {module:ol/layer/Image} */ (layer));
};


/**
 * @inheritDoc
 */
CanvasImageLayerRenderer.prototype.disposeInternal = function() {
  if (this.vectorRenderer_) {
    this.vectorRenderer_.dispose();
  }
  _canvas_IntermediateCanvas_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].prototype.disposeInternal.call(this);
};


/**
 * @inheritDoc
 */
CanvasImageLayerRenderer.prototype.getImage = function() {
  return !this.image_ ? null : this.image_.getImage();
};


/**
 * @inheritDoc
 */
CanvasImageLayerRenderer.prototype.getImageTransform = function() {
  return this.imageTransform_;
};


/**
 * @inheritDoc
 */
CanvasImageLayerRenderer.prototype.prepareFrame = function(frameState, layerState) {

  const pixelRatio = frameState.pixelRatio;
  const size = frameState.size;
  const viewState = frameState.viewState;
  const viewCenter = viewState.center;
  const viewResolution = viewState.resolution;

  let image;
  const imageLayer = /** @type {module:ol/layer/Image} */ (this.getLayer());
  const imageSource = imageLayer.getSource();

  const hints = frameState.viewHints;

  const vectorRenderer = this.vectorRenderer_;
  let renderedExtent = frameState.extent;
  if (!vectorRenderer && layerState.extent !== undefined) {
    renderedExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getIntersection */ "B"])(renderedExtent, layerState.extent);
  }

  if (!hints[_ViewHint_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].ANIMATING] && !hints[_ViewHint_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].INTERACTING] &&
      !Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* isEmpty */ "H"])(renderedExtent)) {
    let projection = viewState.projection;
    if (!_reproj_common_js__WEBPACK_IMPORTED_MODULE_0__[/* ENABLE_RASTER_REPROJECTION */ "a"]) {
      const sourceProjection = imageSource.getProjection();
      if (sourceProjection) {
        projection = sourceProjection;
      }
    }
    let skippedFeatures = this.skippedFeatures_;
    if (vectorRenderer) {
      const context = vectorRenderer.context;
      const imageFrameState = /** @type {module:ol/PluggableMap~FrameState} */ (Object(_obj_js__WEBPACK_IMPORTED_MODULE_8__[/* assign */ "a"])({}, frameState, {
        size: [
          Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getWidth */ "E"])(renderedExtent) / viewResolution,
          Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getHeight */ "A"])(renderedExtent) / viewResolution
        ],
        viewState: /** @type {module:ol/View~State} */ (Object(_obj_js__WEBPACK_IMPORTED_MODULE_8__[/* assign */ "a"])({}, frameState.viewState, {
          rotation: 0
        }))
      }));
      const newSkippedFeatures = Object.keys(imageFrameState.skippedFeatureUids).sort();
      image = new _ImageCanvas_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](renderedExtent, viewResolution, pixelRatio, context.canvas, function(callback) {
        if (vectorRenderer.prepareFrame(imageFrameState, layerState) &&
            (vectorRenderer.replayGroupChanged ||
            !Object(_array_js__WEBPACK_IMPORTED_MODULE_5__[/* equals */ "b"])(skippedFeatures, newSkippedFeatures))) {
          context.canvas.width = imageFrameState.size[0] * pixelRatio;
          context.canvas.height = imageFrameState.size[1] * pixelRatio;
          vectorRenderer.compose(context, imageFrameState, layerState);
          skippedFeatures = newSkippedFeatures;
          callback();
        }
      });
    } else {
      image = imageSource.getImage(
        renderedExtent, viewResolution, pixelRatio, projection);
    }
    if (image && this.loadImage(image)) {
      this.image_ = image;
      this.skippedFeatures_ = skippedFeatures;
    }
  }

  if (this.image_) {
    image = this.image_;
    const imageExtent = image.getExtent();
    const imageResolution = image.getResolution();
    const imagePixelRatio = image.getPixelRatio();
    const scale = pixelRatio * imageResolution /
        (viewResolution * imagePixelRatio);
    const transform = Object(_transform_js__WEBPACK_IMPORTED_MODULE_11__[/* compose */ "b"])(this.imageTransform_,
      pixelRatio * size[0] / 2, pixelRatio * size[1] / 2,
      scale, scale,
      0,
      imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution,
      imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);
    Object(_transform_js__WEBPACK_IMPORTED_MODULE_11__[/* compose */ "b"])(this.coordinateToCanvasPixelTransform,
      pixelRatio * size[0] / 2 - transform[4], pixelRatio * size[1] / 2 - transform[5],
      pixelRatio / viewResolution, -pixelRatio / viewResolution,
      0,
      -viewCenter[0], -viewCenter[1]);

    this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
  }

  return !!this.image_;
};


/**
 * @inheritDoc
 */
CanvasImageLayerRenderer.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, thisArg) {
  if (this.vectorRenderer_) {
    return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg);
  } else {
    return _canvas_IntermediateCanvas_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].prototype.forEachFeatureAtCoordinate.call(this, coordinate, frameState, hitTolerance, callback, thisArg);
  }
};


/* harmony default export */ __webpack_exports__["a"] = (CanvasImageLayerRenderer);


/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ../src/ol/util.js
var util = __webpack_require__(1);

// EXTERNAL MODULE: ../src/ol/asserts.js
var asserts = __webpack_require__(27);

// EXTERNAL MODULE: ../src/ol/Feature.js
var Feature = __webpack_require__(23);

// EXTERNAL MODULE: ../src/ol/format/Feature.js
var format_Feature = __webpack_require__(42);

// EXTERNAL MODULE: ../src/ol/format/TextFeature.js
var TextFeature = __webpack_require__(150);

// EXTERNAL MODULE: ../src/ol/geom/GeometryLayout.js
var GeometryLayout = __webpack_require__(22);

// EXTERNAL MODULE: ../src/ol/geom/LineString.js
var LineString = __webpack_require__(41);

// EXTERNAL MODULE: ../src/ol/geom/SimpleGeometry.js
var SimpleGeometry = __webpack_require__(55);

// CONCATENATED MODULE: ../src/ol/geom/flat/flip.js
/**
 * @module ol/geom/flat/flip
 */


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {Array.<number>=} opt_dest Destination.
 * @param {number=} opt_destOffset Destination offset.
 * @return {Array.<number>} Flat coordinates.
 */
function flipXY(flatCoordinates, offset, end, stride, opt_dest, opt_destOffset) {
  let dest, destOffset;
  if (opt_dest !== undefined) {
    dest = opt_dest;
    destOffset = opt_destOffset !== undefined ? opt_destOffset : 0;
  } else {
    dest = [];
    destOffset = 0;
  }
  let j = offset;
  while (j < end) {
    const x = flatCoordinates[j++];
    dest[destOffset++] = flatCoordinates[j++];
    dest[destOffset++] = x;
    for (let k = 2; k < stride; ++k) {
      dest[destOffset++] = flatCoordinates[j++];
    }
  }
  dest.length = destOffset;
  return dest;
}

// EXTERNAL MODULE: ../src/ol/geom/flat/inflate.js
var inflate = __webpack_require__(91);

// EXTERNAL MODULE: ../src/ol/proj.js + 3 modules
var proj = __webpack_require__(7);

// CONCATENATED MODULE: ../src/ol/format/Polyline.js
/* unused harmony export encodeDeltas */
/* unused harmony export decodeDeltas */
/* unused harmony export encodeFloats */
/* unused harmony export decodeFloats */
/* unused harmony export encodeSignedIntegers */
/* unused harmony export decodeSignedIntegers */
/* unused harmony export encodeUnsignedIntegers */
/* unused harmony export decodeUnsignedIntegers */
/* unused harmony export encodeUnsignedInteger */
/**
 * @module ol/format/Polyline
 */













/**
 * @typedef {Object} Options
 * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.
 * @property {module:ol/geom/GeometryLayout} [geometryLayout='XY'] Layout of the
 * feature geometries created by the format reader.
 */


/**
 * @classdesc
 * Feature format for reading and writing data in the Encoded
 * Polyline Algorithm Format.
 *
 * @constructor
 * @extends {module:ol/format/TextFeature}
 * @param {module:ol/format/Polyline~Options=} opt_options Optional configuration object.
 * @api
 */
const Polyline = function(opt_options) {

  const options = opt_options ? opt_options : {};

  TextFeature["a" /* default */].call(this);

  /**
   * @inheritDoc
   */
  this.dataProjection = Object(proj["h" /* get */])('EPSG:4326');

  /**
   * @private
   * @type {number}
   */
  this.factor_ = options.factor ? options.factor : 1e5;

  /**
   * @private
   * @type {module:ol/geom/GeometryLayout}
   */
  this.geometryLayout_ = options.geometryLayout ?
    options.geometryLayout : GeometryLayout["a" /* default */].XY;
};

Object(util["c" /* inherits */])(Polyline, TextFeature["a" /* default */]);


/**
 * Encode a list of n-dimensional points and return an encoded string
 *
 * Attention: This function will modify the passed array!
 *
 * @param {Array.<number>} numbers A list of n-dimensional points.
 * @param {number} stride The number of dimension of the points in the list.
 * @param {number=} opt_factor The factor by which the numbers will be
 *     multiplied. The remaining decimal places will get rounded away.
 *     Default is `1e5`.
 * @return {string} The encoded string.
 * @api
 */
function encodeDeltas(numbers, stride, opt_factor) {
  const factor = opt_factor ? opt_factor : 1e5;
  let d;

  const lastNumbers = new Array(stride);
  for (d = 0; d < stride; ++d) {
    lastNumbers[d] = 0;
  }

  for (let i = 0, ii = numbers.length; i < ii;) {
    for (d = 0; d < stride; ++d, ++i) {
      const num = numbers[i];
      const delta = num - lastNumbers[d];
      lastNumbers[d] = num;

      numbers[i] = delta;
    }
  }

  return encodeFloats(numbers, factor);
}


/**
 * Decode a list of n-dimensional points from an encoded string
 *
 * @param {string} encoded An encoded string.
 * @param {number} stride The number of dimension of the points in the
 *     encoded string.
 * @param {number=} opt_factor The factor by which the resulting numbers will
 *     be divided. Default is `1e5`.
 * @return {Array.<number>} A list of n-dimensional points.
 * @api
 */
function decodeDeltas(encoded, stride, opt_factor) {
  const factor = opt_factor ? opt_factor : 1e5;
  let d;

  /** @type {Array.<number>} */
  const lastNumbers = new Array(stride);
  for (d = 0; d < stride; ++d) {
    lastNumbers[d] = 0;
  }

  const numbers = decodeFloats(encoded, factor);

  for (let i = 0, ii = numbers.length; i < ii;) {
    for (d = 0; d < stride; ++d, ++i) {
      lastNumbers[d] += numbers[i];

      numbers[i] = lastNumbers[d];
    }
  }

  return numbers;
}


/**
 * Encode a list of floating point numbers and return an encoded string
 *
 * Attention: This function will modify the passed array!
 *
 * @param {Array.<number>} numbers A list of floating point numbers.
 * @param {number=} opt_factor The factor by which the numbers will be
 *     multiplied. The remaining decimal places will get rounded away.
 *     Default is `1e5`.
 * @return {string} The encoded string.
 * @api
 */
function encodeFloats(numbers, opt_factor) {
  const factor = opt_factor ? opt_factor : 1e5;
  for (let i = 0, ii = numbers.length; i < ii; ++i) {
    numbers[i] = Math.round(numbers[i] * factor);
  }

  return encodeSignedIntegers(numbers);
}


/**
 * Decode a list of floating point numbers from an encoded string
 *
 * @param {string} encoded An encoded string.
 * @param {number=} opt_factor The factor by which the result will be divided.
 *     Default is `1e5`.
 * @return {Array.<number>} A list of floating point numbers.
 * @api
 */
function decodeFloats(encoded, opt_factor) {
  const factor = opt_factor ? opt_factor : 1e5;
  const numbers = decodeSignedIntegers(encoded);
  for (let i = 0, ii = numbers.length; i < ii; ++i) {
    numbers[i] /= factor;
  }
  return numbers;
}


/**
 * Encode a list of signed integers and return an encoded string
 *
 * Attention: This function will modify the passed array!
 *
 * @param {Array.<number>} numbers A list of signed integers.
 * @return {string} The encoded string.
 */
function encodeSignedIntegers(numbers) {
  for (let i = 0, ii = numbers.length; i < ii; ++i) {
    const num = numbers[i];
    numbers[i] = (num < 0) ? ~(num << 1) : (num << 1);
  }
  return encodeUnsignedIntegers(numbers);
}


/**
 * Decode a list of signed integers from an encoded string
 *
 * @param {string} encoded An encoded string.
 * @return {Array.<number>} A list of signed integers.
 */
function decodeSignedIntegers(encoded) {
  const numbers = decodeUnsignedIntegers(encoded);
  for (let i = 0, ii = numbers.length; i < ii; ++i) {
    const num = numbers[i];
    numbers[i] = (num & 1) ? ~(num >> 1) : (num >> 1);
  }
  return numbers;
}


/**
 * Encode a list of unsigned integers and return an encoded string
 *
 * @param {Array.<number>} numbers A list of unsigned integers.
 * @return {string} The encoded string.
 */
function encodeUnsignedIntegers(numbers) {
  let encoded = '';
  for (let i = 0, ii = numbers.length; i < ii; ++i) {
    encoded += encodeUnsignedInteger(numbers[i]);
  }
  return encoded;
}


/**
 * Decode a list of unsigned integers from an encoded string
 *
 * @param {string} encoded An encoded string.
 * @return {Array.<number>} A list of unsigned integers.
 */
function decodeUnsignedIntegers(encoded) {
  const numbers = [];
  let current = 0;
  let shift = 0;
  for (let i = 0, ii = encoded.length; i < ii; ++i) {
    const b = encoded.charCodeAt(i) - 63;
    current |= (b & 0x1f) << shift;
    if (b < 0x20) {
      numbers.push(current);
      current = 0;
      shift = 0;
    } else {
      shift += 5;
    }
  }
  return numbers;
}


/**
 * Encode one single unsigned integer and return an encoded string
 *
 * @param {number} num Unsigned integer that should be encoded.
 * @return {string} The encoded string.
 */
function encodeUnsignedInteger(num) {
  let value, encoded = '';
  while (num >= 0x20) {
    value = (0x20 | (num & 0x1f)) + 63;
    encoded += String.fromCharCode(value);
    num >>= 5;
  }
  value = num + 63;
  encoded += String.fromCharCode(value);
  return encoded;
}


/**
 * Read the feature from the Polyline source. The coordinates are assumed to be
 * in two dimensions and in latitude, longitude order.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature} Feature.
 * @api
 */
Polyline.prototype.readFeature;


/**
 * @inheritDoc
 */
Polyline.prototype.readFeatureFromText = function(text, opt_options) {
  const geometry = this.readGeometryFromText(text, opt_options);
  return new Feature["a" /* default */](geometry);
};


/**
 * Read the feature from the source. As Polyline sources contain a single
 * feature, this will return the feature in an array.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
Polyline.prototype.readFeatures;


/**
 * @inheritDoc
 */
Polyline.prototype.readFeaturesFromText = function(text, opt_options) {
  const feature = this.readFeatureFromText(text, opt_options);
  return [feature];
};


/**
 * Read the geometry from the source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/geom/Geometry} Geometry.
 * @api
 */
Polyline.prototype.readGeometry;


/**
 * @inheritDoc
 */
Polyline.prototype.readGeometryFromText = function(text, opt_options) {
  const stride = Object(SimpleGeometry["b" /* getStrideForLayout */])(this.geometryLayout_);
  const flatCoordinates = decodeDeltas(text, stride, this.factor_);
  flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
  const coordinates = Object(inflate["a" /* inflateCoordinates */])(flatCoordinates, 0, flatCoordinates.length, stride);

  return (
    /** @type {module:ol/geom/Geometry} */ (Object(format_Feature["b" /* transformWithOptions */])(
      new LineString["a" /* default */](coordinates, this.geometryLayout_),
      false,
      this.adaptOptions(opt_options)
    ))
  );
};


/**
 * Read the projection from a Polyline source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @return {module:ol/proj/Projection} Projection.
 * @api
 */
Polyline.prototype.readProjection;


/**
 * @inheritDoc
 */
Polyline.prototype.writeFeatureText = function(feature, opt_options) {
  const geometry = feature.getGeometry();
  if (geometry) {
    return this.writeGeometryText(geometry, opt_options);
  } else {
    Object(asserts["a" /* assert */])(false, 40); // Expected `feature` to have a geometry
    return '';
  }
};


/**
 * @inheritDoc
 */
Polyline.prototype.writeFeaturesText = function(features, opt_options) {
  return this.writeFeatureText(features[0], opt_options);
};


/**
 * Write a single geometry in Polyline format.
 *
 * @function
 * @param {module:ol/geom/Geometry} geometry Geometry.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} Geometry.
 * @api
 */
Polyline.prototype.writeGeometry;


/**
 * @inheritDoc
 */
Polyline.prototype.writeGeometryText = function(geometry, opt_options) {
  geometry = /** @type {module:ol/geom/LineString} */
    (Object(format_Feature["b" /* transformWithOptions */])(geometry, true, this.adaptOptions(opt_options)));
  const flatCoordinates = geometry.getFlatCoordinates();
  const stride = geometry.getStride();
  flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
  return encodeDeltas(flatCoordinates, stride, this.factor_);
};
/* harmony default export */ var format_Polyline = __webpack_exports__["a"] = (Polyline);


/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _format_XLink_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(149);
/* harmony import */ var _format_XML_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(148);
/* harmony import */ var _format_xsd_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/**
 * @module ol/format/WMSCapabilities
 */







/**
 * @classdesc
 * Format for reading WMS capabilities data
 *
 * @constructor
 * @extends {module:ol/format/XML}
 * @api
 */
const WMSCapabilities = function() {

  _format_XML_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this);

  /**
   * @type {string|undefined}
   */
  this.version = undefined;
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(WMSCapabilities, _format_XML_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * @const
 * @type {Array.<null|string>}
 */
const NAMESPACE_URIS = [
  null,
  'http://www.opengis.net/wms'
];


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Service': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readService),
    'Capability': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readCapability)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const CAPABILITY_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Request': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readRequest),
    'Exception': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readException),
    'Layer': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readCapabilityLayer)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const SERVICE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Title': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Abstract': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'KeywordList': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readKeywordList),
    'OnlineResource': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_XLink_js__WEBPACK_IMPORTED_MODULE_1__[/* readHref */ "a"]),
    'ContactInformation': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readContactInformation),
    'Fees': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'AccessConstraints': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'LayerLimit': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readNonNegativeInteger */ "f"]),
    'MaxWidth': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readNonNegativeInteger */ "f"]),
    'MaxHeight': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readNonNegativeInteger */ "f"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const CONTACT_INFORMATION_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ContactPersonPrimary': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readContactPersonPrimary),
    'ContactPosition': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'ContactAddress': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readContactAddress),
    'ContactVoiceTelephone': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'ContactFacsimileTelephone': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'ContactElectronicMailAddress': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const CONTACT_PERSON_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ContactPerson': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'ContactOrganization': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const CONTACT_ADDRESS_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'AddressType': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Address': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'City': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'StateOrProvince': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'PostCode': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Country': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const EXCEPTION_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Format': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeArrayPusher */ "j"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const LAYER_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Title': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Abstract': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'KeywordList': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readKeywordList),
    'CRS': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'EX_GeographicBoundingBox': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readEXGeographicBoundingBox),
    'BoundingBox': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readBoundingBox),
    'Dimension': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readDimension),
    'Attribution': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readAttribution),
    'AuthorityURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readAuthorityURL),
    'Identifier': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'MetadataURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readMetadataURL),
    'DataURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readFormatOnlineresource),
    'FeatureListURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readFormatOnlineresource),
    'Style': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readStyle),
    'MinScaleDenominator': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimal */ "d"]),
    'MaxScaleDenominator': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimal */ "d"]),
    'Layer': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readLayer)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const ATTRIBUTION_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Title': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'OnlineResource': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_XLink_js__WEBPACK_IMPORTED_MODULE_1__[/* readHref */ "a"]),
    'LogoURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readSizedFormatOnlineresource)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS =
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(NAMESPACE_URIS, {
      'westBoundLongitude': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimal */ "d"]),
      'eastBoundLongitude': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimal */ "d"]),
      'southBoundLatitude': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimal */ "d"]),
      'northBoundLatitude': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimal */ "d"])
    });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const REQUEST_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'GetCapabilities': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readOperationType),
    'GetMap': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readOperationType),
    'GetFeatureInfo': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readOperationType)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const OPERATIONTYPE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Format': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'DCPType': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readDCPType)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const DCPTYPE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'HTTP': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readHTTP)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const HTTP_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Get': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readFormatOnlineresource),
    'Post': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readFormatOnlineresource)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const STYLE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Title': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Abstract': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'LegendURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readSizedFormatOnlineresource),
    'StyleSheetURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readFormatOnlineresource),
    'StyleURL': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readFormatOnlineresource)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const FORMAT_ONLINERESOURCE_PARSERS =
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(NAMESPACE_URIS, {
      'Format': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
      'OnlineResource': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_XLink_js__WEBPACK_IMPORTED_MODULE_1__[/* readHref */ "a"])
    });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const KEYWORDLIST_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Keyword': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeArrayPusher */ "j"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])
  });


/**
 * Read a WMS capabilities document.
 *
 * @function
 * @param {Document|Node|string} source The XML source.
 * @return {Object} An object representing the WMS capabilities.
 * @api
 */
WMSCapabilities.prototype.read;


/**
 * @inheritDoc
 */
WMSCapabilities.prototype.readFromDocument = function(doc) {
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      return this.readFromNode(n);
    }
  }
  return null;
};


/**
 * @inheritDoc
 */
WMSCapabilities.prototype.readFromNode = function(node) {
  this.version = node.getAttribute('version').trim();
  const wmsCapabilityObject = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({
    'version': this.version
  }, PARSERS, node, []);
  return wmsCapabilityObject ? wmsCapabilityObject : null;
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Attribution object.
 */
function readAttribution(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, ATTRIBUTION_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object} Bounding box object.
 */
function readBoundingBox(node, objectStack) {
  const extent = [
    Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimalString */ "e"])(node.getAttribute('minx')),
    Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimalString */ "e"])(node.getAttribute('miny')),
    Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimalString */ "e"])(node.getAttribute('maxx')),
    Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimalString */ "e"])(node.getAttribute('maxy'))
  ];

  const resolutions = [
    Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimalString */ "e"])(node.getAttribute('resx')),
    Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimalString */ "e"])(node.getAttribute('resy'))
  ];

  return {
    'crs': node.getAttribute('CRS'),
    'extent': extent,
    'res': resolutions
  };
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/extent~Extent|undefined} Bounding box object.
 */
function readEXGeographicBoundingBox(node, objectStack) {
  const geographicBoundingBox = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])(
    {},
    EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS,
    node, objectStack);
  if (!geographicBoundingBox) {
    return undefined;
  }
  const westBoundLongitude = /** @type {number|undefined} */
        (geographicBoundingBox['westBoundLongitude']);
  const southBoundLatitude = /** @type {number|undefined} */
        (geographicBoundingBox['southBoundLatitude']);
  const eastBoundLongitude = /** @type {number|undefined} */
        (geographicBoundingBox['eastBoundLongitude']);
  const northBoundLatitude = /** @type {number|undefined} */
        (geographicBoundingBox['northBoundLatitude']);
  if (westBoundLongitude === undefined || southBoundLatitude === undefined ||
        eastBoundLongitude === undefined || northBoundLatitude === undefined) {
    return undefined;
  }
  return [
    westBoundLongitude, southBoundLatitude,
    eastBoundLongitude, northBoundLatitude
  ];
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Capability object.
 */
function readCapability(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, CAPABILITY_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Service object.
 */
function readService(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, SERVICE_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Contact information object.
 */
function readContactInformation(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, CONTACT_INFORMATION_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Contact person object.
 */
function readContactPersonPrimary(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, CONTACT_PERSON_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Contact address object.
 */
function readContactAddress(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, CONTACT_ADDRESS_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Array.<string>|undefined} Format array.
 */
function readException(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])([], EXCEPTION_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Layer object.
 */
function readCapabilityLayer(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, LAYER_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Layer object.
 */
function readLayer(node, objectStack) {
  const parentLayerObject = /**  @type {!Object.<string,*>} */ (objectStack[objectStack.length - 1]);

  const layerObject = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, LAYER_PARSERS, node, objectStack);

  if (!layerObject) {
    return undefined;
  }
  let queryable = Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readBooleanString */ "b"])(node.getAttribute('queryable'));
  if (queryable === undefined) {
    queryable = parentLayerObject['queryable'];
  }
  layerObject['queryable'] = queryable !== undefined ? queryable : false;

  let cascaded = Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readNonNegativeIntegerString */ "g"])(
    node.getAttribute('cascaded'));
  if (cascaded === undefined) {
    cascaded = parentLayerObject['cascaded'];
  }
  layerObject['cascaded'] = cascaded;

  let opaque = Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readBooleanString */ "b"])(node.getAttribute('opaque'));
  if (opaque === undefined) {
    opaque = parentLayerObject['opaque'];
  }
  layerObject['opaque'] = opaque !== undefined ? opaque : false;

  let noSubsets = Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readBooleanString */ "b"])(node.getAttribute('noSubsets'));
  if (noSubsets === undefined) {
    noSubsets = parentLayerObject['noSubsets'];
  }
  layerObject['noSubsets'] = noSubsets !== undefined ? noSubsets : false;

  let fixedWidth = Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimalString */ "e"])(node.getAttribute('fixedWidth'));
  if (!fixedWidth) {
    fixedWidth = parentLayerObject['fixedWidth'];
  }
  layerObject['fixedWidth'] = fixedWidth;

  let fixedHeight = Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readDecimalString */ "e"])(node.getAttribute('fixedHeight'));
  if (!fixedHeight) {
    fixedHeight = parentLayerObject['fixedHeight'];
  }
  layerObject['fixedHeight'] = fixedHeight;

  // See 7.2.4.8
  const addKeys = ['Style', 'CRS', 'AuthorityURL'];
  addKeys.forEach(function(key) {
    if (key in parentLayerObject) {
      const childValue = layerObject[key] || [];
      layerObject[key] = childValue.concat(parentLayerObject[key]);
    }
  });

  const replaceKeys = ['EX_GeographicBoundingBox', 'BoundingBox', 'Dimension',
    'Attribution', 'MinScaleDenominator', 'MaxScaleDenominator'];
  replaceKeys.forEach(function(key) {
    if (!(key in layerObject)) {
      const parentValue = parentLayerObject[key];
      layerObject[key] = parentValue;
    }
  });

  return layerObject;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object} Dimension object.
 */
function readDimension(node, objectStack) {
  const dimensionObject = {
    'name': node.getAttribute('name'),
    'units': node.getAttribute('units'),
    'unitSymbol': node.getAttribute('unitSymbol'),
    'default': node.getAttribute('default'),
    'multipleValues': Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readBooleanString */ "b"])(node.getAttribute('multipleValues')),
    'nearestValue': Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readBooleanString */ "b"])(node.getAttribute('nearestValue')),
    'current': Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readBooleanString */ "b"])(node.getAttribute('current')),
    'values': Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])(node)
  };
  return dimensionObject;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Online resource object.
 */
function readFormatOnlineresource(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, FORMAT_ONLINERESOURCE_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Request object.
 */
function readRequest(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, REQUEST_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} DCP type object.
 */
function readDCPType(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, DCPTYPE_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} HTTP object.
 */
function readHTTP(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, HTTP_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Operation type object.
 */
function readOperationType(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, OPERATIONTYPE_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Online resource object.
 */
function readSizedFormatOnlineresource(node, objectStack) {
  const formatOnlineresource = readFormatOnlineresource(node, objectStack);
  if (formatOnlineresource) {
    const size = [
      Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readNonNegativeIntegerString */ "g"])(node.getAttribute('width')),
      Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readNonNegativeIntegerString */ "g"])(node.getAttribute('height'))
    ];
    formatOnlineresource['size'] = size;
    return formatOnlineresource;
  }
  return undefined;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Authority URL object.
 */
function readAuthorityURL(node, objectStack) {
  const authorityObject = readFormatOnlineresource(node, objectStack);
  if (authorityObject) {
    authorityObject['name'] = node.getAttribute('name');
    return authorityObject;
  }
  return undefined;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Metadata URL object.
 */
function readMetadataURL(node, objectStack) {
  const metadataObject = readFormatOnlineresource(node, objectStack);
  if (metadataObject) {
    metadataObject['type'] = node.getAttribute('type');
    return metadataObject;
  }
  return undefined;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} Style object.
 */
function readStyle(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, STYLE_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Array.<string>|undefined} Keyword list.
 */
function readKeywordList(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])([], KEYWORDLIST_PARSERS, node, objectStack);
}


/* harmony default export */ __webpack_exports__["a"] = (WMSCapabilities);


/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _format_XLink_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(149);
/* harmony import */ var _format_XML_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(148);
/* harmony import */ var _format_xsd_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/**
 * @module ol/format/OWS
 */






/**
 * @constructor
 * @extends {module:ol/format/XML}
 */
const OWS = function() {
  _format_XML_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this);
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(OWS, _format_XML_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * @const
 * @type {Array.<null|string>}
 */
const NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ServiceIdentification': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readServiceIdentification),
    'ServiceProvider': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readServiceProvider),
    'OperationsMetadata': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readOperationsMetadata)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const ADDRESS_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'DeliveryPoint': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'City': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'AdministrativeArea': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'PostalCode': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Country': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'ElectronicMailAddress': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const ALLOWED_VALUES_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Value': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readValue)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const CONSTRAINT_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'AllowedValues': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readAllowedValues)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const CONTACT_INFO_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Phone': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readPhone),
    'Address': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readAddress)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const DCP_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'HTTP': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readHttp)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const HTTP_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Get': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readGet),
    'Post': undefined // TODO
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const OPERATION_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'DCP': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readDcp)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const OPERATIONS_METADATA_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Operation': readOperation
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const PHONE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Voice': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
    'Facsimile': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const REQUEST_METHOD_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'Constraint': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertyPusher */ "m"])(readConstraint)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const SERVICE_CONTACT_PARSERS =
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
      NAMESPACE_URIS, {
        'IndividualName': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
        'PositionName': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
        'ContactInfo': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readContactInfo)
      });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const SERVICE_IDENTIFICATION_PARSERS =
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
      NAMESPACE_URIS, {
        'Abstract': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
        'AccessConstraints': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
        'Fees': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
        'Title': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
        'ServiceTypeVersion': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
        'ServiceType': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])
      });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const SERVICE_PROVIDER_PARSERS =
    Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeStructureNS */ "r"])(
      NAMESPACE_URIS, {
        'ProviderName': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"]),
        'ProviderSite': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(_format_XLink_js__WEBPACK_IMPORTED_MODULE_1__[/* readHref */ "a"]),
        'ServiceContact': Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* makeObjectPropertySetter */ "n"])(readServiceContact)
      });


/**
 * @inheritDoc
 */
OWS.prototype.readFromDocument = function(doc) {
  for (let n = doc.firstChild; n; n = n.nextSibling) {
    if (n.nodeType == Node.ELEMENT_NODE) {
      return this.readFromNode(n);
    }
  }
  return null;
};


/**
 * @inheritDoc
 */
OWS.prototype.readFromNode = function(node) {
  const owsObject = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({},
    PARSERS, node, []);
  return owsObject ? owsObject : null;
};


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The address.
 */
function readAddress(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({},
    ADDRESS_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The values.
 */
function readAllowedValues(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({},
    ALLOWED_VALUES_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The constraint.
 */
function readConstraint(node, objectStack) {
  const name = node.getAttribute('name');
  if (!name) {
    return undefined;
  }
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({'name': name},
    CONSTRAINT_PARSERS, node,
    objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The contact info.
 */
function readContactInfo(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({},
    CONTACT_INFO_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The DCP.
 */
function readDcp(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({},
    DCP_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The GET object.
 */
function readGet(node, objectStack) {
  const href = Object(_format_XLink_js__WEBPACK_IMPORTED_MODULE_1__[/* readHref */ "a"])(node);
  if (!href) {
    return undefined;
  }
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({'href': href},
    REQUEST_METHOD_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The HTTP object.
 */
function readHttp(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({}, HTTP_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The operation.
 */
function readOperation(node, objectStack) {
  const name = node.getAttribute('name');
  const value = Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({},
    OPERATION_PARSERS, node, objectStack);
  if (!value) {
    return undefined;
  }
  const object = /** @type {Object} */
      (objectStack[objectStack.length - 1]);
  object[name] = value;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The operations metadata.
 */
function readOperationsMetadata(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({},
    OPERATIONS_METADATA_PARSERS, node,
    objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The phone.
 */
function readPhone(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])({},
    PHONE_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The service identification.
 */
function readServiceIdentification(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])(
    {}, SERVICE_IDENTIFICATION_PARSERS, node,
    objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The service contact.
 */
function readServiceContact(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])(
    {}, SERVICE_CONTACT_PARSERS, node,
    objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {Object|undefined} The service provider.
 */
function readServiceProvider(node, objectStack) {
  return Object(_xml_js__WEBPACK_IMPORTED_MODULE_4__[/* pushParseAndPop */ "u"])(
    {}, SERVICE_PROVIDER_PARSERS, node,
    objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {string|undefined} The value.
 */
function readValue(node, objectStack) {
  return Object(_format_xsd_js__WEBPACK_IMPORTED_MODULE_3__[/* readString */ "h"])(node);
}


/* harmony default export */ __webpack_exports__["a"] = (OWS);


/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42);
/* harmony import */ var _format_TextFeature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(150);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(41);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7);
/**
 * @module ol/format/IGC
 */








/**
 * IGC altitude/z. One of 'barometric', 'gps', 'none'.
 * @enum {string}
 */
const IGCZ = {
  BAROMETRIC: 'barometric',
  GPS: 'gps',
  NONE: 'none'
};


/**
 * @typedef {Object} Options
 * @property {IGCZ|string} [altitudeMode='none'] Altitude mode. Possible
 * values are `'barometric'`, `'gps'`, and `'none'`.
 */


/**
 * @classdesc
 * Feature format for `*.igc` flight recording files.
 *
 * @constructor
 * @extends {module:ol/format/TextFeature}
 * @param {module:ol/format/IGC~Options=} opt_options Options.
 * @api
 */
const IGC = function(opt_options) {

  const options = opt_options ? opt_options : {};

  _format_TextFeature_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this);

  /**
   * @inheritDoc
   */
  this.dataProjection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_6__[/* get */ "h"])('EPSG:4326');

  /**
   * @private
   * @type {IGCZ}
   */
  this.altitudeMode_ = options.altitudeMode ? options.altitudeMode : IGCZ.NONE;
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(IGC, _format_TextFeature_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @const
 * @type {RegExp}
 */
const B_RECORD_RE =
    /^B(\d{2})(\d{2})(\d{2})(\d{2})(\d{5})([NS])(\d{3})(\d{5})([EW])([AV])(\d{5})(\d{5})/;


/**
 * @const
 * @type {RegExp}
 */
const H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;


/**
 * @const
 * @type {RegExp}
 */
const HFDTE_RECORD_RE = /^HFDTE(\d{2})(\d{2})(\d{2})/;


/**
 * A regular expression matching the newline characters `\r\n`, `\r` and `\n`.
 *
 * @const
 * @type {RegExp}
 */
const NEWLINE_RE = /\r\n|\r|\n/;


/**
 * Read the feature from the IGC source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature} Feature.
 * @api
 */
IGC.prototype.readFeature;


/**
 * @inheritDoc
 */
IGC.prototype.readFeatureFromText = function(text, opt_options) {
  const altitudeMode = this.altitudeMode_;
  const lines = text.split(NEWLINE_RE);
  /** @type {Object.<string, string>} */
  const properties = {};
  const flatCoordinates = [];
  let year = 2000;
  let month = 0;
  let day = 1;
  let lastDateTime = -1;
  let i, ii;
  for (i = 0, ii = lines.length; i < ii; ++i) {
    const line = lines[i];
    let m;
    if (line.charAt(0) == 'B') {
      m = B_RECORD_RE.exec(line);
      if (m) {
        const hour = parseInt(m[1], 10);
        const minute = parseInt(m[2], 10);
        const second = parseInt(m[3], 10);
        let y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;
        if (m[6] == 'S') {
          y = -y;
        }
        let x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;
        if (m[9] == 'W') {
          x = -x;
        }
        flatCoordinates.push(x, y);
        if (altitudeMode != IGCZ.NONE) {
          let z;
          if (altitudeMode == IGCZ.GPS) {
            z = parseInt(m[11], 10);
          } else if (altitudeMode == IGCZ.BAROMETRIC) {
            z = parseInt(m[12], 10);
          } else {
            z = 0;
          }
          flatCoordinates.push(z);
        }
        let dateTime = Date.UTC(year, month, day, hour, minute, second);
        // Detect UTC midnight wrap around.
        if (dateTime < lastDateTime) {
          dateTime = Date.UTC(year, month, day + 1, hour, minute, second);
        }
        flatCoordinates.push(dateTime / 1000);
        lastDateTime = dateTime;
      }
    } else if (line.charAt(0) == 'H') {
      m = HFDTE_RECORD_RE.exec(line);
      if (m) {
        day = parseInt(m[1], 10);
        month = parseInt(m[2], 10) - 1;
        year = 2000 + parseInt(m[3], 10);
      } else {
        m = H_RECORD_RE.exec(line);
        if (m) {
          properties[m[1]] = m[2].trim();
        }
      }
    }
  }
  if (flatCoordinates.length === 0) {
    return null;
  }
  const lineString = new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](null);
  const layout = altitudeMode == IGCZ.NONE ? _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XYM : _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].XYZM;
  lineString.setFlatCoordinates(layout, flatCoordinates);
  const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_2__[/* transformWithOptions */ "b"])(lineString, false, opt_options));
  feature.setProperties(properties);
  return feature;
};


/**
 * Read the feature from the source. As IGC sources contain a single
 * feature, this will return the feature in an array.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
IGC.prototype.readFeatures;


/**
 * @inheritDoc
 */
IGC.prototype.readFeaturesFromText = function(text, opt_options) {
  const feature = this.readFeatureFromText(text, opt_options);
  if (feature) {
    return [feature];
  } else {
    return [];
  }
};


/**
 * Read the projection from the IGC source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @return {module:ol/proj/Projection} Projection.
 * @api
 */
IGC.prototype.readProjection;


/**
 * Not implemented.
 * @inheritDoc
 */
IGC.prototype.writeFeatureText = function(feature, opt_options) {};


/**
 * Not implemented.
 * @inheritDoc
 */
IGC.prototype.writeFeaturesText = function(features, opt_options) {};


/**
 * Not implemented.
 * @inheritDoc
 */
IGC.prototype.writeGeometryText = function(geometry, opt_options) {};


/**
 * Not implemented.
 * @inheritDoc
 */
IGC.prototype.readGeometryFromText = function(text, opt_options) {};
/* harmony default export */ __webpack_exports__["a"] = (IGC);


/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16);
/* harmony import */ var _format_Feature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42);
/* harmony import */ var _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(94);
/* harmony import */ var _format_xsd_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(22);
/* harmony import */ var _geom_LineString_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(41);
/* harmony import */ var _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(71);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(30);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7);
/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(0);
/**
 * @module ol/format/GPX
 */














/**
 * @typedef {Object} Options
 * @property {function(module:ol/Feature, Node)} [readExtensions] Callback function
 * to process `extensions` nodes. To prevent memory leaks, this callback function must
 * not store any references to the node. Note that the `extensions`
 * node is not allowed in GPX 1.0. Moreover, only `extensions`
 * nodes from `wpt`, `rte` and `trk` can be processed, as those are
 * directly mapped to a feature.
 */

/**
 * @typedef {Object} LayoutOptions
 * @property {boolean} [hasZ]
 * @property {boolean} [hasM]
 */

/**
 * @classdesc
 * Feature format for reading and writing data in the GPX format.
 *
 * @constructor
 * @extends {module:ol/format/XMLFeature}
 * @param {module:ol/format/GPX~Options=} opt_options Options.
 * @api
 */
const GPX = function(opt_options) {

  const options = opt_options ? opt_options : {};

  _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this);

  /**
   * @inheritDoc
   */
  this.dataProjection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_10__[/* get */ "h"])('EPSG:4326');

  /**
   * @type {function(module:ol/Feature, Node)|undefined}
   * @private
   */
  this.readExtensions_ = options.readExtensions;
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(GPX, _format_XMLFeature_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * @const
 * @type {Array.<null|string>}
 */
const NAMESPACE_URIS = [
  null,
  'http://www.topografix.com/GPX/1/0',
  'http://www.topografix.com/GPX/1/1'
];


/**
 * @const
 * @type {string}
 */
const SCHEMA_LOCATION = 'http://www.topografix.com/GPX/1/1 ' +
    'http://www.topografix.com/GPX/1/1/gpx.xsd';


/**
 * @const
 * @type {Object.<string, function(Node, Array.<*>): (module:ol/Feature|undefined)>}
 */
const FEATURE_READER = {
  'rte': readRte,
  'trk': readTrk,
  'wpt': readWpt
};


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const GPX_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'rte': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeArrayPusher */ "j"])(readRte),
    'trk': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeArrayPusher */ "j"])(readTrk),
    'wpt': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeArrayPusher */ "j"])(readWpt)
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const LINK_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'text': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"], 'linkText'),
    'type': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"], 'linkType')
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const RTE_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'cmt': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'desc': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'src': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'link': parseLink,
    'number': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'extensions': parseExtensions,
    'type': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'rtept': parseRtePt
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const RTEPT_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ele': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'time': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDateTime */ "c"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TRK_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'cmt': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'desc': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'src': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'link': parseLink,
    'number': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'type': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'extensions': parseExtensions,
    'trkseg': parseTrkSeg
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TRKSEG_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'trkpt': parseTrkPt
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const TRKPT_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ele': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'time': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDateTime */ "c"])
  });


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Parser>>}
 */
const WPT_PARSERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ele': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'time': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDateTime */ "c"]),
    'magvar': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'geoidheight': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'cmt': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'desc': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'src': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'link': parseLink,
    'sym': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'type': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'fix': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readString */ "h"]),
    'sat': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'hdop': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'vdop': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'pdop': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'ageofdgpsdata': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readDecimal */ "d"]),
    'dgpsid': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeObjectPropertySetter */ "n"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* readNonNegativeInteger */ "f"]),
    'extensions': parseExtensions
  });


/**
 * @const
 * @type {Array.<string>}
 */
const LINK_SEQUENCE = ['text', 'type'];


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const LINK_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'text': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'type': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"])
  });


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const RTE_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'name', 'cmt', 'desc', 'src', 'link', 'number', 'type', 'rtept'
  ]);


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const RTE_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'cmt': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'desc': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'src': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'link': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(writeLink),
    'number': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeNonNegativeIntegerTextNode */ "m"]),
    'type': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'rtept': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeArraySerializer */ "k"])(Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(writeWptType))
  });


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const RTEPT_TYPE_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'ele', 'time'
  ]);


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const TRK_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'name', 'cmt', 'desc', 'src', 'link', 'number', 'type', 'trkseg'
  ]);


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const TRK_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'cmt': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'desc': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'src': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'link': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(writeLink),
    'number': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeNonNegativeIntegerTextNode */ "m"]),
    'type': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'trkseg': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeArraySerializer */ "k"])(Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(writeTrkSeg))
  });


/**
 * @const
 * @type {function(*, Array.<*>, string=): (Node|undefined)}
 */
const TRKSEG_NODE_FACTORY = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeSimpleNodeFactory */ "q"])('trkpt');


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const TRKSEG_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'trkpt': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(writeWptType)
  });


/**
 * @const
 * @type {Object.<string, Array.<string>>}
 */
const WPT_TYPE_SEQUENCE = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, [
    'ele', 'time', 'magvar', 'geoidheight', 'name', 'cmt', 'desc', 'src',
    'link', 'sym', 'type', 'fix', 'sat', 'hdop', 'vdop', 'pdop',
    'ageofdgpsdata', 'dgpsid'
  ]);


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const WPT_TYPE_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'ele': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeDecimalTextNode */ "l"]),
    'time': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeDateTimeTextNode */ "k"]),
    'magvar': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeDecimalTextNode */ "l"]),
    'geoidheight': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeDecimalTextNode */ "l"]),
    'name': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'cmt': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'desc': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'src': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'link': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(writeLink),
    'sym': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'type': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'fix': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeStringTextNode */ "n"]),
    'sat': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeNonNegativeIntegerTextNode */ "m"]),
    'hdop': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeDecimalTextNode */ "l"]),
    'vdop': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeDecimalTextNode */ "l"]),
    'pdop': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeDecimalTextNode */ "l"]),
    'ageofdgpsdata': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeDecimalTextNode */ "l"]),
    'dgpsid': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(_format_xsd_js__WEBPACK_IMPORTED_MODULE_5__[/* writeNonNegativeIntegerTextNode */ "m"])
  });


/**
 * @const
 * @type {Object.<string, string>}
 */
const GEOMETRY_TYPE_TO_NODENAME = {
  'Point': 'wpt',
  'LineString': 'rte',
  'MultiLineString': 'trk'
};


/**
 * @param {*} value Value.
 * @param {Array.<*>} objectStack Object stack.
 * @param {string=} opt_nodeName Node name.
 * @return {Node|undefined} Node.
 */
function GPX_NODE_FACTORY(value, objectStack, opt_nodeName) {
  const geometry = /** @type {module:ol/Feature} */ (value).getGeometry();
  if (geometry) {
    const nodeName = GEOMETRY_TYPE_TO_NODENAME[geometry.getType()];
    if (nodeName) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* createElementNS */ "d"])(parentNode.namespaceURI, nodeName);
    }
  }
}


/**
 * @const
 * @type {Object.<string, Object.<string, module:ol/xml~Serializer>>}
 */
const GPX_SERIALIZERS = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeStructureNS */ "r"])(
  NAMESPACE_URIS, {
    'rte': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(writeRte),
    'trk': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(writeTrk),
    'wpt': Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeChildAppender */ "l"])(writeWpt)
  });


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {module:ol/format/GPX~LayoutOptions} layoutOptions Layout options.
 * @param {Node} node Node.
 * @param {!Object} values Values.
 * @return {Array.<number>} Flat coordinates.
 */
function appendCoordinate(flatCoordinates, layoutOptions, node, values) {
  flatCoordinates.push(
    parseFloat(node.getAttribute('lon')),
    parseFloat(node.getAttribute('lat')));
  if ('ele' in values) {
    flatCoordinates.push(/** @type {number} */ (values['ele']));
    delete values['ele'];
    layoutOptions.hasZ = true;
  } else {
    flatCoordinates.push(0);
  }
  if ('time' in values) {
    flatCoordinates.push(/** @type {number} */ (values['time']));
    delete values['time'];
    layoutOptions.hasM = true;
  } else {
    flatCoordinates.push(0);
  }
  return flatCoordinates;
}


/**
 * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates
 * and ends arrays by shrinking them accordingly (removing unused zero entries).
 *
 * @param {module:ol/format/GPX~LayoutOptions} layoutOptions Layout options.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {Array.<number>=} ends Ends.
 * @return {module:ol/geom/GeometryLayout} Layout.
 */
function applyLayoutOptions(layoutOptions, flatCoordinates, ends) {
  let layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XY;
  let stride = 2;
  if (layoutOptions.hasZ && layoutOptions.hasM) {
    layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM;
    stride = 4;
  } else if (layoutOptions.hasZ) {
    layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZ;
    stride = 3;
  } else if (layoutOptions.hasM) {
    layout = _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYM;
    stride = 3;
  }
  if (stride !== 4) {
    for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {
      flatCoordinates[i * stride] = flatCoordinates[i * 4];
      flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];
      if (layoutOptions.hasZ) {
        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];
      }
      if (layoutOptions.hasM) {
        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];
      }
    }
    flatCoordinates.length = flatCoordinates.length / 4 * stride;
    if (ends) {
      for (let i = 0, ii = ends.length; i < ii; i++) {
        ends[i] = ends[i] / 4 * stride;
      }
    }
  }
  return layout;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function parseLink(node, objectStack) {
  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  const href = node.getAttribute('href');
  if (href !== null) {
    values['link'] = href;
  }
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* parseNode */ "t"])(LINK_PARSERS, node, objectStack);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function parseExtensions(node, objectStack) {
  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  values['extensionsNode_'] = node;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function parseRtePt(node, objectStack) {
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushParseAndPop */ "u"])({}, RTEPT_PARSERS, node, objectStack);
  if (values) {
    const rteValues = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
    const flatCoordinates = /** @type {Array.<number>} */ (rteValues['flatCoordinates']);
    const layoutOptions = /** @type {module:ol/format/GPX~LayoutOptions} */ (rteValues['layoutOptions']);
    appendCoordinate(flatCoordinates, layoutOptions, node, values);
  }
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function parseTrkPt(node, objectStack) {
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushParseAndPop */ "u"])({}, TRKPT_PARSERS, node, objectStack);
  if (values) {
    const trkValues = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
    const flatCoordinates = /** @type {Array.<number>} */ (trkValues['flatCoordinates']);
    const layoutOptions = /** @type {module:ol/format/GPX~LayoutOptions} */ (trkValues['layoutOptions']);
    appendCoordinate(flatCoordinates, layoutOptions, node, values);
  }
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 */
function parseTrkSeg(node, objectStack) {
  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* parseNode */ "t"])(TRKSEG_PARSERS, node, objectStack);
  const flatCoordinates = /** @type {Array.<number>} */
      (values['flatCoordinates']);
  const ends = /** @type {Array.<number>} */ (values['ends']);
  ends.push(flatCoordinates.length);
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/Feature|undefined} Track.
 */
function readRte(node, objectStack) {
  const options = /** @type {module:ol/format/Feature~ReadOptions} */ (objectStack[0]);
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushParseAndPop */ "u"])({
    'flatCoordinates': [],
    'layoutOptions': {}
  }, RTE_PARSERS, node, objectStack);
  if (!values) {
    return undefined;
  }
  const flatCoordinates = /** @type {Array.<number>} */
      (values['flatCoordinates']);
  delete values['flatCoordinates'];
  const layoutOptions = /** @type {module:ol/format/GPX~LayoutOptions} */ (values['layoutOptions']);
  delete values['layoutOptions'];
  const layout = applyLayoutOptions(layoutOptions, flatCoordinates);
  const geometry = new _geom_LineString_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"](null);
  geometry.setFlatCoordinates(layout, flatCoordinates);
  Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_3__[/* transformWithOptions */ "b"])(geometry, false, options);
  const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](geometry);
  feature.setProperties(values);
  return feature;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/Feature|undefined} Track.
 */
function readTrk(node, objectStack) {
  const options = /** @type {module:ol/format/Feature~ReadOptions} */ (objectStack[0]);
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushParseAndPop */ "u"])({
    'flatCoordinates': [],
    'ends': [],
    'layoutOptions': {}
  }, TRK_PARSERS, node, objectStack);
  if (!values) {
    return undefined;
  }
  const flatCoordinates = /** @type {Array.<number>} */
      (values['flatCoordinates']);
  delete values['flatCoordinates'];
  const ends = /** @type {Array.<number>} */ (values['ends']);
  delete values['ends'];
  const layoutOptions = /** @type {module:ol/format/GPX~LayoutOptions} */ (values['layoutOptions']);
  delete values['layoutOptions'];
  const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);
  const geometry = new _geom_MultiLineString_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](null);
  geometry.setFlatCoordinates(layout, flatCoordinates, ends);
  Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_3__[/* transformWithOptions */ "b"])(geometry, false, options);
  const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](geometry);
  feature.setProperties(values);
  return feature;
}


/**
 * @param {Node} node Node.
 * @param {Array.<*>} objectStack Object stack.
 * @return {module:ol/Feature|undefined} Waypoint.
 */
function readWpt(node, objectStack) {
  const options = /** @type {module:ol/format/Feature~ReadOptions} */ (objectStack[0]);
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushParseAndPop */ "u"])({}, WPT_PARSERS, node, objectStack);
  if (!values) {
    return undefined;
  }
  const layoutOptions = /** @type {module:ol/format/GPX~LayoutOptions} */ ({});
  const coordinates = appendCoordinate([], layoutOptions, node, values);
  const layout = applyLayoutOptions(layoutOptions, coordinates);
  const geometry = new _geom_Point_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"](coordinates, layout);
  Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_3__[/* transformWithOptions */ "b"])(geometry, false, options);
  const feature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](geometry);
  feature.setProperties(values);
  return feature;
}


/**
 * @param {Array.<module:ol/Feature>} features List of features.
 * @private
 */
GPX.prototype.handleReadExtensions_ = function(features) {
  if (!features) {
    features = [];
  }
  for (let i = 0, ii = features.length; i < ii; ++i) {
    const feature = features[i];
    if (this.readExtensions_) {
      const extensionsNode = feature.get('extensionsNode_') || null;
      this.readExtensions_(feature, extensionsNode);
    }
    feature.set('extensionsNode_', undefined);
  }
};


/**
 * Read the first feature from a GPX source.
 * Routes (`<rte>`) are converted into LineString geometries, and tracks (`<trk>`)
 * into MultiLineString. Any properties on route and track waypoints are ignored.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {module:ol/Feature} Feature.
 * @api
 */
GPX.prototype.readFeature;


/**
 * @inheritDoc
 */
GPX.prototype.readFeatureFromNode = function(node, opt_options) {
  if (!Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, node.namespaceURI)) {
    return null;
  }
  const featureReader = FEATURE_READER[node.localName];
  if (!featureReader) {
    return null;
  }
  const feature = featureReader(node, [this.getReadOptions(node, opt_options)]);
  if (!feature) {
    return null;
  }
  this.handleReadExtensions_([feature]);
  return feature;
};


/**
 * Read all features from a GPX source.
 * Routes (`<rte>`) are converted into LineString geometries, and tracks (`<trk>`)
 * into MultiLineString. Any properties on route and track waypoints are ignored.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.
 * @return {Array.<module:ol/Feature>} Features.
 * @api
 */
GPX.prototype.readFeatures;


/**
 * @inheritDoc
 */
GPX.prototype.readFeaturesFromNode = function(node, opt_options) {
  if (!Object(_array_js__WEBPACK_IMPORTED_MODULE_2__[/* includes */ "f"])(NAMESPACE_URIS, node.namespaceURI)) {
    return [];
  }
  if (node.localName == 'gpx') {
    /** @type {Array.<module:ol/Feature>} */
    const features = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushParseAndPop */ "u"])([], GPX_PARSERS,
      node, [this.getReadOptions(node, opt_options)]);
    if (features) {
      this.handleReadExtensions_(features);
      return features;
    } else {
      return [];
    }
  }
  return [];
};


/**
 * Read the projection from a GPX source.
 *
 * @function
 * @param {Document|Node|Object|string} source Source.
 * @return {module:ol/proj/Projection} Projection.
 * @api
 */
GPX.prototype.readProjection;


/**
 * @param {Node} node Node.
 * @param {string} value Value for the link's `href` attribute.
 * @param {Array.<*>} objectStack Node stack.
 */
function writeLink(node, value, objectStack) {
  node.setAttribute('href', value);
  const context = objectStack[objectStack.length - 1];
  const properties = context['properties'];
  const link = [
    properties['linkText'],
    properties['linkType']
  ];
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushSerializeAndPop */ "v"])(/** @type {module:ol/xml~NodeStackItem} */ ({node: node}),
    LINK_SERIALIZERS, _xml_js__WEBPACK_IMPORTED_MODULE_11__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"],
    link, objectStack, LINK_SEQUENCE);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeWptType(node, coordinate, objectStack) {
  const context = objectStack[objectStack.length - 1];
  const parentNode = context.node;
  const namespaceURI = parentNode.namespaceURI;
  const properties = context['properties'];
  //FIXME Projection handling
  node.setAttributeNS(null, 'lat', coordinate[1]);
  node.setAttributeNS(null, 'lon', coordinate[0]);
  const geometryLayout = context['geometryLayout'];
  switch (geometryLayout) {
    case _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZM:
      if (coordinate[3] !== 0) {
        properties['time'] = coordinate[3];
      }
      // fall through
    case _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYZ:
      if (coordinate[2] !== 0) {
        properties['ele'] = coordinate[2];
      }
      break;
    case _geom_GeometryLayout_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].XYM:
      if (coordinate[2] !== 0) {
        properties['time'] = coordinate[2];
      }
      break;
    default:
      // pass
  }
  const orderedKeys = (node.nodeName == 'rtept') ?
    RTEPT_TYPE_SEQUENCE[namespaceURI] :
    WPT_TYPE_SEQUENCE[namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushSerializeAndPop */ "v"])(/** @type {module:ol/xml~NodeStackItem} */
    ({node: node, 'properties': properties}),
    WPT_TYPE_SERIALIZERS, _xml_js__WEBPACK_IMPORTED_MODULE_11__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"],
    values, objectStack, orderedKeys);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/Feature} feature Feature.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeRte(node, feature, objectStack) {
  const options = /** @type {module:ol/format/Feature~WriteOptions} */ (objectStack[0]);
  const properties = feature.getProperties();
  const context = {node: node, 'properties': properties};
  let geometry = feature.getGeometry();
  if (geometry) {
    geometry = /** @type {module:ol/geom/LineString} */ (Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_3__[/* transformWithOptions */ "b"])(geometry, true, options));
    context['geometryLayout'] = geometry.getLayout();
    properties['rtept'] = geometry.getCoordinates();
  }
  const parentNode = objectStack[objectStack.length - 1].node;
  const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushSerializeAndPop */ "v"])(context,
    RTE_SERIALIZERS, _xml_js__WEBPACK_IMPORTED_MODULE_11__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"],
    values, objectStack, orderedKeys);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/Feature} feature Feature.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeTrk(node, feature, objectStack) {
  const options = /** @type {module:ol/format/Feature~WriteOptions} */ (objectStack[0]);
  const properties = feature.getProperties();
  /** @type {module:ol/xml~NodeStackItem} */
  const context = {node: node, 'properties': properties};
  let geometry = feature.getGeometry();
  if (geometry) {
    geometry = /** @type {module:ol/geom/MultiLineString} */
      (Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_3__[/* transformWithOptions */ "b"])(geometry, true, options));
    properties['trkseg'] = geometry.getLineStrings();
  }
  const parentNode = objectStack[objectStack.length - 1].node;
  const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];
  const values = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* makeSequence */ "p"])(properties, orderedKeys);
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushSerializeAndPop */ "v"])(context,
    TRK_SERIALIZERS, _xml_js__WEBPACK_IMPORTED_MODULE_11__[/* OBJECT_PROPERTY_NODE_FACTORY */ "b"],
    values, objectStack, orderedKeys);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/geom/LineString} lineString LineString.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeTrkSeg(node, lineString, objectStack) {
  /** @type {module:ol/xml~NodeStackItem} */
  const context = {node: node, 'geometryLayout': lineString.getLayout(),
    'properties': {}};
  Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushSerializeAndPop */ "v"])(context,
    TRKSEG_SERIALIZERS, TRKSEG_NODE_FACTORY,
    lineString.getCoordinates(), objectStack);
}


/**
 * @param {Node} node Node.
 * @param {module:ol/Feature} feature Feature.
 * @param {Array.<*>} objectStack Object stack.
 */
function writeWpt(node, feature, objectStack) {
  const options = /** @type {module:ol/format/Feature~WriteOptions} */ (objectStack[0]);
  const context = objectStack[objectStack.length - 1];
  context['properties'] = feature.getProperties();
  let geometry = feature.getGeometry();
  if (geometry) {
    geometry = /** @type {module:ol/geom/Point} */
      (Object(_format_Feature_js__WEBPACK_IMPORTED_MODULE_3__[/* transformWithOptions */ "b"])(geometry, true, options));
    context['geometryLayout'] = geometry.getLayout();
    writeWptType(node, geometry.getCoordinates(), objectStack);
  }
}


/**
 * Encode an array of features in the GPX format.
 * LineString geometries are output as routes (`<rte>`), and MultiLineString
 * as tracks (`<trk>`).
 *
 * @function
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.
 * @return {string} Result.
 * @api
 */
GPX.prototype.writeFeatures;


/**
 * Encode an array of features in the GPX format as an XML node.
 * LineString geometries are output as routes (`<rte>`), and MultiLineString
 * as tracks (`<trk>`).
 *
 * @param {Array.<module:ol/Feature>} features Features.
 * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.
 * @return {Node} Node.
 * @override
 * @api
 */
GPX.prototype.writeFeaturesNode = function(features, opt_options) {
  opt_options = this.adaptOptions(opt_options);
  //FIXME Serialize metadata
  const gpx = Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* createElementNS */ "d"])('http://www.topografix.com/GPX/1/1', 'gpx');
  const xmlnsUri = 'http://www.w3.org/2000/xmlns/';
  gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', _xml_js__WEBPACK_IMPORTED_MODULE_11__[/* XML_SCHEMA_INSTANCE_URI */ "c"]);
  gpx.setAttributeNS(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* XML_SCHEMA_INSTANCE_URI */ "c"], 'xsi:schemaLocation', SCHEMA_LOCATION);
  gpx.setAttribute('version', '1.1');
  gpx.setAttribute('creator', 'OpenLayers');

  Object(_xml_js__WEBPACK_IMPORTED_MODULE_11__[/* pushSerializeAndPop */ "v"])(/** @type {module:ol/xml~NodeStackItem} */
    ({node: gpx}), GPX_SERIALIZERS, GPX_NODE_FACTORY, features, [opt_options]);
  return gpx;
};
/* harmony default export */ __webpack_exports__["a"] = (GPX);


/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Tile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);
/**
 * @module ol/VectorTile
 */




/**
 * @typedef {function(new: module:ol/VectorTile, module:ol/tilecoord~TileCoord,
 * module:ol/TileState, string, ?string, module:ol/Tile~LoadFunction)} TileClass
 * @api
 */

/**
 * @constructor
 * @extends {module:ol/Tile}
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/TileState} state State.
 * @param {string} src Data source url.
 * @param {module:ol/format/Feature} format Feature format.
 * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.
 * @param {module:ol/Tile~Options=} opt_options Tile options.
 */
const VectorTile = function(tileCoord, state, src, format, tileLoadFunction, opt_options) {

  _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, tileCoord, state, opt_options);

  /**
   * @type {number}
   */
  this.consumers = 0;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.extent_ = null;

  /**
   * @private
   * @type {module:ol/format/Feature}
   */
  this.format_ = format;

  /**
   * @private
   * @type {Array.<module:ol/Feature>}
   */
  this.features_ = null;

  /**
   * @private
   * @type {module:ol/featureloader~FeatureLoader}
   */
  this.loader_;

  /**
   * Data projection
   * @private
   * @type {module:ol/proj/Projection}
   */
  this.projection_ = null;

  /**
   * @private
   * @type {Object.<string, module:ol/render/ReplayGroup>}
   */
  this.replayGroups_ = {};

  /**
   * @private
   * @type {module:ol/Tile~LoadFunction}
   */
  this.tileLoadFunction_ = tileLoadFunction;

  /**
   * @private
   * @type {string}
   */
  this.url_ = src;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(VectorTile, _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);

/**
 * @const
 * @type {module:ol/extent~Extent}
 */
const DEFAULT_EXTENT = [0, 0, 4096, 4096];


/**
 * @inheritDoc
 */
VectorTile.prototype.disposeInternal = function() {
  this.features_ = null;
  this.replayGroups_ = {};
  this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ABORT;
  this.changed();
  _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].prototype.disposeInternal.call(this);
};


/**
 * Gets the extent of the vector tile.
 * @return {module:ol/extent~Extent} The extent.
 * @api
 */
VectorTile.prototype.getExtent = function() {
  return this.extent_ || DEFAULT_EXTENT;
};


/**
 * Get the feature format assigned for reading this tile's features.
 * @return {module:ol/format/Feature} Feature format.
 * @api
 */
VectorTile.prototype.getFormat = function() {
  return this.format_;
};


/**
 * Get the features for this tile. Geometries will be in the projection returned
 * by {@link module:ol/VectorTile~VectorTile#getProjection}.
 * @return {Array.<module:ol/Feature|module:ol/render/Feature>} Features.
 * @api
 */
VectorTile.prototype.getFeatures = function() {
  return this.features_;
};


/**
 * @inheritDoc
 */
VectorTile.prototype.getKey = function() {
  return this.url_;
};


/**
 * Get the feature projection of features returned by
 * {@link module:ol/VectorTile~VectorTile#getFeatures}.
 * @return {module:ol/proj/Projection} Feature projection.
 * @api
 */
VectorTile.prototype.getProjection = function() {
  return this.projection_;
};


/**
 * @param {module:ol/layer/Layer} layer Layer.
 * @param {string} key Key.
 * @return {module:ol/render/ReplayGroup} Replay group.
 */
VectorTile.prototype.getReplayGroup = function(layer, key) {
  return this.replayGroups_[Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layer) + ',' + key];
};


/**
 * @inheritDoc
 */
VectorTile.prototype.load = function() {
  if (this.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE) {
    this.setState(_TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADING);
    this.tileLoadFunction_(this, this.url_);
    this.loader_(null, NaN, null);
  }
};


/**
 * Handler for successful tile load.
 * @param {Array.<module:ol/Feature>} features The loaded features.
 * @param {module:ol/proj/Projection} dataProjection Data projection.
 * @param {module:ol/extent~Extent} extent Extent.
 */
VectorTile.prototype.onLoad = function(features, dataProjection, extent) {
  this.setProjection(dataProjection);
  this.setFeatures(features);
  this.setExtent(extent);
};


/**
 * Handler for tile load errors.
 */
VectorTile.prototype.onError = function() {
  this.setState(_TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR);
};


/**
 * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s
 * `tileLoadFunction`. Sets the extent of the vector tile. This is only required
 * for tiles in projections with `tile-pixels` as units. The extent should be
 * set to `[0, 0, tilePixelSize, tilePixelSize]`, where `tilePixelSize` is
 * calculated by multiplying the tile size with the tile pixel ratio. For
 * sources using {@link module:ol/format/MVT~MVT} as feature format, the
 * {@link module:ol/format/MVT~MVT#getLastExtent} method will return the correct
 * extent. The default is `[0, 0, 4096, 4096]`.
 * @param {module:ol/extent~Extent} extent The extent.
 * @api
 */
VectorTile.prototype.setExtent = function(extent) {
  this.extent_ = extent;
};


/**
 * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.
 * Sets the features for the tile.
 * @param {Array.<module:ol/Feature>} features Features.
 * @api
 */
VectorTile.prototype.setFeatures = function(features) {
  this.features_ = features;
  this.setState(_TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADED);
};


/**
 * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.
 * Sets the projection of the features that were added with
 * {@link module:ol/VectorTile~VectorTile#setFeatures}.
 * @param {module:ol/proj/Projection} projection Feature projection.
 * @api
 */
VectorTile.prototype.setProjection = function(projection) {
  this.projection_ = projection;
};


/**
 * @param {module:ol/layer/Layer} layer Layer.
 * @param {string} key Key.
 * @param {module:ol/render/ReplayGroup} replayGroup Replay group.
 */
VectorTile.prototype.setReplayGroup = function(layer, key, replayGroup) {
  this.replayGroups_[Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* getUid */ "b"])(layer) + ',' + key] = replayGroup;
};


/**
 * Set the feature loader for reading this tile's features.
 * @param {module:ol/featureloader~FeatureLoader} loader Feature loader.
 * @api
 */
VectorTile.prototype.setLoader = function(loader) {
  this.loader_ = loader;
};

/* harmony default export */ __webpack_exports__["a"] = (VectorTile);


/***/ }),
/* 211 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _webgl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29);
/* harmony import */ var _style_Atlas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(189);
/**
 * @module ol/style/AtlasManager
 */





/**
 * @typedef {Object} Options
 * @property {number} [initialSize=256] The size in pixels of the first atlas image.
 * @property {number} [maxSize] The maximum size in pixels of atlas images. Default is
 * `webgl/MAX_TEXTURE_SIZE` or 2048 if WebGL is not supported.
 * @property {number} [space=1] The space in pixels between images.
 */


/**
 * Provides information for an image inside an atlas manager.
 * `offsetX` and `offsetY` is the position of the image inside
 * the atlas image `image` and the position of the hit-detection image
 * inside the hit-detection atlas image `hitImage`.
 * @typedef {Object} AtlasManagerInfo
 * @property {number} offsetX
 * @property {number} offsetY
 * @property {HTMLCanvasElement} image
 * @property {HTMLCanvasElement} hitImage
 */


/**
 * The size in pixels of the first atlas image.
 * @type {number}
 */
const INITIAL_ATLAS_SIZE = 256;

/**
 * The maximum size in pixels of atlas images.
 * @type {number}
 */
const MAX_ATLAS_SIZE = -1;


/**
 * Manages the creation of image atlases.
 *
 * Images added to this manager will be inserted into an atlas, which
 * will be used for rendering.
 * The `size` given in the constructor is the size for the first
 * atlas. After that, when new atlases are created, they will have
 * twice the size as the latest atlas (until `maxSize` is reached).
 *
 * If an application uses many images or very large images, it is recommended
 * to set a higher `size` value to avoid the creation of too many atlases.
 *
 * @constructor
 * @struct
 * @api
 * @param {module:ol/style/AtlasManager~Options=} opt_options Options.
 */
const AtlasManager = function(opt_options) {

  const options = opt_options || {};

  /**
   * The size in pixels of the latest atlas image.
   * @private
   * @type {number}
   */
  this.currentSize_ = options.initialSize !== undefined ?
    options.initialSize : INITIAL_ATLAS_SIZE;

  /**
   * The maximum size in pixels of atlas images.
   * @private
   * @type {number}
   */
  this.maxSize_ = options.maxSize !== undefined ?
    options.maxSize : MAX_ATLAS_SIZE != -1 ?
      MAX_ATLAS_SIZE : _webgl_js__WEBPACK_IMPORTED_MODULE_0__[/* MAX_TEXTURE_SIZE */ "q"] !== undefined ?
        _webgl_js__WEBPACK_IMPORTED_MODULE_0__[/* MAX_TEXTURE_SIZE */ "q"] : 2048;

  /**
   * The size in pixels between images.
   * @private
   * @type {number}
   */
  this.space_ = options.space !== undefined ? options.space : 1;

  /**
   * @private
   * @type {Array.<module:ol/style/Atlas>}
   */
  this.atlases_ = [new _style_Atlas_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.currentSize_, this.space_)];

  /**
   * The size in pixels of the latest atlas image for hit-detection images.
   * @private
   * @type {number}
   */
  this.currentHitSize_ = this.currentSize_;

  /**
   * @private
   * @type {Array.<module:ol/style/Atlas>}
   */
  this.hitAtlases_ = [new _style_Atlas_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.currentHitSize_, this.space_)];
};


/**
 * @param {string} id The identifier of the entry to check.
 * @return {?module:ol/style/AtlasManager~AtlasManagerInfo} The position and atlas image for the
 *    entry, or `null` if the entry is not part of the atlas manager.
 */
AtlasManager.prototype.getInfo = function(id) {
  /** @type {?module:ol/style/Atlas~AtlasInfo} */
  const info = this.getInfo_(this.atlases_, id);

  if (!info) {
    return null;
  }
  const hitInfo = /** @type {module:ol/style/Atlas~AtlasInfo} */ (this.getInfo_(this.hitAtlases_, id));

  return this.mergeInfos_(info, hitInfo);
};


/**
 * @private
 * @param {Array.<module:ol/style/Atlas>} atlases The atlases to search.
 * @param {string} id The identifier of the entry to check.
 * @return {?module:ol/style/Atlas~AtlasInfo} The position and atlas image for the entry,
 *    or `null` if the entry is not part of the atlases.
 */
AtlasManager.prototype.getInfo_ = function(atlases, id) {
  for (let i = 0, ii = atlases.length; i < ii; ++i) {
    const atlas = atlases[i];
    const info = atlas.get(id);
    if (info) {
      return info;
    }
  }
  return null;
};


/**
 * @private
 * @param {module:ol/style/Atlas~AtlasInfo} info The info for the real image.
 * @param {module:ol/style/Atlas~AtlasInfo} hitInfo The info for the hit-detection
 *    image.
 * @return {?module:ol/style/AtlasManager~AtlasManagerInfo} The position and atlas image for the
 *    entry, or `null` if the entry is not part of the atlases.
 */
AtlasManager.prototype.mergeInfos_ = function(info, hitInfo) {
  return (
    /** @type {module:ol/style/AtlasManager~AtlasManagerInfo} */ ({
      offsetX: info.offsetX,
      offsetY: info.offsetY,
      image: info.image,
      hitImage: hitInfo.image
    })
  );
};


/**
 * Add an image to the atlas manager.
 *
 * If an entry for the given id already exists, the entry will
 * be overridden (but the space on the atlas graphic will not be freed).
 *
 * If `renderHitCallback` is provided, the image (or the hit-detection version
 * of the image) will be rendered into a separate hit-detection atlas image.
 *
 * @param {string} id The identifier of the entry to add.
 * @param {number} width The width.
 * @param {number} height The height.
 * @param {function(CanvasRenderingContext2D, number, number)} renderCallback
 *    Called to render the new image onto an atlas image.
 * @param {function(CanvasRenderingContext2D, number, number)=}
 *    opt_renderHitCallback Called to render a hit-detection image onto a hit
 *    detection atlas image.
 * @param {Object=} opt_this Value to use as `this` when executing
 *    `renderCallback` and `renderHitCallback`.
 * @return {?module:ol/style/AtlasManager~AtlasManagerInfo}  The position and atlas image for the
 *    entry, or `null` if the image is too big.
 */
AtlasManager.prototype.add = function(id, width, height,
  renderCallback, opt_renderHitCallback, opt_this) {
  if (width + this.space_ > this.maxSize_ ||
      height + this.space_ > this.maxSize_) {
    return null;
  }

  /** @type {?module:ol/style/Atlas~AtlasInfo} */
  const info = this.add_(false, id, width, height, renderCallback, opt_this);
  if (!info) {
    return null;
  }

  // even if no hit-detection entry is requested, we insert a fake entry into
  // the hit-detection atlas, to make sure that the offset is the same for
  // the original image and the hit-detection image.
  const renderHitCallback = opt_renderHitCallback !== undefined ?
    opt_renderHitCallback : _functions_js__WEBPACK_IMPORTED_MODULE_1__[/* UNDEFINED */ "c"];

  const hitInfo = /** @type {module:ol/style/Atlas~AtlasInfo} */ (this.add_(true,
    id, width, height, renderHitCallback, opt_this));

  return this.mergeInfos_(info, hitInfo);
};


/**
 * @private
 * @param {boolean} isHitAtlas If the hit-detection atlases are used.
 * @param {string} id The identifier of the entry to add.
 * @param {number} width The width.
 * @param {number} height The height.
 * @param {function(CanvasRenderingContext2D, number, number)} renderCallback
 *    Called to render the new image onto an atlas image.
 * @param {Object=} opt_this Value to use as `this` when executing
 *    `renderCallback` and `renderHitCallback`.
 * @return {?module:ol/style/Atlas~AtlasInfo}  The position and atlas image for the entry,
 *    or `null` if the image is too big.
 */
AtlasManager.prototype.add_ = function(isHitAtlas, id, width, height, renderCallback, opt_this) {
  const atlases = (isHitAtlas) ? this.hitAtlases_ : this.atlases_;
  let atlas, info, i, ii;
  for (i = 0, ii = atlases.length; i < ii; ++i) {
    atlas = atlases[i];
    info = atlas.add(id, width, height, renderCallback, opt_this);
    if (info) {
      return info;
    } else if (!info && i === ii - 1) {
      // the entry could not be added to one of the existing atlases,
      // create a new atlas that is twice as big and try to add to this one.
      let size;
      if (isHitAtlas) {
        size = Math.min(this.currentHitSize_ * 2, this.maxSize_);
        this.currentHitSize_ = size;
      } else {
        size = Math.min(this.currentSize_ * 2, this.maxSize_);
        this.currentSize_ = size;
      }
      atlas = new _style_Atlas_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](size, this.space_);
      atlases.push(atlas);
      // run the loop another time
      ++ii;
    }
  }
  return null;
};
/* harmony default export */ __webpack_exports__["a"] = (AtlasManager);


/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export CustomTile */
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Tile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69);
/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);
/* harmony import */ var _tileurlfunction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84);
/* harmony import */ var _asserts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(27);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/* harmony import */ var _net_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(174);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(7);
/* harmony import */ var _source_State_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(50);
/* harmony import */ var _source_Tile_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(110);
/* harmony import */ var _tilecoord_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(57);
/* harmony import */ var _tilegrid_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(67);
/**
 * @module ol/source/UTFGrid
 */
















/**
 * @constructor
 * @extends {module:ol/Tile}
 * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.
 * @param {module:ol/TileState} state State.
 * @param {string} src Image source URI.
 * @param {module:ol/extent~Extent} extent Extent of the tile.
 * @param {boolean} preemptive Load the tile when visible (before it's needed).
 * @param {boolean} jsonp Load the tile as a script.
 */
const CustomTile = function(tileCoord, state, src, extent, preemptive, jsonp) {

  _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].call(this, tileCoord, state);

  /**
   * @private
   * @type {string}
   */
  this.src_ = src;

  /**
   * @private
   * @type {module:ol/extent~Extent}
   */
  this.extent_ = extent;

  /**
   * @private
   * @type {boolean}
   */
  this.preemptive_ = preemptive;

  /**
   * @private
   * @type {Array.<string>}
   */
  this.grid_ = null;

  /**
   * @private
   * @type {Array.<string>}
   */
  this.keys_ = null;

  /**
   * @private
   * @type {Object.<string, Object>|undefined}
   */
  this.data_ = null;


  /**
   * @private
   * @type {boolean}
   */
  this.jsonp_ = jsonp;

};
Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(CustomTile, _Tile_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/**
 * Get the image element for this tile.
 * @return {HTMLImageElement} Image.
 */
CustomTile.prototype.getImage = function() {
  return null;
};


/**
 * Synchronously returns data at given coordinate (if available).
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @return {*} The data.
 */
CustomTile.prototype.getData = function(coordinate) {
  if (!this.grid_ || !this.keys_) {
    return null;
  }
  const xRelative = (coordinate[0] - this.extent_[0]) /
      (this.extent_[2] - this.extent_[0]);
  const yRelative = (coordinate[1] - this.extent_[1]) /
      (this.extent_[3] - this.extent_[1]);

  const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];

  if (typeof row !== 'string') {
    return null;
  }

  let code = row.charCodeAt(Math.floor(xRelative * row.length));
  if (code >= 93) {
    code--;
  }
  if (code >= 35) {
    code--;
  }
  code -= 32;

  let data = null;
  if (code in this.keys_) {
    const id = this.keys_[code];
    if (this.data_ && id in this.data_) {
      data = this.data_[id];
    } else {
      data = id;
    }
  }
  return data;
};


/**
 * Calls the callback (synchronously by default) with the available data
 * for given coordinate (or `null` if not yet loaded).
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {function(this: T, *)} callback Callback.
 * @param {T=} opt_this The object to use as `this` in the callback.
 * @param {boolean=} opt_request If `true` the callback is always async.
 *                               The tile data is requested if not yet loaded.
 * @template T
 */
CustomTile.prototype.forDataAtCoordinate = function(coordinate, callback, opt_this, opt_request) {
  if (this.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE && opt_request === true) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_5__[/* listenOnce */ "b"])(this, _events_EventType_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].CHANGE, function(e) {
      callback.call(opt_this, this.getData(coordinate));
    }, this);
    this.loadInternal_();
  } else {
    if (opt_request === true) {
      setTimeout(function() {
        callback.call(opt_this, this.getData(coordinate));
      }.bind(this), 0);
    } else {
      callback.call(opt_this, this.getData(coordinate));
    }
  }
};


/**
 * @inheritDoc
 */
CustomTile.prototype.getKey = function() {
  return this.src_;
};


/**
 * @private
 */
CustomTile.prototype.handleError_ = function() {
  this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].ERROR;
  this.changed();
};


/**
 * @param {!UTFGridJSON} json UTFGrid data.
 * @private
 */
CustomTile.prototype.handleLoad_ = function(json) {
  this.grid_ = json.grid;
  this.keys_ = json.keys;
  this.data_ = json.data;

  this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EMPTY;
  this.changed();
};


/**
 * @private
 */
CustomTile.prototype.loadInternal_ = function() {
  if (this.state == _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE) {
    this.state = _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].LOADING;
    if (this.jsonp_) {
      Object(_net_js__WEBPACK_IMPORTED_MODULE_8__[/* jsonp */ "a"])(this.src_, this.handleLoad_.bind(this),
        this.handleError_.bind(this));
    } else {
      const client = new XMLHttpRequest();
      client.addEventListener('load', this.onXHRLoad_.bind(this));
      client.addEventListener('error', this.onXHRError_.bind(this));
      client.open('GET', this.src_);
      client.send();
    }
  }
};


/**
 * @private
 * @param {Event} event The load event.
 */
CustomTile.prototype.onXHRLoad_ = function(event) {
  const client = /** @type {XMLHttpRequest} */ (event.target);
  // status will be 0 for file:// urls
  if (!client.status || client.status >= 200 && client.status < 300) {
    let response;
    try {
      response = /** @type {!UTFGridJSON} */(JSON.parse(client.responseText));
    } catch (err) {
      this.handleError_();
      return;
    }
    this.handleLoad_(response);
  } else {
    this.handleError_();
  }
};


/**
 * @private
 * @param {Event} event The error event.
 */
CustomTile.prototype.onXHRError_ = function(event) {
  this.handleError_();
};


/**
 * @override
 */
CustomTile.prototype.load = function() {
  if (this.preemptive_) {
    this.loadInternal_();
  }
};


/**
 * @typedef {Object} Options
 * @property {boolean} [preemptive=true]
 * If `true` the UTFGrid source loads the tiles based on their "visibility".
 * This improves the speed of response, but increases traffic.
 * Note that if set to `false`, you need to pass `true` as `opt_request`
 * to the `forDataAtCoordinateAndResolution` method otherwise no data
 * will ever be loaded.
 * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.
 * Useful when the server does not support CORS..
 * @property {tileJSON} [tileJSON] TileJSON configuration for this source.
 * If not provided, `url` must be configured.
 * @property {string} [url] TileJSON endpoint that provides the configuration for this source.
 * Request will be made through JSONP. If not provided, `tileJSON` must be configured.
 */


/**
 * @classdesc
 * Layer source for UTFGrid interaction data loaded from TileJSON format.
 *
 * @constructor
 * @extends {module:ol/source/Tile}
 * @param {module:ol/source/UTFGrid~Options=} options Source options.
 * @api
 */
const UTFGrid = function(options) {
  _source_Tile_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "b"].call(this, {
    projection: Object(_proj_js__WEBPACK_IMPORTED_MODULE_9__[/* get */ "h"])('EPSG:3857'),
    state: _source_State_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].LOADING
  });

  /**
   * @private
   * @type {boolean}
   */
  this.preemptive_ = options.preemptive !== undefined ?
    options.preemptive : true;

  /**
   * @private
   * @type {!module:ol/Tile~UrlFunction}
   */
  this.tileUrlFunction_ = _tileurlfunction_js__WEBPACK_IMPORTED_MODULE_3__[/* nullTileUrlFunction */ "d"];

  /**
   * @private
   * @type {string|undefined}
   */
  this.template_ = undefined;

  /**
   * @private
   * @type {boolean}
   */
  this.jsonp_ = options.jsonp || false;

  if (options.url) {
    if (this.jsonp_) {
      Object(_net_js__WEBPACK_IMPORTED_MODULE_8__[/* jsonp */ "a"])(options.url, this.handleTileJSONResponse.bind(this),
        this.handleTileJSONError.bind(this));
    } else {
      const client = new XMLHttpRequest();
      client.addEventListener('load', this.onXHRLoad_.bind(this));
      client.addEventListener('error', this.onXHRError_.bind(this));
      client.open('GET', options.url);
      client.send();
    }
  } else if (options.tileJSON) {
    this.handleTileJSONResponse(options.tileJSON);
  } else {
    Object(_asserts_js__WEBPACK_IMPORTED_MODULE_4__[/* assert */ "a"])(false, 51); // Either `url` or `tileJSON` options must be provided
  }
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(UTFGrid, _source_Tile_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "b"]);


/**
 * @private
 * @param {Event} event The load event.
 */
UTFGrid.prototype.onXHRLoad_ = function(event) {
  const client = /** @type {XMLHttpRequest} */ (event.target);
  // status will be 0 for file:// urls
  if (!client.status || client.status >= 200 && client.status < 300) {
    let response;
    try {
      response = /** @type {TileJSON} */(JSON.parse(client.responseText));
    } catch (err) {
      this.handleTileJSONError();
      return;
    }
    this.handleTileJSONResponse(response);
  } else {
    this.handleTileJSONError();
  }
};


/**
 * @private
 * @param {Event} event The error event.
 */
UTFGrid.prototype.onXHRError_ = function(event) {
  this.handleTileJSONError();
};


/**
 * Return the template from TileJSON.
 * @return {string|undefined} The template from TileJSON.
 * @api
 */
UTFGrid.prototype.getTemplate = function() {
  return this.template_;
};


/**
 * Calls the callback (synchronously by default) with the available data
 * for given coordinate and resolution (or `null` if not yet loaded or
 * in case of an error).
 * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.
 * @param {number} resolution Resolution.
 * @param {function(*)} callback Callback.
 * @param {boolean=} opt_request If `true` the callback is always async.
 *                               The tile data is requested if not yet loaded.
 * @api
 */
UTFGrid.prototype.forDataAtCoordinateAndResolution = function(
  coordinate, resolution, callback, opt_request) {
  if (this.tileGrid) {
    const tileCoord = this.tileGrid.getTileCoordForCoordAndResolution(
      coordinate, resolution);
    const tile = /** @type {!module:ol/source/UTFGrid~CustomTile} */(this.getTile(
      tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection()));
    tile.forDataAtCoordinate(coordinate, callback, null, opt_request);
  } else {
    if (opt_request === true) {
      setTimeout(function() {
        callback(null);
      }, 0);
    } else {
      callback(null);
    }
  }
};


/**
 * @protected
 */
UTFGrid.prototype.handleTileJSONError = function() {
  this.setState(_source_State_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].ERROR);
};


/**
 * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse
 * @protected
 * @param {TileJSON} tileJSON Tile JSON.
 */
UTFGrid.prototype.handleTileJSONResponse = function(tileJSON) {

  const epsg4326Projection = Object(_proj_js__WEBPACK_IMPORTED_MODULE_9__[/* get */ "h"])('EPSG:4326');

  const sourceProjection = this.getProjection();
  let extent;
  if (tileJSON.bounds !== undefined) {
    const transform = Object(_proj_js__WEBPACK_IMPORTED_MODULE_9__[/* getTransformFromProjections */ "k"])(
      epsg4326Projection, sourceProjection);
    extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_7__[/* applyTransform */ "a"])(tileJSON.bounds, transform);
  }

  const minZoom = tileJSON.minzoom || 0;
  const maxZoom = tileJSON.maxzoom || 22;
  const tileGrid = Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_13__[/* createXYZ */ "b"])({
    extent: Object(_tilegrid_js__WEBPACK_IMPORTED_MODULE_13__[/* extentFromProjection */ "c"])(sourceProjection),
    maxZoom: maxZoom,
    minZoom: minZoom
  });
  this.tileGrid = tileGrid;

  this.template_ = tileJSON.template;

  const grids = tileJSON.grids;
  if (!grids) {
    this.setState(_source_State_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].ERROR);
    return;
  }

  this.tileUrlFunction_ = Object(_tileurlfunction_js__WEBPACK_IMPORTED_MODULE_3__[/* createFromTemplates */ "a"])(grids, tileGrid);

  if (tileJSON.attribution !== undefined) {
    const attributionExtent = extent !== undefined ?
      extent : epsg4326Projection.getExtent();

    this.setAttributions(function(frameState) {
      if (Object(_extent_js__WEBPACK_IMPORTED_MODULE_7__[/* intersects */ "F"])(attributionExtent, frameState.extent)) {
        return [tileJSON.attribution];
      }
      return null;
    });
  }

  this.setState(_source_State_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].READY);

};


/**
 * @inheritDoc
 */
UTFGrid.prototype.getTile = function(z, x, y, pixelRatio, projection) {
  const tileCoordKey = Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_12__[/* getKeyZXY */ "d"])(z, x, y);
  if (this.tileCache.containsKey(tileCoordKey)) {
    return (
      /** @type {!module:ol/Tile} */ (this.tileCache.get(tileCoordKey))
    );
  } else {
    const tileCoord = [z, x, y];
    const urlTileCoord =
        this.getTileCoordForTileUrlFunction(tileCoord, projection);
    const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);
    const tile = new CustomTile(
      tileCoord,
      tileUrl !== undefined ? _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].IDLE : _TileState_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EMPTY,
      tileUrl !== undefined ? tileUrl : '',
      this.tileGrid.getTileCoordExtent(tileCoord),
      this.preemptive_,
      this.jsonp_);
    this.tileCache.set(tileCoordKey, tile);
    return tile;
  }
};


/**
 * @inheritDoc
 */
UTFGrid.prototype.useTile = function(z, x, y) {
  const tileCoordKey = Object(_tilecoord_js__WEBPACK_IMPORTED_MODULE_12__[/* getKeyZXY */ "d"])(z, x, y);
  if (this.tileCache.containsKey(tileCoordKey)) {
    this.tileCache.get(tileCoordKey);
  }
};


/* harmony default export */ __webpack_exports__["a"] = (UTFGrid);


/***/ }),
/* 213 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Image_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(138);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3);
/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15);
/* harmony import */ var _source_Image_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(64);
/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(115);
/**
 * @module ol/source/ImageMapGuide
 */









/**
 * @typedef {Object} Options
 * @property {string} [url] The mapagent url.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
 * access pixel data with the Canvas renderer.  See
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.
 * @property {number} [displayDpi=96] The display resolution.
 * @property {number} [metersPerUnit=1] The meters-per-unit value.
 * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
 * the image from the remote server.
 * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means
 * twice the width and height of the map viewport, and so on. Must be `1` or higher.
 * @property {Array.<number>} [resolutions] Resolutions.
 * If specified, requests will be made for these resolutions only.
 * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
 * @property {Object} [params] Additional parameters.
 */


/**
 * @classdesc
 * Source for images from Mapguide servers
 *
 * @constructor
 * @fires ol/source/Image~ImageSourceEvent
 * @extends {module:ol/source/Image}
 * @param {module:ol/source/ImageMapGuide~Options=} options ImageMapGuide options.
 * @api
 */
const ImageMapGuide = function(options) {

  _source_Image_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].call(this, {
    projection: options.projection,
    resolutions: options.resolutions
  });

  /**
   * @private
   * @type {?string}
   */
  this.crossOrigin_ =
      options.crossOrigin !== undefined ? options.crossOrigin : null;

  /**
   * @private
   * @type {number}
   */
  this.displayDpi_ = options.displayDpi !== undefined ?
    options.displayDpi : 96;

  /**
   * @private
   * @type {!Object}
   */
  this.params_ = options.params || {};

  /**
   * @private
   * @type {string|undefined}
   */
  this.url_ = options.url;

  /**
   * @private
   * @type {module:ol/Image~LoadFunction}
   */
  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?
    options.imageLoadFunction : _source_Image_js__WEBPACK_IMPORTED_MODULE_6__[/* defaultImageLoadFunction */ "b"];

  /**
   * @private
   * @type {boolean}
   */
  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

  /**
   * @private
   * @type {number}
   */
  this.metersPerUnit_ = options.metersPerUnit !== undefined ?
    options.metersPerUnit : 1;

  /**
   * @private
   * @type {number}
   */
  this.ratio_ = options.ratio !== undefined ? options.ratio : 1;

  /**
   * @private
   * @type {boolean}
   */
  this.useOverlay_ = options.useOverlay !== undefined ?
    options.useOverlay : false;

  /**
   * @private
   * @type {module:ol/Image}
   */
  this.image_ = null;

  /**
   * @private
   * @type {number}
   */
  this.renderedRevision_ = 0;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(ImageMapGuide, _source_Image_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"]);


/**
 * Get the user-provided params, i.e. those passed to the constructor through
 * the "params" option, and possibly updated using the updateParams method.
 * @return {Object} Params.
 * @api
 */
ImageMapGuide.prototype.getParams = function() {
  return this.params_;
};


/**
 * @inheritDoc
 */
ImageMapGuide.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {
  resolution = this.findNearestResolution(resolution);
  pixelRatio = this.hidpi_ ? pixelRatio : 1;

  let image = this.image_;
  if (image &&
      this.renderedRevision_ == this.getRevision() &&
      image.getResolution() == resolution &&
      image.getPixelRatio() == pixelRatio &&
      Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* containsExtent */ "g"])(image.getExtent(), extent)) {
    return image;
  }

  if (this.ratio_ != 1) {
    extent = extent.slice();
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* scaleFromCenter */ "J"])(extent, this.ratio_);
  }
  const width = Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* getWidth */ "E"])(extent) / resolution;
  const height = Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* getHeight */ "A"])(extent) / resolution;
  const size = [width * pixelRatio, height * pixelRatio];

  if (this.url_ !== undefined) {
    const imageUrl = this.getUrl(this.url_, this.params_, extent, size,
      projection);
    image = new _Image_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](extent, resolution, pixelRatio,
      imageUrl, this.crossOrigin_,
      this.imageLoadFunction_);
    Object(_events_js__WEBPACK_IMPORTED_MODULE_2__[/* listen */ "a"])(image, _events_EventType_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].CHANGE,
      this.handleImageChange, this);
  } else {
    image = null;
  }
  this.image_ = image;
  this.renderedRevision_ = this.getRevision();

  return image;
};


/**
 * Return the image load function of the source.
 * @return {module:ol/Image~LoadFunction} The image load function.
 * @api
 */
ImageMapGuide.prototype.getImageLoadFunction = function() {
  return this.imageLoadFunction_;
};


/**
 * @param {module:ol/extent~Extent} extent The map extents.
 * @param {module:ol/size~Size} size The viewport size.
 * @param {number} metersPerUnit The meters-per-unit value.
 * @param {number} dpi The display resolution.
 * @return {number} The computed map scale.
 */
function getScale(extent, size, metersPerUnit, dpi) {
  const mcsW = Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* getWidth */ "E"])(extent);
  const mcsH = Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* getHeight */ "A"])(extent);
  const devW = size[0];
  const devH = size[1];
  const mpp = 0.0254 / dpi;
  if (devH * mcsW > devW * mcsH) {
    return mcsW * metersPerUnit / (devW * mpp); // width limited
  } else {
    return mcsH * metersPerUnit / (devH * mpp); // height limited
  }
}


/**
 * Update the user-provided params.
 * @param {Object} params Params.
 * @api
 */
ImageMapGuide.prototype.updateParams = function(params) {
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_5__[/* assign */ "a"])(this.params_, params);
  this.changed();
};


/**
 * @param {string} baseUrl The mapagent url.
 * @param {Object.<string, string|number>} params Request parameters.
 * @param {module:ol/extent~Extent} extent Extent.
 * @param {module:ol/size~Size} size Size.
 * @param {module:ol/proj/Projection} projection Projection.
 * @return {string} The mapagent map image request URL.
 */
ImageMapGuide.prototype.getUrl = function(baseUrl, params, extent, size, projection) {
  const scale = getScale(extent, size,
    this.metersPerUnit_, this.displayDpi_);
  const center = Object(_extent_js__WEBPACK_IMPORTED_MODULE_4__[/* getCenter */ "x"])(extent);
  const baseParams = {
    'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',
    'VERSION': '2.0.0',
    'LOCALE': 'en',
    'CLIENTAGENT': 'ol/source/ImageMapGuide source',
    'CLIP': '1',
    'SETDISPLAYDPI': this.displayDpi_,
    'SETDISPLAYWIDTH': Math.round(size[0]),
    'SETDISPLAYHEIGHT': Math.round(size[1]),
    'SETVIEWSCALE': scale,
    'SETVIEWCENTERX': center[0],
    'SETVIEWCENTERY': center[1]
  };
  Object(_obj_js__WEBPACK_IMPORTED_MODULE_5__[/* assign */ "a"])(baseParams, params);
  return Object(_uri_js__WEBPACK_IMPORTED_MODULE_7__[/* appendParams */ "a"])(baseUrl, baseParams);
};


/**
 * Set the image load function of the MapGuide source.
 * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.
 * @api
 */
ImageMapGuide.prototype.setImageLoadFunction = function(imageLoadFunction) {
  this.image_ = null;
  this.imageLoadFunction_ = imageLoadFunction;
  this.changed();
};
/* harmony default export */ __webpack_exports__["a"] = (ImageMapGuide);


/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return get; });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(72);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);
/* harmony import */ var _ImageState_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(35);
/* harmony import */ var _style_IconImageCache_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(202);
/**
 * @module ol/style/IconImage
 */








/**
 * @constructor
 * @param {HTMLImageElement|HTMLCanvasElement} image Image.
 * @param {string|undefined} src Src.
 * @param {module:ol/size~Size} size Size.
 * @param {?string} crossOrigin Cross origin.
 * @param {module:ol/ImageState} imageState Image state.
 * @param {module:ol/color~Color} color Color.
 * @extends {module:ol/events/EventTarget}
 */
const IconImage = function(image, src, size, crossOrigin, imageState, color) {

  _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this);

  /**
   * @private
   * @type {HTMLImageElement|HTMLCanvasElement}
   */
  this.hitDetectionImage_ = null;

  /**
   * @private
   * @type {HTMLImageElement|HTMLCanvasElement}
   */
  this.image_ = !image ? new Image() : image;

  if (crossOrigin !== null) {
    this.image_.crossOrigin = crossOrigin;
  }

  /**
   * @private
   * @type {HTMLCanvasElement}
   */
  this.canvas_ = color ?
    /** @type {HTMLCanvasElement} */ (document.createElement('CANVAS')) :
    null;

  /**
   * @private
   * @type {module:ol/color~Color}
   */
  this.color_ = color;

  /**
   * @private
   * @type {Array.<module:ol/events~EventsKey>}
   */
  this.imageListenerKeys_ = null;

  /**
   * @private
   * @type {module:ol/ImageState}
   */
  this.imageState_ = imageState;

  /**
   * @private
   * @type {module:ol/size~Size}
   */
  this.size_ = size;

  /**
   * @private
   * @type {string|undefined}
   */
  this.src_ = src;

  /**
   * @private
   * @type {boolean}
   */
  this.tainting_ = false;
  if (this.imageState_ == _ImageState_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].LOADED) {
    this.determineTainting_();
  }

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(IconImage, _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @param {HTMLImageElement|HTMLCanvasElement} image Image.
 * @param {string} src Src.
 * @param {module:ol/size~Size} size Size.
 * @param {?string} crossOrigin Cross origin.
 * @param {module:ol/ImageState} imageState Image state.
 * @param {module:ol/color~Color} color Color.
 * @return {module:ol/style/IconImage} Icon image.
 */
function get(image, src, size, crossOrigin, imageState, color) {
  let iconImage = _style_IconImageCache_js__WEBPACK_IMPORTED_MODULE_6__[/* shared */ "a"].get(src, crossOrigin, color);
  if (!iconImage) {
    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);
    _style_IconImageCache_js__WEBPACK_IMPORTED_MODULE_6__[/* shared */ "a"].set(src, crossOrigin, color, iconImage);
  }
  return iconImage;
}


/**
 * @private
 */
IconImage.prototype.determineTainting_ = function() {
  const context = Object(_dom_js__WEBPACK_IMPORTED_MODULE_1__[/* createCanvasContext2D */ "a"])(1, 1);
  try {
    context.drawImage(this.image_, 0, 0);
    context.getImageData(0, 0, 1, 1);
  } catch (e) {
    this.tainting_ = true;
  }
};


/**
 * @private
 */
IconImage.prototype.dispatchChangeEvent_ = function() {
  this.dispatchEvent(_events_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].CHANGE);
};


/**
 * @private
 */
IconImage.prototype.handleImageError_ = function() {
  this.imageState_ = _ImageState_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].ERROR;
  this.unlistenImage_();
  this.dispatchChangeEvent_();
};


/**
 * @private
 */
IconImage.prototype.handleImageLoad_ = function() {
  this.imageState_ = _ImageState_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].LOADED;
  if (this.size_) {
    this.image_.width = this.size_[0];
    this.image_.height = this.size_[1];
  }
  this.size_ = [this.image_.width, this.image_.height];
  this.unlistenImage_();
  this.determineTainting_();
  this.replaceColor_();
  this.dispatchChangeEvent_();
};


/**
 * @param {number} pixelRatio Pixel ratio.
 * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
 */
IconImage.prototype.getImage = function(pixelRatio) {
  return this.canvas_ ? this.canvas_ : this.image_;
};


/**
 * @return {module:ol/ImageState} Image state.
 */
IconImage.prototype.getImageState = function() {
  return this.imageState_;
};


/**
 * @param {number} pixelRatio Pixel ratio.
 * @return {HTMLImageElement|HTMLCanvasElement} Image element.
 */
IconImage.prototype.getHitDetectionImage = function(pixelRatio) {
  if (!this.hitDetectionImage_) {
    if (this.tainting_) {
      const width = this.size_[0];
      const height = this.size_[1];
      const context = Object(_dom_js__WEBPACK_IMPORTED_MODULE_1__[/* createCanvasContext2D */ "a"])(width, height);
      context.fillRect(0, 0, width, height);
      this.hitDetectionImage_ = context.canvas;
    } else {
      this.hitDetectionImage_ = this.image_;
    }
  }
  return this.hitDetectionImage_;
};


/**
 * @return {module:ol/size~Size} Image size.
 */
IconImage.prototype.getSize = function() {
  return this.size_;
};


/**
 * @return {string|undefined} Image src.
 */
IconImage.prototype.getSrc = function() {
  return this.src_;
};


/**
 * Load not yet loaded URI.
 */
IconImage.prototype.load = function() {
  if (this.imageState_ == _ImageState_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].IDLE) {
    this.imageState_ = _ImageState_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].LOADING;
    this.imageListenerKeys_ = [
      Object(_events_js__WEBPACK_IMPORTED_MODULE_2__[/* listenOnce */ "b"])(this.image_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].ERROR,
        this.handleImageError_, this),
      Object(_events_js__WEBPACK_IMPORTED_MODULE_2__[/* listenOnce */ "b"])(this.image_, _events_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].LOAD,
        this.handleImageLoad_, this)
    ];
    try {
      this.image_.src = this.src_;
    } catch (e) {
      this.handleImageError_();
    }
  }
};


/**
 * @private
 */
IconImage.prototype.replaceColor_ = function() {
  if (this.tainting_ || this.color_ === null) {
    return;
  }

  this.canvas_.width = this.image_.width;
  this.canvas_.height = this.image_.height;

  const ctx = this.canvas_.getContext('2d');
  ctx.drawImage(this.image_, 0, 0);

  const imgData = ctx.getImageData(0, 0, this.image_.width, this.image_.height);
  const data = imgData.data;
  const r = this.color_[0] / 255.0;
  const g = this.color_[1] / 255.0;
  const b = this.color_[2] / 255.0;

  for (let i = 0, ii = data.length; i < ii; i += 4) {
    data[i] *= r;
    data[i + 1] *= g;
    data[i + 2] *= b;
  }
  ctx.putImageData(imgData, 0, 0);
};


/**
 * Discards event handlers which listen for load completion or errors.
 *
 * @private
 */
IconImage.prototype.unlistenImage_ = function() {
  this.imageListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_2__[/* unlistenByKey */ "e"]);
  this.imageListenerKeys_ = null;
};
/* unused harmony default export */ var _unused_webpack_default_export = (IconImage);


/***/ }),
/* 215 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40);
/* harmony import */ var _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92);
/* harmony import */ var _coordinate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(34);
/* harmony import */ var _events_Event_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(36);
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3);
/* harmony import */ var _geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var _geom_Point_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(30);
/* harmony import */ var _geom_Polygon_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(39);
/* harmony import */ var _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(44);
/* harmony import */ var _layer_Vector_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(24);
/* harmony import */ var _source_Vector_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(13);
/* harmony import */ var _style_Style_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(75);
/**
 * @module ol/interaction/Extent
 */
















/**
 * @typedef {Object} Options
 * @property {module:ol/extent~Extent} [extent] Initial extent. Defaults to no
 * initial extent.
 * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [boxStyle]
 * Style for the drawn extent box. Defaults to
 * {@link module:ol/style/Style~createEditing()['Polygon']}
 * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
 * pointer close enough to a segment or vertex for editing.
 * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [pointerStyle]
 * Style for the cursor used to draw the extent. Defaults to
 * {@link module:ol/style/Style~createEditing()['Point']}
 * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps
 * in the X direction? Only affects visuals, not functionality.
 */


/**
 * @enum {string}
 */
const ExtentEventType = {
  /**
   * Triggered after the extent is changed
   * @event module:ol/interaction/Extent~ExtentEventType#extentchanged
   * @api
   */
  EXTENTCHANGED: 'extentchanged'
};


/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are
 * instances of this type.
 *
 * @constructor
 * @param {module:ol/extent~Extent} extent the new extent
 * @extends {module:ol/events/Event}
 */
const ExtentInteractionEvent = function(extent) {
  _events_Event_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].call(this, ExtentEventType.EXTENTCHANGED);

  /**
   * The current extent.
   * @type {module:ol/extent~Extent}
   * @api
   */
  this.extent = extent;

};
Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(ExtentInteractionEvent, _events_Event_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]);


/**
 * @classdesc
 * Allows the user to draw a vector box by clicking and dragging on the map.
 * Once drawn, the vector box can be modified by dragging its vertices or edges.
 * This interaction is only supported for mouse devices.
 *
 * @constructor
 * @extends {module:ol/interaction/Pointer}
 * @fires module:ol/interaction/Extent~Event
 * @param {module:ol/interaction/Extent~Options=} opt_options Options.
 * @api
 */
const ExtentInteraction = function(opt_options) {

  const options = opt_options || {};

  /**
   * Extent of the drawn box
   * @type {module:ol/extent~Extent}
   * @private
   */
  this.extent_ = null;

  /**
   * Handler for pointer move events
   * @type {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null}
   * @private
   */
  this.pointerHandler_ = null;

  /**
   * Pixel threshold to snap to extent
   * @type {number}
   * @private
   */
  this.pixelTolerance_ = options.pixelTolerance !== undefined ?
    options.pixelTolerance : 10;

  /**
   * Is the pointer snapped to an extent vertex
   * @type {boolean}
   * @private
   */
  this.snappedToVertex_ = false;

  /**
   * Feature for displaying the visible extent
   * @type {module:ol/Feature}
   * @private
   */
  this.extentFeature_ = null;

  /**
   * Feature for displaying the visible pointer
   * @type {module:ol/Feature}
   * @private
   */
  this.vertexFeature_ = null;

  if (!opt_options) {
    opt_options = {};
  }

  _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "b"].call(this, {
    handleDownEvent: handleDownEvent,
    handleDragEvent: handleDragEvent,
    handleEvent: handleEvent,
    handleUpEvent: handleUpEvent
  });

  /**
   * Layer for the extentFeature
   * @type {module:ol/layer/Vector}
   * @private
   */
  this.extentOverlay_ = new _layer_Vector_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"]({
    source: new _source_Vector_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "b"]({
      useSpatialIndex: false,
      wrapX: !!opt_options.wrapX
    }),
    style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),
    updateWhileAnimating: true,
    updateWhileInteracting: true
  });

  /**
   * Layer for the vertexFeature
   * @type {module:ol/layer/Vector}
   * @private
   */
  this.vertexOverlay_ = new _layer_Vector_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"]({
    source: new _source_Vector_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "b"]({
      useSpatialIndex: false,
      wrapX: !!opt_options.wrapX
    }),
    style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),
    updateWhileAnimating: true,
    updateWhileInteracting: true
  });

  if (opt_options.extent) {
    this.setExtent(opt_options.extent);
  }
};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(ExtentInteraction, _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "b"]);

/**
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent Event.
 * @return {boolean} Propagate event?
 * @this {module:ol/interaction/Extent~Extent}
 */
function handleEvent(mapBrowserEvent) {
  if (!(mapBrowserEvent instanceof _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])) {
    return true;
  }
  //display pointer (if not dragging)
  if (mapBrowserEvent.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERMOVE && !this.handlingDownUpSequence) {
    this.handlePointerMove_(mapBrowserEvent);
  }
  //call pointer to determine up/down/drag
  _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_10__[/* handleEvent */ "c"].call(this, mapBrowserEvent);
  //return false to stop propagation
  return false;
}

/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Event handled?
 * @this {module:ol/interaction/Extent~Extent}
 */
function handleDownEvent(mapBrowserEvent) {
  const pixel = mapBrowserEvent.pixel;
  const map = mapBrowserEvent.map;

  const extent = this.getExtent();
  let vertex = this.snapToVertex_(pixel, map);

  //find the extent corner opposite the passed corner
  const getOpposingPoint = function(point) {
    let x_ = null;
    let y_ = null;
    if (point[0] == extent[0]) {
      x_ = extent[2];
    } else if (point[0] == extent[2]) {
      x_ = extent[0];
    }
    if (point[1] == extent[1]) {
      y_ = extent[3];
    } else if (point[1] == extent[3]) {
      y_ = extent[1];
    }
    if (x_ !== null && y_ !== null) {
      return [x_, y_];
    }
    return null;
  };
  if (vertex && extent) {
    const x = (vertex[0] == extent[0] || vertex[0] == extent[2]) ? vertex[0] : null;
    const y = (vertex[1] == extent[1] || vertex[1] == extent[3]) ? vertex[1] : null;

    //snap to point
    if (x !== null && y !== null) {
      this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));
    //snap to edge
    } else if (x !== null) {
      this.pointerHandler_ = getEdgeHandler(
        getOpposingPoint([x, extent[1]]),
        getOpposingPoint([x, extent[3]])
      );
    } else if (y !== null) {
      this.pointerHandler_ = getEdgeHandler(
        getOpposingPoint([extent[0], y]),
        getOpposingPoint([extent[2], y])
      );
    }
  //no snap - new bbox
  } else {
    vertex = map.getCoordinateFromPixel(pixel);
    this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);
    this.pointerHandler_ = getPointHandler(vertex);
  }
  return true; //event handled; start downup sequence
}

/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Event handled?
 * @this {module:ol/interaction/Extent~Extent}
 */
function handleDragEvent(mapBrowserEvent) {
  if (this.pointerHandler_) {
    const pixelCoordinate = mapBrowserEvent.coordinate;
    this.setExtent(this.pointerHandler_(pixelCoordinate));
    this.createOrUpdatePointerFeature_(pixelCoordinate);
  }
  return true;
}

/**
 * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.
 * @return {boolean} Stop drag sequence?
 * @this {module:ol/interaction/Extent~Extent}
 */
function handleUpEvent(mapBrowserEvent) {
  this.pointerHandler_ = null;
  //If bbox is zero area, set to null;
  const extent = this.getExtent();
  if (!extent || Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* getArea */ "u"])(extent) === 0) {
    this.setExtent(null);
  }
  return false; //Stop handling downup sequence
}

/**
 * Returns the default style for the drawn bbox
 *
 * @return {module:ol/style/Style~StyleFunction} Default Extent style
 */
function getDefaultExtentStyleFunction() {
  const style = Object(_style_Style_js__WEBPACK_IMPORTED_MODULE_13__[/* createEditingStyle */ "b"])();
  return function(feature, resolution) {
    return style[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POLYGON];
  };
}

/**
 * Returns the default style for the pointer
 *
 * @return {module:ol/style/Style~StyleFunction} Default pointer style
 */
function getDefaultPointerStyleFunction() {
  const style = Object(_style_Style_js__WEBPACK_IMPORTED_MODULE_13__[/* createEditingStyle */ "b"])();
  return function(feature, resolution) {
    return style[_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].POINT];
  };
}

/**
 * @param {module:ol/coordinate~Coordinate} fixedPoint corner that will be unchanged in the new extent
 * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent} event handler
 */
function getPointHandler(fixedPoint) {
  return function(point) {
    return Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* boundingExtent */ "b"])([fixedPoint, point]);
  };
}

/**
 * @param {module:ol/coordinate~Coordinate} fixedP1 first corner that will be unchanged in the new extent
 * @param {module:ol/coordinate~Coordinate} fixedP2 second corner that will be unchanged in the new extent
 * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null} event handler
 */
function getEdgeHandler(fixedP1, fixedP2) {
  if (fixedP1[0] == fixedP2[0]) {
    return function(point) {
      return Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* boundingExtent */ "b"])([fixedP1, [point[0], fixedP2[1]]]);
    };
  } else if (fixedP1[1] == fixedP2[1]) {
    return function(point) {
      return Object(_extent_js__WEBPACK_IMPORTED_MODULE_6__[/* boundingExtent */ "b"])([fixedP1, [fixedP2[0], point[1]]]);
    };
  } else {
    return null;
  }
}

/**
 * @param {module:ol/extent~Extent} extent extent
 * @returns {Array<Array<module:ol/coordinate~Coordinate>>} extent line segments
 */
function getSegments(extent) {
  return [
    [[extent[0], extent[1]], [extent[0], extent[3]]],
    [[extent[0], extent[3]], [extent[2], extent[3]]],
    [[extent[2], extent[3]], [extent[2], extent[1]]],
    [[extent[2], extent[1]], [extent[0], extent[1]]]
  ];
}

/**
 * @param {module:ol~Pixel} pixel cursor location
 * @param {module:ol/PluggableMap} map map
 * @returns {module:ol/coordinate~Coordinate|null} snapped vertex on extent
 * @private
 */
ExtentInteraction.prototype.snapToVertex_ = function(pixel, map) {
  const pixelCoordinate = map.getCoordinateFromPixel(pixel);
  const sortByDistance = function(a, b) {
    return Object(_coordinate_js__WEBPACK_IMPORTED_MODULE_4__[/* squaredDistanceToSegment */ "k"])(pixelCoordinate, a) -
        Object(_coordinate_js__WEBPACK_IMPORTED_MODULE_4__[/* squaredDistanceToSegment */ "k"])(pixelCoordinate, b);
  };
  const extent = this.getExtent();
  if (extent) {
    //convert extents to line segments and find the segment closest to pixelCoordinate
    const segments = getSegments(extent);
    segments.sort(sortByDistance);
    const closestSegment = segments[0];

    let vertex = (Object(_coordinate_js__WEBPACK_IMPORTED_MODULE_4__[/* closestOnSegment */ "c"])(pixelCoordinate,
      closestSegment));
    const vertexPixel = map.getPixelFromCoordinate(vertex);

    //if the distance is within tolerance, snap to the segment
    if (Object(_coordinate_js__WEBPACK_IMPORTED_MODULE_4__[/* distance */ "f"])(pixel, vertexPixel) <= this.pixelTolerance_) {
      //test if we should further snap to a vertex
      const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
      const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
      const squaredDist1 = Object(_coordinate_js__WEBPACK_IMPORTED_MODULE_4__[/* squaredDistance */ "j"])(vertexPixel, pixel1);
      const squaredDist2 = Object(_coordinate_js__WEBPACK_IMPORTED_MODULE_4__[/* squaredDistance */ "j"])(vertexPixel, pixel2);
      const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
      this.snappedToVertex_ = dist <= this.pixelTolerance_;
      if (this.snappedToVertex_) {
        vertex = squaredDist1 > squaredDist2 ?
          closestSegment[1] : closestSegment[0];
      }
      return vertex;
    }
  }
  return null;
};

/**
 * @param {module:ol/MapBrowserEvent} mapBrowserEvent pointer move event
 * @private
 */
ExtentInteraction.prototype.handlePointerMove_ = function(mapBrowserEvent) {
  const pixel = mapBrowserEvent.pixel;
  const map = mapBrowserEvent.map;

  let vertex = this.snapToVertex_(pixel, map);
  if (!vertex) {
    vertex = map.getCoordinateFromPixel(pixel);
  }
  this.createOrUpdatePointerFeature_(vertex);
};

/**
 * @param {module:ol/extent~Extent} extent extent
 * @returns {module:ol/Feature} extent as featrue
 * @private
 */
ExtentInteraction.prototype.createOrUpdateExtentFeature_ = function(extent) {
  let extentFeature = this.extentFeature_;

  if (!extentFeature) {
    if (!extent) {
      extentFeature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]({});
    } else {
      extentFeature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](Object(_geom_Polygon_js__WEBPACK_IMPORTED_MODULE_9__[/* fromExtent */ "d"])(extent));
    }
    this.extentFeature_ = extentFeature;
    this.extentOverlay_.getSource().addFeature(extentFeature);
  } else {
    if (!extent) {
      extentFeature.setGeometry(undefined);
    } else {
      extentFeature.setGeometry(Object(_geom_Polygon_js__WEBPACK_IMPORTED_MODULE_9__[/* fromExtent */ "d"])(extent));
    }
  }
  return extentFeature;
};


/**
 * @param {module:ol/coordinate~Coordinate} vertex location of feature
 * @returns {module:ol/Feature} vertex as feature
 * @private
 */
ExtentInteraction.prototype.createOrUpdatePointerFeature_ = function(vertex) {
  let vertexFeature = this.vertexFeature_;
  if (!vertexFeature) {
    vertexFeature = new _Feature_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](new _geom_Point_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](vertex));
    this.vertexFeature_ = vertexFeature;
    this.vertexOverlay_.getSource().addFeature(vertexFeature);
  } else {
    const geometry = /** @type {module:ol/geom/Point} */ (vertexFeature.getGeometry());
    geometry.setCoordinates(vertex);
  }
  return vertexFeature;
};


/**
 * @inheritDoc
 */
ExtentInteraction.prototype.setMap = function(map) {
  this.extentOverlay_.setMap(map);
  this.vertexOverlay_.setMap(map);
  _interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "b"].prototype.setMap.call(this, map);
};

/**
 * Returns the current drawn extent in the view projection
 *
 * @return {module:ol/extent~Extent} Drawn extent in the view projection.
 * @api
 */
ExtentInteraction.prototype.getExtent = function() {
  return this.extent_;
};

/**
 * Manually sets the drawn extent, using the view projection.
 *
 * @param {module:ol/extent~Extent} extent Extent
 * @api
 */
ExtentInteraction.prototype.setExtent = function(extent) {
  //Null extent means no bbox
  this.extent_ = extent ? extent : null;
  this.createOrUpdateExtentFeature_(extent);
  this.dispatchEvent(new ExtentInteractionEvent(this.extent_));
};


/* harmony default export */ __webpack_exports__["a"] = (ExtentInteraction);


/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/Kinetic
 */

/**
 * @classdesc
 * Implementation of inertial deceleration for map movement.
 *
 * @constructor
 * @param {number} decay Rate of decay (must be negative).
 * @param {number} minVelocity Minimum velocity (pixels/millisecond).
 * @param {number} delay Delay to consider to calculate the kinetic
 *     initial values (milliseconds).
 * @struct
 * @api
 */
const Kinetic = function(decay, minVelocity, delay) {

  /**
   * @private
   * @type {number}
   */
  this.decay_ = decay;

  /**
   * @private
   * @type {number}
   */
  this.minVelocity_ = minVelocity;

  /**
   * @private
   * @type {number}
   */
  this.delay_ = delay;

  /**
   * @private
   * @type {Array.<number>}
   */
  this.points_ = [];

  /**
   * @private
   * @type {number}
   */
  this.angle_ = 0;

  /**
   * @private
   * @type {number}
   */
  this.initialVelocity_ = 0;
};


/**
 * FIXME empty description for jsdoc
 */
Kinetic.prototype.begin = function() {
  this.points_.length = 0;
  this.angle_ = 0;
  this.initialVelocity_ = 0;
};


/**
 * @param {number} x X.
 * @param {number} y Y.
 */
Kinetic.prototype.update = function(x, y) {
  this.points_.push(x, y, Date.now());
};


/**
 * @return {boolean} Whether we should do kinetic animation.
 */
Kinetic.prototype.end = function() {
  if (this.points_.length < 6) {
    // at least 2 points are required (i.e. there must be at least 6 elements
    // in the array)
    return false;
  }
  const delay = Date.now() - this.delay_;
  const lastIndex = this.points_.length - 3;
  if (this.points_[lastIndex + 2] < delay) {
    // the last tracked point is too old, which means that the user stopped
    // panning before releasing the map
    return false;
  }

  // get the first point which still falls into the delay time
  let firstIndex = lastIndex - 3;
  while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
    firstIndex -= 3;
  }

  const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
  // we don't want a duration of 0 (divide by zero)
  // we also make sure the user panned for a duration of at least one frame
  // (1/60s) to compute sane displacement values
  if (duration < 1000 / 60) {
    return false;
  }

  const dx = this.points_[lastIndex] - this.points_[firstIndex];
  const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
  this.angle_ = Math.atan2(dy, dx);
  this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
  return this.initialVelocity_ > this.minVelocity_;
};


/**
 * @return {number} Total distance travelled (pixels).
 */
Kinetic.prototype.getDistance = function() {
  return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
};


/**
 * @return {number} Angle of the kinetic panning animation (radians).
 */
Kinetic.prototype.getAngle = function() {
  return this.angle_;
};
/* harmony default export */ __webpack_exports__["a"] = (Kinetic);


/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var _control_Control_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(53);
/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(47);
/* harmony import */ var _easing_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(56);
/**
 * @module ol/control/Zoom
 */








/**
 * @typedef {Object} Options
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {string} [className='ol-zoom'] CSS class name.
 * @property {string|Element} [zoomInLabel='+'] Text label to use for the zoom-in
 * button. Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string|Element} [zoomOutLabel='-'] Text label to use for the zoom-out button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
 * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
 * @property {number} [delta=1] The zoom delta applied on each click.
 * @property {Element|string} [target] Specify a target if you want the control to be
 * rendered outside of the map's viewport.
 */


/**
 * @classdesc
 * A control with 2 buttons, one for zoom in and one for zoom out.
 * This control is one of the default controls of a map. To style this control
 * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
 *
 * @constructor
 * @extends {module:ol/control/Control}
 * @param {module:ol/control/Zoom~Options=} opt_options Zoom options.
 * @api
 */
const Zoom = function(opt_options) {

  const options = opt_options ? opt_options : {};

  const className = options.className !== undefined ? options.className : 'ol-zoom';

  const delta = options.delta !== undefined ? options.delta : 1;

  const zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
  const zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2212';

  const zoomInTipLabel = options.zoomInTipLabel !== undefined ?
    options.zoomInTipLabel : 'Zoom in';
  const zoomOutTipLabel = options.zoomOutTipLabel !== undefined ?
    options.zoomOutTipLabel : 'Zoom out';

  const inElement = document.createElement('button');
  inElement.className = className + '-in';
  inElement.setAttribute('type', 'button');
  inElement.title = zoomInTipLabel;
  inElement.appendChild(
    typeof zoomInLabel === 'string' ? document.createTextNode(zoomInLabel) : zoomInLabel
  );

  Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(inElement, _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].CLICK,
    Zoom.prototype.handleClick_.bind(this, delta));

  const outElement = document.createElement('button');
  outElement.className = className + '-out';
  outElement.setAttribute('type', 'button');
  outElement.title = zoomOutTipLabel;
  outElement.appendChild(
    typeof zoomOutLabel === 'string' ? document.createTextNode(zoomOutLabel) : zoomOutLabel
  );

  Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(outElement, _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].CLICK,
    Zoom.prototype.handleClick_.bind(this, -delta));

  const cssClasses = className + ' ' + _css_js__WEBPACK_IMPORTED_MODULE_4__[/* CLASS_UNSELECTABLE */ "e"] + ' ' + _css_js__WEBPACK_IMPORTED_MODULE_4__[/* CLASS_CONTROL */ "b"];
  const element = document.createElement('div');
  element.className = cssClasses;
  element.appendChild(inElement);
  element.appendChild(outElement);

  _control_Control_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].call(this, {
    element: element,
    target: options.target
  });

  /**
   * @type {number}
   * @private
   */
  this.duration_ = options.duration !== undefined ? options.duration : 250;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Zoom, _control_Control_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]);


/**
 * @param {number} delta Zoom delta.
 * @param {MouseEvent} event The event to handle
 * @private
 */
Zoom.prototype.handleClick_ = function(delta, event) {
  event.preventDefault();
  this.zoomByDelta_(delta);
};


/**
 * @param {number} delta Zoom delta.
 * @private
 */
Zoom.prototype.zoomByDelta_ = function(delta) {
  const map = this.getMap();
  const view = map.getView();
  if (!view) {
    // the map does not have a view, so we can't act
    // upon it
    return;
  }
  const currentResolution = view.getResolution();
  if (currentResolution) {
    const newResolution = view.constrainResolution(currentResolution, delta);
    if (this.duration_ > 0) {
      if (view.getAnimating()) {
        view.cancelAnimations();
      }
      view.animate({
        resolution: newResolution,
        duration: this.duration_,
        easing: _easing_js__WEBPACK_IMPORTED_MODULE_5__[/* easeOut */ "b"]
      });
    } else {
      view.setResolution(newResolution);
    }
  }
};
/* harmony default export */ __webpack_exports__["a"] = (Zoom);


/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export render */
/* harmony import */ var _control_Control_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53);
/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47);
/* harmony import */ var _easing_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/**
 * @module ol/control/Rotate
 */









/**
 * @typedef {Object} Options
 * @property {string} [className='ol-rotate'] CSS class name.
 * @property {string|Element} [label='⇧'] Text label to use for the rotate button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
 * @property {function(module:ol/MapEvent)} [render] Function called when the control should
 * be re-rendered. This is called in a `requestAnimationFrame` callback.
 * @property {function()} [resetNorth] Function called when the control is clicked.
 * This will override the default `resetNorth`.
 * @property {Element|string} [target] Specify a target if you want the control to be
 * rendered outside of the map's viewport.
 */


/**
 * @classdesc
 * A button control to reset rotation to 0.
 * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
 * selector is added to the button when the rotation is 0.
 *
 * @constructor
 * @extends {module:ol/control/Control}
 * @param {module:ol/control/Rotate~Options=} opt_options Rotate options.
 * @api
 */
const Rotate = function(opt_options) {

  const options = opt_options ? opt_options : {};

  const className = options.className !== undefined ? options.className : 'ol-rotate';

  const label = options.label !== undefined ? options.label : '\u21E7';

  /**
   * @type {Element}
   * @private
   */
  this.label_ = null;

  if (typeof label === 'string') {
    this.label_ = document.createElement('span');
    this.label_.className = 'ol-compass';
    this.label_.textContent = label;
  } else {
    this.label_ = label;
    this.label_.classList.add('ol-compass');
  }

  const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';

  const button = document.createElement('button');
  button.className = className + '-reset';
  button.setAttribute('type', 'button');
  button.title = tipLabel;
  button.appendChild(this.label_);

  Object(_events_js__WEBPACK_IMPORTED_MODULE_3__[/* listen */ "a"])(button, _events_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].CLICK,
    Rotate.prototype.handleClick_, this);

  const cssClasses = className + ' ' + _css_js__WEBPACK_IMPORTED_MODULE_1__[/* CLASS_UNSELECTABLE */ "e"] + ' ' + _css_js__WEBPACK_IMPORTED_MODULE_1__[/* CLASS_CONTROL */ "b"];
  const element = document.createElement('div');
  element.className = cssClasses;
  element.appendChild(button);

  this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;

  _control_Control_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].call(this, {
    element: element,
    render: options.render || render,
    target: options.target
  });

  /**
   * @type {number}
   * @private
   */
  this.duration_ = options.duration !== undefined ? options.duration : 250;

  /**
   * @type {boolean}
   * @private
   */
  this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;

  /**
   * @private
   * @type {number|undefined}
   */
  this.rotation_ = undefined;

  if (this.autoHide_) {
    this.element.classList.add(_css_js__WEBPACK_IMPORTED_MODULE_1__[/* CLASS_HIDDEN */ "c"]);
  }

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_5__[/* inherits */ "c"])(Rotate, _control_Control_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);


/**
 * @param {MouseEvent} event The event to handle
 * @private
 */
Rotate.prototype.handleClick_ = function(event) {
  event.preventDefault();
  if (this.callResetNorth_ !== undefined) {
    this.callResetNorth_();
  } else {
    this.resetNorth_();
  }
};


/**
 * @private
 */
Rotate.prototype.resetNorth_ = function() {
  const map = this.getMap();
  const view = map.getView();
  if (!view) {
    // the map does not have a view, so we can't act
    // upon it
    return;
  }
  if (view.getRotation() !== undefined) {
    if (this.duration_ > 0) {
      view.animate({
        rotation: 0,
        duration: this.duration_,
        easing: _easing_js__WEBPACK_IMPORTED_MODULE_2__[/* easeOut */ "b"]
      });
    } else {
      view.setRotation(0);
    }
  }
};


/**
 * Update the rotate control element.
 * @param {module:ol/MapEvent} mapEvent Map event.
 * @this {module:ol/control/Rotate}
 * @api
 */
function render(mapEvent) {
  const frameState = mapEvent.frameState;
  if (!frameState) {
    return;
  }
  const rotation = frameState.viewState.rotation;
  if (rotation != this.rotation_) {
    const transform = 'rotate(' + rotation + 'rad)';
    if (this.autoHide_) {
      const contains = this.element.classList.contains(_css_js__WEBPACK_IMPORTED_MODULE_1__[/* CLASS_HIDDEN */ "c"]);
      if (!contains && rotation === 0) {
        this.element.classList.add(_css_js__WEBPACK_IMPORTED_MODULE_1__[/* CLASS_HIDDEN */ "c"]);
      } else if (contains && rotation !== 0) {
        this.element.classList.remove(_css_js__WEBPACK_IMPORTED_MODULE_1__[/* CLASS_HIDDEN */ "c"]);
      }
    }
    this.label_.style.msTransform = transform;
    this.label_.style.webkitTransform = transform;
    this.label_.style.transform = transform;
  }
  this.rotation_ = rotation;
}

/* harmony default export */ __webpack_exports__["a"] = (Rotate);


/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export render */
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _control_Control_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53);
/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(47);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(32);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);
/* harmony import */ var _layer_Layer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(66);
/**
 * @module ol/control/Attribution
 */










/**
 * @typedef {Object} Options
 * @property {string} [className='ol-attribution'] CSS class name.
 * @property {Element|string} [target] Specify a target if you
 * want the control to be rendered outside of the map's
 * viewport.
 * @property {boolean} [collapsible=true] Specify if attributions can
 * be collapsed. If you use an OSM source, should be set to `false` — see
 * {@link https://www.openstreetmap.org/copyright OSM Copyright} —
 * @property {boolean} [collapsed=true] Specify if attributions should
 * be collapsed at startup.
 * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
 * @property {string} [label='i'] Text label to use for the
 * collapsed attributions button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string|Element} [collapseLabel='»'] Text label to use
 * for the expanded attributions button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {function(module:ol/MapEvent)} [render] Function called when
 * the control should be re-rendered. This is called in a `requestAnimationFrame`
 * callback.
 */


/**
 * @classdesc
 * Control to show all the attributions associated with the layer sources
 * in the map. This control is one of the default controls included in maps.
 * By default it will show in the bottom right portion of the map, but this can
 * be changed by using a css selector for `.ol-attribution`.
 *
 * @constructor
 * @extends {module:ol/control/Control}
 * @param {module:ol/control/Attribution~Options=} opt_options Attribution options.
 * @api
 */
const Attribution = function(opt_options) {

  const options = opt_options ? opt_options : {};

  /**
   * @private
   * @type {Element}
   */
  this.ulElement_ = document.createElement('UL');

  /**
   * @private
   * @type {boolean}
   */
  this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;

  /**
   * @private
   * @type {boolean}
   */
  this.collapsible_ = options.collapsible !== undefined ?
    options.collapsible : true;

  if (!this.collapsible_) {
    this.collapsed_ = false;
  }

  const className = options.className !== undefined ? options.className : 'ol-attribution';

  const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';

  const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00BB';

  if (typeof collapseLabel === 'string') {
    /**
     * @private
     * @type {Element}
     */
    this.collapseLabel_ = document.createElement('span');
    this.collapseLabel_.textContent = collapseLabel;
  } else {
    this.collapseLabel_ = collapseLabel;
  }

  const label = options.label !== undefined ? options.label : 'i';

  if (typeof label === 'string') {
    /**
     * @private
     * @type {Element}
     */
    this.label_ = document.createElement('span');
    this.label_.textContent = label;
  } else {
    this.label_ = label;
  }


  const activeLabel = (this.collapsible_ && !this.collapsed_) ?
    this.collapseLabel_ : this.label_;
  const button = document.createElement('button');
  button.setAttribute('type', 'button');
  button.title = tipLabel;
  button.appendChild(activeLabel);

  Object(_events_js__WEBPACK_IMPORTED_MODULE_5__[/* listen */ "a"])(button, _events_EventType_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].CLICK, this.handleClick_, this);

  const cssClasses = className + ' ' + _css_js__WEBPACK_IMPORTED_MODULE_3__[/* CLASS_UNSELECTABLE */ "e"] + ' ' + _css_js__WEBPACK_IMPORTED_MODULE_3__[/* CLASS_CONTROL */ "b"] +
      (this.collapsed_ && this.collapsible_ ? ' ' + _css_js__WEBPACK_IMPORTED_MODULE_3__[/* CLASS_COLLAPSED */ "a"] : '') +
      (this.collapsible_ ? '' : ' ol-uncollapsible');
  const element = document.createElement('div');
  element.className = cssClasses;
  element.appendChild(this.ulElement_);
  element.appendChild(button);

  _control_Control_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].call(this, {
    element: element,
    render: options.render || render,
    target: options.target
  });

  /**
   * A list of currently rendered resolutions.
   * @type {Array.<string>}
   * @private
   */
  this.renderedAttributions_ = [];

  /**
   * @private
   * @type {boolean}
   */
  this.renderedVisible_ = true;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(Attribution, _control_Control_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);


/**
 * Get a list of visible attributions.
 * @param {module:ol/PluggableMap~FrameState} frameState Frame state.
 * @return {Array.<string>} Attributions.
 * @private
 */
Attribution.prototype.getSourceAttributions_ = function(frameState) {
  /**
   * Used to determine if an attribution already exists.
   * @type {!Object.<string, boolean>}
   */
  const lookup = {};

  /**
   * A list of visible attributions.
   * @type {Array.<string>}
   */
  const visibleAttributions = [];

  const layerStatesArray = frameState.layerStatesArray;
  const resolution = frameState.viewState.resolution;
  for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
    const layerState = layerStatesArray[i];
    if (!Object(_layer_Layer_js__WEBPACK_IMPORTED_MODULE_7__[/* visibleAtResolution */ "b"])(layerState, resolution)) {
      continue;
    }

    const source = layerState.layer.getSource();
    if (!source) {
      continue;
    }

    const attributionGetter = source.getAttributions();
    if (!attributionGetter) {
      continue;
    }

    const attributions = attributionGetter(frameState);
    if (!attributions) {
      continue;
    }

    if (Array.isArray(attributions)) {
      for (let j = 0, jj = attributions.length; j < jj; ++j) {
        if (!(attributions[j] in lookup)) {
          visibleAttributions.push(attributions[j]);
          lookup[attributions[j]] = true;
        }
      }
    } else {
      if (!(attributions in lookup)) {
        visibleAttributions.push(attributions);
        lookup[attributions] = true;
      }
    }
  }
  return visibleAttributions;
};


/**
 * Update the attribution element.
 * @param {module:ol/MapEvent} mapEvent Map event.
 * @this {module:ol/control/Attribution}
 * @api
 */
function render(mapEvent) {
  this.updateElement_(mapEvent.frameState);
}


/**
 * @private
 * @param {?module:ol/PluggableMap~FrameState} frameState Frame state.
 */
Attribution.prototype.updateElement_ = function(frameState) {
  if (!frameState) {
    if (this.renderedVisible_) {
      this.element.style.display = 'none';
      this.renderedVisible_ = false;
    }
    return;
  }

  const attributions = this.getSourceAttributions_(frameState);

  const visible = attributions.length > 0;
  if (this.renderedVisible_ != visible) {
    this.element.style.display = visible ? '' : 'none';
    this.renderedVisible_ = visible;
  }

  if (Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[/* equals */ "b"])(attributions, this.renderedAttributions_)) {
    return;
  }

  Object(_dom_js__WEBPACK_IMPORTED_MODULE_4__[/* removeChildren */ "d"])(this.ulElement_);

  // append the attributions
  for (let i = 0, ii = attributions.length; i < ii; ++i) {
    const element = document.createElement('LI');
    element.innerHTML = attributions[i];
    this.ulElement_.appendChild(element);
  }

  this.renderedAttributions_ = attributions;
};


/**
 * @param {MouseEvent} event The event to handle
 * @private
 */
Attribution.prototype.handleClick_ = function(event) {
  event.preventDefault();
  this.handleToggle_();
};


/**
 * @private
 */
Attribution.prototype.handleToggle_ = function() {
  this.element.classList.toggle(_css_js__WEBPACK_IMPORTED_MODULE_3__[/* CLASS_COLLAPSED */ "a"]);
  if (this.collapsed_) {
    Object(_dom_js__WEBPACK_IMPORTED_MODULE_4__[/* replaceNode */ "f"])(this.collapseLabel_, this.label_);
  } else {
    Object(_dom_js__WEBPACK_IMPORTED_MODULE_4__[/* replaceNode */ "f"])(this.label_, this.collapseLabel_);
  }
  this.collapsed_ = !this.collapsed_;
};


/**
 * Return `true` if the attribution is collapsible, `false` otherwise.
 * @return {boolean} True if the widget is collapsible.
 * @api
 */
Attribution.prototype.getCollapsible = function() {
  return this.collapsible_;
};


/**
 * Set whether the attribution should be collapsible.
 * @param {boolean} collapsible True if the widget is collapsible.
 * @api
 */
Attribution.prototype.setCollapsible = function(collapsible) {
  if (this.collapsible_ === collapsible) {
    return;
  }
  this.collapsible_ = collapsible;
  this.element.classList.toggle('ol-uncollapsible');
  if (!collapsible && this.collapsed_) {
    this.handleToggle_();
  }
};


/**
 * Collapse or expand the attribution according to the passed parameter. Will
 * not do anything if the attribution isn't collapsible or if the current
 * collapsed state is already the one requested.
 * @param {boolean} collapsed True if the widget is collapsed.
 * @api
 */
Attribution.prototype.setCollapsed = function(collapsed) {
  if (!this.collapsible_ || this.collapsed_ === collapsed) {
    return;
  }
  this.handleToggle_();
};


/**
 * Return `true` when the attribution is currently collapsed or `false`
 * otherwise.
 * @return {boolean} True if the widget is collapsed.
 * @api
 */
Attribution.prototype.getCollapsed = function() {
  return this.collapsed_;
};
/* harmony default export */ __webpack_exports__["a"] = (Attribution);


/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return defaults; });
/* harmony import */ var _Collection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51);
/* harmony import */ var _Attribution_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(219);
/* harmony import */ var _Rotate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(218);
/* harmony import */ var _Zoom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(217);
/**
 * @module ol/control/util
 */






/**
 * @typedef {Object} DefaultsOptions
 * @property {boolean} [attribution=true] Include
 * {@link module:ol/control/Attribution~Attribution}.
 * @property {module:ol/control/Attribution~Options} [attributionOptions]
 * Options for {@link module:ol/control/Attribution~Attribution}.
 * @property {boolean} [rotate=true] Include
 * {@link module:ol/control/Rotate~Rotate}.
 * @property {module:ol/control/Rotate~Options} [rotateOptions] Options
 * for {@link module:ol/control/Rotate~Rotate}.
 * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
 * @property {module:ol/control/Zoom~Options} [zoomOptions] Options for
 * {@link module:ol/control/Zoom~Zoom}.
 * @api
 */


/**
 * Set of controls included in maps by default. Unless configured otherwise,
 * this returns a collection containing an instance of each of the following
 * controls:
 * * {@link module:ol/control/Zoom~Zoom}
 * * {@link module:ol/control/Rotate~Rotate}
 * * {@link module:ol/control/Attribution~Attribution}
 *
 * @param {module:ol/control/util~DefaultsOptions=} opt_options
 * Defaults options.
 * @return {module:ol/Collection.<module:ol/control/Control>}
 * Controls.
 * @function module:ol/control.defaults
 * @api
 */
function defaults(opt_options) {

  const options = opt_options ? opt_options : {};

  const controls = new _Collection_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "b"]();

  const zoomControl = options.zoom !== undefined ? options.zoom : true;
  if (zoomControl) {
    controls.push(new _Zoom_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](options.zoomOptions));
  }

  const rotateControl = options.rotate !== undefined ? options.rotate : true;
  if (rotateControl) {
    controls.push(new _Rotate_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](options.rotateOptions));
  }

  const attributionControl = options.attribution !== undefined ?
    options.attribution : true;
  if (attributionControl) {
    controls.push(new _Attribution_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](options.attributionOptions));
  }

  return controls;
}


/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _has_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48);
/* harmony import */ var _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40);
/* harmony import */ var _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(72);
/* harmony import */ var _pointer_EventType_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(102);
/* harmony import */ var _pointer_PointerEventHandler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(200);
/**
 * @module ol/MapBrowserEventHandler
 */









/**
 * @param {module:ol/PluggableMap} map The map with the viewport to
 * listen to events on.
 * @param {number=} moveTolerance The minimal distance the pointer must travel
 * to trigger a move.
 * @constructor
 * @extends {module:ol/events/EventTarget}
 */
const MapBrowserEventHandler = function(map, moveTolerance) {

  _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].call(this);

  /**
   * This is the element that we will listen to the real events on.
   * @type {module:ol/PluggableMap}
   * @private
   */
  this.map_ = map;

  /**
   * @type {number}
   * @private
   */
  this.clickTimeoutId_ = 0;

  /**
   * @type {boolean}
   * @private
   */
  this.dragging_ = false;

  /**
   * @type {!Array.<module:ol/events~EventsKey>}
   * @private
   */
  this.dragListenerKeys_ = [];

  /**
   * @type {number}
   * @private
   */
  this.moveTolerance_ = moveTolerance ?
    moveTolerance * _has_js__WEBPACK_IMPORTED_MODULE_1__[/* DEVICE_PIXEL_RATIO */ "b"] : _has_js__WEBPACK_IMPORTED_MODULE_1__[/* DEVICE_PIXEL_RATIO */ "b"];

  /**
   * The most recent "down" type event (or null if none have occurred).
   * Set on pointerdown.
   * @type {module:ol/pointer/PointerEvent}
   * @private
   */
  this.down_ = null;

  const element = this.map_.getViewport();

  /**
   * @type {number}
   * @private
   */
  this.activePointers_ = 0;

  /**
   * @type {!Object.<number, boolean>}
   * @private
   */
  this.trackedTouches_ = {};

  /**
   * Event handler which generates pointer events for
   * the viewport element.
   *
   * @type {module:ol/pointer/PointerEventHandler}
   * @private
   */
  this.pointerEventHandler_ = new _pointer_PointerEventHandler_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"](element);

  /**
   * Event handler which generates pointer events for
   * the document (used when dragging).
   *
   * @type {module:ol/pointer/PointerEventHandler}
   * @private
   */
  this.documentPointerEventHandler_ = null;

  /**
   * @type {?module:ol/events~EventsKey}
   * @private
   */
  this.pointerdownListenerKey_ = Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(this.pointerEventHandler_,
    _pointer_EventType_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].POINTERDOWN,
    this.handlePointerDown_, this);

  /**
   * @type {?module:ol/events~EventsKey}
   * @private
   */
  this.relayedListenerKey_ = Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(this.pointerEventHandler_,
    _pointer_EventType_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].POINTERMOVE,
    this.relayEvent_, this);

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MapBrowserEventHandler, _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]);


/**
 * @param {module:ol/pointer/PointerEvent} pointerEvent Pointer
 * event.
 * @private
 */
MapBrowserEventHandler.prototype.emulateClick_ = function(pointerEvent) {
  let newEvent = new _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](
    _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].CLICK, this.map_, pointerEvent);
  this.dispatchEvent(newEvent);
  if (this.clickTimeoutId_ !== 0) {
    // double-click
    clearTimeout(this.clickTimeoutId_);
    this.clickTimeoutId_ = 0;
    newEvent = new _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](
      _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].DBLCLICK, this.map_, pointerEvent);
    this.dispatchEvent(newEvent);
  } else {
    // click
    this.clickTimeoutId_ = setTimeout(function() {
      this.clickTimeoutId_ = 0;
      const newEvent = new _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](
        _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].SINGLECLICK, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);
    }.bind(this), 250);
  }
};


/**
 * Keeps track on how many pointers are currently active.
 *
 * @param {module:ol/pointer/PointerEvent} pointerEvent Pointer
 * event.
 * @private
 */
MapBrowserEventHandler.prototype.updateActivePointers_ = function(pointerEvent) {
  const event = pointerEvent;

  if (event.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERUP ||
      event.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERCANCEL) {
    delete this.trackedTouches_[event.pointerId];
  } else if (event.type == _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERDOWN) {
    this.trackedTouches_[event.pointerId] = true;
  }
  this.activePointers_ = Object.keys(this.trackedTouches_).length;
};


/**
 * @param {module:ol/pointer/PointerEvent} pointerEvent Pointer
 * event.
 * @private
 */
MapBrowserEventHandler.prototype.handlePointerUp_ = function(pointerEvent) {
  this.updateActivePointers_(pointerEvent);
  const newEvent = new _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](
    _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERUP, this.map_, pointerEvent);
  this.dispatchEvent(newEvent);

  // We emulate click events on left mouse button click, touch contact, and pen
  // contact. isMouseActionButton returns true in these cases (evt.button is set
  // to 0).
  // See http://www.w3.org/TR/pointerevents/#button-states
  // We only fire click, singleclick, and doubleclick if nobody has called
  // event.stopPropagation() or event.preventDefault().
  if (!newEvent.propagationStopped && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {
    this.emulateClick_(this.down_);
  }

  if (this.activePointers_ === 0) {
    this.dragListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* unlistenByKey */ "e"]);
    this.dragListenerKeys_.length = 0;
    this.dragging_ = false;
    this.down_ = null;
    this.documentPointerEventHandler_.dispose();
    this.documentPointerEventHandler_ = null;
  }
};


/**
 * @param {module:ol/pointer/PointerEvent} pointerEvent Pointer
 * event.
 * @return {boolean} If the left mouse button was pressed.
 * @private
 */
MapBrowserEventHandler.prototype.isMouseActionButton_ = function(pointerEvent) {
  return pointerEvent.button === 0;
};


/**
 * @param {module:ol/pointer/PointerEvent} pointerEvent Pointer
 * event.
 * @private
 */
MapBrowserEventHandler.prototype.handlePointerDown_ = function(pointerEvent) {
  this.updateActivePointers_(pointerEvent);
  const newEvent = new _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](
    _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERDOWN, this.map_, pointerEvent);
  this.dispatchEvent(newEvent);

  this.down_ = pointerEvent;

  if (this.dragListenerKeys_.length === 0) {
    /* Set up a pointer event handler on the `document`,
     * which is required when the pointer is moved outside
     * the viewport when dragging.
     */
    this.documentPointerEventHandler_ =
        new _pointer_PointerEventHandler_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"](document);

    this.dragListenerKeys_.push(
      Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(this.documentPointerEventHandler_,
        _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERMOVE,
        this.handlePointerMove_, this),
      Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(this.documentPointerEventHandler_,
        _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERUP,
        this.handlePointerUp_, this),
      /* Note that the listener for `pointercancel is set up on
       * `pointerEventHandler_` and not `documentPointerEventHandler_` like
       * the `pointerup` and `pointermove` listeners.
       *
       * The reason for this is the following: `TouchSource.vacuumTouches_()`
       * issues `pointercancel` events, when there was no `touchend` for a
       * `touchstart`. Now, let's say a first `touchstart` is registered on
       * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
       * But `documentPointerEventHandler_` doesn't know about the first
       * `touchstart`. If there is no `touchend` for the `touchstart`, we can
       * only receive a `touchcancel` from `pointerEventHandler_`, because it is
       * only registered there.
       */
      Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* listen */ "a"])(this.pointerEventHandler_,
        _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERCANCEL,
        this.handlePointerUp_, this)
    );
  }
};


/**
 * @param {module:ol/pointer/PointerEvent} pointerEvent Pointer
 * event.
 * @private
 */
MapBrowserEventHandler.prototype.handlePointerMove_ = function(pointerEvent) {
  // Between pointerdown and pointerup, pointermove events are triggered.
  // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
  // moved a significant distance.
  if (this.isMoving_(pointerEvent)) {
    this.dragging_ = true;
    const newEvent = new _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](
      _MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].POINTERDRAG, this.map_, pointerEvent,
      this.dragging_);
    this.dispatchEvent(newEvent);
  }

  // Some native android browser triggers mousemove events during small period
  // of time. See: https://code.google.com/p/android/issues/detail?id=5491 or
  // https://code.google.com/p/android/issues/detail?id=19827
  // ex: Galaxy Tab P3110 + Android 4.1.1
  pointerEvent.preventDefault();
};


/**
 * Wrap and relay a pointer event.  Note that this requires that the type
 * string for the MapBrowserPointerEvent matches the PointerEvent type.
 * @param {module:ol/pointer/PointerEvent} pointerEvent Pointer
 * event.
 * @private
 */
MapBrowserEventHandler.prototype.relayEvent_ = function(pointerEvent) {
  const dragging = !!(this.down_ && this.isMoving_(pointerEvent));
  this.dispatchEvent(new _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](
    pointerEvent.type, this.map_, pointerEvent, dragging));
};


/**
 * @param {module:ol/pointer/PointerEvent} pointerEvent Pointer
 * event.
 * @return {boolean} Is moving.
 * @private
 */
MapBrowserEventHandler.prototype.isMoving_ = function(pointerEvent) {
  return this.dragging_ ||
      Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ ||
      Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;
};


/**
 * @inheritDoc
 */
MapBrowserEventHandler.prototype.disposeInternal = function() {
  if (this.relayedListenerKey_) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* unlistenByKey */ "e"])(this.relayedListenerKey_);
    this.relayedListenerKey_ = null;
  }
  if (this.pointerdownListenerKey_) {
    Object(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* unlistenByKey */ "e"])(this.pointerdownListenerKey_);
    this.pointerdownListenerKey_ = null;
  }

  this.dragListenerKeys_.forEach(_events_js__WEBPACK_IMPORTED_MODULE_4__[/* unlistenByKey */ "e"]);
  this.dragListenerKeys_.length = 0;

  if (this.documentPointerEventHandler_) {
    this.documentPointerEventHandler_.dispose();
    this.documentPointerEventHandler_ = null;
  }
  if (this.pointerEventHandler_) {
    this.pointerEventHandler_.dispose();
    this.pointerEventHandler_ = null;
  }
  _events_EventTarget_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].prototype.disposeInternal.call(this);
};
/* harmony default export */ __webpack_exports__["a"] = (MapBrowserEventHandler);


/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export render */
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(31);
/* harmony import */ var _control_Control_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(53);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7);
/**
 * @module ol/control/MousePosition
 */









/**
 * @type {string}
 */
const PROJECTION = 'projection';

/**
 * @type {string}
 */
const COORDINATE_FORMAT = 'coordinateFormat';


/**
 * @typedef {Object} Options
 * @property {string} [className='ol-mouse-position'] CSS class name.
 * @property {module:ol/coordinate~CoordinateFormat} [coordinateFormat] Coordinate format.
 * @property {module:ol/proj~ProjectionLike} projection Projection.
 * @property {function(module:ol/MapEvent)} [render] Function called when the
 * control should be re-rendered. This is called in a `requestAnimationFrame`
 * callback.
 * @property {Element|string} [target] Specify a target if you want the
 * control to be rendered outside of the map's viewport.
 * @property {string} [undefinedHTML='&nbsp;'] Markup to show when coordinates are not
 * available (e.g. when the pointer leaves the map viewport).  By default, the last position
 * will be replaced with `'&nbsp;'` when the pointer leaves the viewport.  To
 * retain the last rendered position, set this option to something falsey (like an empty
 * string `''`).
 */


/**
 * @classdesc
 * A control to show the 2D coordinates of the mouse cursor. By default, these
 * are in the view projection, but can be in any supported projection.
 * By default the control is shown in the top right corner of the map, but this
 * can be changed by using the css selector `.ol-mouse-position`.
 *
 * @constructor
 * @extends {module:ol/control/Control}
 * @param {module:ol/control/MousePosition~Options=} opt_options Mouse position
 *     options.
 * @api
 */
const MousePosition = function(opt_options) {

  const options = opt_options ? opt_options : {};

  const element = document.createElement('DIV');
  element.className = options.className !== undefined ? options.className : 'ol-mouse-position';

  _control_Control_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].call(this, {
    element: element,
    render: options.render || render,
    target: options.target
  });

  Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(this,
    Object(_Object_js__WEBPACK_IMPORTED_MODULE_3__[/* getChangeEventType */ "b"])(PROJECTION),
    this.handleProjectionChanged_, this);

  if (options.coordinateFormat) {
    this.setCoordinateFormat(options.coordinateFormat);
  }
  if (options.projection) {
    this.setProjection(options.projection);
  }

  /**
   * @private
   * @type {string}
   */
  this.undefinedHTML_ = 'undefinedHTML' in options ? options.undefinedHTML : '&nbsp;';

  /**
   * @private
   * @type {boolean}
   */
  this.renderOnMouseOut_ = !!this.undefinedHTML_;

  /**
   * @private
   * @type {string}
   */
  this.renderedHTML_ = element.innerHTML;

  /**
   * @private
   * @type {module:ol/proj/Projection}
   */
  this.mapProjection_ = null;

  /**
   * @private
   * @type {?module:ol/proj~TransformFunction}
   */
  this.transform_ = null;

  /**
   * @private
   * @type {module:ol~Pixel}
   */
  this.lastMouseMovePixel_ = null;

};

Object(_util_js__WEBPACK_IMPORTED_MODULE_0__[/* inherits */ "c"])(MousePosition, _control_Control_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);


/**
 * Update the mouseposition element.
 * @param {module:ol/MapEvent} mapEvent Map event.
 * @this {module:ol/control/MousePosition}
 * @api
 */
function render(mapEvent) {
  const frameState = mapEvent.frameState;
  if (!frameState) {
    this.mapProjection_ = null;
  } else {
    if (this.mapProjection_ != frameState.viewState.projection) {
      this.mapProjection_ = frameState.viewState.projection;
      this.transform_ = null;
    }
  }
  this.updateHTML_(this.lastMouseMovePixel_);
}


/**
 * @private
 */
MousePosition.prototype.handleProjectionChanged_ = function() {
  this.transform_ = null;
};


/**
 * Return the coordinate format type used to render the current position or
 * undefined.
 * @return {module:ol/coordinate~CoordinateFormat|undefined} The format to render the current
 *     position in.
 * @observable
 * @api
 */
MousePosition.prototype.getCoordinateFormat = function() {
  return (
    /** @type {module:ol/coordinate~CoordinateFormat|undefined} */ (this.get(COORDINATE_FORMAT))
  );
};


/**
 * Return the projection that is used to report the mouse position.
 * @return {module:ol/proj/Projection|undefined} The projection to report mouse
 *     position in.
 * @observable
 * @api
 */
MousePosition.prototype.getProjection = function() {
  return (
    /** @type {module:ol/proj/Projection|undefined} */ (this.get(PROJECTION))
  );
};


/**
 * @param {Event} event Browser event.
 * @protected
 */
MousePosition.prototype.handleMouseMove = function(event) {
  const map = this.getMap();
  this.lastMouseMovePixel_ = map.getEventPixel(event);
  this.updateHTML_(this.lastMouseMovePixel_);
};


/**
 * @param {Event} event Browser event.
 * @protected
 */
MousePosition.prototype.handleMouseOut = function(event) {
  this.updateHTML_(null);
  this.lastMouseMovePixel_ = null;
};


/**
 * @inheritDoc
 * @api
 */
MousePosition.prototype.setMap = function(map) {
  _control_Control_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].prototype.setMap.call(this, map);
  if (map) {
    const viewport = map.getViewport();
    this.listenerKeys.push(
      Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(viewport, _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].MOUSEMOVE, this.handleMouseMove, this)
    );
    if (this.renderOnMouseOut_) {
      this.listenerKeys.push(
        Object(_events_js__WEBPACK_IMPORTED_MODULE_1__[/* listen */ "a"])(viewport, _events_EventType_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].MOUSEOUT, this.handleMouseOut, this)
      );
    }
  }
};


/**
 * Set the coordinate format type used to render the current position.
 * @param {module:ol/coordinate~CoordinateFormat} format The format to render the current
 *     position in.
 * @observable
 * @api
 */
MousePosition.prototype.setCoordinateFormat = function(format) {
  this.set(COORDINATE_FORMAT, format);
};


/**
 * Set the projection that is used to report the mouse position.
 * @param {module:ol/proj~ProjectionLike} projection The projection to report mouse
 *     position in.
 * @observable
 * @api
 */
MousePosition.prototype.setProjection = function(projection) {
  this.set(PROJECTION, Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* get */ "h"])(projection));
};


/**
 * @param {?module:ol~Pixel} pixel Pixel.
 * @private
 */
MousePosition.prototype.updateHTML_ = function(pixel) {
  let html = this.undefinedHTML_;
  if (pixel && this.mapProjection_) {
    if (!this.transform_) {
      const projection = this.getProjection();
      if (projection) {
        this.transform_ = Object(_proj_js__WEBPACK_IMPORTED_MODULE_5__[/* getTransformFromProjections */ "k"])(
          this.mapProjection_, projection);
      } else {
        this.transform_ = _proj_js__WEBPACK_IMPORTED_MODULE_5__[/* identityTransform */ "l"];
      }
    }
    const map = this.getMap();
    const coordinate = map.getCoordinateFromPixel(pixel);
    if (coordinate) {
      this.transform_(coordinate, coordinate);
      const coordinateFormat = this.getCoordinateFormat();
      if (coordinateFormat) {
        html = coordinateFormat(coordinate);
      } else {
        html = coordinate.toString();
      }
    }
  }
  if (!this.renderedHTML_ || html !== this.renderedHTML_) {
    this.element.innerHTML = html;
    this.renderedHTML_ = html;
  }
};


/* harmony default export */ __webpack_exports__["a"] = (MousePosition);


/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return toContext; });
/* harmony import */ var _has_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48);
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);
/* harmony import */ var _render_canvas_Immediate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(191);
/**
 * @module ol/render
 */





/**
 * @typedef {Object} State
 * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.
 * @property {module:ol/Feature|module:ol/render/Feature} feature
 * @property {module:ol/geom/SimpleGeometry} geometry
 * @property {number} pixelRatio Pixel ratio used by the layer renderer.
 * @property {number} resolution Resolution that the render batch was created and optimized for.
 * This is not the view's resolution that is being rendered.
 * @property {number} rotation Rotation of the rendered layer in radians.
 */


/**
 * A function to be used when sorting features before rendering.
 * It takes two instances of {@link module:ol/Feature} or
 * {@link module:ol/render/Feature} and returns a `{number}`.
 *
 * @typedef {function((module:ol/Feature|module:ol/render/Feature),
 *           (module:ol/Feature|module:ol/render/Feature)):number} OrderFunction
 */


/**
 * @typedef {Object} ToContextOptions
 * @property {module:ol/size~Size} [size] Desired size of the canvas in css
 * pixels. When provided, both canvas and css size will be set according to the
 * `pixelRatio`. If not provided, the current canvas and css sizes will not be
 * altered.
 * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas
 * pixel to css pixel ratio) for the canvas.
 */


/**
 * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries
 * to the context's canvas.
 *
 * The units for geometry coordinates are css pixels relative to the top left
 * corner of the canvas element.
 * ```js
 * import {toContext} from 'ol/render';
 * import Fill from 'ol/style/Fill';
 * import Polygon from 'ol/geom/Polygon';
 *
 * var canvas = document.createElement('canvas');
 * var render = toContext(canvas.getContext('2d'),
 *     { size: [100, 100] });
 * render.setFillStrokeStyle(new Fill({ color: blue }));
 * render.drawPolygon(
 *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));
 * ```
 *
 * @param {CanvasRenderingContext2D} context Canvas context.
 * @param {module:ol/render~ToContextOptions=} opt_options Options.
 * @return {module:ol/render/canvas/Immediate} Canvas Immediate.
 * @api
 */
function toContext(context, opt_options) {
  const canvas = context.canvas;
  const options = opt_options ? opt_options : {};
  const pixelRatio = options.pixelRatio || _has_js__WEBPACK_IMPORTED_MODULE_0__[/* DEVICE_PIXEL_RATIO */ "b"];
  const size = options.size;
  if (size) {
    canvas.width = size[0] * pixelRatio;
    canvas.height = size[1] * pixelRatio;
    canvas.style.width = size[0] + 'px';
    canvas.style.height = size[1] + 'px';
  }
  const extent = [0, 0, canvas.width, canvas.height];
  const transform = Object(_transform_js__WEBPACK_IMPORTED_MODULE_1__[/* scale */ "h"])(Object(_transform_js__WEBPACK_IMPORTED_MODULE_1__[/* create */ "c"])(), pixelRatio, pixelRatio);
  return new _render_canvas_Immediate_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](context, pixelRatio, extent, transform, 0);
}


/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _AssertionError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _Collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51);
/* harmony import */ var _Disposable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(123);
/* harmony import */ var _Feature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(23);
/* harmony import */ var _Geolocation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(155);
/* harmony import */ var _Graticule_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(180);
/* harmony import */ var _Image_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(138);
/* harmony import */ var _ImageBase_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(124);
/* harmony import */ var _ImageCanvas_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(157);
/* harmony import */ var _ImageTile_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(161);
/* harmony import */ var _Kinetic_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(216);
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(5);
/* harmony import */ var _MapBrowserEvent_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(173);
/* harmony import */ var _MapBrowserEventHandler_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(221);
/* harmony import */ var _MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(92);
/* harmony import */ var _MapEvent_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(133);
/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(31);
/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(108);
/* harmony import */ var _Overlay_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(88);
/* harmony import */ var _PluggableMap_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(166);
/* harmony import */ var _Tile_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(69);
/* harmony import */ var _TileCache_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(185);
/* harmony import */ var _TileQueue_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(186);
/* harmony import */ var _TileRange_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(130);
/* harmony import */ var _VectorImageTile_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(196);
/* harmony import */ var _VectorTile_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(210);
/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(4);
/* harmony import */ var _WebGLMap_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(136);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(1);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _util_js__WEBPACK_IMPORTED_MODULE_28__["c"]; });

/**
 * @module ol
 */
































/**
 * An array with two elements, representing a pixel. The first element is the
 * x-coordinate, the second the y-coordinate of the pixel.
 * @typedef {Array.<number>} Pixel
 * @api
 */


/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21);
/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/**
 * @module ol/reproj/Triangulation
 */





/**
 * Single triangle; consists of 3 source points and 3 target points.
 * @typedef {Object} Triangle
 * @property {Array.<module:ol/coordinate~Coordinate>} source
 * @property {Array.<module:ol/coordinate~Coordinate>} target
 */


/**
 * Maximum number of subdivision steps during raster reprojection triangulation.
 * Prevents high memory usage and large number of proj4 calls (for certain
 * transformations and areas). At most `2*(2^this)` triangles are created for
 * each triangulated extent (tile/image).
 * @type {number}
 */
const MAX_SUBDIVISION = 10;


/**
 * Maximum allowed size of triangle relative to world width. When transforming
 * corners of world extent between certain projections, the resulting
 * triangulation seems to have zero error and no subdivision is performed. If
 * the triangle width is more than this (relative to world width; 0-1),
 * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
 * @type {number}
 */
const MAX_TRIANGLE_WIDTH = 0.25;


/**
 * @classdesc
 * Class containing triangulation of the given target extent.
 * Used for determining source data and the reprojection itself.
 *
 * @param {module:ol/proj/Projection} sourceProj Source projection.
 * @param {module:ol/proj/Projection} targetProj Target projection.
 * @param {module:ol/extent~Extent} targetExtent Target extent to triangulate.
 * @param {module:ol/extent~Extent} maxSourceExtent Maximal source extent that can be used.
 * @param {number} errorThreshold Acceptable error (in source units).
 * @constructor
 */
const Triangulation = function(sourceProj, targetProj, targetExtent,
  maxSourceExtent, errorThreshold) {

  /**
   * @type {module:ol/proj/Projection}
   * @private
   */
  this.sourceProj_ = sourceProj;

  /**
   * @type {module:ol/proj/Projection}
   * @private
   */
  this.targetProj_ = targetProj;

  /** @type {!Object.<string, module:ol/coordinate~Coordinate>} */
  let transformInvCache = {};
  const transformInv = Object(_proj_js__WEBPACK_IMPORTED_MODULE_2__[/* getTransform */ "j"])(this.targetProj_, this.sourceProj_);

  /**
   * @param {module:ol/coordinate~Coordinate} c A coordinate.
   * @return {module:ol/coordinate~Coordinate} Transformed coordinate.
   * @private
   */
  this.transformInv_ = function(c) {
    const key = c[0] + '/' + c[1];
    if (!transformInvCache[key]) {
      transformInvCache[key] = transformInv(c);
    }
    return transformInvCache[key];
  };

  /**
   * @type {module:ol/extent~Extent}
   * @private
   */
  this.maxSourceExtent_ = maxSourceExtent;

  /**
   * @type {number}
   * @private
   */
  this.errorThresholdSquared_ = errorThreshold * errorThreshold;

  /**
   * @type {Array.<module:ol/reproj/Triangulation~Triangle>}
   * @private
   */
  this.triangles_ = [];

  /**
   * Indicates that the triangulation crosses edge of the source projection.
   * @type {boolean}
   * @private
   */
  this.wrapsXInSource_ = false;

  /**
   * @type {boolean}
   * @private
   */
  this.canWrapXInSource_ = this.sourceProj_.canWrapX() &&
      !!maxSourceExtent &&
      !!this.sourceProj_.getExtent() &&
      (Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getWidth */ "E"])(maxSourceExtent) == Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getWidth */ "E"])(this.sourceProj_.getExtent()));

  /**
   * @type {?number}
   * @private
   */
  this.sourceWorldWidth_ = this.sourceProj_.getExtent() ?
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getWidth */ "E"])(this.sourceProj_.getExtent()) : null;

  /**
   * @type {?number}
   * @private
   */
  this.targetWorldWidth_ = this.targetProj_.getExtent() ?
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getWidth */ "E"])(this.targetProj_.getExtent()) : null;

  const destinationTopLeft = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getTopLeft */ "C"])(targetExtent);
  const destinationTopRight = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getTopRight */ "D"])(targetExtent);
  const destinationBottomRight = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getBottomRight */ "w"])(targetExtent);
  const destinationBottomLeft = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getBottomLeft */ "v"])(targetExtent);
  const sourceTopLeft = this.transformInv_(destinationTopLeft);
  const sourceTopRight = this.transformInv_(destinationTopRight);
  const sourceBottomRight = this.transformInv_(destinationBottomRight);
  const sourceBottomLeft = this.transformInv_(destinationBottomLeft);

  this.addQuad_(
    destinationTopLeft, destinationTopRight,
    destinationBottomRight, destinationBottomLeft,
    sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft,
    MAX_SUBDIVISION);

  if (this.wrapsXInSource_) {
    let leftBound = Infinity;
    this.triangles_.forEach(function(triangle, i, arr) {
      leftBound = Math.min(leftBound,
        triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
    });

    // Shift triangles to be as close to `leftBound` as possible
    // (if the distance is more than `worldWidth / 2` it can be closer.
    this.triangles_.forEach(function(triangle) {
      if (Math.max(triangle.source[0][0], triangle.source[1][0],
        triangle.source[2][0]) - leftBound > this.sourceWorldWidth_ / 2) {
        const newTriangle = [[triangle.source[0][0], triangle.source[0][1]],
          [triangle.source[1][0], triangle.source[1][1]],
          [triangle.source[2][0], triangle.source[2][1]]];
        if ((newTriangle[0][0] - leftBound) > this.sourceWorldWidth_ / 2) {
          newTriangle[0][0] -= this.sourceWorldWidth_;
        }
        if ((newTriangle[1][0] - leftBound) > this.sourceWorldWidth_ / 2) {
          newTriangle[1][0] -= this.sourceWorldWidth_;
        }
        if ((newTriangle[2][0] - leftBound) > this.sourceWorldWidth_ / 2) {
          newTriangle[2][0] -= this.sourceWorldWidth_;
        }

        // Rarely (if the extent contains both the dateline and prime meridian)
        // the shift can in turn break some triangles.
        // Detect this here and don't shift in such cases.
        const minX = Math.min(
          newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
        const maxX = Math.max(
          newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
        if ((maxX - minX) < this.sourceWorldWidth_ / 2) {
          triangle.source = newTriangle;
        }
      }
    }.bind(this));
  }

  transformInvCache = {};
};


/**
 * Adds triangle to the triangulation.
 * @param {module:ol/coordinate~Coordinate} a The target a coordinate.
 * @param {module:ol/coordinate~Coordinate} b The target b coordinate.
 * @param {module:ol/coordinate~Coordinate} c The target c coordinate.
 * @param {module:ol/coordinate~Coordinate} aSrc The source a coordinate.
 * @param {module:ol/coordinate~Coordinate} bSrc The source b coordinate.
 * @param {module:ol/coordinate~Coordinate} cSrc The source c coordinate.
 * @private
 */
Triangulation.prototype.addTriangle_ = function(a, b, c,
  aSrc, bSrc, cSrc) {
  this.triangles_.push({
    source: [aSrc, bSrc, cSrc],
    target: [a, b, c]
  });
};


/**
 * Adds quad (points in clock-wise order) to the triangulation
 * (and reprojects the vertices) if valid.
 * Performs quad subdivision if needed to increase precision.
 *
 * @param {module:ol/coordinate~Coordinate} a The target a coordinate.
 * @param {module:ol/coordinate~Coordinate} b The target b coordinate.
 * @param {module:ol/coordinate~Coordinate} c The target c coordinate.
 * @param {module:ol/coordinate~Coordinate} d The target d coordinate.
 * @param {module:ol/coordinate~Coordinate} aSrc The source a coordinate.
 * @param {module:ol/coordinate~Coordinate} bSrc The source b coordinate.
 * @param {module:ol/coordinate~Coordinate} cSrc The source c coordinate.
 * @param {module:ol/coordinate~Coordinate} dSrc The source d coordinate.
 * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
 * @private
 */
Triangulation.prototype.addQuad_ = function(a, b, c, d,
  aSrc, bSrc, cSrc, dSrc, maxSubdivision) {

  const sourceQuadExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* boundingExtent */ "b"])([aSrc, bSrc, cSrc, dSrc]);
  const sourceCoverageX = this.sourceWorldWidth_ ?
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getWidth */ "E"])(sourceQuadExtent) / this.sourceWorldWidth_ : null;
  const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);

  // when the quad is wrapped in the source projection
  // it covers most of the projection extent, but not fully
  const wrapsX = this.sourceProj_.canWrapX() &&
               sourceCoverageX > 0.5 && sourceCoverageX < 1;

  let needsSubdivision = false;

  if (maxSubdivision > 0) {
    if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
      const targetQuadExtent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* boundingExtent */ "b"])([a, b, c, d]);
      const targetCoverageX = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* getWidth */ "E"])(targetQuadExtent) / this.targetWorldWidth_;
      needsSubdivision |=
          targetCoverageX > MAX_TRIANGLE_WIDTH;
    }
    if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
      needsSubdivision |=
          sourceCoverageX > MAX_TRIANGLE_WIDTH;
    }
  }

  if (!needsSubdivision && this.maxSourceExtent_) {
    if (!Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* intersects */ "F"])(sourceQuadExtent, this.maxSourceExtent_)) {
      // whole quad outside source projection extent -> ignore
      return;
    }
  }

  if (!needsSubdivision) {
    if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ||
        !isFinite(bSrc[0]) || !isFinite(bSrc[1]) ||
        !isFinite(cSrc[0]) || !isFinite(cSrc[1]) ||
        !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {
      if (maxSubdivision > 0) {
        needsSubdivision = true;
      } else {
        return;
      }
    }
  }

  if (maxSubdivision > 0) {
    if (!needsSubdivision) {
      const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
      const centerSrc = this.transformInv_(center);

      let dx;
      if (wrapsX) {
        const centerSrcEstimX =
            (Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* modulo */ "d"])(aSrc[0], sourceWorldWidth) +
             Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* modulo */ "d"])(cSrc[0], sourceWorldWidth)) / 2;
        dx = centerSrcEstimX -
            Object(_math_js__WEBPACK_IMPORTED_MODULE_1__[/* modulo */ "d"])(centerSrc[0], sourceWorldWidth);
      } else {
        dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
      }
      const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
      const centerSrcErrorSquared = dx * dx + dy * dy;
      needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
    }
    if (needsSubdivision) {
      if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
        // split horizontally (top & bottom)
        const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
        const bcSrc = this.transformInv_(bc);
        const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
        const daSrc = this.transformInv_(da);

        this.addQuad_(
          a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
        this.addQuad_(
          da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
      } else {
        // split vertically (left & right)
        const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
        const abSrc = this.transformInv_(ab);
        const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
        const cdSrc = this.transformInv_(cd);

        this.addQuad_(
          a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
        this.addQuad_(
          ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
      }
      return;
    }
  }

  if (wrapsX) {
    if (!this.canWrapXInSource_) {
      return;
    }
    this.wrapsXInSource_ = true;
  }

  this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
  this.addTriangle_(a, b, c, aSrc, bSrc, cSrc);
};


/**
 * Calculates extent of the 'source' coordinates from all the triangles.
 *
 * @return {module:ol/extent~Extent} Calculated extent.
 */
Triangulation.prototype.calculateSourceExtent = function() {
  const extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* createEmpty */ "j"])();

  this.triangles_.forEach(function(triangle, i, arr) {
    const src = triangle.source;
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* extendCoordinate */ "r"])(extent, src[0]);
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* extendCoordinate */ "r"])(extent, src[1]);
    Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* extendCoordinate */ "r"])(extent, src[2]);
  });

  return extent;
};


/**
 * @return {Array.<module:ol/reproj/Triangulation~Triangle>} Array of the calculated triangles.
 */
Triangulation.prototype.getTriangles = function() {
  return this.triangles_;
};
/* harmony default export */ __webpack_exports__["a"] = (Triangulation);


/***/ }),
/* 226 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/style/TextPlacement
 */

/**
 * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that
 * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
 * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
 * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
 * @enum {string}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  POINT: 'point',
  LINE: 'line'
});


/***/ }),
/* 227 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return loadFeaturesXhr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return xhr; });
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29);
/* harmony import */ var _format_FormatType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(111);
/**
 * @module ol/featureloader
 */




/**
 * {@link module:ol/source/Vector} sources use a function of this type to
 * load features.
 *
 * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,
 * a `{number}` representing the resolution (map units per pixel) and an
 * {@link module:ol/proj/Projection} for the projection  as
 * arguments. `this` within the function is bound to the
 * {@link module:ol/source/Vector} it's called from.
 *
 * The function is responsible for loading the features and adding them to the
 * source.
 * @typedef {function(this:module:ol/source/Vector, module:ol/extent~Extent, number,
 *                    module:ol/proj/Projection)} FeatureLoader
 * @api
 */


/**
 * {@link module:ol/source/Vector} sources use a function of this type to
 * get the url to load features from.
 *
 * This function takes an {@link module:ol/extent~Extent} representing the area
 * to be loaded, a `{number}` representing the resolution (map units per pixel)
 * and an {@link module:ol/proj/Projection} for the projection  as
 * arguments and returns a `{string}` representing the URL.
 * @typedef {function(module:ol/extent~Extent, number, module:ol/proj/Projection): string} FeatureUrlFunction
 * @api
 */


/**
 * @param {string|module:ol/featureloader~FeatureUrlFunction} url Feature URL service.
 * @param {module:ol/format/Feature} format Feature format.
 * @param {function(this:module:ol/VectorTile, Array.<module:ol/Feature>, module:ol/proj/Projection, module:ol/extent~Extent)|function(this:module:ol/source/Vector, Array.<module:ol/Feature>)} success
 *     Function called with the loaded features and optionally with the data
 *     projection. Called with the vector tile or source as `this`.
 * @param {function(this:module:ol/VectorTile)|function(this:module:ol/source/Vector)} failure
 *     Function called when loading failed. Called with the vector tile or
 *     source as `this`.
 * @return {module:ol/featureloader~FeatureLoader} The feature loader.
 */
function loadFeaturesXhr(url, format, success, failure) {
  return (
    /**
     * @param {module:ol/extent~Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {module:ol/proj/Projection} projection Projection.
     * @this {module:ol/source/Vector|module:ol/VectorTile}
     */
    function(extent, resolution, projection) {
      const xhr = new XMLHttpRequest();
      xhr.open('GET',
        typeof url === 'function' ? url(extent, resolution, projection) : url,
        true);
      if (format.getType() == _format_FormatType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].ARRAY_BUFFER) {
        xhr.responseType = 'arraybuffer';
      }
      /**
       * @param {Event} event Event.
       * @private
       */
      xhr.onload = function(event) {
        // status will be 0 for file:// urls
        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
          const type = format.getType();
          /** @type {Document|Node|Object|string|undefined} */
          let source;
          if (type == _format_FormatType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].JSON || type == _format_FormatType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].TEXT) {
            source = xhr.responseText;
          } else if (type == _format_FormatType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].XML) {
            source = xhr.responseXML;
            if (!source) {
              source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
            }
          } else if (type == _format_FormatType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].ARRAY_BUFFER) {
            source = /** @type {ArrayBuffer} */ (xhr.response);
          }
          if (source) {
            success.call(this, format.readFeatures(source,
              {featureProjection: projection}),
            format.readProjection(source), format.getLastExtent());
          } else {
            failure.call(this);
          }
        } else {
          failure.call(this);
        }
      }.bind(this);
      /**
       * @private
       */
      xhr.onerror = function() {
        failure.call(this);
      }.bind(this);
      xhr.send();
    }
  );
}


/**
 * Create an XHR feature loader for a `url` and `format`. The feature loader
 * loads features (with XHR), parses the features, and adds them to the
 * vector source.
 * @param {string|module:ol/featureloader~FeatureUrlFunction} url Feature URL service.
 * @param {module:ol/format/Feature} format Feature format.
 * @return {module:ol/featureloader~FeatureLoader} The feature loader.
 * @api
 */
function xhr(url, format) {
  return loadFeaturesXhr(url, format,
    /**
     * @param {Array.<module:ol/Feature>} features The loaded features.
     * @param {module:ol/proj/Projection} dataProjection Data
     * projection.
     * @this {module:ol/source/Vector}
     */
    function(features, dataProjection) {
      this.addFeatures(features);
    }, /* FIXME handle error */ _functions_js__WEBPACK_IMPORTED_MODULE_0__[/* UNDEFINED */ "c"]);
}


/***/ }),
/* 228 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @module ol/layer/VectorRenderType
 */

/**
 * @enum {string}
 * Render mode for vector layers:
 *  * `'image'`: Vector layers are rendered as images. Great performance, but
 *    point symbols and texts are always rotated with the view and pixels are
 *    scaled during zoom animations.
 *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering
 *    even during animations, but slower performance.
 * @api
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  IMAGE: 'image',
  VECTOR: 'vector'
});


/***/ }),
/* 229 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return linearRingss; });
/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/**
 * @module ol/geom/flat/center
 */



/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array.<Array.<number>>} endss Endss.
 * @param {number} stride Stride.
 * @return {Array.<number>} Flat centers.
 */
function linearRingss(flatCoordinates, offset, endss, stride) {
  const flatCenters = [];
  let extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* createEmpty */ "j"])();
  for (let i = 0, ii = endss.length; i < ii; ++i) {
    const ends = endss[i];
    extent = Object(_extent_js__WEBPACK_IMPORTED_MODULE_0__[/* createOrUpdateFromFlatCoordinates */ "o"])(flatCoordinates, offset, ends[0], stride);
    flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);
    offset = ends[ends.length - 1];
  }
  return flatCenters;
}


/***/ }),
/* 230 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return lineStringLength; });
/* unused harmony export linearRingLength */
/**
 * @module ol/geom/flat/length
 */


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {number} Length.
 */
function lineStringLength(flatCoordinates, offset, end, stride) {
  let x1 = flatCoordinates[offset];
  let y1 = flatCoordinates[offset + 1];
  let length = 0;
  for (let i = offset + stride; i < end; i += stride) {
    const x2 = flatCoordinates[i];
    const y2 = flatCoordinates[i + 1];
    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    x1 = x2;
    y1 = y2;
  }
  return length;
}


/**
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {number} Perimeter.
 */
function linearRingLength(flatCoordinates, offset, end, stride) {
  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);
  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];
  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];
  perimeter += Math.sqrt(dx * dx + dy * dy);
  return perimeter;
}


/***/ }),
/* 231 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return forEach; });
/**
 * @module ol/geom/flat/segments
 */


/**
 * This function calls `callback` for each segment of the flat coordinates
 * array. If the callback returns a truthy value the function returns that
 * value immediately. Otherwise the function returns `false`.
 * @param {Array.<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {function(this: S, module:ol/coordinate~Coordinate, module:ol/coordinate~Coordinate): T} callback Function
 *     called for each segment.
 * @param {S=} opt_this The object to be used as the value of 'this'
 *     within callback.
 * @return {T|boolean} Value.
 * @template T,S
 */
function forEach(flatCoordinates, offset, end, stride, callback, opt_this) {
  const point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];
  const point2 = [];
  let ret;
  for (; (offset + stride) < end; offset += stride) {
    point2[0] = flatCoordinates[offset + stride];
    point2[1] = flatCoordinates[offset + stride + 1];
    ret = callback.call(opt_this, point1, point2);
    if (ret) {
      return ret;
    }
    point1[0] = point2[0];
    point1[1] = point2[1];
  }
  return false;
}


/***/ }),
/* 232 */
/***/ (function(module) {

module.exports = {"a":"2.4.4"};

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = Pbf;

var ieee754 = __webpack_require__(382);

function Pbf(buf) {
    this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
    this.pos = 0;
    this.type = 0;
    this.length = this.buf.length;
}

Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
    SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

Pbf.prototype = {

    destroy: function() {
        this.buf = null;
    },

    // === READING =================================================================

    readFields: function(readField, result, end) {
        end = end || this.length;

        while (this.pos < end) {
            var val = this.readVarint(),
                tag = val >> 3,
                startPos = this.pos;

            this.type = val & 0x7;
            readField(tag, result, this);

            if (this.pos === startPos) this.skip(val);
        }
        return result;
    },

    readMessage: function(readField, result) {
        return this.readFields(readField, result, this.readVarint() + this.pos);
    },

    readFixed32: function() {
        var val = readUInt32(this.buf, this.pos);
        this.pos += 4;
        return val;
    },

    readSFixed32: function() {
        var val = readInt32(this.buf, this.pos);
        this.pos += 4;
        return val;
    },

    // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

    readFixed64: function() {
        var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
        this.pos += 8;
        return val;
    },

    readSFixed64: function() {
        var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
        this.pos += 8;
        return val;
    },

    readFloat: function() {
        var val = ieee754.read(this.buf, this.pos, true, 23, 4);
        this.pos += 4;
        return val;
    },

    readDouble: function() {
        var val = ieee754.read(this.buf, this.pos, true, 52, 8);
        this.pos += 8;
        return val;
    },

    readVarint: function(isSigned) {
        var buf = this.buf,
            val, b;

        b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
        b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
        b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
        b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
        b = buf[this.pos];   val |= (b & 0x0f) << 28;

        return readVarintRemainder(val, isSigned, this);
    },

    readVarint64: function() { // for compatibility with v2.0.1
        return this.readVarint(true);
    },

    readSVarint: function() {
        var num = this.readVarint();
        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
    },

    readBoolean: function() {
        return Boolean(this.readVarint());
    },

    readString: function() {
        var end = this.readVarint() + this.pos,
            str = readUtf8(this.buf, this.pos, end);
        this.pos = end;
        return str;
    },

    readBytes: function() {
        var end = this.readVarint() + this.pos,
            buffer = this.buf.subarray(this.pos, end);
        this.pos = end;
        return buffer;
    },

    // verbose for performance reasons; doesn't affect gzipped size

    readPackedVarint: function(arr, isSigned) {
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readVarint(isSigned));
        return arr;
    },
    readPackedSVarint: function(arr) {
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readSVarint());
        return arr;
    },
    readPackedBoolean: function(arr) {
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readBoolean());
        return arr;
    },
    readPackedFloat: function(arr) {
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readFloat());
        return arr;
    },
    readPackedDouble: function(arr) {
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readDouble());
        return arr;
    },
    readPackedFixed32: function(arr) {
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readFixed32());
        return arr;
    },
    readPackedSFixed32: function(arr) {
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readSFixed32());
        return arr;
    },
    readPackedFixed64: function(arr) {
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readFixed64());
        return arr;
    },
    readPackedSFixed64: function(arr) {
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readSFixed64());
        return arr;
    },

    skip: function(val) {
        var type = val & 0x7;
        if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
        else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
        else if (type === Pbf.Fixed32) this.pos += 4;
        else if (type === Pbf.Fixed64) this.pos += 8;
        else throw new Error('Unimplemented type: ' + type);
    },

    // === WRITING =================================================================

    writeTag: function(tag, type) {
        this.writeVarint((tag << 3) | type);
    },

    realloc: function(min) {
        var length = this.length || 16;

        while (length < this.pos + min) length *= 2;

        if (length !== this.length) {
            var buf = new Uint8Array(length);
            buf.set(this.buf);
            this.buf = buf;
            this.length = length;
        }
    },

    finish: function() {
        this.length = this.pos;
        this.pos = 0;
        return this.buf.subarray(0, this.length);
    },

    writeFixed32: function(val) {
        this.realloc(4);
        writeInt32(this.buf, val, this.pos);
        this.pos += 4;
    },

    writeSFixed32: function(val) {
        this.realloc(4);
        writeInt32(this.buf, val, this.pos);
        this.pos += 4;
    },

    writeFixed64: function(val) {
        this.realloc(8);
        writeInt32(this.buf, val & -1, this.pos);
        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
        this.pos += 8;
    },

    writeSFixed64: function(val) {
        this.realloc(8);
        writeInt32(this.buf, val & -1, this.pos);
        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
        this.pos += 8;
    },

    writeVarint: function(val) {
        val = +val || 0;

        if (val > 0xfffffff || val < 0) {
            writeBigVarint(val, this);
            return;
        }

        this.realloc(4);

        this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
        this.buf[this.pos++] =   (val >>> 7) & 0x7f;
    },

    writeSVarint: function(val) {
        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
    },

    writeBoolean: function(val) {
        this.writeVarint(Boolean(val));
    },

    writeString: function(str) {
        str = String(str);
        this.realloc(str.length * 4);

        this.pos++; // reserve 1 byte for short string length

        var startPos = this.pos;
        // write the string directly to the buffer and see how much was written
        this.pos = writeUtf8(this.buf, str, this.pos);
        var len = this.pos - startPos;

        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

        // finally, write the message length in the reserved place and restore the position
        this.pos = startPos - 1;
        this.writeVarint(len);
        this.pos += len;
    },

    writeFloat: function(val) {
        this.realloc(4);
        ieee754.write(this.buf, val, this.pos, true, 23, 4);
        this.pos += 4;
    },

    writeDouble: function(val) {
        this.realloc(8);
        ieee754.write(this.buf, val, this.pos, true, 52, 8);
        this.pos += 8;
    },

    writeBytes: function(buffer) {
        var len = buffer.length;
        this.writeVarint(len);
        this.realloc(len);
        for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
    },

    writeRawMessage: function(fn, obj) {
        this.pos++; // reserve 1 byte for short message length

        // write the message directly to the buffer and see how much was written
        var startPos = this.pos;
        fn(obj, this);
        var len = this.pos - startPos;

        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

        // finally, write the message length in the reserved place and restore the position
        this.pos = startPos - 1;
        this.writeVarint(len);
        this.pos += len;
    },

    writeMessage: function(tag, fn, obj) {
        this.writeTag(tag, Pbf.Bytes);
        this.writeRawMessage(fn, obj);
    },

    writePackedVarint:   function(tag, arr) { this.writeMessage(tag, writePackedVarint, arr);   },
    writePackedSVarint:  function(tag, arr) { this.writeMessage(tag, writePackedSVarint, arr);  },
    writePackedBoolean:  function(tag, arr) { this.writeMessage(tag, writePackedBoolean, arr);  },
    writePackedFloat:    function(tag, arr) { this.writeMessage(tag, writePackedFloat, arr);    },
    writePackedDouble:   function(tag, arr) { this.writeMessage(tag, writePackedDouble, arr);   },
    writePackedFixed32:  function(tag, arr) { this.writeMessage(tag, writePackedFixed32, arr);  },
    writePackedSFixed32: function(tag, arr) { this.writeMessage(tag, writePackedSFixed32, arr); },
    writePackedFixed64:  function(tag, arr) { this.writeMessage(tag, writePackedFixed64, arr);  },
    writePackedSFixed64: function(tag, arr) { this.writeMessage(tag, writePackedSFixed64, arr); },

    writeBytesField: function(tag, buffer) {
        this.writeTag(tag, Pbf.Bytes);
        this.writeBytes(buffer);
    },
    writeFixed32Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed32);
        this.writeFixed32(val);
    },
    writeSFixed32Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed32);
        this.writeSFixed32(val);
    },
    writeFixed64Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed64);
        this.writeFixed64(val);
    },
    writeSFixed64Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed64);
        this.writeSFixed64(val);
    },
    writeVarintField: function(tag, val) {
        this.writeTag(tag, Pbf.Varint);
        this.writeVarint(val);
    },
    writeSVarintField: function(tag, val) {
        this.writeTag(tag, Pbf.Varint);
        this.writeSVarint(val);
    },
    writeStringField: function(tag, str) {
        this.writeTag(tag, Pbf.Bytes);
        this.writeString(str);
    },
    writeFloatField: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed32);
        this.writeFloat(val);
    },
    writeDoubleField: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed64);
        this.writeDouble(val);
    },
    writeBooleanField: function(tag, val) {
        this.writeVarintField(tag, Boolean(val));
    }
};

function readVarintRemainder(l, s, p) {
    var buf = p.buf,
        h, b;

    b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

    throw new Error('Expected varint not more than 10 bytes');
}

function readPackedEnd(pbf) {
    return pbf.type === Pbf.Bytes ?
        pbf.readVarint() + pbf.pos : pbf.pos + 1;
}

function toNum(low, high, isSigned) {
    if (isSigned) {
        return high * 0x100000000 + (low >>> 0);
    }

    return ((high >>> 0) * 0x100000000) + (low >>> 0);
}

function writeBigVarint(val, pbf) {
    var low, high;

    if (val >= 0) {
        low  = (val % 0x100000000) | 0;
        high = (val / 0x100000000) | 0;
    } else {
        low  = ~(-val % 0x100000000);
        high = ~(-val / 0x100000000);

        if (low ^ 0xffffffff) {
            low = (low + 1) | 0;
        } else {
            low = 0;
            high = (high + 1) | 0;
        }
    }

    if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
        throw new Error('Given varint doesn\'t fit into 10 bytes');
    }

    pbf.realloc(10);

    writeBigVarintLow(low, high, pbf);
    writeBigVarintHigh(high, pbf);
}

function writeBigVarintLow(low, high, pbf) {
    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
    pbf.buf[pbf.pos]   = low & 0x7f;
}

function writeBigVarintHigh(high, pbf) {
    var lsb = (high & 0x07) << 4;

    pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f;
}

function makeRoomForExtraLength(startPos, len, pbf) {
    var extraLen =
        len <= 0x3fff ? 1 :
        len <= 0x1fffff ? 2 :
        len <= 0xfffffff ? 3 : Math.ceil(Math.log(len) / (Math.LN2 * 7));

    // if 1 byte isn't enough for encoding message length, shift the data to the right
    pbf.realloc(extraLen);
    for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
}

function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

// Buffer code below from https://github.com/feross/buffer, MIT-licensed

function readUInt32(buf, pos) {
    return ((buf[pos]) |
        (buf[pos + 1] << 8) |
        (buf[pos + 2] << 16)) +
        (buf[pos + 3] * 0x1000000);
}

function writeInt32(buf, val, pos) {
    buf[pos] = val;
    buf[pos + 1] = (val >>> 8);
    buf[pos + 2] = (val >>> 16);
    buf[pos + 3] = (val >>> 24);
}

function readInt32(buf, pos) {
    return ((buf[pos]) |
        (buf[pos + 1] << 8) |
        (buf[pos + 2] << 16)) +
        (buf[pos + 3] << 24);
}

function readUtf8(buf, pos, end) {
    var str = '';
    var i = pos;

    while (i < end) {
        var b0 = buf[i];
        var c = null; // codepoint
        var bytesPerSequence =
            b0 > 0xEF ? 4 :
            b0 > 0xDF ? 3 :
            b0 > 0xBF ? 2 : 1;

        if (i + bytesPerSequence > end) break;

        var b1, b2, b3;

        if (bytesPerSequence === 1) {
            if (b0 < 0x80) {
                c = b0;
            }
        } else if (bytesPerSequence === 2) {
            b1 = buf[i + 1];
            if ((b1 & 0xC0) === 0x80) {
                c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                if (c <= 0x7F) {
                    c = null;
                }
            }
        } else if (bytesPerSequence === 3) {
            b1 = buf[i + 1];
            b2 = buf[i + 2];
            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                    c = null;
                }
            }
        } else if (bytesPerSequence === 4) {
            b1 = buf[i + 1];
            b2 = buf[i + 2];
            b3 = buf[i + 3];
            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                if (c <= 0xFFFF || c >= 0x110000) {
                    c = null;
                }
            }
        }

        if (c === null) {
            c = 0xFFFD;
            bytesPerSequence = 1;

        } else if (c > 0xFFFF) {
            c -= 0x10000;
            str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
            c = 0xDC00 | c & 0x3FF;
        }

        str += String.fromCharCode(c);
        i += bytesPerSequence;
    }

    return str;
}

function writeUtf8(buf, str, pos) {
    for (var i = 0, c, lead; i < str.length; i++) {
        c = str.charCodeAt(i); // code point

        if (c > 0xD7FF && c < 0xE000) {
            if (lead) {
                if (c < 0xDC00) {
                    buf[pos++] = 0xEF;
                    buf[pos++] = 0xBF;
                    buf[pos++] = 0xBD;
                    lead = c;
                    continue;
                } else {
                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                    lead = null;
                }
            } else {
                if (c > 0xDBFF || (i + 1 === str.length)) {
                    buf[pos++] = 0xEF;
                    buf[pos++] = 0xBF;
                    buf[pos++] = 0xBD;
                } else {
                    lead = c;
                }
                continue;
            }
        } else if (lead) {
            buf[pos++] = 0xEF;
            buf[pos++] = 0xBF;
            buf[pos++] = 0xBD;
            lead = null;
        }

        if (c < 0x80) {
            buf[pos++] = c;
        } else {
            if (c < 0x800) {
                buf[pos++] = c >> 0x6 | 0xC0;
            } else {
                if (c < 0x10000) {
                    buf[pos++] = c >> 0xC | 0xE0;
                } else {
                    buf[pos++] = c >> 0x12 | 0xF0;
                    buf[pos++] = c >> 0xC & 0x3F | 0x80;
                }
                buf[pos++] = c >> 0x6 & 0x3F | 0x80;
            }
            buf[pos++] = c & 0x3F | 0x80;
        }
    }
    return pos;
}


/***/ }),
/* 234 */,
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var Processor = __webpack_require__(403);

exports.Processor = Processor;


/***/ }),
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */
/***/ (function(module, exports) {

var hasImageData = true;
try {
  new ImageData(10, 10);
} catch (_) {
  hasImageData = false;
}

var context = document.createElement('canvas').getContext('2d');

function newImageData(data, width, height) {
  if (hasImageData) {
    return new ImageData(data, width, height);
  } else {
    var imageData = context.createImageData(width, height);
    imageData.data.set(data);
    return imageData;
  }
}

exports.newImageData = newImageData;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

var newImageData = __webpack_require__(402).newImageData;

/**
 * Create a function for running operations.  This function is serialized for
 * use in a worker.
 * @param {function(Array, Object):*} operation The operation.
 * @return {function(Object):ArrayBuffer} A function that takes an object with
 * buffers, meta, imageOps, width, and height properties and returns an array
 * buffer.
 */
function createMinion(operation) {
  var workerHasImageData = true;
  try {
    new ImageData(10, 10);
  } catch (_) {
    workerHasImageData = false;
  }

  function newWorkerImageData(data, width, height) {
    if (workerHasImageData) {
      return new ImageData(data, width, height);
    } else {
      return {data: data, width: width, height: height};
    }
  }

  return function(data) {
    // bracket notation for minification support
    var buffers = data['buffers'];
    var meta = data['meta'];
    var imageOps = data['imageOps'];
    var width = data['width'];
    var height = data['height'];

    var numBuffers = buffers.length;
    var numBytes = buffers[0].byteLength;
    var output, b;

    if (imageOps) {
      var images = new Array(numBuffers);
      for (b = 0; b < numBuffers; ++b) {
        images[b] = newWorkerImageData(
            new Uint8ClampedArray(buffers[b]), width, height);
      }
      output = operation(images, meta).data;
    } else {
      output = new Uint8ClampedArray(numBytes);
      var arrays = new Array(numBuffers);
      var pixels = new Array(numBuffers);
      for (b = 0; b < numBuffers; ++b) {
        arrays[b] = new Uint8ClampedArray(buffers[b]);
        pixels[b] = [0, 0, 0, 0];
      }
      for (var i = 0; i < numBytes; i += 4) {
        for (var j = 0; j < numBuffers; ++j) {
          var array = arrays[j];
          pixels[j][0] = array[i];
          pixels[j][1] = array[i + 1];
          pixels[j][2] = array[i + 2];
          pixels[j][3] = array[i + 3];
        }
        var pixel = operation(pixels, meta);
        output[i] = pixel[0];
        output[i + 1] = pixel[1];
        output[i + 2] = pixel[2];
        output[i + 3] = pixel[3];
      }
    }
    return output.buffer;
  };
}

/**
 * Create a worker for running operations.
 * @param {Object} config Configuration.
 * @param {function(MessageEvent)} onMessage Called with a message event.
 * @return {Worker} The worker.
 */
function createWorker(config, onMessage) {
  var lib = Object.keys(config.lib || {}).map(function(name) {
    return 'var ' + name + ' = ' + config.lib[name].toString() + ';';
  });

  var lines = lib.concat([
    'var __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');',
    'self.addEventListener("message", function(event) {',
    '  var buffer = __minion__(event.data);',
    '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',
    '});'
  ]);

  var blob = new Blob(lines, {type: 'text/javascript'});
  var source = URL.createObjectURL(blob);
  var worker = new Worker(source);
  worker.addEventListener('message', onMessage);
  return worker;
}

/**
 * Create a faux worker for running operations.
 * @param {Object} config Configuration.
 * @param {function(MessageEvent)} onMessage Called with a message event.
 * @return {Object} The faux worker.
 */
function createFauxWorker(config, onMessage) {
  var minion = createMinion(config.operation);
  return {
    postMessage: function(data) {
      setTimeout(function() {
        onMessage({'data': {'buffer': minion(data), 'meta': data['meta']}});
      }, 0);
    }
  };
}

/**
 * A processor runs pixel or image operations in workers.
 * @param {Object} config Configuration.
 */
function Processor(config) {
  this._imageOps = !!config.imageOps;
  var threads;
  if (config.threads === 0) {
    threads = 0;
  } else if (this._imageOps) {
    threads = 1;
  } else {
    threads = config.threads || 1;
  }
  var workers = [];
  if (threads) {
    for (var i = 0; i < threads; ++i) {
      workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));
    }
  } else {
    workers[0] = createFauxWorker(config, this._onWorkerMessage.bind(this, 0));
  }
  this._workers = workers;
  this._queue = [];
  this._maxQueueLength = config.queue || Infinity;
  this._running = 0;
  this._dataLookup = {};
  this._job = null;
}

/**
 * Run operation on input data.
 * @param {Array.<Array|ImageData>} inputs Array of pixels or image data
 *     (depending on the operation type).
 * @param {Object} meta A user data object.  This is passed to all operations
 *     and must be serializable.
 * @param {function(Error, ImageData, Object)} callback Called when work
 *     completes.  The first argument is any error.  The second is the ImageData
 *     generated by operations.  The third is the user data object.
 */
Processor.prototype.process = function(inputs, meta, callback) {
  this._enqueue({
    inputs: inputs,
    meta: meta,
    callback: callback
  });
  this._dispatch();
};

/**
 * Stop responding to any completed work and destroy the processor.
 */
Processor.prototype.destroy = function() {
  for (var key in this) {
    this[key] = null;
  }
  this._destroyed = true;
};

/**
 * Add a job to the queue.
 * @param {Object} job The job.
 */
Processor.prototype._enqueue = function(job) {
  this._queue.push(job);
  while (this._queue.length > this._maxQueueLength) {
    this._queue.shift().callback(null, null);
  }
};

/**
 * Dispatch a job.
 */
Processor.prototype._dispatch = function() {
  if (this._running === 0 && this._queue.length > 0) {
    var job = this._job = this._queue.shift();
    var width = job.inputs[0].width;
    var height = job.inputs[0].height;
    var buffers = job.inputs.map(function(input) {
      return input.data.buffer;
    });
    var threads = this._workers.length;
    this._running = threads;
    if (threads === 1) {
      this._workers[0].postMessage({
        'buffers': buffers,
        'meta': job.meta,
        'imageOps': this._imageOps,
        'width': width,
        'height': height
      }, buffers);
    } else {
      var length = job.inputs[0].data.length;
      var segmentLength = 4 * Math.ceil(length / 4 / threads);
      for (var i = 0; i < threads; ++i) {
        var offset = i * segmentLength;
        var slices = [];
        for (var j = 0, jj = buffers.length; j < jj; ++j) {
          slices.push(buffers[i].slice(offset, offset + segmentLength));
        }
        this._workers[i].postMessage({
          'buffers': slices,
          'meta': job.meta,
          'imageOps': this._imageOps,
          'width': width,
          'height': height
        }, slices);
      }
    }
  }
};

/**
 * Handle messages from the worker.
 * @param {number} index The worker index.
 * @param {MessageEvent} event The message event.
 */
Processor.prototype._onWorkerMessage = function(index, event) {
  if (this._destroyed) {
    return;
  }
  this._dataLookup[index] = event.data;
  --this._running;
  if (this._running === 0) {
    this._resolveJob();
  }
};

/**
 * Resolve a job.  If there are no more worker threads, the processor callback
 * will be called.
 */
Processor.prototype._resolveJob = function() {
  var job = this._job;
  var threads = this._workers.length;
  var data, meta;
  if (threads === 1) {
    data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);
    meta = this._dataLookup[0]['meta'];
  } else {
    var length = job.inputs[0].data.length;
    data = new Uint8ClampedArray(length);
    meta = new Array(length);
    var segmentLength = 4 * Math.ceil(length / 4 / threads);
    for (var i = 0; i < threads; ++i) {
      var buffer = this._dataLookup[i]['buffer'];
      var offset = i * segmentLength;
      data.set(new Uint8ClampedArray(buffer), offset);
      meta[i] = this._dataLookup[i]['meta'];
    }
  }
  this._job = null;
  this._dataLookup = {};
  job.callback(null,
      newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);
  this._dispatch();
};

module.exports = Processor;


/***/ }),
/* 404 */,
/* 405 */,
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

function quickselect(arr, k, left, right, compare) {
    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);
}

function quickselectStep(arr, k, left, right, compare) {

    while (right > left) {
        if (right - left > 600) {
            var n = right - left + 1;
            var m = k - left + 1;
            var z = Math.log(n);
            var s = 0.5 * Math.exp(2 * z / 3);
            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            quickselectStep(arr, k, newLeft, newRight, compare);
        }

        var t = arr[k];
        var i = left;
        var j = right;

        swap(arr, left, k);
        if (compare(arr[right], t) > 0) swap(arr, left, right);

        while (i < j) {
            swap(arr, i, j);
            i++;
            j--;
            while (compare(arr[i], t) < 0) i++;
            while (compare(arr[j], t) > 0) j--;
        }

        if (compare(arr[left], t) === 0) swap(arr, left, j);
        else {
            j++;
            swap(arr, j, right);
        }

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
}

function swap(arr, i, j) {
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}

function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}

return quickselect;

})));


/***/ })
/******/ ]);
//# sourceMappingURL=common.js.map